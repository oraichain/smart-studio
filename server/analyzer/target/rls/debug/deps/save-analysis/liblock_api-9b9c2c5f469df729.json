{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1","program":"/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","lock_api","--edition=2018","/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=9b9c2c5f469df729","-C","extra-filename=-9b9c2c5f469df729","--out-dir","/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","-L","dependency=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","--extern","scopeguard=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libscopeguard-4987d26919bc12ee.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/liblock_api-9b9c2c5f469df729.rmeta"},"prelude":{"crate_id":{"name":"lock_api","disambiguator":[7267522734155392517,3849345717129937994]},"crate_root":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src","external_crates":[{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[9392975149979234998,17049149762166397483]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[16512841426258775062,11665789721448774207]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[10630307797325716480,16523273723520132349]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","num":4,"id":{"name":"scopeguard","disambiguator":[11446728332522292093,5394066327141724718]}}],"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":333,"byte_end":3953,"line_start":8,"line_end":107,"column_start":1,"column_end":26}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3871,"byte_end":3872,"line_start":101,"line_end":101,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3912,"byte_end":3913,"line_start":104,"line_end":104,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3951,"byte_end":3952,"line_start":107,"line_end":107,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":333,"byte_end":3953,"line_start":8,"line_end":107,"column_start":1,"column_end":26},"name":"","qualname":"::","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":856}],"decl_id":null,"docs":" This library provides type-safe and fully-featured `Mutex` and `RwLock`\n types which wrap a simple raw mutex or rwlock type. This has several\n benefits: not only does it eliminate a large portion of the work in\n implementing custom lock types, it also allows users to write code which is\n generic with regards to different lock implementations.","sig":null,"attributes":[{"value":"/ This library provides type-safe and fully-featured `Mutex` and `RwLock`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":333,"byte_end":408,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ types which wrap a simple raw mutex or rwlock type. This has several","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":409,"byte_end":481,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/ benefits: not only does it eliminate a large portion of the work in","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":482,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/ implementing custom lock types, it also allows users to write code which is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":554,"byte_end":633,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ generic with regards to different lock implementations.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":634,"byte_end":693,"line_start":12,"line_end":12,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":694,"byte_end":697,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Basic usage of this crate is very straightforward:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":698,"byte_end":752,"line_start":14,"line_end":14,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":753,"byte_end":756,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ 1. Create a raw lock type. This should only contain the lock state, not any","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":757,"byte_end":836,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/    data protected by the lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":837,"byte_end":871,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/ 2. Implement the `RawMutex` trait for your custom lock type.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":872,"byte_end":936,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"/ 3. Export your mutex as a type alias for `lock_api::Mutex`, and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":937,"byte_end":1004,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"/    your mutex guard as a type alias for `lock_api::MutexGuard`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1005,"byte_end":1072,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/    See the [example](#example) below for details.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1073,"byte_end":1126,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1127,"byte_end":1130,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This process is similar for RwLocks, except that two guards need to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1131,"byte_end":1205,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ exported instead of one. (Or 3 guards if your type supports upgradable read","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1206,"byte_end":1285,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ locks, see [extension traits](#extension-traits) below for details)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1286,"byte_end":1357,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1358,"byte_end":1361,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1362,"byte_end":1375,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1376,"byte_end":1379,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1380,"byte_end":1387,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use lock_api::{RawMutex, Mutex, GuardSend};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1388,"byte_end":1435,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"/ use std::sync::atomic::{AtomicBool, Ordering};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1436,"byte_end":1486,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1487,"byte_end":1490,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // 1. Define our raw lock type","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1491,"byte_end":1525,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/ pub struct RawSpinlock(AtomicBool);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1526,"byte_end":1565,"line_start":34,"line_end":34,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1566,"byte_end":1569,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // 2. Implement RawMutex for this type","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1570,"byte_end":1612,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"/ unsafe impl RawMutex for RawSpinlock {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1613,"byte_end":1655,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/     const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1656,"byte_end":1726,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1727,"byte_end":1730,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/     // A spinlock guard can be sent to another thread and unlocked there","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1731,"byte_end":1807,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/     type GuardMarker = GuardSend;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1808,"byte_end":1845,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1846,"byte_end":1849,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/     fn lock(&self) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1850,"byte_end":1874,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/         // Note: This isn't the best way of implementing a spinlock, but it","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1875,"byte_end":1954,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"/         // suffices for the sake of this example.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":1955,"byte_end":2008,"line_start":45,"line_end":45,"column_start":1,"column_end":54}},{"value":"/         while !self.try_lock() {}","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2009,"byte_end":2046,"line_start":46,"line_end":46,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2047,"byte_end":2056,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2057,"byte_end":2060,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     fn try_lock(&self) -> bool {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2061,"byte_end":2097,"line_start":49,"line_end":49,"column_start":1,"column_end":37}},{"value":"/         self.0.swap(true, Ordering::Acquire)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2098,"byte_end":2146,"line_start":50,"line_end":50,"column_start":1,"column_end":49}},{"value":"/     }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2147,"byte_end":2156,"line_start":51,"line_end":51,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2157,"byte_end":2160,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/     fn unlock(&self) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2161,"byte_end":2187,"line_start":53,"line_end":53,"column_start":1,"column_end":27}},{"value":"/         self.0.store(false, Ordering::Release);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2188,"byte_end":2239,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/     }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2240,"byte_end":2249,"line_start":55,"line_end":55,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2250,"byte_end":2255,"line_start":56,"line_end":56,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2256,"byte_end":2259,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ // 3. Export the wrappers. This are the types that your users will actually use.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2260,"byte_end":2344,"line_start":58,"line_end":58,"column_start":1,"column_end":85}},{"value":"/ pub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2345,"byte_end":2404,"line_start":59,"line_end":59,"column_start":1,"column_end":60}},{"value":"/ pub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2405,"byte_end":2482,"line_start":60,"line_end":60,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2483,"byte_end":2490,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2491,"byte_end":2494,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ # Extension traits","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2495,"byte_end":2517,"line_start":63,"line_end":63,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2518,"byte_end":2521,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ In addition to basic locking & unlocking functionality, you have the option","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2522,"byte_end":2601,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/ of exposing additional functionality in your lock types by implementing","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2602,"byte_end":2677,"line_start":66,"line_end":66,"column_start":1,"column_end":76}},{"value":"/ additional traits for it. Examples of extension features include:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2678,"byte_end":2747,"line_start":67,"line_end":67,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2748,"byte_end":2751,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ - Fair unlocking (`RawMutexFair`, `RawRwLockFair`)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2752,"byte_end":2806,"line_start":69,"line_end":69,"column_start":1,"column_end":55}},{"value":"/ - Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2807,"byte_end":2862,"line_start":70,"line_end":70,"column_start":1,"column_end":56}},{"value":"/ - Downgradable write locks (`RawRwLockDowngradable`)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2863,"byte_end":2919,"line_start":71,"line_end":71,"column_start":1,"column_end":57}},{"value":"/ - Recursive read locks (`RawRwLockRecursive`)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2920,"byte_end":2969,"line_start":72,"line_end":72,"column_start":1,"column_end":50}},{"value":"/ - Upgradable read locks (`RawRwLockUpgrade`)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":2970,"byte_end":3018,"line_start":73,"line_end":73,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3019,"byte_end":3022,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ The `Mutex` and `RwLock` wrappers will automatically expose this additional","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3023,"byte_end":3102,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"/ functionality if the raw lock type implements these extension traits.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3103,"byte_end":3176,"line_start":76,"line_end":76,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3177,"byte_end":3180,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ # Cargo features","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3181,"byte_end":3201,"line_start":78,"line_end":78,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3202,"byte_end":3205,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ This crate supports two cargo features:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3206,"byte_end":3249,"line_start":80,"line_end":80,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3250,"byte_end":3253,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ - `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3254,"byte_end":3336,"line_start":82,"line_end":82,"column_start":1,"column_end":83}},{"value":"/ - `nightly`: Enables nightly-only features. At the moment the only such","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3337,"byte_end":3412,"line_start":83,"line_end":83,"column_start":1,"column_end":76}},{"value":"/   feature is `const fn` constructors for lock types.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3413,"byte_end":3469,"line_start":84,"line_end":84,"column_start":1,"column_end":57}},{"value":"no_std","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3471,"byte_end":3481,"line_start":86,"line_end":86,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3482,"byte_end":3504,"line_start":87,"line_end":87,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3505,"byte_end":3531,"line_start":88,"line_end":88,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":5},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3710,"byte_end":3719,"line_start":95,"line_end":95,"column_start":12,"column_end":21},"name":"GuardSend","qualname":"::GuardSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is `Send`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3625,"byte_end":3698,"line_start":94,"line_end":94,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3815,"byte_end":3826,"line_start":98,"line_end":98,"column_start":12,"column_end":23},"name":"GuardNoSend","qualname":"::GuardNoSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is not `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is not `Send`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3726,"byte_end":3803,"line_start":97,"line_end":97,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":19},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":4899,"byte_end":4907,"line_start":29,"line_end":29,"column_start":18,"column_end":26},"name":"RawMutex","qualname":"::mutex::RawMutex","value":"RawMutex","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24}],"decl_id":null,"docs":" Basic operations for a mutex.","sig":null,"attributes":[{"value":"/ Basic operations for a mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":4565,"byte_end":4598,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":4599,"byte_end":4602,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `Mutex` to form a safe and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":4603,"byte_end":4678,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ fully-functioning mutex type.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":4679,"byte_end":4712,"line_start":23,"line_end":23,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":4713,"byte_end":4716,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":4717,"byte_end":4729,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":4730,"byte_end":4733,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the mutex is actually","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":4734,"byte_end":4806,"line_start":27,"line_end":27,"column_start":1,"column_end":73}},{"value":"/ exclusive: a lock can't be acquired while the mutex is already locked.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":4807,"byte_end":4881,"line_start":28,"line_end":28,"column_start":1,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":20},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":4965,"byte_end":4969,"line_start":31,"line_end":31,"column_start":11,"column_end":15},"name":"INIT","qualname":"::mutex::RawMutex::INIT","value":"Self","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":4914,"byte_end":4954,"line_start":30,"line_end":30,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":21},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5134,"byte_end":5145,"line_start":35,"line_end":35,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::mutex::RawMutex::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":4982,"byte_end":5057,"line_start":33,"line_end":33,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5062,"byte_end":5124,"line_start":34,"line_end":34,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5239,"byte_end":5243,"line_start":38,"line_end":38,"column_start":8,"column_end":12},"name":"lock","qualname":"::mutex::RawMutex::lock","value":"pub fn lock(&Self)","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires this mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5152,"byte_end":5231,"line_start":37,"line_end":37,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5317,"byte_end":5325,"line_start":41,"line_end":41,"column_start":8,"column_end":16},"name":"try_lock","qualname":"::mutex::RawMutex::try_lock","value":"pub fn try_lock(&Self) -> bool","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this mutex without blocking.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5257,"byte_end":5309,"line_start":40,"line_end":40,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5378,"byte_end":5384,"line_start":44,"line_end":44,"column_start":8,"column_end":14},"name":"unlock","qualname":"::mutex::RawMutex::unlock","value":"pub fn unlock(&Self)","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Unlocks this mutex.\n","sig":null,"attributes":[{"value":"/ Unlocks this mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5347,"byte_end":5370,"line_start":43,"line_end":43,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":25},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5776,"byte_end":5788,"line_start":53,"line_end":53,"column_start":18,"column_end":30},"name":"RawMutexFair","qualname":"::mutex::RawMutexFair","value":"RawMutexFair: RawMutex","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27}],"decl_id":null,"docs":" Additional methods for mutexes which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support fair unlocking.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5396,"byte_end":5460,"line_start":47,"line_end":47,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5461,"byte_end":5464,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5465,"byte_end":5545,"line_start":49,"line_end":49,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5546,"byte_end":5621,"line_start":50,"line_end":50,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5622,"byte_end":5696,"line_start":51,"line_end":51,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5697,"byte_end":5758,"line_start":52,"line_end":52,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5865,"byte_end":5876,"line_start":55,"line_end":55,"column_start":8,"column_end":19},"name":"unlock_fair","qualname":"::mutex::RawMutexFair::unlock_fair","value":"pub fn unlock_fair(&Self)","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Unlocks this mutex using a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5805,"byte_end":5857,"line_start":54,"line_end":54,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6169,"byte_end":6173,"line_start":62,"line_end":62,"column_start":8,"column_end":12},"name":"bump","qualname":"::mutex::RawMutexFair::bump","value":"pub fn bump(&Self)","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5890,"byte_end":5959,"line_start":57,"line_end":57,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5964,"byte_end":5967,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5972,"byte_end":6048,"line_start":59,"line_end":59,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6053,"byte_end":6129,"line_start":60,"line_end":60,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6134,"byte_end":6161,"line_start":61,"line_end":61,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":28},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6471,"byte_end":6484,"line_start":72,"line_end":72,"column_start":18,"column_end":31},"name":"RawMutexTimed","qualname":"::mutex::RawMutexTimed","value":"RawMutexTimed: RawMutex","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32}],"decl_id":null,"docs":" Additional methods for mutexes which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support locking with timeouts.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6241,"byte_end":6312,"line_start":68,"line_end":68,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6313,"byte_end":6316,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6317,"byte_end":6397,"line_start":70,"line_end":70,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6398,"byte_end":6453,"line_start":71,"line_end":71,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":29},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6553,"byte_end":6561,"line_start":74,"line_end":74,"column_start":10,"column_end":18},"name":"Duration","qualname":"::mutex::RawMutexTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6501,"byte_end":6543,"line_start":73,"line_end":73,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":30},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6621,"byte_end":6628,"line_start":77,"line_end":77,"column_start":10,"column_end":17},"name":"Instant","qualname":"::mutex::RawMutexTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6568,"byte_end":6611,"line_start":76,"line_end":76,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6704,"byte_end":6716,"line_start":80,"line_end":80,"column_start":8,"column_end":20},"name":"try_lock_for","qualname":"::mutex::RawMutexTimed::try_lock_for","value":"pub fn try_lock_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6635,"byte_end":6696,"line_start":79,"line_end":79,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6832,"byte_end":6846,"line_start":83,"line_end":83,"column_start":8,"column_end":22},"name":"try_lock_until","qualname":"::mutex::RawMutexTimed::try_lock_until","value":"pub fn try_lock_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6763,"byte_end":6824,"line_start":82,"line_end":82,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":33},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":7400,"byte_end":7405,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37}],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusion primitive useful for protecting shared data","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6890,"byte_end":6956,"line_start":86,"line_end":86,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6957,"byte_end":6960,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6961,"byte_end":7040,"line_start":88,"line_end":88,"column_start":1,"column_end":80}},{"value":"/ mutex can also be statically initialized or created via a `new`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":7041,"byte_end":7108,"line_start":89,"line_end":89,"column_start":1,"column_end":68}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":7109,"byte_end":7188,"line_start":90,"line_end":90,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":7189,"byte_end":7264,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":7265,"byte_end":7344,"line_start":92,"line_end":92,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":7345,"byte_end":7388,"line_start":93,"line_end":93,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8629,"byte_end":8632,"line_start":142,"line_end":142,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<R, T>>::new","value":"pub fn new(T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new mutex in an unlocked state ready for use.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8507,"byte_end":8566,"line_start":139,"line_end":139,"column_start":5,"column_end":64}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8571,"byte_end":8603,"line_start":140,"line_end":140,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8608,"byte_end":8617,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8837,"byte_end":8847,"line_start":149,"line_end":149,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8728,"byte_end":8783,"line_start":146,"line_end":146,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8788,"byte_end":8797,"line_start":147,"line_end":147,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8802,"byte_end":8825,"line_start":148,"line_end":148,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":9708,"byte_end":9712,"line_start":173,"line_end":173,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<R, T>>::lock","value":"pub fn lock(&Self) -> MutexGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"/ Acquires a mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":9170,"byte_end":9246,"line_start":163,"line_end":163,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":9251,"byte_end":9254,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ This function will block the local thread until it is available to acquire","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":9259,"byte_end":9337,"line_start":165,"line_end":165,"column_start":5,"column_end":83}},{"value":"/ the mutex. Upon returning, the thread is the only thread with the mutex","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":9342,"byte_end":9417,"line_start":166,"line_end":166,"column_start":5,"column_end":80}},{"value":"/ held. An RAII guard is returned to allow scoped unlock of the lock. When","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":9422,"byte_end":9498,"line_start":167,"line_end":167,"column_start":5,"column_end":81}},{"value":"/ the guard goes out of scope, the mutex will be unlocked.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":9503,"byte_end":9563,"line_start":168,"line_end":168,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":9568,"byte_end":9571,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ Attempts to lock a mutex in the thread which already holds the lock will","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":9576,"byte_end":9652,"line_start":170,"line_end":170,"column_start":5,"column_end":81}},{"value":"/ result in a deadlock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":9657,"byte_end":9682,"line_start":171,"line_end":171,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":9687,"byte_end":9696,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10166,"byte_end":10174,"line_start":187,"line_end":187,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<R, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":9864,"byte_end":9898,"line_start":179,"line_end":179,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":9903,"byte_end":9906,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":9911,"byte_end":9987,"line_start":181,"line_end":181,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":9992,"byte_end":10068,"line_start":182,"line_end":182,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10073,"byte_end":10094,"line_start":183,"line_end":183,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10099,"byte_end":10102,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10107,"byte_end":10140,"line_start":185,"line_end":185,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10145,"byte_end":10154,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10647,"byte_end":10654,"line_start":201,"line_end":201,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10400,"byte_end":10455,"line_start":196,"line_end":196,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10460,"byte_end":10463,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `Mutex` mutably, no actual locking needs to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10468,"byte_end":10543,"line_start":198,"line_end":198,"column_start":5,"column_end":80}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10548,"byte_end":10621,"line_start":199,"line_end":199,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10626,"byte_end":10635,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11238,"byte_end":11250,"line_start":217,"line_end":217,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<R, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10730,"byte_end":10761,"line_start":205,"line_end":205,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10766,"byte_end":10769,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10774,"byte_end":10848,"line_start":207,"line_end":207,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10853,"byte_end":10923,"line_start":208,"line_end":208,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10928,"byte_end":10949,"line_start":209,"line_end":209,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10954,"byte_end":10957,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10962,"byte_end":10974,"line_start":211,"line_end":211,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10979,"byte_end":10982,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10987,"byte_end":11061,"line_start":213,"line_end":213,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11066,"byte_end":11135,"line_start":214,"line_end":214,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11140,"byte_end":11205,"line_start":215,"line_end":215,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11210,"byte_end":11219,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11687,"byte_end":11690,"line_start":231,"line_end":231,"column_start":19,"column_end":22},"name":"raw","qualname":"<Mutex<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11298,"byte_end":11342,"line_start":221,"line_end":221,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11347,"byte_end":11350,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11355,"byte_end":11430,"line_start":223,"line_end":223,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11435,"byte_end":11496,"line_start":224,"line_end":224,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11501,"byte_end":11504,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11509,"byte_end":11521,"line_start":226,"line_end":226,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11526,"byte_end":11529,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11534,"byte_end":11601,"line_start":228,"line_end":228,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `MutexGuard`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11606,"byte_end":11654,"line_start":229,"line_end":229,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11659,"byte_end":11668,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12321,"byte_end":12338,"line_start":249,"line_end":249,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<Mutex<R, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock procotol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11784,"byte_end":11844,"line_start":237,"line_end":237,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11849,"byte_end":11852,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11857,"byte_end":11931,"line_start":239,"line_end":239,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11936,"byte_end":12006,"line_start":240,"line_end":240,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12011,"byte_end":12032,"line_start":241,"line_end":241,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12037,"byte_end":12040,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12045,"byte_end":12057,"line_start":243,"line_end":243,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12062,"byte_end":12065,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12070,"byte_end":12144,"line_start":245,"line_end":245,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12149,"byte_end":12218,"line_start":246,"line_end":246,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12223,"byte_end":12288,"line_start":247,"line_end":247,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12293,"byte_end":12302,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12738,"byte_end":12750,"line_start":261,"line_end":261,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<Mutex<R, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12441,"byte_end":12502,"line_start":255,"line_end":255,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12507,"byte_end":12510,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12515,"byte_end":12585,"line_start":257,"line_end":257,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12590,"byte_end":12665,"line_start":258,"line_end":258,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12670,"byte_end":12712,"line_start":259,"line_end":259,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12717,"byte_end":12726,"line_start":260,"line_end":260,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13306,"byte_end":13320,"line_start":276,"line_end":276,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<Mutex<R, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13009,"byte_end":13070,"line_start":270,"line_end":270,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13075,"byte_end":13078,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13083,"byte_end":13153,"line_start":272,"line_end":272,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13158,"byte_end":13233,"line_start":273,"line_end":273,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13238,"byte_end":13280,"line_start":274,"line_end":274,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13285,"byte_end":13294,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":83},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":14861,"byte_end":14871,"line_start":324,"line_end":324,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":14521,"byte_end":14601,"line_start":318,"line_end":318,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":14602,"byte_end":14662,"line_start":319,"line_end":319,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":14663,"byte_end":14666,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":14667,"byte_end":14745,"line_start":321,"line_end":321,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":14746,"byte_end":14789,"line_start":322,"line_end":322,"column_start":1,"column_end":44}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":14790,"byte_end":14849,"line_start":323,"line_end":323,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15222,"byte_end":15227,"line_start":333,"line_end":333,"column_start":12,"column_end":17},"name":"mutex","qualname":"<MutexGuard>::mutex","value":"pub fn mutex(&Self) -> &'a Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `Mutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `Mutex` object.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15155,"byte_end":15210,"line_start":332,"line_end":332,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15692,"byte_end":15695,"line_start":346,"line_end":346,"column_start":12,"column_end":15},"name":"map","qualname":"<MutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15286,"byte_end":15356,"line_start":337,"line_end":337,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15361,"byte_end":15364,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15369,"byte_end":15426,"line_start":339,"line_end":339,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15431,"byte_end":15463,"line_start":340,"line_end":340,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15468,"byte_end":15471,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15476,"byte_end":15527,"line_start":342,"line_end":342,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15532,"byte_end":15608,"line_start":343,"line_end":343,"column_start":5,"column_end":81}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15613,"byte_end":15666,"line_start":344,"line_end":344,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15671,"byte_end":15680,"line_start":345,"line_end":345,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":16480,"byte_end":16487,"line_start":366,"line_end":366,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedMutexGuard` for a component of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15994,"byte_end":16063,"line_start":356,"line_end":356,"column_start":5,"column_end":74}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":16068,"byte_end":16144,"line_start":357,"line_end":357,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":16149,"byte_end":16152,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":16157,"byte_end":16214,"line_start":359,"line_end":359,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":16219,"byte_end":16251,"line_start":360,"line_end":360,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":16256,"byte_end":16259,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":16264,"byte_end":16315,"line_start":362,"line_end":362,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":16320,"byte_end":16396,"line_start":363,"line_end":363,"column_start":5,"column_end":81}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":16401,"byte_end":16454,"line_start":364,"line_end":364,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":16459,"byte_end":16468,"line_start":365,"line_end":365,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17123,"byte_end":17131,"line_start":384,"line_end":384,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<MutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":16897,"byte_end":16961,"line_start":379,"line_end":379,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":16966,"byte_end":16969,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":16974,"byte_end":17042,"line_start":381,"line_end":381,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17047,"byte_end":17097,"line_start":382,"line_end":382,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17102,"byte_end":17111,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18147,"byte_end":18158,"line_start":408,"line_end":408,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17366,"byte_end":17417,"line_start":395,"line_end":395,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17422,"byte_end":17425,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17430,"byte_end":17504,"line_start":397,"line_end":397,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17509,"byte_end":17581,"line_start":398,"line_end":398,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17586,"byte_end":17660,"line_start":399,"line_end":399,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17665,"byte_end":17740,"line_start":400,"line_end":400,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17745,"byte_end":17816,"line_start":401,"line_end":401,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17821,"byte_end":17878,"line_start":402,"line_end":402,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17883,"byte_end":17886,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17891,"byte_end":17967,"line_start":404,"line_end":404,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17972,"byte_end":18048,"line_start":405,"line_end":405,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18053,"byte_end":18121,"line_start":406,"line_end":406,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18126,"byte_end":18135,"line_start":407,"line_end":407,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18528,"byte_end":18541,"line_start":420,"line_end":420,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<MutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18240,"byte_end":18304,"line_start":413,"line_end":413,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18309,"byte_end":18312,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18317,"byte_end":18366,"line_start":415,"line_end":415,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18371,"byte_end":18374,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18379,"byte_end":18447,"line_start":417,"line_end":417,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18452,"byte_end":18502,"line_start":418,"line_end":418,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18507,"byte_end":18516,"line_start":419,"line_end":419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19006,"byte_end":19010,"line_start":435,"line_end":435,"column_start":12,"column_end":16},"name":"bump","qualname":"<MutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18709,"byte_end":18778,"line_start":429,"line_end":429,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18783,"byte_end":18786,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18791,"byte_end":18867,"line_start":431,"line_end":431,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18872,"byte_end":18948,"line_start":432,"line_end":432,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18953,"byte_end":18980,"line_start":433,"line_end":433,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18985,"byte_end":18994,"line_start":434,"line_end":434,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":142},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20556,"byte_end":20572,"line_start":485,"line_end":485,"column_start":12,"column_end":28},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"MappedMutexGuard {  }","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148}],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `MutexGuard::map`, which can point to a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20120,"byte_end":20195,"line_start":477,"line_end":477,"column_start":1,"column_end":76}},{"value":"/ subfield of the protected data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20196,"byte_end":20231,"line_start":478,"line_end":478,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20232,"byte_end":20235,"line_start":479,"line_end":479,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedMutexGuard` and `MutexGuard` is that the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20236,"byte_end":20315,"line_start":480,"line_end":480,"column_start":1,"column_end":80}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20316,"byte_end":20391,"line_start":481,"line_end":481,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20392,"byte_end":20472,"line_start":482,"line_end":482,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20473,"byte_end":20484,"line_start":483,"line_end":483,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20485,"byte_end":20544,"line_start":484,"line_end":484,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":21400,"byte_end":21403,"line_start":510,"line_end":510,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20982,"byte_end":21052,"line_start":501,"line_end":501,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":21057,"byte_end":21060,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":21065,"byte_end":21128,"line_start":503,"line_end":503,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":21133,"byte_end":21165,"line_start":504,"line_end":504,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":21170,"byte_end":21173,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":21178,"byte_end":21229,"line_start":506,"line_end":506,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":21234,"byte_end":21316,"line_start":507,"line_end":507,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":21321,"byte_end":21374,"line_start":508,"line_end":508,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":21379,"byte_end":21388,"line_start":509,"line_end":509,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":22181,"byte_end":22188,"line_start":530,"line_end":530,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedMutexGuard` for a component of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":21683,"byte_end":21752,"line_start":520,"line_end":520,"column_start":5,"column_end":74}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":21757,"byte_end":21833,"line_start":521,"line_end":521,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":21838,"byte_end":21841,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":21846,"byte_end":21909,"line_start":523,"line_end":523,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":21914,"byte_end":21946,"line_start":524,"line_end":524,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":21951,"byte_end":21954,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":21959,"byte_end":22010,"line_start":526,"line_end":526,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":22015,"byte_end":22097,"line_start":527,"line_end":527,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":22102,"byte_end":22155,"line_start":528,"line_end":528,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":22160,"byte_end":22169,"line_start":529,"line_end":529,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23438,"byte_end":23449,"line_start":558,"line_end":558,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":22657,"byte_end":22708,"line_start":545,"line_end":545,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":22713,"byte_end":22716,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":22721,"byte_end":22795,"line_start":547,"line_end":547,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":22800,"byte_end":22872,"line_start":548,"line_end":548,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":22877,"byte_end":22951,"line_start":549,"line_end":549,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":22956,"byte_end":23031,"line_start":550,"line_end":550,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23036,"byte_end":23107,"line_start":551,"line_end":551,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23112,"byte_end":23169,"line_start":552,"line_end":552,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23174,"byte_end":23177,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23182,"byte_end":23258,"line_start":554,"line_end":554,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23263,"byte_end":23339,"line_start":555,"line_end":555,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23344,"byte_end":23412,"line_start":556,"line_end":556,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23417,"byte_end":23426,"line_start":557,"line_end":557,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":218},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25732,"byte_end":25743,"line_start":38,"line_end":38,"column_start":18,"column_end":29},"name":"GetThreadId","qualname":"::remutex::GetThreadId","value":"GetThreadId","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220}],"decl_id":null,"docs":" Helper trait which returns a non-zero thread ID.","sig":null,"attributes":[{"value":"/ Helper trait which returns a non-zero thread ID.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25331,"byte_end":25383,"line_start":28,"line_end":28,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25384,"byte_end":25387,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The simplest way to implement this trait is to return the address of a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25388,"byte_end":25462,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/ thread-local variable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25463,"byte_end":25489,"line_start":31,"line_end":31,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25490,"byte_end":25493,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25494,"byte_end":25506,"line_start":33,"line_end":33,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25507,"byte_end":25510,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that no two active threads share","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25511,"byte_end":25589,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ the same thread ID. However the ID of a thread that has exited can be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25590,"byte_end":25663,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"/ re-used since that thread is no longer active.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25664,"byte_end":25714,"line_start":37,"line_end":37,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":219},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25779,"byte_end":25783,"line_start":40,"line_end":40,"column_start":11,"column_end":15},"name":"INIT","qualname":"::remutex::GetThreadId::INIT","value":"Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Initial value.\n","sig":null,"attributes":[{"value":"/ Initial value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25750,"byte_end":25768,"line_start":39,"line_end":39,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25894,"byte_end":25911,"line_start":44,"line_end":44,"column_start":8,"column_end":25},"name":"nonzero_thread_id","qualname":"::remutex::GetThreadId::nonzero_thread_id","value":"pub fn nonzero_thread_id(&Self) -> NonZeroUsize","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns a non-zero thread ID which identifies the current thread of\n execution.\n","sig":null,"attributes":[{"value":"/ Returns a non-zero thread ID which identifies the current thread of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25796,"byte_end":25867,"line_start":42,"line_end":42,"column_start":5,"column_end":76}},{"value":"/ execution.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25872,"byte_end":25886,"line_start":43,"line_end":43,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":250},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":28721,"byte_end":28735,"line_start":142,"line_end":142,"column_start":12,"column_end":26},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"ReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255}],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[{"value":"/ A mutex which can be recursively locked by a single thread.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":28246,"byte_end":28309,"line_start":131,"line_end":131,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":28310,"byte_end":28313,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ This type is identical to `Mutex` except for the following points:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":28314,"byte_end":28384,"line_start":133,"line_end":133,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":28385,"byte_end":28388,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ - Locking multiple times from the same thread will work correctly instead of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":28389,"byte_end":28469,"line_start":135,"line_end":135,"column_start":1,"column_end":81}},{"value":"/   deadlocking.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":28470,"byte_end":28488,"line_start":136,"line_end":136,"column_start":1,"column_end":19}},{"value":"/ - `ReentrantMutexGuard` does not give mutable references to the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":28489,"byte_end":28569,"line_start":137,"line_end":137,"column_start":1,"column_end":81}},{"value":"/   Use a `RefCell` if you need this.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":28570,"byte_end":28609,"line_start":138,"line_end":138,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":28610,"byte_end":28613,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ See [`Mutex`](struct.Mutex.html) for more details about the underlying mutex","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":28614,"byte_end":28694,"line_start":140,"line_end":140,"column_start":1,"column_end":81}},{"value":"/ primitive.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":28695,"byte_end":28709,"line_start":141,"line_end":141,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":30442,"byte_end":30445,"line_start":206,"line_end":206,"column_start":12,"column_end":15},"name":"new","qualname":"<ReentrantMutex<R, G, T>>::new","value":"pub fn new(T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex in an unlocked state ready for use.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":30310,"byte_end":30379,"line_start":203,"line_end":203,"column_start":5,"column_end":74}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":30384,"byte_end":30416,"line_start":204,"line_end":204,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":30421,"byte_end":30430,"line_start":205,"line_end":205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":30888,"byte_end":30898,"line_start":221,"line_end":221,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ReentrantMutex<R, G, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":30779,"byte_end":30834,"line_start":218,"line_end":218,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":30839,"byte_end":30848,"line_start":219,"line_end":219,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":30853,"byte_end":30876,"line_start":220,"line_end":220,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":31912,"byte_end":31916,"line_start":246,"line_end":246,"column_start":12,"column_end":16},"name":"lock","qualname":"<ReentrantMutex<R, G, T>>::lock","value":"pub fn lock(&Self) -> ReentrantMutexGuard<, R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reentrant mutex, blocking the current thread until it is able\n to do so.","sig":null,"attributes":[{"value":"/ Acquires a reentrant mutex, blocking the current thread until it is able","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":31273,"byte_end":31349,"line_start":235,"line_end":235,"column_start":5,"column_end":81}},{"value":"/ to do so.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":31354,"byte_end":31367,"line_start":236,"line_end":236,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":31372,"byte_end":31375,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ If the mutex is held by another thread then this function will block the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":31380,"byte_end":31456,"line_start":238,"line_end":238,"column_start":5,"column_end":81}},{"value":"/ local thread until it is available to acquire the mutex. If the mutex is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":31461,"byte_end":31537,"line_start":239,"line_end":239,"column_start":5,"column_end":81}},{"value":"/ already held by the current thread then this function will increment the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":31542,"byte_end":31618,"line_start":240,"line_end":240,"column_start":5,"column_end":81}},{"value":"/ lock reference count and return immediately. Upon returning,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":31623,"byte_end":31687,"line_start":241,"line_end":241,"column_start":5,"column_end":69}},{"value":"/ the thread is the only thread with the mutex held. An RAII guard is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":31692,"byte_end":31763,"line_start":242,"line_end":242,"column_start":5,"column_end":76}},{"value":"/ returned to allow scoped unlock of the lock. When the guard goes out of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":31768,"byte_end":31843,"line_start":243,"line_end":243,"column_start":5,"column_end":80}},{"value":"/ scope, the mutex will be unlocked.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":31848,"byte_end":31886,"line_start":244,"line_end":244,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":31891,"byte_end":31900,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32382,"byte_end":32390,"line_start":260,"line_end":260,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<ReentrantMutex<R, G, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32080,"byte_end":32114,"line_start":252,"line_end":252,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32119,"byte_end":32122,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32127,"byte_end":32203,"line_start":254,"line_end":254,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32208,"byte_end":32284,"line_start":255,"line_end":255,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32289,"byte_end":32310,"line_start":256,"line_end":256,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32315,"byte_end":32318,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32323,"byte_end":32356,"line_start":258,"line_end":258,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32361,"byte_end":32370,"line_start":259,"line_end":259,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32884,"byte_end":32891,"line_start":274,"line_end":274,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ReentrantMutex<R, G, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32628,"byte_end":32683,"line_start":269,"line_end":269,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32688,"byte_end":32691,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `ReentrantMutex` mutably, no actual locking needs to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32696,"byte_end":32780,"line_start":271,"line_end":271,"column_start":5,"column_end":89}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32785,"byte_end":32858,"line_start":272,"line_end":272,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32863,"byte_end":32872,"line_start":273,"line_end":273,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33493,"byte_end":33505,"line_start":290,"line_end":290,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<ReentrantMutex<R, G, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32967,"byte_end":32998,"line_start":278,"line_end":278,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33003,"byte_end":33006,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33011,"byte_end":33085,"line_start":280,"line_end":280,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33090,"byte_end":33169,"line_start":281,"line_end":281,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33174,"byte_end":33195,"line_start":282,"line_end":282,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33200,"byte_end":33203,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33208,"byte_end":33220,"line_start":284,"line_end":284,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33225,"byte_end":33228,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33233,"byte_end":33307,"line_start":286,"line_end":286,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33312,"byte_end":33390,"line_start":287,"line_end":287,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33395,"byte_end":33460,"line_start":288,"line_end":288,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33465,"byte_end":33474,"line_start":289,"line_end":289,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33951,"byte_end":33954,"line_start":304,"line_end":304,"column_start":19,"column_end":22},"name":"raw","qualname":"<ReentrantMutex<R, G, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33553,"byte_end":33597,"line_start":294,"line_end":294,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33602,"byte_end":33605,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33610,"byte_end":33685,"line_start":296,"line_end":296,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33690,"byte_end":33751,"line_start":297,"line_end":297,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33756,"byte_end":33759,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33764,"byte_end":33776,"line_start":299,"line_end":299,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33781,"byte_end":33784,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33789,"byte_end":33856,"line_start":301,"line_end":301,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `ReentrantMutexGuard`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33861,"byte_end":33918,"line_start":302,"line_end":302,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33923,"byte_end":33932,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34637,"byte_end":34654,"line_start":322,"line_end":322,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<ReentrantMutex<R, G, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34082,"byte_end":34142,"line_start":310,"line_end":310,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34147,"byte_end":34150,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34155,"byte_end":34229,"line_start":312,"line_end":312,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34234,"byte_end":34313,"line_start":313,"line_end":313,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34318,"byte_end":34339,"line_start":314,"line_end":314,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34344,"byte_end":34347,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34352,"byte_end":34364,"line_start":316,"line_end":316,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34369,"byte_end":34372,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34377,"byte_end":34451,"line_start":318,"line_end":318,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34456,"byte_end":34534,"line_start":319,"line_end":319,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34539,"byte_end":34604,"line_start":320,"line_end":320,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34609,"byte_end":34618,"line_start":321,"line_end":321,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":35082,"byte_end":35094,"line_start":334,"line_end":334,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<ReentrantMutex<R, G, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34785,"byte_end":34846,"line_start":328,"line_end":328,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34851,"byte_end":34854,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34859,"byte_end":34929,"line_start":330,"line_end":330,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34934,"byte_end":35009,"line_start":331,"line_end":331,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":35014,"byte_end":35056,"line_start":332,"line_end":332,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":35061,"byte_end":35070,"line_start":333,"line_end":333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":35662,"byte_end":35676,"line_start":349,"line_end":349,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<ReentrantMutex<R, G, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":35365,"byte_end":35426,"line_start":343,"line_end":343,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":35431,"byte_end":35434,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":35439,"byte_end":35509,"line_start":345,"line_end":345,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":35514,"byte_end":35589,"line_start":346,"line_end":346,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":35594,"byte_end":35636,"line_start":347,"line_end":347,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":35641,"byte_end":35650,"line_start":348,"line_end":348,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":310},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37376,"byte_end":37395,"line_start":397,"line_end":397,"column_start":12,"column_end":31},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"ReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37033,"byte_end":37120,"line_start":391,"line_end":391,"column_start":1,"column_end":88}},{"value":"/ is dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37121,"byte_end":37184,"line_start":392,"line_end":392,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37185,"byte_end":37188,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37189,"byte_end":37267,"line_start":394,"line_end":394,"column_start":1,"column_end":79}},{"value":"/ `Deref` implementation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37268,"byte_end":37295,"line_start":395,"line_end":395,"column_start":1,"column_end":28}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37296,"byte_end":37364,"line_start":396,"line_end":396,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37856,"byte_end":37863,"line_start":409,"line_end":409,"column_start":12,"column_end":19},"name":"remutex","qualname":"<ReentrantMutexGuard>::remutex","value":"pub fn remutex(&Self) -> &'a ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `ReentrantMutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `ReentrantMutex` object.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37780,"byte_end":37844,"line_start":408,"line_end":408,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":38369,"byte_end":38372,"line_start":422,"line_end":422,"column_start":12,"column_end":15},"name":"map","qualname":"<ReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37936,"byte_end":38015,"line_start":413,"line_end":413,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":38020,"byte_end":38023,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":38028,"byte_end":38094,"line_start":415,"line_end":415,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":38099,"byte_end":38131,"line_start":416,"line_end":416,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":38136,"byte_end":38139,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":38144,"byte_end":38195,"line_start":418,"line_end":418,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":38200,"byte_end":38285,"line_start":419,"line_end":419,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":38290,"byte_end":38343,"line_start":420,"line_end":420,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":38348,"byte_end":38357,"line_start":421,"line_end":421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":39197,"byte_end":39204,"line_start":442,"line_end":442,"column_start":12,"column_end":19},"name":"try_map","qualname":"<ReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&mut T) ->\nOption<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":38684,"byte_end":38762,"line_start":432,"line_end":432,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":38767,"byte_end":38843,"line_start":433,"line_end":433,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":38848,"byte_end":38851,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":38856,"byte_end":38922,"line_start":435,"line_end":435,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":38927,"byte_end":38959,"line_start":436,"line_end":436,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":38964,"byte_end":38967,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":38972,"byte_end":39023,"line_start":438,"line_end":438,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":39028,"byte_end":39113,"line_start":439,"line_end":439,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":39118,"byte_end":39171,"line_start":440,"line_end":440,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":39176,"byte_end":39185,"line_start":441,"line_end":441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":39888,"byte_end":39896,"line_start":463,"line_end":463,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<ReentrantMutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":39662,"byte_end":39726,"line_start":458,"line_end":458,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":39731,"byte_end":39734,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":39739,"byte_end":39807,"line_start":460,"line_end":460,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":39812,"byte_end":39862,"line_start":461,"line_end":461,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":39867,"byte_end":39876,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40962,"byte_end":40973,"line_start":489,"line_end":489,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<ReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40172,"byte_end":40223,"line_start":476,"line_end":476,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40228,"byte_end":40231,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40236,"byte_end":40310,"line_start":478,"line_end":478,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40315,"byte_end":40387,"line_start":479,"line_end":479,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40392,"byte_end":40466,"line_start":480,"line_end":480,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40471,"byte_end":40546,"line_start":481,"line_end":481,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40551,"byte_end":40622,"line_start":482,"line_end":482,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40627,"byte_end":40684,"line_start":483,"line_end":483,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40689,"byte_end":40692,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40697,"byte_end":40773,"line_start":485,"line_end":485,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40778,"byte_end":40854,"line_start":486,"line_end":486,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40859,"byte_end":40936,"line_start":487,"line_end":487,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40941,"byte_end":40950,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41345,"byte_end":41358,"line_start":501,"line_end":501,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<ReentrantMutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41057,"byte_end":41121,"line_start":494,"line_end":494,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41126,"byte_end":41129,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41134,"byte_end":41183,"line_start":496,"line_end":496,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41188,"byte_end":41191,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41196,"byte_end":41264,"line_start":498,"line_end":498,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41269,"byte_end":41319,"line_start":499,"line_end":499,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41324,"byte_end":41333,"line_start":500,"line_end":500,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41827,"byte_end":41831,"line_start":516,"line_end":516,"column_start":12,"column_end":16},"name":"bump","qualname":"<ReentrantMutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41530,"byte_end":41599,"line_start":510,"line_end":510,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41604,"byte_end":41607,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41612,"byte_end":41688,"line_start":512,"line_end":512,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41693,"byte_end":41769,"line_start":513,"line_end":513,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41774,"byte_end":41801,"line_start":514,"line_end":514,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41806,"byte_end":41815,"line_start":515,"line_end":515,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":372},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43416,"byte_end":43441,"line_start":570,"line_end":570,"column_start":12,"column_end":37},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"MappedReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379}],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":42944,"byte_end":43028,"line_start":562,"line_end":562,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43029,"byte_end":43064,"line_start":563,"line_end":563,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43065,"byte_end":43068,"line_start":564,"line_end":564,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43069,"byte_end":43166,"line_start":565,"line_end":565,"column_start":1,"column_end":98}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43167,"byte_end":43242,"line_start":566,"line_end":566,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43243,"byte_end":43323,"line_start":567,"line_end":567,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43324,"byte_end":43335,"line_start":568,"line_end":568,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43336,"byte_end":43404,"line_start":569,"line_end":569,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":44288,"byte_end":44291,"line_start":593,"line_end":593,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43843,"byte_end":43922,"line_start":584,"line_end":584,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43927,"byte_end":43930,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43935,"byte_end":44007,"line_start":586,"line_end":586,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":44012,"byte_end":44044,"line_start":587,"line_end":587,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":44049,"byte_end":44052,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":44057,"byte_end":44108,"line_start":589,"line_end":589,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":44113,"byte_end":44204,"line_start":590,"line_end":590,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":44209,"byte_end":44262,"line_start":591,"line_end":591,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":44267,"byte_end":44276,"line_start":592,"line_end":592,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":45105,"byte_end":45112,"line_start":613,"line_end":613,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":44580,"byte_end":44658,"line_start":603,"line_end":603,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":44663,"byte_end":44739,"line_start":604,"line_end":604,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":44744,"byte_end":44747,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":44752,"byte_end":44824,"line_start":606,"line_end":606,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":44829,"byte_end":44861,"line_start":607,"line_end":607,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":44866,"byte_end":44869,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":44874,"byte_end":44925,"line_start":609,"line_end":609,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":44930,"byte_end":45021,"line_start":610,"line_end":610,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":45026,"byte_end":45079,"line_start":611,"line_end":611,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":45084,"byte_end":45093,"line_start":612,"line_end":612,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":46440,"byte_end":46451,"line_start":646,"line_end":646,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":45650,"byte_end":45701,"line_start":633,"line_end":633,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":45706,"byte_end":45709,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":45714,"byte_end":45788,"line_start":635,"line_end":635,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":45793,"byte_end":45865,"line_start":636,"line_end":636,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":45870,"byte_end":45944,"line_start":637,"line_end":637,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":45949,"byte_end":46024,"line_start":638,"line_end":638,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":46029,"byte_end":46100,"line_start":639,"line_end":639,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":46105,"byte_end":46162,"line_start":640,"line_end":640,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":46167,"byte_end":46170,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":46175,"byte_end":46251,"line_start":642,"line_end":642,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":46256,"byte_end":46332,"line_start":643,"line_end":643,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":46337,"byte_end":46414,"line_start":644,"line_end":644,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":46419,"byte_end":46428,"line_start":645,"line_end":645,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":436},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48647,"byte_end":48656,"line_start":31,"line_end":31,"column_start":18,"column_end":27},"name":"RawRwLock","qualname":"::rwlock::RawRwLock","value":"RawRwLock","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444}],"decl_id":null,"docs":" Basic operations for a reader-writer lock.","sig":null,"attributes":[{"value":"/ Basic operations for a reader-writer lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48200,"byte_end":48246,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48247,"byte_end":48250,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `RwLock` to form a safe and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48251,"byte_end":48327,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ fully-functioning `RwLock` type.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48328,"byte_end":48364,"line_start":23,"line_end":23,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48365,"byte_end":48368,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48369,"byte_end":48381,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48382,"byte_end":48385,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the `RwLock` is actually","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48386,"byte_end":48461,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ exclusive: an exclusive lock can't be acquired while an exclusive or shared","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48462,"byte_end":48541,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ lock exists, and a shared lock can't be acquire while an exclusive lock","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48542,"byte_end":48617,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ exists.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48618,"byte_end":48629,"line_start":30,"line_end":30,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":437},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48717,"byte_end":48721,"line_start":33,"line_end":33,"column_start":11,"column_end":15},"name":"INIT","qualname":"::rwlock::RawRwLock::INIT","value":"Self","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Initial value for an unlocked `RwLock`.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked `RwLock`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48663,"byte_end":48706,"line_start":32,"line_end":32,"column_start":5,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":438},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48886,"byte_end":48897,"line_start":37,"line_end":37,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::rwlock::RawRwLock::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48734,"byte_end":48809,"line_start":35,"line_end":35,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48814,"byte_end":48876,"line_start":36,"line_end":36,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48994,"byte_end":49005,"line_start":40,"line_end":40,"column_start":8,"column_end":19},"name":"lock_shared","qualname":"::rwlock::RawRwLock::lock_shared","value":"pub fn lock_shared(&Self)","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Acquires a shared lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock, blocking the current thread until it is able to do so.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48904,"byte_end":48986,"line_start":39,"line_end":39,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49082,"byte_end":49097,"line_start":43,"line_end":43,"column_start":8,"column_end":23},"name":"try_lock_shared","qualname":"::rwlock::RawRwLock::try_lock_shared","value":"pub fn try_lock_shared(&Self) -> bool","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without blocking.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49019,"byte_end":49074,"line_start":42,"line_end":42,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49154,"byte_end":49167,"line_start":46,"line_end":46,"column_start":8,"column_end":21},"name":"unlock_shared","qualname":"::rwlock::RawRwLock::unlock_shared","value":"pub fn unlock_shared(&Self)","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Releases a shared lock.\n","sig":null,"attributes":[{"value":"/ Releases a shared lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49119,"byte_end":49146,"line_start":45,"line_end":45,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49275,"byte_end":49289,"line_start":49,"line_end":49,"column_start":8,"column_end":22},"name":"lock_exclusive","qualname":"::rwlock::RawRwLock::lock_exclusive","value":"pub fn lock_exclusive(&Self)","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Acquires an exclusive lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an exclusive lock, blocking the current thread until it is able to do so.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49181,"byte_end":49267,"line_start":48,"line_end":48,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49370,"byte_end":49388,"line_start":52,"line_end":52,"column_start":8,"column_end":26},"name":"try_lock_exclusive","qualname":"::rwlock::RawRwLock::try_lock_exclusive","value":"pub fn try_lock_exclusive(&Self) -> bool","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock without blocking.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49303,"byte_end":49362,"line_start":51,"line_end":51,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49449,"byte_end":49465,"line_start":55,"line_end":55,"column_start":8,"column_end":24},"name":"unlock_exclusive","qualname":"::rwlock::RawRwLock::unlock_exclusive","value":"pub fn unlock_exclusive(&Self)","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Releases an exclusive lock.\n","sig":null,"attributes":[{"value":"/ Releases an exclusive lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49410,"byte_end":49441,"line_start":54,"line_end":54,"column_start":5,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":445},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49857,"byte_end":49870,"line_start":64,"line_end":64,"column_start":18,"column_end":31},"name":"RawRwLockFair","qualname":"::rwlock::RawRwLockFair","value":"RawRwLockFair: RawRwLock","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449}],"decl_id":null,"docs":" Additional methods for RwLocks which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support fair unlocking.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49477,"byte_end":49541,"line_start":58,"line_end":58,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49542,"byte_end":49545,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49546,"byte_end":49626,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49627,"byte_end":49702,"line_start":61,"line_end":61,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49703,"byte_end":49777,"line_start":62,"line_end":62,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49778,"byte_end":49839,"line_start":63,"line_end":63,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49952,"byte_end":49970,"line_start":66,"line_end":66,"column_start":8,"column_end":26},"name":"unlock_shared_fair","qualname":"::rwlock::RawRwLockFair::unlock_shared_fair","value":"pub fn unlock_shared_fair(&Self)","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Releases a shared lock using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Releases a shared lock using a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49888,"byte_end":49944,"line_start":65,"line_end":65,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":50052,"byte_end":50073,"line_start":69,"line_end":69,"column_start":8,"column_end":29},"name":"unlock_exclusive_fair","qualname":"::rwlock::RawRwLockFair::unlock_exclusive_fair","value":"pub fn unlock_exclusive_fair(&Self)","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Releases an exclusive lock using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Releases an exclusive lock using a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49984,"byte_end":50044,"line_start":68,"line_end":68,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":50384,"byte_end":50395,"line_start":76,"line_end":76,"column_start":8,"column_end":19},"name":"bump_shared","qualname":"::rwlock::RawRwLockFair::bump_shared","value":"pub fn bump_shared(&Self)","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Temporarily yields a shared lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields a shared lock to a waiting thread if there is one.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":50087,"byte_end":50160,"line_start":71,"line_end":71,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":50165,"byte_end":50168,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_shared_fair` followed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":50173,"byte_end":50256,"line_start":73,"line_end":73,"column_start":5,"column_end":88}},{"value":"/ by `lock_shared`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":50261,"byte_end":50344,"line_start":74,"line_end":74,"column_start":5,"column_end":88}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":50349,"byte_end":50376,"line_start":75,"line_end":75,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":50786,"byte_end":50800,"line_start":86,"line_end":86,"column_start":8,"column_end":22},"name":"bump_exclusive","qualname":"::rwlock::RawRwLockFair::bump_exclusive","value":"pub fn bump_exclusive(&Self)","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Temporarily yields an exclusive lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an exclusive lock to a waiting thread if there is one.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":50479,"byte_end":50556,"line_start":81,"line_end":81,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":50561,"byte_end":50564,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_exclusive_fair` followed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":50569,"byte_end":50655,"line_start":83,"line_end":83,"column_start":5,"column_end":91}},{"value":"/ by `lock_exclusive`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":50660,"byte_end":50746,"line_start":84,"line_end":84,"column_start":5,"column_end":91}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":50751,"byte_end":50778,"line_start":85,"line_end":85,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":450},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51017,"byte_end":51035,"line_start":94,"line_end":94,"column_start":18,"column_end":36},"name":"RawRwLockDowngrade","qualname":"::rwlock::RawRwLockDowngrade","value":"RawRwLockDowngrade: RawRwLock","parent":null,"children":[{"krate":0,"index":451}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically downgrading an\n exclusive lock to a shared lock.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically downgrading an","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":50888,"byte_end":50962,"line_start":92,"line_end":92,"column_start":1,"column_end":75}},{"value":"/ exclusive lock to a shared lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":50963,"byte_end":50999,"line_start":93,"line_end":93,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51202,"byte_end":51211,"line_start":97,"line_end":97,"column_start":8,"column_end":17},"name":"downgrade","qualname":"::rwlock::RawRwLockDowngrade::downgrade","value":"pub fn downgrade(&Self)","parent":{"krate":0,"index":450},"children":[],"decl_id":null,"docs":" Atomically downgrades an exclusive lock into a shared lock without\n allowing any thread to take an exclusive lock in the meantime.\n","sig":null,"attributes":[{"value":"/ Atomically downgrades an exclusive lock into a shared lock without","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51053,"byte_end":51123,"line_start":95,"line_end":95,"column_start":5,"column_end":75}},{"value":"/ allowing any thread to take an exclusive lock in the meantime.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51128,"byte_end":51194,"line_start":96,"line_end":96,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":452},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51453,"byte_end":51467,"line_start":104,"line_end":104,"column_start":18,"column_end":32},"name":"RawRwLockTimed","qualname":"::rwlock::RawRwLockTimed","value":"RawRwLockTimed: RawRwLock","parent":null,"children":[{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458}],"decl_id":null,"docs":" Additional methods for RwLocks which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support locking with timeouts.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51223,"byte_end":51294,"line_start":100,"line_end":100,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51295,"byte_end":51298,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51299,"byte_end":51379,"line_start":102,"line_end":102,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51380,"byte_end":51435,"line_start":103,"line_end":103,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":453},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51537,"byte_end":51545,"line_start":106,"line_end":106,"column_start":10,"column_end":18},"name":"Duration","qualname":"::rwlock::RawRwLockTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51485,"byte_end":51527,"line_start":105,"line_end":105,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":454},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51605,"byte_end":51612,"line_start":109,"line_end":109,"column_start":10,"column_end":17},"name":"Instant","qualname":"::rwlock::RawRwLockTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51552,"byte_end":51595,"line_start":108,"line_end":108,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51692,"byte_end":51711,"line_start":112,"line_end":112,"column_start":8,"column_end":27},"name":"try_lock_shared_for","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_for","value":"pub fn try_lock_shared_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51619,"byte_end":51684,"line_start":111,"line_end":111,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51831,"byte_end":51852,"line_start":115,"line_end":115,"column_start":8,"column_end":29},"name":"try_lock_shared_until","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_until","value":"pub fn try_lock_shared_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51758,"byte_end":51823,"line_start":114,"line_end":114,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51975,"byte_end":51997,"line_start":118,"line_end":118,"column_start":8,"column_end":30},"name":"try_lock_exclusive_for","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_for","value":"pub fn try_lock_exclusive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51898,"byte_end":51967,"line_start":117,"line_end":117,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52121,"byte_end":52145,"line_start":121,"line_end":121,"column_start":8,"column_end":32},"name":"try_lock_exclusive_until","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_until","value":"pub fn try_lock_exclusive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52044,"byte_end":52113,"line_start":120,"line_end":120,"column_start":5,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":459},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52578,"byte_end":52596,"line_start":131,"line_end":131,"column_start":18,"column_end":36},"name":"RawRwLockRecursive","qualname":"::rwlock::RawRwLockRecursive","value":"RawRwLockRecursive: RawRwLock","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":461}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52189,"byte_end":52259,"line_start":124,"line_end":124,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52260,"byte_end":52263,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ These are guaranteed to succeed without blocking if","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52264,"byte_end":52319,"line_start":126,"line_end":126,"column_start":1,"column_end":56}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52320,"byte_end":52395,"line_start":127,"line_end":127,"column_start":1,"column_end":76}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52396,"byte_end":52467,"line_start":128,"line_end":128,"column_start":1,"column_end":72}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52468,"byte_end":52542,"line_start":129,"line_end":129,"column_start":1,"column_end":75}},{"value":"/ for the lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52543,"byte_end":52560,"line_start":130,"line_end":130,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52697,"byte_end":52718,"line_start":133,"line_end":133,"column_start":8,"column_end":29},"name":"lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::lock_shared_recursive","value":"pub fn lock_shared_recursive(&Self)","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" Acquires a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52614,"byte_end":52689,"line_start":132,"line_end":132,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52826,"byte_end":52851,"line_start":136,"line_end":136,"column_start":8,"column_end":33},"name":"try_lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::try_lock_shared_recursive","value":"pub fn try_lock_shared_recursive(&Self) -> bool","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52732,"byte_end":52818,"line_start":135,"line_end":135,"column_start":5,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":462},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52972,"byte_end":52995,"line_start":140,"line_end":140,"column_start":18,"column_end":41},"name":"RawRwLockRecursiveTimed","qualname":"::rwlock::RawRwLockRecursiveTimed","value":"RawRwLockRecursiveTimed: RawRwLockRecursive + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":464}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks and timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks and timeouts.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52871,"byte_end":52954,"line_start":139,"line_end":139,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53169,"byte_end":53198,"line_start":143,"line_end":143,"column_start":8,"column_end":37},"name":"try_lock_shared_recursive_for","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_for","value":"pub fn try_lock_shared_recursive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":462},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53039,"byte_end":53112,"line_start":141,"line_end":141,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53117,"byte_end":53161,"line_start":142,"line_end":142,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53375,"byte_end":53406,"line_start":147,"line_end":147,"column_start":8,"column_end":39},"name":"try_lock_shared_recursive_until","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_until","value":"pub fn try_lock_shared_recursive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":462},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53245,"byte_end":53318,"line_start":145,"line_end":145,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53323,"byte_end":53367,"line_start":146,"line_end":146,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":465},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53782,"byte_end":53798,"line_start":156,"line_end":156,"column_start":18,"column_end":34},"name":"RawRwLockUpgrade","qualname":"::rwlock::RawRwLockUpgrade","value":"RawRwLockUpgrade: RawRwLock","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically upgrading a shared\n lock to an exclusive lock.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically upgrading a shared","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53450,"byte_end":53528,"line_start":150,"line_end":150,"column_start":1,"column_end":79}},{"value":"/ lock to an exclusive lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53529,"byte_end":53559,"line_start":151,"line_end":151,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53560,"byte_end":53563,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ This requires acquiring a special \"upgradable read lock\" instead of a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53564,"byte_end":53637,"line_start":153,"line_end":153,"column_start":1,"column_end":74}},{"value":"/ normal shared lock. There may only be one upgradable lock at any time,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53638,"byte_end":53712,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/ otherwise deadlocks could occur when upgrading.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53713,"byte_end":53764,"line_start":155,"line_end":155,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53911,"byte_end":53926,"line_start":158,"line_end":158,"column_start":8,"column_end":23},"name":"lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::lock_upgradable","value":"pub fn lock_upgradable(&Self)","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Acquires an upgradable lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an upgradable lock, blocking the current thread until it is able to do so.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53816,"byte_end":53903,"line_start":157,"line_end":157,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54008,"byte_end":54027,"line_start":161,"line_end":161,"column_start":8,"column_end":27},"name":"try_lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::try_lock_upgradable","value":"pub fn try_lock_upgradable(&Self) -> bool","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock without blocking.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53940,"byte_end":54000,"line_start":160,"line_end":160,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54089,"byte_end":54106,"line_start":164,"line_end":164,"column_start":8,"column_end":25},"name":"unlock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::unlock_upgradable","value":"pub fn unlock_upgradable(&Self)","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Releases an upgradable lock.\n","sig":null,"attributes":[{"value":"/ Releases an upgradable lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54049,"byte_end":54081,"line_start":163,"line_end":163,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54181,"byte_end":54188,"line_start":167,"line_end":167,"column_start":8,"column_end":15},"name":"upgrade","qualname":"::rwlock::RawRwLockUpgrade::upgrade","value":"pub fn upgrade(&Self)","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Upgrades an upgradable lock to an exclusive lock.\n","sig":null,"attributes":[{"value":"/ Upgrades an upgradable lock to an exclusive lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54120,"byte_end":54173,"line_start":166,"line_end":166,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54299,"byte_end":54310,"line_start":171,"line_end":171,"column_start":8,"column_end":19},"name":"try_upgrade","qualname":"::rwlock::RawRwLockUpgrade::try_upgrade","value":"pub fn try_upgrade(&Self) -> bool","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock without\n blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock without","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54202,"byte_end":54273,"line_start":169,"line_end":169,"column_start":5,"column_end":76}},{"value":"/ blocking.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54278,"byte_end":54291,"line_start":170,"line_end":170,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":471},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54437,"byte_end":54457,"line_start":176,"line_end":176,"column_start":18,"column_end":38},"name":"RawRwLockUpgradeFair","qualname":"::rwlock::RawRwLockUpgradeFair","value":"RawRwLockUpgradeFair: RawRwLockUpgrade + RawRwLockFair","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and fair\n unlocking.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and fair","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54330,"byte_end":54404,"line_start":174,"line_end":174,"column_start":1,"column_end":75}},{"value":"/ unlocking.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54405,"byte_end":54419,"line_start":175,"line_end":175,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54567,"byte_end":54589,"line_start":178,"line_end":178,"column_start":8,"column_end":30},"name":"unlock_upgradable_fair","qualname":"::rwlock::RawRwLockUpgradeFair::unlock_upgradable_fair","value":"pub fn unlock_upgradable_fair(&Self)","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Releases an upgradable lock using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Releases an upgradable lock using a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54498,"byte_end":54559,"line_start":177,"line_end":177,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54913,"byte_end":54928,"line_start":185,"line_end":185,"column_start":8,"column_end":23},"name":"bump_upgradable","qualname":"::rwlock::RawRwLockUpgradeFair::bump_upgradable","value":"pub fn bump_upgradable(&Self)","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Temporarily yields an upgradable lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an upgradable lock to a waiting thread if there is one.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54603,"byte_end":54681,"line_start":180,"line_end":180,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54686,"byte_end":54689,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_upgradable_fair` followed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54694,"byte_end":54781,"line_start":182,"line_end":182,"column_start":5,"column_end":92}},{"value":"/ by `lock_upgradable`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54786,"byte_end":54873,"line_start":183,"line_end":183,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54878,"byte_end":54905,"line_start":184,"line_end":184,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":474},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55127,"byte_end":55152,"line_start":193,"line_end":193,"column_start":18,"column_end":43},"name":"RawRwLockUpgradeDowngrade","qualname":"::rwlock::RawRwLockUpgradeDowngrade","value":"RawRwLockUpgradeDowngrade: RawRwLockUpgrade + RawRwLockDowngrade","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and lock\n downgrading.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and lock","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55018,"byte_end":55092,"line_start":191,"line_end":191,"column_start":1,"column_end":75}},{"value":"/ downgrading.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55093,"byte_end":55109,"line_start":192,"line_end":192,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55257,"byte_end":55277,"line_start":195,"line_end":195,"column_start":8,"column_end":28},"name":"downgrade_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_upgradable","value":"pub fn downgrade_upgradable(&Self)","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Downgrades an upgradable lock to a shared lock.\n","sig":null,"attributes":[{"value":"/ Downgrades an upgradable lock to a shared lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55198,"byte_end":55249,"line_start":194,"line_end":194,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55354,"byte_end":55377,"line_start":198,"line_end":198,"column_start":8,"column_end":31},"name":"downgrade_to_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_to_upgradable","value":"pub fn downgrade_to_upgradable(&Self)","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Downgrades an exclusive lock to an upgradable lock.\n","sig":null,"attributes":[{"value":"/ Downgrades an exclusive lock to an upgradable lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55291,"byte_end":55346,"line_start":197,"line_end":197,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":477},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55503,"byte_end":55524,"line_start":203,"line_end":203,"column_start":18,"column_end":39},"name":"RawRwLockUpgradeTimed","qualname":"::rwlock::RawRwLockUpgradeTimed","value":"RawRwLockUpgradeTimed: RawRwLockUpgrade + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and locking\n with timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and locking","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55389,"byte_end":55466,"line_start":201,"line_end":201,"column_start":1,"column_end":78}},{"value":"/ with timeouts.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55467,"byte_end":55485,"line_start":202,"line_end":202,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55644,"byte_end":55667,"line_start":205,"line_end":205,"column_start":8,"column_end":31},"name":"try_lock_upgradable_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_for","value":"pub fn try_lock_upgradable_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55566,"byte_end":55636,"line_start":204,"line_end":204,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55792,"byte_end":55817,"line_start":208,"line_end":208,"column_start":8,"column_end":33},"name":"try_lock_upgradable_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_until","value":"pub fn try_lock_upgradable_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55714,"byte_end":55784,"line_start":207,"line_end":207,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55970,"byte_end":55985,"line_start":212,"line_end":212,"column_start":8,"column_end":23},"name":"try_upgrade_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_for","value":"pub fn try_upgrade_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55863,"byte_end":55934,"line_start":210,"line_end":210,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55939,"byte_end":55962,"line_start":211,"line_end":211,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":56139,"byte_end":56156,"line_start":216,"line_end":216,"column_start":8,"column_end":25},"name":"try_upgrade_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_until","value":"pub fn try_upgrade_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":56032,"byte_end":56103,"line_start":214,"line_end":214,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":56108,"byte_end":56131,"line_start":215,"line_end":215,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":482},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":56908,"byte_end":56914,"line_start":231,"line_end":231,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":485},{"krate":0,"index":486}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":56200,"byte_end":56224,"line_start":219,"line_end":219,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":56225,"byte_end":56228,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":56229,"byte_end":56306,"line_start":221,"line_end":221,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":56307,"byte_end":56386,"line_start":222,"line_end":222,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":56387,"byte_end":56466,"line_start":223,"line_end":223,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":56467,"byte_end":56525,"line_start":224,"line_end":224,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":56526,"byte_end":56529,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":56530,"byte_end":56607,"line_start":226,"line_end":226,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across threads and `Sync` to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":56608,"byte_end":56688,"line_start":227,"line_end":227,"column_start":1,"column_end":81}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":56689,"byte_end":56767,"line_start":228,"line_end":228,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":56768,"byte_end":56846,"line_start":229,"line_end":229,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":56847,"byte_end":56896,"line_start":230,"line_end":230,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58167,"byte_end":58170,"line_start":279,"line_end":279,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<R, T>>::new","value":"pub fn new(T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of an `RwLock<T>` which is unlocked.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58041,"byte_end":58104,"line_start":276,"line_end":276,"column_start":5,"column_end":68}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58109,"byte_end":58141,"line_start":277,"line_end":277,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58146,"byte_end":58155,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58380,"byte_end":58390,"line_start":286,"line_end":286,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this `RwLock`, returning the underlying data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58268,"byte_end":58326,"line_start":283,"line_end":283,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58331,"byte_end":58340,"line_start":284,"line_end":284,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58345,"byte_end":58368,"line_start":285,"line_end":285,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59569,"byte_end":59573,"line_start":321,"line_end":321,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<R, T>>::read","value":"pub fn read(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58961,"byte_end":59037,"line_start":308,"line_end":308,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59042,"byte_end":59071,"line_start":309,"line_end":309,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59076,"byte_end":59079,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59084,"byte_end":59160,"line_start":311,"line_end":311,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59165,"byte_end":59241,"line_start":312,"line_end":312,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59246,"byte_end":59270,"line_start":313,"line_end":313,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59275,"byte_end":59278,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ Note that attempts to recursively acquire a read lock on a `RwLock` when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59283,"byte_end":59359,"line_start":315,"line_end":315,"column_start":5,"column_end":81}},{"value":"/ the current thread already holds one may result in a deadlock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59364,"byte_end":59430,"line_start":316,"line_end":316,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59435,"byte_end":59438,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59443,"byte_end":59515,"line_start":318,"line_end":318,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59520,"byte_end":59543,"line_start":319,"line_end":319,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59548,"byte_end":59557,"line_start":320,"line_end":320,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60076,"byte_end":60084,"line_start":335,"line_end":335,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<R, T>>::try_read","value":"pub fn try_read(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59742,"byte_end":59804,"line_start":327,"line_end":327,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59809,"byte_end":59812,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59817,"byte_end":59894,"line_start":329,"line_end":329,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59899,"byte_end":59976,"line_start":330,"line_end":330,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59981,"byte_end":60004,"line_start":331,"line_end":331,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60009,"byte_end":60012,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60017,"byte_end":60050,"line_start":333,"line_end":333,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60055,"byte_end":60064,"line_start":334,"line_end":334,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60703,"byte_end":60708,"line_start":353,"line_end":353,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<R, T>>::write","value":"pub fn write(&Self) -> RwLockWriteGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with exclusive write access, blocking the current","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60327,"byte_end":60400,"line_start":344,"line_end":344,"column_start":5,"column_end":78}},{"value":"/ thread until it can be acquired.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60405,"byte_end":60441,"line_start":345,"line_end":345,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60446,"byte_end":60449,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ This function will not return while other writers or other readers","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60454,"byte_end":60524,"line_start":347,"line_end":347,"column_start":5,"column_end":75}},{"value":"/ currently have access to the lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60529,"byte_end":60567,"line_start":348,"line_end":348,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60572,"byte_end":60575,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access of this `RwLock`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60580,"byte_end":60655,"line_start":350,"line_end":350,"column_start":5,"column_end":80}},{"value":"/ when dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60660,"byte_end":60677,"line_start":351,"line_end":351,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60682,"byte_end":60691,"line_start":352,"line_end":352,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61207,"byte_end":61216,"line_start":367,"line_end":367,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<R, T>>::try_write","value":"pub fn try_write(&Self) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this `RwLock` with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempts to lock this `RwLock` with exclusive write access.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60882,"byte_end":60945,"line_start":359,"line_end":359,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60950,"byte_end":60953,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60958,"byte_end":61034,"line_start":361,"line_end":361,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned which will release the lock when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61039,"byte_end":61112,"line_start":362,"line_end":362,"column_start":5,"column_end":78}},{"value":"/ it is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61117,"byte_end":61135,"line_start":363,"line_end":363,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61140,"byte_end":61143,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61148,"byte_end":61181,"line_start":365,"line_end":365,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61186,"byte_end":61195,"line_start":366,"line_end":366,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61712,"byte_end":61719,"line_start":381,"line_end":381,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61464,"byte_end":61519,"line_start":376,"line_end":376,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61524,"byte_end":61527,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `RwLock` mutably, no actual locking needs to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61532,"byte_end":61608,"line_start":378,"line_end":378,"column_start":5,"column_end":81}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61613,"byte_end":61686,"line_start":379,"line_end":379,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61691,"byte_end":61700,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62326,"byte_end":62343,"line_start":397,"line_end":397,"column_start":19,"column_end":36},"name":"force_unlock_read","qualname":"<RwLock<R, T>>::force_unlock_read","value":"pub unsafe fn force_unlock_read(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61795,"byte_end":61828,"line_start":385,"line_end":385,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61833,"byte_end":61836,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61841,"byte_end":61915,"line_start":387,"line_end":387,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61920,"byte_end":61995,"line_start":388,"line_end":388,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62000,"byte_end":62021,"line_start":389,"line_end":389,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62026,"byte_end":62029,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62034,"byte_end":62046,"line_start":391,"line_end":391,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62051,"byte_end":62054,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62059,"byte_end":62133,"line_start":393,"line_end":393,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62138,"byte_end":62212,"line_start":394,"line_end":394,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62217,"byte_end":62293,"line_start":395,"line_end":395,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62298,"byte_end":62307,"line_start":396,"line_end":396,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62934,"byte_end":62952,"line_start":413,"line_end":413,"column_start":19,"column_end":37},"name":"force_unlock_write","qualname":"<RwLock<R, T>>::force_unlock_write","value":"pub unsafe fn force_unlock_write(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62398,"byte_end":62432,"line_start":401,"line_end":401,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62437,"byte_end":62440,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62445,"byte_end":62519,"line_start":403,"line_end":403,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62524,"byte_end":62600,"line_start":404,"line_end":404,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62605,"byte_end":62626,"line_start":405,"line_end":405,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62631,"byte_end":62634,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62639,"byte_end":62651,"line_start":407,"line_end":407,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62656,"byte_end":62659,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62664,"byte_end":62738,"line_start":409,"line_end":409,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62743,"byte_end":62818,"line_start":410,"line_end":410,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62823,"byte_end":62901,"line_start":411,"line_end":411,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62906,"byte_end":62915,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63418,"byte_end":63421,"line_start":427,"line_end":427,"column_start":19,"column_end":22},"name":"raw","qualname":"<RwLock<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw reader-writer lock object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw reader-writer lock object.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63010,"byte_end":63067,"line_start":417,"line_end":417,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63072,"byte_end":63075,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawRwLock` trait from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63080,"byte_end":63156,"line_start":419,"line_end":419,"column_start":5,"column_end":81}},{"value":"/ `lock_api` to be able to call functions on the raw","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63161,"byte_end":63215,"line_start":420,"line_end":420,"column_start":5,"column_end":59}},{"value":"/ reader-writer lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63220,"byte_end":63243,"line_start":421,"line_end":421,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63248,"byte_end":63251,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63256,"byte_end":63268,"line_start":423,"line_end":423,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63273,"byte_end":63276,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63281,"byte_end":63348,"line_start":425,"line_end":425,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a lock guard.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63353,"byte_end":63399,"line_start":426,"line_end":426,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64077,"byte_end":64099,"line_start":445,"line_end":445,"column_start":19,"column_end":41},"name":"force_unlock_read_fair","qualname":"<RwLock<R, T>>::force_unlock_read_fair","value":"pub unsafe fn force_unlock_read_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock using a fair unlock procotol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63517,"byte_end":63579,"line_start":433,"line_end":433,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63584,"byte_end":63587,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63592,"byte_end":63666,"line_start":435,"line_end":435,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63671,"byte_end":63746,"line_start":436,"line_end":436,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63751,"byte_end":63772,"line_start":437,"line_end":437,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63777,"byte_end":63780,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63785,"byte_end":63797,"line_start":439,"line_end":439,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63802,"byte_end":63805,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63810,"byte_end":63884,"line_start":441,"line_end":441,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63889,"byte_end":63963,"line_start":442,"line_end":442,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63968,"byte_end":64044,"line_start":443,"line_end":443,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64049,"byte_end":64058,"line_start":444,"line_end":444,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64724,"byte_end":64747,"line_start":461,"line_end":461,"column_start":19,"column_end":42},"name":"force_unlock_write_fair","qualname":"<RwLock<R, T>>::force_unlock_write_fair","value":"pub unsafe fn force_unlock_write_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock using a fair unlock procotol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64159,"byte_end":64222,"line_start":449,"line_end":449,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64227,"byte_end":64230,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64235,"byte_end":64309,"line_start":451,"line_end":451,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64314,"byte_end":64390,"line_start":452,"line_end":452,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64395,"byte_end":64416,"line_start":453,"line_end":453,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64421,"byte_end":64424,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64429,"byte_end":64441,"line_start":455,"line_end":455,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64446,"byte_end":64449,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64454,"byte_end":64528,"line_start":457,"line_end":457,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64533,"byte_end":64608,"line_start":458,"line_end":458,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64613,"byte_end":64691,"line_start":459,"line_end":459,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64696,"byte_end":64705,"line_start":460,"line_end":460,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":65199,"byte_end":65211,"line_start":474,"line_end":474,"column_start":12,"column_end":24},"name":"try_read_for","qualname":"<RwLock<R, T>>::try_read_for","value":"pub fn try_read_for(&Self, R::Duration) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64862,"byte_end":64939,"line_start":467,"line_end":467,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64944,"byte_end":64959,"line_start":468,"line_end":468,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64964,"byte_end":64967,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64972,"byte_end":65043,"line_start":470,"line_end":470,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":65048,"byte_end":65119,"line_start":471,"line_end":471,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":65124,"byte_end":65173,"line_start":472,"line_end":472,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":65178,"byte_end":65187,"line_start":473,"line_end":473,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":65824,"byte_end":65838,"line_start":490,"line_end":490,"column_start":12,"column_end":26},"name":"try_read_until","qualname":"<RwLock<R, T>>::try_read_until","value":"pub fn try_read_until(&Self, R::Instant) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":65487,"byte_end":65564,"line_start":483,"line_end":483,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":65569,"byte_end":65584,"line_start":484,"line_end":484,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":65589,"byte_end":65592,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":65597,"byte_end":65668,"line_start":486,"line_end":486,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":65673,"byte_end":65744,"line_start":487,"line_end":487,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":65749,"byte_end":65798,"line_start":488,"line_end":488,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":65803,"byte_end":65812,"line_start":489,"line_end":489,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":66459,"byte_end":66472,"line_start":506,"line_end":506,"column_start":12,"column_end":25},"name":"try_write_for","qualname":"<RwLock<R, T>>::try_write_for","value":"pub fn try_write_for(&Self, R::Duration) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":66115,"byte_end":66188,"line_start":499,"line_end":499,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":66193,"byte_end":66216,"line_start":500,"line_end":500,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":66221,"byte_end":66224,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":66229,"byte_end":66300,"line_start":502,"line_end":502,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":66305,"byte_end":66376,"line_start":503,"line_end":503,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":66381,"byte_end":66433,"line_start":504,"line_end":504,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":66438,"byte_end":66447,"line_start":505,"line_end":505,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67097,"byte_end":67112,"line_start":522,"line_end":522,"column_start":12,"column_end":27},"name":"try_write_until","qualname":"<RwLock<R, T>>::try_write_until","value":"pub fn try_write_until(&Self, R::Instant) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":66753,"byte_end":66826,"line_start":515,"line_end":515,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":66831,"byte_end":66854,"line_start":516,"line_end":516,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":66859,"byte_end":66862,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":66867,"byte_end":66938,"line_start":518,"line_end":518,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":66943,"byte_end":67014,"line_start":519,"line_end":519,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67019,"byte_end":67071,"line_start":520,"line_end":520,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67076,"byte_end":67085,"line_start":521,"line_end":521,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68243,"byte_end":68257,"line_start":549,"line_end":549,"column_start":12,"column_end":26},"name":"read_recursive","qualname":"<RwLock<R, T>>::read_recursive","value":"pub fn read_recursive(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67450,"byte_end":67526,"line_start":533,"line_end":533,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67531,"byte_end":67560,"line_start":534,"line_end":534,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67565,"byte_end":67568,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67573,"byte_end":67649,"line_start":536,"line_end":536,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67654,"byte_end":67730,"line_start":537,"line_end":537,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67735,"byte_end":67759,"line_start":538,"line_end":538,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67764,"byte_end":67767,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ Unlike `read`, this method is guaranteed to succeed without blocking if","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67772,"byte_end":67847,"line_start":540,"line_end":540,"column_start":5,"column_end":80}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67852,"byte_end":67927,"line_start":541,"line_end":541,"column_start":5,"column_end":80}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67932,"byte_end":68003,"line_start":542,"line_end":542,"column_start":5,"column_end":76}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68008,"byte_end":68082,"line_start":543,"line_end":543,"column_start":5,"column_end":79}},{"value":"/ for the lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68087,"byte_end":68104,"line_start":544,"line_end":544,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68109,"byte_end":68112,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68117,"byte_end":68189,"line_start":546,"line_end":546,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68194,"byte_end":68217,"line_start":547,"line_end":547,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68222,"byte_end":68231,"line_start":548,"line_end":548,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68941,"byte_end":68959,"line_start":566,"line_end":566,"column_start":12,"column_end":30},"name":"try_read_recursive","qualname":"<RwLock<R, T>>::try_read_recursive","value":"pub fn try_read_recursive(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68436,"byte_end":68498,"line_start":555,"line_end":555,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68503,"byte_end":68506,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68511,"byte_end":68588,"line_start":557,"line_end":557,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68593,"byte_end":68670,"line_start":558,"line_end":558,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68675,"byte_end":68698,"line_start":559,"line_end":559,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68703,"byte_end":68706,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed if another read lock is held at the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68711,"byte_end":68787,"line_start":561,"line_end":561,"column_start":5,"column_end":81}},{"value":"/ time of the call. See the documentation for `read_recursive` for details.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68792,"byte_end":68869,"line_start":562,"line_end":562,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68874,"byte_end":68877,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68882,"byte_end":68915,"line_start":564,"line_end":564,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68920,"byte_end":68929,"line_start":565,"line_end":565,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":69806,"byte_end":69828,"line_start":588,"line_end":588,"column_start":12,"column_end":34},"name":"try_read_recursive_for","qualname":"<RwLock<R, T>>::try_read_recursive_for","value":"pub fn try_read_recursive_for(&Self, R::Duration)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":69273,"byte_end":69350,"line_start":577,"line_end":577,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":69355,"byte_end":69370,"line_start":578,"line_end":578,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":69375,"byte_end":69378,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":69383,"byte_end":69454,"line_start":580,"line_end":580,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":69459,"byte_end":69530,"line_start":581,"line_end":581,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":69535,"byte_end":69584,"line_start":582,"line_end":582,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":69589,"byte_end":69592,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed without blocking if another read","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":69597,"byte_end":69670,"line_start":584,"line_end":584,"column_start":5,"column_end":78}},{"value":"/ lock is held at the time of the call. See the documentation for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":69675,"byte_end":69742,"line_start":585,"line_end":585,"column_start":5,"column_end":72}},{"value":"/ `read_recursive` for details.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":69747,"byte_end":69780,"line_start":586,"line_end":586,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":69785,"byte_end":69794,"line_start":587,"line_end":587,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":70474,"byte_end":70498,"line_start":607,"line_end":607,"column_start":12,"column_end":36},"name":"try_read_recursive_until","qualname":"<RwLock<R, T>>::try_read_recursive_until","value":"pub fn try_read_recursive_until(&Self, R::Instant)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":70137,"byte_end":70214,"line_start":600,"line_end":600,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":70219,"byte_end":70234,"line_start":601,"line_end":601,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":70239,"byte_end":70242,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":70247,"byte_end":70318,"line_start":603,"line_end":603,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":70323,"byte_end":70394,"line_start":604,"line_end":604,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":70399,"byte_end":70448,"line_start":605,"line_end":605,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":70453,"byte_end":70462,"line_start":606,"line_end":606,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":71593,"byte_end":71608,"line_start":639,"line_end":639,"column_start":12,"column_end":27},"name":"upgradable_read","qualname":"<RwLock<R, T>>::upgradable_read","value":"pub fn upgradable_read(&Self) -> RwLockUpgradableReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with upgradable read access, blocking the current thread","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":71115,"byte_end":71195,"line_start":629,"line_end":629,"column_start":5,"column_end":85}},{"value":"/ until it can be acquired.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":71200,"byte_end":71229,"line_start":630,"line_end":630,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":71234,"byte_end":71237,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers or other","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":71242,"byte_end":71321,"line_start":632,"line_end":632,"column_start":5,"column_end":84}},{"value":"/ upgradable reads which hold the lock. There may be other readers currently","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":71326,"byte_end":71404,"line_start":633,"line_end":633,"column_start":5,"column_end":83}},{"value":"/ inside the lock when this method returns.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":71409,"byte_end":71454,"line_start":634,"line_end":634,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":71459,"byte_end":71462,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":71467,"byte_end":71539,"line_start":636,"line_end":636,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":71544,"byte_end":71567,"line_start":637,"line_end":637,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":71572,"byte_end":71581,"line_start":638,"line_end":638,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72135,"byte_end":72154,"line_start":653,"line_end":653,"column_start":12,"column_end":31},"name":"try_upgradable_read","qualname":"<RwLock<R, T>>::try_upgradable_read","value":"pub fn try_upgradable_read(&Self) -> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":71797,"byte_end":71863,"line_start":645,"line_end":645,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":71868,"byte_end":71871,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":71876,"byte_end":71953,"line_start":647,"line_end":647,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":71958,"byte_end":72035,"line_start":648,"line_end":648,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72040,"byte_end":72063,"line_start":649,"line_end":649,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72068,"byte_end":72071,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72076,"byte_end":72109,"line_start":651,"line_end":651,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72114,"byte_end":72123,"line_start":652,"line_end":652,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72817,"byte_end":72840,"line_start":671,"line_end":671,"column_start":12,"column_end":35},"name":"try_upgradable_read_for","qualname":"<RwLock<R, T>>::try_upgradable_read_for","value":"pub fn try_upgradable_read_for(&Self, R::Duration)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72476,"byte_end":72557,"line_start":664,"line_end":664,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72562,"byte_end":72577,"line_start":665,"line_end":665,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72582,"byte_end":72585,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72590,"byte_end":72661,"line_start":667,"line_end":667,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72666,"byte_end":72737,"line_start":668,"line_end":668,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72742,"byte_end":72791,"line_start":669,"line_end":669,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72796,"byte_end":72805,"line_start":670,"line_end":670,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":73500,"byte_end":73525,"line_start":690,"line_end":690,"column_start":12,"column_end":37},"name":"try_upgradable_read_until","qualname":"<RwLock<R, T>>::try_upgradable_read_until","value":"pub fn try_upgradable_read_until(&Self, R::Instant)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":73159,"byte_end":73240,"line_start":683,"line_end":683,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":73245,"byte_end":73260,"line_start":684,"line_end":684,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":73265,"byte_end":73268,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":73273,"byte_end":73344,"line_start":686,"line_end":686,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":73349,"byte_end":73420,"line_start":687,"line_end":687,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":73425,"byte_end":73474,"line_start":688,"line_end":688,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":73479,"byte_end":73488,"line_start":689,"line_end":689,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":560},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":74956,"byte_end":74971,"line_start":738,"line_end":738,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":74798,"byte_end":74870,"line_start":735,"line_end":735,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":74871,"byte_end":74883,"line_start":736,"line_end":736,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":74884,"byte_end":74944,"line_start":737,"line_end":737,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75337,"byte_end":75343,"line_start":747,"line_end":747,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75259,"byte_end":75325,"line_start":746,"line_end":746,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75823,"byte_end":75826,"line_start":760,"line_end":760,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75404,"byte_end":75478,"line_start":751,"line_end":751,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75483,"byte_end":75486,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75491,"byte_end":75553,"line_start":753,"line_end":753,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75558,"byte_end":75589,"line_start":754,"line_end":754,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75594,"byte_end":75597,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75602,"byte_end":75653,"line_start":756,"line_end":756,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75658,"byte_end":75739,"line_start":757,"line_end":757,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75744,"byte_end":75797,"line_start":758,"line_end":758,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75802,"byte_end":75811,"line_start":759,"line_end":759,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":76625,"byte_end":76632,"line_start":780,"line_end":780,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":76125,"byte_end":76199,"line_start":770,"line_end":770,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":76204,"byte_end":76280,"line_start":771,"line_end":771,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":76285,"byte_end":76288,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":76293,"byte_end":76355,"line_start":773,"line_end":773,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":76360,"byte_end":76391,"line_start":774,"line_end":774,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":76396,"byte_end":76399,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":76404,"byte_end":76455,"line_start":776,"line_end":776,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":76460,"byte_end":76541,"line_start":777,"line_end":777,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":76546,"byte_end":76599,"line_start":778,"line_end":778,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":76604,"byte_end":76613,"line_start":779,"line_end":779,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77339,"byte_end":77347,"line_start":800,"line_end":800,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77042,"byte_end":77109,"line_start":793,"line_end":793,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77114,"byte_end":77117,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77122,"byte_end":77174,"line_start":795,"line_end":795,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77179,"byte_end":77182,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77187,"byte_end":77255,"line_start":797,"line_end":797,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77260,"byte_end":77313,"line_start":798,"line_end":798,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77318,"byte_end":77327,"line_start":799,"line_end":799,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78405,"byte_end":78416,"line_start":824,"line_end":824,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77604,"byte_end":77658,"line_start":811,"line_end":811,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77663,"byte_end":77666,"line_start":812,"line_end":812,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77671,"byte_end":77745,"line_start":813,"line_end":813,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77750,"byte_end":77825,"line_start":814,"line_end":814,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77830,"byte_end":77903,"line_start":815,"line_end":815,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77908,"byte_end":77977,"line_start":816,"line_end":816,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77982,"byte_end":78059,"line_start":817,"line_end":817,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78064,"byte_end":78131,"line_start":818,"line_end":818,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78136,"byte_end":78139,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78144,"byte_end":78220,"line_start":820,"line_end":820,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78225,"byte_end":78301,"line_start":821,"line_end":821,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockReadGuard` normally.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78306,"byte_end":78379,"line_start":822,"line_end":822,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78384,"byte_end":78393,"line_start":823,"line_end":823,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78803,"byte_end":78816,"line_start":836,"line_end":836,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78506,"byte_end":78573,"line_start":829,"line_end":829,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78578,"byte_end":78581,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78586,"byte_end":78638,"line_start":831,"line_end":831,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78643,"byte_end":78646,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78651,"byte_end":78719,"line_start":833,"line_end":833,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78724,"byte_end":78777,"line_start":834,"line_end":834,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78782,"byte_end":78791,"line_start":835,"line_end":835,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79300,"byte_end":79304,"line_start":851,"line_end":851,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79000,"byte_end":79072,"line_start":845,"line_end":845,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79077,"byte_end":79080,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79085,"byte_end":79161,"line_start":847,"line_end":847,"column_start":5,"column_end":81}},{"value":"/ by `read`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79166,"byte_end":79242,"line_start":848,"line_end":848,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79247,"byte_end":79274,"line_start":849,"line_end":849,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79279,"byte_end":79288,"line_start":850,"line_end":850,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":614},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80438,"byte_end":80454,"line_start":891,"line_end":891,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80276,"byte_end":80352,"line_start":888,"line_end":888,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80353,"byte_end":80365,"line_start":889,"line_end":889,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80366,"byte_end":80426,"line_start":890,"line_end":890,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80826,"byte_end":80832,"line_start":900,"line_end":900,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockWriteGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80748,"byte_end":80814,"line_start":899,"line_end":899,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":81315,"byte_end":81318,"line_start":913,"line_end":913,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80893,"byte_end":80968,"line_start":904,"line_end":904,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80973,"byte_end":80976,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80981,"byte_end":81044,"line_start":906,"line_end":906,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":81049,"byte_end":81080,"line_start":907,"line_end":907,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":81085,"byte_end":81088,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":81093,"byte_end":81144,"line_start":909,"line_end":909,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":81149,"byte_end":81231,"line_start":910,"line_end":910,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":81236,"byte_end":81289,"line_start":911,"line_end":911,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":81294,"byte_end":81303,"line_start":912,"line_end":912,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":82134,"byte_end":82141,"line_start":933,"line_end":933,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":81631,"byte_end":81706,"line_start":923,"line_end":923,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":81711,"byte_end":81787,"line_start":924,"line_end":924,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":81792,"byte_end":81795,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":81800,"byte_end":81863,"line_start":926,"line_end":926,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":81868,"byte_end":81899,"line_start":927,"line_end":927,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":81904,"byte_end":81907,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":81912,"byte_end":81963,"line_start":929,"line_end":929,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":81968,"byte_end":82050,"line_start":930,"line_end":930,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":82055,"byte_end":82108,"line_start":931,"line_end":931,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":82113,"byte_end":82122,"line_start":932,"line_end":932,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":82797,"byte_end":82805,"line_start":951,"line_end":951,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockWriteGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":82565,"byte_end":82632,"line_start":946,"line_end":946,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":82637,"byte_end":82640,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":82645,"byte_end":82713,"line_start":948,"line_end":948,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":82718,"byte_end":82771,"line_start":949,"line_end":949,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":82776,"byte_end":82785,"line_start":950,"line_end":950,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83416,"byte_end":83425,"line_start":968,"line_end":968,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83074,"byte_end":83150,"line_start":962,"line_end":962,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83155,"byte_end":83220,"line_start":963,"line_end":963,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83225,"byte_end":83228,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83233,"byte_end":83306,"line_start":965,"line_end":965,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83311,"byte_end":83384,"line_start":966,"line_end":966,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83389,"byte_end":83404,"line_start":967,"line_end":967,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":84067,"byte_end":84090,"line_start":983,"line_end":983,"column_start":12,"column_end":35},"name":"downgrade_to_upgradable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradable","value":"pub fn downgrade_to_upgradable(Self) -> RwLockUpgradableReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into an upgradable read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into an upgradable read lock without allowing any","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83713,"byte_end":83801,"line_start":977,"line_end":977,"column_start":5,"column_end":93}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83806,"byte_end":83871,"line_start":978,"line_end":978,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83876,"byte_end":83879,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83884,"byte_end":83957,"line_start":980,"line_end":980,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83962,"byte_end":84035,"line_start":981,"line_end":981,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":84040,"byte_end":84055,"line_start":982,"line_end":982,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85202,"byte_end":85213,"line_start":1005,"line_end":1005,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":84400,"byte_end":84454,"line_start":992,"line_end":992,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":84459,"byte_end":84462,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":84467,"byte_end":84541,"line_start":994,"line_end":994,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":84546,"byte_end":84621,"line_start":995,"line_end":995,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":84626,"byte_end":84699,"line_start":996,"line_end":996,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":84704,"byte_end":84773,"line_start":997,"line_end":997,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":84778,"byte_end":84855,"line_start":998,"line_end":998,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":84860,"byte_end":84927,"line_start":999,"line_end":999,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":84932,"byte_end":84935,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":84940,"byte_end":85016,"line_start":1001,"line_end":1001,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85021,"byte_end":85097,"line_start":1002,"line_end":1002,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockWriteGuard` normally.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85102,"byte_end":85176,"line_start":1003,"line_end":1003,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85181,"byte_end":85190,"line_start":1004,"line_end":1004,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85603,"byte_end":85616,"line_start":1017,"line_end":1017,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockWriteGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85306,"byte_end":85373,"line_start":1010,"line_end":1010,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85378,"byte_end":85381,"line_start":1011,"line_end":1011,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85386,"byte_end":85438,"line_start":1012,"line_end":1012,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85443,"byte_end":85446,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85451,"byte_end":85519,"line_start":1014,"line_end":1014,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85524,"byte_end":85577,"line_start":1015,"line_end":1015,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85582,"byte_end":85591,"line_start":1016,"line_end":1016,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86107,"byte_end":86111,"line_start":1032,"line_end":1032,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockWriteGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85806,"byte_end":85878,"line_start":1026,"line_end":1026,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85883,"byte_end":85886,"line_start":1027,"line_end":1027,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85891,"byte_end":85967,"line_start":1028,"line_end":1028,"column_start":5,"column_end":81}},{"value":"/ by `write`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85972,"byte_end":86049,"line_start":1029,"line_end":1029,"column_start":5,"column_end":82}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86054,"byte_end":86081,"line_start":1030,"line_end":1030,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86086,"byte_end":86095,"line_start":1031,"line_end":1031,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":683},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87453,"byte_end":87478,"line_start":1079,"line_end":1079,"column_start":12,"column_end":37},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"RwLockUpgradableReadGuard {  }","parent":null,"children":[{"krate":0,"index":687},{"krate":0,"index":688}],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the upgradable read access of a lock when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87291,"byte_end":87367,"line_start":1076,"line_end":1076,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87368,"byte_end":87380,"line_start":1077,"line_end":1077,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87381,"byte_end":87441,"line_start":1078,"line_end":1078,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87890,"byte_end":87896,"line_start":1091,"line_end":1091,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockUpgradableReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87812,"byte_end":87878,"line_start":1090,"line_end":1090,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":88189,"byte_end":88197,"line_start":1100,"line_end":1100,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockUpgradableReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87957,"byte_end":88024,"line_start":1095,"line_end":1095,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":88029,"byte_end":88032,"line_start":1096,"line_end":1096,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":88037,"byte_end":88105,"line_start":1097,"line_end":1097,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":88110,"byte_end":88163,"line_start":1098,"line_end":1098,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":88168,"byte_end":88177,"line_start":1099,"line_end":1099,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":88539,"byte_end":88546,"line_start":1111,"line_end":1111,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableReadGuard>::upgrade","value":"pub fn upgrade(Self) -> RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically upgrades an upgradable read lock lock into a exclusive write lock,\n blocking the current thread until it can be acquired.\n","sig":null,"attributes":[{"value":"/ Atomically upgrades an upgradable read lock lock into a exclusive write lock,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":88384,"byte_end":88465,"line_start":1109,"line_end":1109,"column_start":5,"column_end":86}},{"value":"/ blocking the current thread until it can be acquired.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":88470,"byte_end":88527,"line_start":1110,"line_end":1110,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":88940,"byte_end":88951,"line_start":1121,"line_end":1121,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableReadGuard>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":88743,"byte_end":88827,"line_start":1118,"line_end":1118,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":88832,"byte_end":88835,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then the current guard is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":88840,"byte_end":88928,"line_start":1120,"line_end":1120,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90138,"byte_end":90149,"line_start":1146,"line_end":1146,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockUpgradableReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":89327,"byte_end":89381,"line_start":1133,"line_end":1133,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":89386,"byte_end":89389,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":89394,"byte_end":89468,"line_start":1135,"line_end":1135,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":89473,"byte_end":89548,"line_start":1136,"line_end":1136,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":89553,"byte_end":89626,"line_start":1137,"line_end":1137,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":89631,"byte_end":89700,"line_start":1138,"line_end":1138,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":89705,"byte_end":89782,"line_start":1139,"line_end":1139,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":89787,"byte_end":89854,"line_start":1140,"line_end":1140,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":89859,"byte_end":89862,"line_start":1141,"line_end":1141,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":89867,"byte_end":89943,"line_start":1142,"line_end":1142,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":89948,"byte_end":90024,"line_start":1143,"line_end":1143,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockUpgradableReadGuard` normally.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90029,"byte_end":90112,"line_start":1144,"line_end":1144,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90117,"byte_end":90126,"line_start":1145,"line_end":1145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90540,"byte_end":90553,"line_start":1158,"line_end":1158,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockUpgradableReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90243,"byte_end":90310,"line_start":1151,"line_end":1151,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90315,"byte_end":90318,"line_start":1152,"line_end":1152,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90323,"byte_end":90375,"line_start":1153,"line_end":1153,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90380,"byte_end":90383,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90388,"byte_end":90456,"line_start":1155,"line_end":1155,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90461,"byte_end":90514,"line_start":1156,"line_end":1156,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90519,"byte_end":90528,"line_start":1157,"line_end":1157,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91056,"byte_end":91060,"line_start":1173,"line_end":1173,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockUpgradableReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90745,"byte_end":90817,"line_start":1167,"line_end":1167,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90822,"byte_end":90825,"line_start":1168,"line_end":1168,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90830,"byte_end":90906,"line_start":1169,"line_end":1169,"column_start":5,"column_end":81}},{"value":"/ by `upgradable_read`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90911,"byte_end":90998,"line_start":1170,"line_end":1170,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91003,"byte_end":91030,"line_start":1171,"line_end":1171,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91035,"byte_end":91044,"line_start":1172,"line_end":1172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91601,"byte_end":91610,"line_start":1186,"line_end":1186,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableReadGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in the\n meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an upgradable read lock lock into a shared read lock","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91228,"byte_end":91306,"line_start":1179,"line_end":1179,"column_start":5,"column_end":83}},{"value":"/ without allowing any writers to take exclusive access of the lock in the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91311,"byte_end":91387,"line_start":1180,"line_end":1180,"column_start":5,"column_end":81}},{"value":"/ meantime.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91392,"byte_end":91405,"line_start":1181,"line_end":1181,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91410,"byte_end":91413,"line_start":1182,"line_end":1182,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91418,"byte_end":91491,"line_start":1183,"line_end":1183,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91496,"byte_end":91569,"line_start":1184,"line_end":1184,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91574,"byte_end":91589,"line_start":1185,"line_end":1185,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":92169,"byte_end":92184,"line_start":1200,"line_end":1200,"column_start":12,"column_end":27},"name":"try_upgrade_for","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_for","value":"pub fn try_upgrade_for(Self, R::Duration) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91914,"byte_end":91986,"line_start":1195,"line_end":1195,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91991,"byte_end":92034,"line_start":1196,"line_end":1196,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":92039,"byte_end":92042,"line_start":1197,"line_end":1197,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":92047,"byte_end":92118,"line_start":1198,"line_end":1198,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":92123,"byte_end":92157,"line_start":1199,"line_end":1199,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":92790,"byte_end":92807,"line_start":1219,"line_end":1219,"column_start":12,"column_end":29},"name":"try_upgrade_until","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_until","value":"pub fn try_upgrade_until(Self, R::Instant) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":92521,"byte_end":92593,"line_start":1213,"line_end":1213,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":92598,"byte_end":92641,"line_start":1214,"line_end":1214,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":92646,"byte_end":92649,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":92654,"byte_end":92725,"line_start":1216,"line_end":1216,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":92730,"byte_end":92764,"line_start":1217,"line_end":1217,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":92769,"byte_end":92778,"line_start":1218,"line_end":1218,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":744},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94607,"byte_end":94628,"line_start":1278,"line_end":1278,"column_start":12,"column_end":33},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"MappedRwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750}],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94151,"byte_end":94235,"line_start":1270,"line_end":1270,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94236,"byte_end":94271,"line_start":1271,"line_end":1271,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94272,"byte_end":94275,"line_start":1272,"line_end":1272,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94276,"byte_end":94365,"line_start":1273,"line_end":1273,"column_start":1,"column_end":90}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94366,"byte_end":94441,"line_start":1274,"line_end":1274,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94442,"byte_end":94522,"line_start":1275,"line_end":1275,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94523,"byte_end":94534,"line_start":1276,"line_end":1276,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94535,"byte_end":94595,"line_start":1277,"line_end":1277,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95474,"byte_end":95477,"line_start":1300,"line_end":1300,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95043,"byte_end":95117,"line_start":1291,"line_end":1291,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95122,"byte_end":95125,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95130,"byte_end":95198,"line_start":1293,"line_end":1293,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95203,"byte_end":95234,"line_start":1294,"line_end":1294,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95239,"byte_end":95242,"line_start":1295,"line_end":1295,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95247,"byte_end":95298,"line_start":1296,"line_end":1296,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95303,"byte_end":95390,"line_start":1297,"line_end":1297,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95395,"byte_end":95448,"line_start":1298,"line_end":1298,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95453,"byte_end":95462,"line_start":1299,"line_end":1299,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":96267,"byte_end":96274,"line_start":1320,"line_end":1320,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95755,"byte_end":95829,"line_start":1310,"line_end":1310,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95834,"byte_end":95910,"line_start":1311,"line_end":1311,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95915,"byte_end":95918,"line_start":1312,"line_end":1312,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95923,"byte_end":95991,"line_start":1313,"line_end":1313,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95996,"byte_end":96027,"line_start":1314,"line_end":1314,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":96032,"byte_end":96035,"line_start":1315,"line_end":1315,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":96040,"byte_end":96091,"line_start":1316,"line_end":1316,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":96096,"byte_end":96183,"line_start":1317,"line_end":1317,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":96188,"byte_end":96241,"line_start":1318,"line_end":1318,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":96246,"byte_end":96255,"line_start":1319,"line_end":1319,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97554,"byte_end":97565,"line_start":1348,"line_end":1348,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":96747,"byte_end":96801,"line_start":1335,"line_end":1335,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":96806,"byte_end":96809,"line_start":1336,"line_end":1336,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":96814,"byte_end":96888,"line_start":1337,"line_end":1337,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":96893,"byte_end":96968,"line_start":1338,"line_end":1338,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":96973,"byte_end":97046,"line_start":1339,"line_end":1339,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97051,"byte_end":97120,"line_start":1340,"line_end":1340,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97125,"byte_end":97202,"line_start":1341,"line_end":1341,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97207,"byte_end":97274,"line_start":1342,"line_end":1342,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97279,"byte_end":97282,"line_start":1343,"line_end":1343,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97287,"byte_end":97363,"line_start":1344,"line_end":1344,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97368,"byte_end":97444,"line_start":1345,"line_end":1345,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockReadGuard` normally.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97449,"byte_end":97528,"line_start":1346,"line_end":1346,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97533,"byte_end":97542,"line_start":1347,"line_end":1347,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":795},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99035,"byte_end":99057,"line_start":1399,"line_end":1399,"column_start":12,"column_end":34},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"MappedRwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801}],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":98575,"byte_end":98661,"line_start":1391,"line_end":1391,"column_start":1,"column_end":87}},{"value":"/ subfield of the protected data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":98662,"byte_end":98697,"line_start":1392,"line_end":1392,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":98698,"byte_end":98701,"line_start":1393,"line_end":1393,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":98702,"byte_end":98793,"line_start":1394,"line_end":1394,"column_start":1,"column_end":92}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":98794,"byte_end":98869,"line_start":1395,"line_end":1395,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":98870,"byte_end":98950,"line_start":1396,"line_end":1396,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":98951,"byte_end":98962,"line_start":1397,"line_end":1397,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":98963,"byte_end":99023,"line_start":1398,"line_end":1398,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99916,"byte_end":99919,"line_start":1424,"line_end":1424,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99482,"byte_end":99557,"line_start":1415,"line_end":1415,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99562,"byte_end":99565,"line_start":1416,"line_end":1416,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99570,"byte_end":99639,"line_start":1417,"line_end":1417,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99644,"byte_end":99675,"line_start":1418,"line_end":1418,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99680,"byte_end":99683,"line_start":1419,"line_end":1419,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99688,"byte_end":99739,"line_start":1420,"line_end":1420,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99744,"byte_end":99832,"line_start":1421,"line_end":1421,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99837,"byte_end":99890,"line_start":1422,"line_end":1422,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99895,"byte_end":99904,"line_start":1423,"line_end":1423,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":100726,"byte_end":100733,"line_start":1444,"line_end":1444,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":100211,"byte_end":100286,"line_start":1434,"line_end":1434,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":100291,"byte_end":100367,"line_start":1435,"line_end":1435,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":100372,"byte_end":100375,"line_start":1436,"line_end":1436,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":100380,"byte_end":100449,"line_start":1437,"line_end":1437,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":100454,"byte_end":100485,"line_start":1438,"line_end":1438,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":100490,"byte_end":100493,"line_start":1439,"line_end":1439,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":100498,"byte_end":100549,"line_start":1440,"line_end":1440,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":100554,"byte_end":100642,"line_start":1441,"line_end":1441,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":100647,"byte_end":100700,"line_start":1442,"line_end":1442,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":100705,"byte_end":100714,"line_start":1443,"line_end":1443,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101568,"byte_end":101577,"line_start":1465,"line_end":1465,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<MappedRwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> MappedRwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101226,"byte_end":101302,"line_start":1459,"line_end":1459,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101307,"byte_end":101372,"line_start":1460,"line_end":1460,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101377,"byte_end":101380,"line_start":1461,"line_end":1461,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101385,"byte_end":101458,"line_start":1462,"line_end":1462,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101463,"byte_end":101536,"line_start":1463,"line_end":1463,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101541,"byte_end":101556,"line_start":1464,"line_end":1464,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":102696,"byte_end":102707,"line_start":1488,"line_end":1488,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101888,"byte_end":101942,"line_start":1475,"line_end":1475,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101947,"byte_end":101950,"line_start":1476,"line_end":1476,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101955,"byte_end":102029,"line_start":1477,"line_end":1477,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":102034,"byte_end":102109,"line_start":1478,"line_end":1478,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":102114,"byte_end":102187,"line_start":1479,"line_end":1479,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":102192,"byte_end":102261,"line_start":1480,"line_end":1480,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":102266,"byte_end":102343,"line_start":1481,"line_end":1481,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":102348,"byte_end":102415,"line_start":1482,"line_end":1482,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":102420,"byte_end":102423,"line_start":1483,"line_end":1483,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":102428,"byte_end":102504,"line_start":1484,"line_end":1484,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":102509,"byte_end":102585,"line_start":1485,"line_end":1485,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockWriteGuard` normally.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":102590,"byte_end":102670,"line_start":1486,"line_end":1486,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":102675,"byte_end":102684,"line_start":1487,"line_end":1487,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8156,"byte_end":8161,"line_start":128,"line_end":128,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8230,"byte_end":8235,"line_start":129,"line_end":129,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8267,"byte_end":8272,"line_start":131,"line_end":131,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8941,"byte_end":8946,"line_start":154,"line_end":154,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11766,"byte_end":11771,"line_start":236,"line_end":236,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12423,"byte_end":12428,"line_start":254,"line_end":254,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13629,"byte_end":13634,"line_start":286,"line_end":286,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13772,"byte_end":13777,"line_start":293,"line_end":293,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13923,"byte_end":13928,"line_start":300,"line_end":300,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":14217,"byte_end":14234,"line_start":306,"line_end":306,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15060,"byte_end":15070,"line_start":329,"line_end":329,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15128,"byte_end":15138,"line_start":331,"line_end":331,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17339,"byte_end":17349,"line_start":394,"line_end":394,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19117,"byte_end":19127,"line_start":440,"line_end":440,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19311,"byte_end":19321,"line_start":448,"line_end":448,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19496,"byte_end":19506,"line_start":455,"line_end":455,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19671,"byte_end":19681,"line_start":462,"line_end":462,"column_start":72,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19877,"byte_end":19887,"line_start":468,"line_end":468,"column_start":76,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20753,"byte_end":20769,"line_start":492,"line_end":492,"column_start":9,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20843,"byte_end":20859,"line_start":495,"line_end":495,"column_start":60,"column_end":76},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20949,"byte_end":20965,"line_start":500,"line_end":500,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":22624,"byte_end":22640,"line_start":544,"line_end":544,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23576,"byte_end":23592,"line_start":564,"line_end":564,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23764,"byte_end":23780,"line_start":572,"line_end":572,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23943,"byte_end":23959,"line_start":579,"line_end":579,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":24118,"byte_end":24134,"line_start":586,"line_end":586,"column_start":72,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":24334,"byte_end":24350,"line_start":593,"line_end":593,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":26121,"byte_end":26138,"line_start":54,"line_end":54,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":27304,"byte_end":27321,"line_start":97,"line_end":97,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":27927,"byte_end":27944,"line_start":119,"line_end":119,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":29630,"byte_end":29644,"line_start":179,"line_end":179,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":29744,"byte_end":29758,"line_start":183,"line_end":183,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":29810,"byte_end":29824,"line_start":187,"line_end":187,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":31008,"byte_end":31022,"line_start":226,"line_end":226,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34052,"byte_end":34066,"line_start":309,"line_end":309,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34755,"byte_end":34769,"line_start":327,"line_end":327,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":36013,"byte_end":36027,"line_start":359,"line_end":359,"column_start":68,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":36205,"byte_end":36219,"line_start":366,"line_end":366,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":36405,"byte_end":36419,"line_start":373,"line_end":373,"column_start":74,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":36720,"byte_end":36737,"line_start":379,"line_end":379,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37639,"byte_end":37658,"line_start":403,"line_end":403,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37741,"byte_end":37760,"line_start":407,"line_end":407,"column_start":65,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":331},{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40133,"byte_end":40152,"line_start":474,"line_end":474,"column_start":5,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41965,"byte_end":41984,"line_start":522,"line_end":522,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":42194,"byte_end":42213,"line_start":532,"line_end":532,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":42408,"byte_end":42427,"line_start":541,"line_end":541,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":42651,"byte_end":42670,"line_start":549,"line_end":549,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43686,"byte_end":43711,"line_start":577,"line_end":577,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43798,"byte_end":43823,"line_start":582,"line_end":582,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":45605,"byte_end":45630,"line_start":631,"line_end":631,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":46603,"byte_end":46628,"line_start":653,"line_end":653,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":46824,"byte_end":46849,"line_start":663,"line_end":663,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":47036,"byte_end":47061,"line_start":672,"line_end":672,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":47285,"byte_end":47310,"line_start":680,"line_end":680,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":57672,"byte_end":57678,"line_start":265,"line_end":265,"column_start":61,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":57755,"byte_end":57761,"line_start":266,"line_end":266,"column_start":68,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":57794,"byte_end":57800,"line_start":268,"line_end":268,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":496},{"krate":0,"index":497}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58485,"byte_end":58491,"line_start":291,"line_end":291,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63498,"byte_end":63504,"line_start":432,"line_end":432,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64843,"byte_end":64849,"line_start":466,"line_end":466,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67431,"byte_end":67437,"line_start":532,"line_end":532,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":69254,"byte_end":69260,"line_start":576,"line_end":576,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":70843,"byte_end":70849,"line_start":620,"line_end":620,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72457,"byte_end":72463,"line_start":663,"line_end":663,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":73895,"byte_end":73901,"line_start":703,"line_end":703,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":74042,"byte_end":74048,"line_start":710,"line_end":710,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":74197,"byte_end":74203,"line_start":717,"line_end":717,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":74493,"byte_end":74510,"line_start":723,"line_end":723,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75153,"byte_end":75168,"line_start":743,"line_end":743,"column_start":68,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75227,"byte_end":75242,"line_start":745,"line_end":745,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":578},{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77572,"byte_end":77587,"line_start":810,"line_end":810,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79420,"byte_end":79435,"line_start":856,"line_end":856,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79617,"byte_end":79632,"line_start":864,"line_end":864,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79806,"byte_end":79821,"line_start":871,"line_end":871,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80022,"byte_end":80037,"line_start":878,"line_end":878,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80640,"byte_end":80656,"line_start":896,"line_end":896,"column_start":68,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80715,"byte_end":80731,"line_start":898,"line_end":898,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":632},{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83041,"byte_end":83057,"line_start":961,"line_end":961,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83680,"byte_end":83696,"line_start":976,"line_end":976,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":647}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":84367,"byte_end":84383,"line_start":991,"line_end":991,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86230,"byte_end":86246,"line_start":1037,"line_end":1037,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":661},{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86432,"byte_end":86448,"line_start":1045,"line_end":1045,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86625,"byte_end":86641,"line_start":1052,"line_end":1052,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86818,"byte_end":86834,"line_start":1059,"line_end":1059,"column_start":73,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87035,"byte_end":87051,"line_start":1066,"line_end":1066,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87678,"byte_end":87703,"line_start":1085,"line_end":1085,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87770,"byte_end":87795,"line_start":1089,"line_end":1089,"column_start":52,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":701},{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":89285,"byte_end":89310,"line_start":1132,"line_end":1132,"column_start":56,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91186,"byte_end":91211,"line_start":1178,"line_end":1178,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91872,"byte_end":91897,"line_start":1194,"line_end":1194,"column_start":57,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":93204,"byte_end":93229,"line_start":1233,"line_end":1233,"column_start":62,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":728}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":93418,"byte_end":93443,"line_start":1241,"line_end":1241,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":733}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":93632,"byte_end":93657,"line_start":1249,"line_end":1249,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":93865,"byte_end":93890,"line_start":1257,"line_end":1257,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94798,"byte_end":94819,"line_start":1284,"line_end":1284,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94893,"byte_end":94914,"line_start":1285,"line_end":1285,"column_start":61,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95005,"byte_end":95026,"line_start":1290,"line_end":1290,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":763},{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":96709,"byte_end":96730,"line_start":1334,"line_end":1334,"column_start":49,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":773}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97700,"byte_end":97721,"line_start":1354,"line_end":1354,"column_start":55,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":778},{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97890,"byte_end":97911,"line_start":1362,"line_end":1362,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":98082,"byte_end":98103,"line_start":1370,"line_end":1370,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":789}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":98304,"byte_end":98325,"line_start":1378,"line_end":1378,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":794}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99233,"byte_end":99255,"line_start":1406,"line_end":1406,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99330,"byte_end":99352,"line_start":1409,"line_end":1409,"column_start":61,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99443,"byte_end":99465,"line_start":1414,"line_end":1414,"column_start":45,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":814},{"krate":0,"index":817}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101187,"byte_end":101209,"line_start":1458,"line_end":1458,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101849,"byte_end":101871,"line_start":1474,"line_end":1474,"column_start":49,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":102845,"byte_end":102867,"line_start":1494,"line_end":1494,"column_start":55,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":834},{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":103040,"byte_end":103062,"line_start":1502,"line_end":1502,"column_start":58,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":103226,"byte_end":103248,"line_start":1509,"line_end":1509,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":103422,"byte_end":103444,"line_start":1517,"line_end":1517,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":103645,"byte_end":103667,"line_start":1525,"line_end":1525,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5790,"byte_end":5798,"line_start":53,"line_end":53,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":19},"to":{"krate":0,"index":25}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6486,"byte_end":6494,"line_start":72,"line_end":72,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":19},"to":{"krate":0,"index":28}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8156,"byte_end":8161,"line_start":128,"line_end":128,"column_start":60,"column_end":65},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8230,"byte_end":8235,"line_start":129,"line_end":129,"column_start":60,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8267,"byte_end":8272,"line_start":131,"line_end":131,"column_start":22,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8941,"byte_end":8946,"line_start":154,"line_end":154,"column_start":30,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11766,"byte_end":11771,"line_start":236,"line_end":236,"column_start":34,"column_end":39},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12423,"byte_end":12428,"line_start":254,"line_end":254,"column_start":35,"column_end":40},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13629,"byte_end":13634,"line_start":286,"line_end":286,"column_start":52,"column_end":57},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13772,"byte_end":13777,"line_start":293,"line_end":293,"column_start":34,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13923,"byte_end":13928,"line_start":300,"line_end":300,"column_start":58,"column_end":63},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":14217,"byte_end":14234,"line_start":306,"line_end":306,"column_start":37,"column_end":54},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":79},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15060,"byte_end":15070,"line_start":329,"line_end":329,"column_start":74,"column_end":84},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15128,"byte_end":15138,"line_start":331,"line_end":331,"column_start":44,"column_end":54},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":83},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17339,"byte_end":17349,"line_start":394,"line_end":394,"column_start":48,"column_end":58},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":83},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19117,"byte_end":19127,"line_start":440,"line_end":440,"column_start":54,"column_end":64},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":2242}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19311,"byte_end":19321,"line_start":448,"line_end":448,"column_start":57,"column_end":67},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":2255}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19496,"byte_end":19506,"line_start":455,"line_end":455,"column_start":53,"column_end":63},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":2266}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19671,"byte_end":19681,"line_start":462,"line_end":462,"column_start":72,"column_end":82},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19877,"byte_end":19887,"line_start":468,"line_end":468,"column_start":76,"column_end":86},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20753,"byte_end":20769,"line_start":492,"line_end":492,"column_start":9,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20843,"byte_end":20859,"line_start":495,"line_end":495,"column_start":60,"column_end":76},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20949,"byte_end":20965,"line_start":500,"line_end":500,"column_start":44,"column_end":60},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":22624,"byte_end":22640,"line_start":544,"line_end":544,"column_start":48,"column_end":64},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23576,"byte_end":23592,"line_start":564,"line_end":564,"column_start":54,"column_end":70},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":2242}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23764,"byte_end":23780,"line_start":572,"line_end":572,"column_start":57,"column_end":73},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":2255}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23943,"byte_end":23959,"line_start":579,"line_end":579,"column_start":53,"column_end":69},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":2266}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":24118,"byte_end":24134,"line_start":586,"line_end":586,"column_start":72,"column_end":88},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":24334,"byte_end":24350,"line_start":593,"line_end":593,"column_start":9,"column_end":25},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":26121,"byte_end":26138,"line_start":54,"line_end":54,"column_start":35,"column_end":52},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":27304,"byte_end":27321,"line_start":97,"line_end":97,"column_start":39,"column_end":56},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":27927,"byte_end":27944,"line_start":119,"line_end":119,"column_start":40,"column_end":57},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":29630,"byte_end":29644,"line_start":179,"line_end":179,"column_start":9,"column_end":23},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":250},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":29744,"byte_end":29758,"line_start":183,"line_end":183,"column_start":9,"column_end":23},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":250},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":29810,"byte_end":29824,"line_start":187,"line_end":187,"column_start":38,"column_end":52},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":31008,"byte_end":31022,"line_start":226,"line_end":226,"column_start":46,"column_end":60},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34052,"byte_end":34066,"line_start":309,"line_end":309,"column_start":50,"column_end":64},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34755,"byte_end":34769,"line_start":327,"line_end":327,"column_start":51,"column_end":65},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":36013,"byte_end":36027,"line_start":359,"line_end":359,"column_start":68,"column_end":82},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":250},"to":{"krate":1,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":36205,"byte_end":36219,"line_start":366,"line_end":366,"column_start":50,"column_end":64},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":250},"to":{"krate":1,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":36405,"byte_end":36419,"line_start":373,"line_end":373,"column_start":74,"column_end":88},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":250},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":36720,"byte_end":36737,"line_start":379,"line_end":379,"column_start":37,"column_end":54},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":306},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37639,"byte_end":37658,"line_start":403,"line_end":403,"column_start":9,"column_end":28},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37741,"byte_end":37760,"line_start":407,"line_end":407,"column_start":65,"column_end":84},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40133,"byte_end":40152,"line_start":474,"line_end":474,"column_start":5,"column_end":24},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41965,"byte_end":41984,"line_start":522,"line_end":522,"column_start":9,"column_end":28},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":2242}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":42194,"byte_end":42213,"line_start":532,"line_end":532,"column_start":9,"column_end":28},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":2266}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":42408,"byte_end":42427,"line_start":541,"line_end":541,"column_start":9,"column_end":28},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":42651,"byte_end":42670,"line_start":549,"line_end":549,"column_start":9,"column_end":28},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43686,"byte_end":43711,"line_start":577,"line_end":577,"column_start":9,"column_end":34},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43798,"byte_end":43823,"line_start":582,"line_end":582,"column_start":5,"column_end":30},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":45605,"byte_end":45630,"line_start":631,"line_end":631,"column_start":5,"column_end":30},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":46603,"byte_end":46628,"line_start":653,"line_end":653,"column_start":9,"column_end":34},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":2242}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":46824,"byte_end":46849,"line_start":663,"line_end":663,"column_start":9,"column_end":34},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":2266}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":47036,"byte_end":47061,"line_start":672,"line_end":672,"column_start":9,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":47285,"byte_end":47310,"line_start":680,"line_end":680,"column_start":9,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49872,"byte_end":49881,"line_start":64,"line_end":64,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":436},"to":{"krate":0,"index":445}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51037,"byte_end":51046,"line_start":94,"line_end":94,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":436},"to":{"krate":0,"index":450}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51469,"byte_end":51478,"line_start":104,"line_end":104,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":436},"to":{"krate":0,"index":452}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52598,"byte_end":52607,"line_start":131,"line_end":131,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":436},"to":{"krate":0,"index":459}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52997,"byte_end":53015,"line_start":140,"line_end":140,"column_start":43,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":459},"to":{"krate":0,"index":462}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53018,"byte_end":53032,"line_start":140,"line_end":140,"column_start":64,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":452},"to":{"krate":0,"index":462}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53800,"byte_end":53809,"line_start":156,"line_end":156,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":436},"to":{"krate":0,"index":465}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54459,"byte_end":54475,"line_start":176,"line_end":176,"column_start":40,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":465},"to":{"krate":0,"index":471}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54478,"byte_end":54491,"line_start":176,"line_end":176,"column_start":59,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":445},"to":{"krate":0,"index":471}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55154,"byte_end":55170,"line_start":193,"line_end":193,"column_start":45,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":465},"to":{"krate":0,"index":474}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55173,"byte_end":55191,"line_start":193,"line_end":193,"column_start":64,"column_end":82},"kind":"SuperTrait","from":{"krate":0,"index":450},"to":{"krate":0,"index":474}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55526,"byte_end":55542,"line_start":203,"line_end":203,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":465},"to":{"krate":0,"index":477}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55545,"byte_end":55559,"line_start":203,"line_end":203,"column_start":60,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":452},"to":{"krate":0,"index":477}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":57672,"byte_end":57678,"line_start":265,"line_end":265,"column_start":61,"column_end":67},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":482},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":57755,"byte_end":57761,"line_start":266,"line_end":266,"column_start":68,"column_end":74},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":482},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":57794,"byte_end":57800,"line_start":268,"line_end":268,"column_start":23,"column_end":29},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58485,"byte_end":58491,"line_start":291,"line_end":291,"column_start":31,"column_end":37},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63498,"byte_end":63504,"line_start":432,"line_end":432,"column_start":35,"column_end":41},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64843,"byte_end":64849,"line_start":466,"line_end":466,"column_start":36,"column_end":42},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67431,"byte_end":67437,"line_start":532,"line_end":532,"column_start":40,"column_end":46},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":69254,"byte_end":69260,"line_start":576,"line_end":576,"column_start":45,"column_end":51},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":70843,"byte_end":70849,"line_start":620,"line_end":620,"column_start":38,"column_end":44},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72457,"byte_end":72463,"line_start":663,"line_end":663,"column_start":43,"column_end":49},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":73895,"byte_end":73901,"line_start":703,"line_end":703,"column_start":53,"column_end":59},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":482},"to":{"krate":1,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":74042,"byte_end":74048,"line_start":710,"line_end":710,"column_start":35,"column_end":41},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":482},"to":{"krate":1,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":74197,"byte_end":74203,"line_start":717,"line_end":717,"column_start":59,"column_end":65},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":482},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":74493,"byte_end":74510,"line_start":723,"line_end":723,"column_start":37,"column_end":54},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":556},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75153,"byte_end":75168,"line_start":743,"line_end":743,"column_start":68,"column_end":83},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75227,"byte_end":75242,"line_start":745,"line_end":745,"column_start":45,"column_end":60},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77572,"byte_end":77587,"line_start":810,"line_end":810,"column_start":49,"column_end":64},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79420,"byte_end":79435,"line_start":856,"line_end":856,"column_start":55,"column_end":70},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":2242}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79617,"byte_end":79632,"line_start":864,"line_end":864,"column_start":54,"column_end":69},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":2266}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79806,"byte_end":79821,"line_start":871,"line_end":871,"column_start":73,"column_end":88},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80022,"byte_end":80037,"line_start":878,"line_end":878,"column_start":9,"column_end":24},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80640,"byte_end":80656,"line_start":896,"line_end":896,"column_start":68,"column_end":84},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80715,"byte_end":80731,"line_start":898,"line_end":898,"column_start":45,"column_end":61},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83041,"byte_end":83057,"line_start":961,"line_end":961,"column_start":54,"column_end":70},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83680,"byte_end":83696,"line_start":976,"line_end":976,"column_start":61,"column_end":77},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":84367,"byte_end":84383,"line_start":991,"line_end":991,"column_start":49,"column_end":65},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86230,"byte_end":86246,"line_start":1037,"line_end":1037,"column_start":55,"column_end":71},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2242}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86432,"byte_end":86448,"line_start":1045,"line_end":1045,"column_start":58,"column_end":74},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2255}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86625,"byte_end":86641,"line_start":1052,"line_end":1052,"column_start":54,"column_end":70},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2266}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86818,"byte_end":86834,"line_start":1059,"line_end":1059,"column_start":73,"column_end":89},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87035,"byte_end":87051,"line_start":1066,"line_end":1066,"column_start":9,"column_end":25},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87678,"byte_end":87703,"line_start":1085,"line_end":1085,"column_start":9,"column_end":34},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87770,"byte_end":87795,"line_start":1089,"line_end":1089,"column_start":52,"column_end":77},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":89285,"byte_end":89310,"line_start":1132,"line_end":1132,"column_start":56,"column_end":81},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91186,"byte_end":91211,"line_start":1178,"line_end":1178,"column_start":61,"column_end":86},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91872,"byte_end":91897,"line_start":1194,"line_end":1194,"column_start":57,"column_end":82},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":93204,"byte_end":93229,"line_start":1233,"line_end":1233,"column_start":62,"column_end":87},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":2242}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":93418,"byte_end":93443,"line_start":1241,"line_end":1241,"column_start":61,"column_end":86},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":2266}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":93632,"byte_end":93657,"line_start":1249,"line_end":1249,"column_start":9,"column_end":34},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":93865,"byte_end":93890,"line_start":1257,"line_end":1257,"column_start":9,"column_end":34},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94798,"byte_end":94819,"line_start":1284,"line_end":1284,"column_start":68,"column_end":89},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94893,"byte_end":94914,"line_start":1285,"line_end":1285,"column_start":61,"column_end":82},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95005,"byte_end":95026,"line_start":1290,"line_end":1290,"column_start":45,"column_end":66},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":96709,"byte_end":96730,"line_start":1334,"line_end":1334,"column_start":49,"column_end":70},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97700,"byte_end":97721,"line_start":1354,"line_end":1354,"column_start":55,"column_end":76},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":2242}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97890,"byte_end":97911,"line_start":1362,"line_end":1362,"column_start":54,"column_end":75},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":2266}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":98082,"byte_end":98103,"line_start":1370,"line_end":1370,"column_start":9,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":98304,"byte_end":98325,"line_start":1378,"line_end":1378,"column_start":9,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99233,"byte_end":99255,"line_start":1406,"line_end":1406,"column_start":9,"column_end":31},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99330,"byte_end":99352,"line_start":1409,"line_end":1409,"column_start":61,"column_end":83},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99443,"byte_end":99465,"line_start":1414,"line_end":1414,"column_start":45,"column_end":67},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":795},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101187,"byte_end":101209,"line_start":1458,"line_end":1458,"column_start":54,"column_end":76},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":795},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101849,"byte_end":101871,"line_start":1474,"line_end":1474,"column_start":49,"column_end":71},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":795},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":102845,"byte_end":102867,"line_start":1494,"line_end":1494,"column_start":55,"column_end":77},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":2242}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":103040,"byte_end":103062,"line_start":1502,"line_end":1502,"column_start":58,"column_end":80},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":2255}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":103226,"byte_end":103248,"line_start":1509,"line_end":1509,"column_start":54,"column_end":76},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":2266}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":103422,"byte_end":103444,"line_start":1517,"line_end":1517,"column_start":9,"column_end":31},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":103645,"byte_end":103667,"line_start":1525,"line_end":1525,"column_start":9,"column_end":31},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":6604}}]}