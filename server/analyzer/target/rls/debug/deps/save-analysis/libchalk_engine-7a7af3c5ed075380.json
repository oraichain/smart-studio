{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine","program":"/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","chalk_engine","--edition=2018","/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"stack_protection\"","--cfg","feature=\"stacker\"","-C","metadata=7a7af3c5ed075380","-C","extra-filename=-7a7af3c5ed075380","--out-dir","/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","-L","dependency=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","--extern","chalk_macros=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libchalk_macros-522621076c03809f.rmeta","--extern","rustc_hash=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/librustc_hash-29dd9c019c1e078f.rmeta","--extern","stacker=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libstacker-bee98eab835dfcb1.rmeta","--cap-lints","allow","-L","native=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/build/stacker-6b8b89857712dd33/out","--error-format=json","--sysroot","/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libchalk_engine-7a7af3c5ed075380.rmeta"},"prelude":{"crate_id":{"name":"chalk_engine","disambiguator":[5209660885642139136,14615587430389361100]},"crate_root":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src","external_crates":[{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3710194649008989715,14559669089861450418]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9392975149979234998,17049149762166397483]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16512841426258775062,11665789721448774207]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10630307797325716480,16523273723520132349]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3264716338318844693,12681592148182797578]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[140397795414171834,1910274434865169512]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5557669672741662647,10322216614238315513]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14339503364484872598,13531520383629478599]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14161909693946419124,17554770295131960960]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9716880057120631437,4575334529379688610]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17190292700912465587,13293574150729131089]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[16973425767318922457,5762286362994384933]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[3049460603833016674,5895625007283919048]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[8971705811930800565,4802059752817986136]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[7414259369911982492,16117941559470048194]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":16,"id":{"name":"chalk_macros","disambiguator":[2603500555905971854,3241400604075703882]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":17,"id":{"name":"lazy_static","disambiguator":[8622471236171398951,7375813736511945278]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":18,"id":{"name":"stacker","disambiguator":[11270618004102534773,1134865246925311322]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":19,"id":{"name":"cfg_if","disambiguator":[13347268434212277074,12294355231220403985]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":20,"id":{"name":"libc","disambiguator":[9237417759301744298,10325578486291660160]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":21,"id":{"name":"rustc_hash","disambiguator":[3456451224187360230,12806063198043075384]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","num":22,"id":{"name":"byteorder","disambiguator":[7786802486158187971,17904586164133949077]}}],"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":0,"byte_end":11219,"line_start":1,"line_end":314,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":0,"byte_end":11219,"line_start":1,"line_end":314,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":879},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":103},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":255},{"krate":0,"index":267},{"krate":0,"index":290},{"krate":0,"index":309},{"krate":0,"index":346},{"krate":0,"index":631},{"krate":0,"index":653},{"krate":0,"index":651},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":638},{"krate":0,"index":636},{"krate":0,"index":633},{"krate":0,"index":621},{"krate":0,"index":627},{"krate":0,"index":629},{"krate":0,"index":664},{"krate":0,"index":686},{"krate":0,"index":684},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":671},{"krate":0,"index":669},{"krate":0,"index":666},{"krate":0,"index":654},{"krate":0,"index":660},{"krate":0,"index":662},{"krate":0,"index":687},{"krate":0,"index":708},{"krate":0,"index":706},{"krate":0,"index":704},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":691},{"krate":0,"index":689},{"krate":0,"index":709},{"krate":0,"index":735},{"krate":0,"index":732},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":721},{"krate":0,"index":723},{"krate":0,"index":717},{"krate":0,"index":738},{"krate":0,"index":764},{"krate":0,"index":762},{"krate":0,"index":760},{"krate":0,"index":758},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":745},{"krate":0,"index":743},{"krate":0,"index":740},{"krate":0,"index":377},{"krate":0,"index":765},{"krate":0,"index":787},{"krate":0,"index":784},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":773},{"krate":0,"index":775},{"krate":0,"index":769},{"krate":0,"index":790},{"krate":0,"index":811},{"krate":0,"index":808},{"krate":0,"index":802},{"krate":0,"index":804},{"krate":0,"index":797},{"krate":0,"index":799},{"krate":0,"index":793},{"krate":0,"index":814},{"krate":0,"index":850},{"krate":0,"index":847},{"krate":0,"index":841},{"krate":0,"index":843},{"krate":0,"index":836},{"krate":0,"index":838},{"krate":0,"index":825},{"krate":0,"index":822},{"krate":0,"index":818},{"krate":0,"index":853},{"krate":0,"index":864},{"krate":0,"index":861},{"krate":0,"index":867},{"krate":0,"index":874},{"krate":0,"index":872},{"krate":0,"index":870},{"krate":0,"index":379},{"krate":0,"index":383},{"krate":0,"index":387}],"decl_id":null,"docs":" An alternative solver based around the SLG algorithm, which\n implements the well-formed semantics. For an overview of how the solver\n works, see [The On-Demand SLG Solver][guide] in the rustc guide.","sig":null,"attributes":[{"value":"/ An alternative solver based around the SLG algorithm, which","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":0,"byte_end":63,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"/ implements the well-formed semantics. For an overview of how the solver","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":64,"byte_end":139,"line_start":2,"line_end":2,"column_start":1,"column_end":76}},{"value":"/ works, see [The On-Demand SLG Solver][guide] in the rustc guide.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":140,"byte_end":208,"line_start":3,"line_end":3,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":209,"byte_end":212,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ [guide]: https://rust-lang.github.io/rustc-guide/traits/slg.html","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":213,"byte_end":281,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":282,"byte_end":285,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This algorithm is very closed based on the description found in the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":286,"byte_end":357,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"/ following paper, which I will refer to in the comments as EWFS:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":358,"byte_end":425,"line_start":8,"line_end":8,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":426,"byte_end":429,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ > Efficient Top-Down Computation of Queries Under the Well-founded Semantics","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":430,"byte_end":510,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ > (Chen, Swift, and Warren; Journal of Logic Programming '95)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":511,"byte_end":576,"line_start":11,"line_end":11,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":577,"byte_end":580,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ However, to understand that paper, I would recommend first","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":581,"byte_end":643,"line_start":13,"line_end":13,"column_start":1,"column_end":63}},{"value":"/ starting with the following paper, which I will refer to in the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":644,"byte_end":711,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ comments as NFTD:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":712,"byte_end":733,"line_start":15,"line_end":15,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":734,"byte_end":737,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ > A New Formulation of Tabled resolution With Delay","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":738,"byte_end":793,"line_start":17,"line_end":17,"column_start":1,"column_end":56}},{"value":"/ > (Swift; EPIA '99)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":794,"byte_end":817,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":818,"byte_end":821,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ In addition, I incorporated extensions from the following papers,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":822,"byte_end":891,"line_start":20,"line_end":20,"column_start":1,"column_end":70}},{"value":"/ which I will refer to as SA and RR respectively, that","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":892,"byte_end":949,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/ describes how to do introduce approximation when processing","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":950,"byte_end":1013,"line_start":22,"line_end":22,"column_start":1,"column_end":64}},{"value":"/ subgoals and so forth:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1014,"byte_end":1040,"line_start":23,"line_end":23,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1041,"byte_end":1044,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ > Terminating Evaluation of Logic Programs with Finite Three-Valued Models","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1045,"byte_end":1123,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ > Riguzzi and Swift; ACM Transactions on Computational Logic 2013","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1124,"byte_end":1193,"line_start":26,"line_end":26,"column_start":1,"column_end":70}},{"value":"/ > (Introduces \"subgoal abstraction\", hence the name SA)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1194,"byte_end":1253,"line_start":27,"line_end":27,"column_start":1,"column_end":60}},{"value":"/ >","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1254,"byte_end":1259,"line_start":28,"line_end":28,"column_start":1,"column_end":6}},{"value":"/ > Radial Restraint","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1260,"byte_end":1282,"line_start":29,"line_end":29,"column_start":1,"column_end":23}},{"value":"/ > Grosof and Swift; 2013","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1283,"byte_end":1311,"line_start":30,"line_end":30,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1312,"byte_end":1315,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Another useful paper that gives a kind of high-level overview of","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1316,"byte_end":1384,"line_start":32,"line_end":32,"column_start":1,"column_end":69}},{"value":"/ concepts at play is the following, which I will refer to as XSB:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1385,"byte_end":1453,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1454,"byte_end":1457,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ > XSB: Extending Prolog with Tabled Logic Programming","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1458,"byte_end":1515,"line_start":35,"line_end":35,"column_start":1,"column_end":58}},{"value":"/ > (Swift and Warren; Theory and Practice of Logic Programming '10)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1516,"byte_end":1586,"line_start":36,"line_end":36,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1587,"byte_end":1590,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ While this code is adapted from the algorithms described in those","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1591,"byte_end":1660,"line_start":38,"line_end":38,"column_start":1,"column_end":70}},{"value":"/ papers, it is not the same. For one thing, the approaches there","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1661,"byte_end":1728,"line_start":39,"line_end":39,"column_start":1,"column_end":68}},{"value":"/ had to be extended to our context, and in particular to coping","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1729,"byte_end":1795,"line_start":40,"line_end":40,"column_start":1,"column_end":67}},{"value":"/ with hereditary harrop predicates and our version of unification","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1796,"byte_end":1864,"line_start":41,"line_end":41,"column_start":1,"column_end":69}},{"value":"/ (which produces subgoals). I believe those to be largely faithful","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1865,"byte_end":1934,"line_start":42,"line_end":42,"column_start":1,"column_end":70}},{"value":"/ extensions. However, there are some other places where I","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1935,"byte_end":1995,"line_start":43,"line_end":43,"column_start":1,"column_end":61}},{"value":"/ intentionally diverged from the semantics as described in the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":1996,"byte_end":2061,"line_start":44,"line_end":44,"column_start":1,"column_end":66}},{"value":"/ papers -- e.g. by more aggressively approximating -- which I","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":2062,"byte_end":2126,"line_start":45,"line_end":45,"column_start":1,"column_end":65}},{"value":"/ marked them with a comment DIVERGENCE. Those places may want to be","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":2127,"byte_end":2197,"line_start":46,"line_end":46,"column_start":1,"column_end":71}},{"value":"/ evaluated in the future.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":2198,"byte_end":2226,"line_start":47,"line_end":47,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":2227,"byte_end":2230,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Glossary of other terms:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":2231,"byte_end":2259,"line_start":49,"line_end":49,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":2260,"byte_end":2263,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ - WAM: Warren abstract machine, an efficient way to evaluate Prolog programs.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":2264,"byte_end":2345,"line_start":51,"line_end":51,"column_start":1,"column_end":82}},{"value":"/   See <http://wambook.sourceforge.net/>.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":2346,"byte_end":2390,"line_start":52,"line_end":52,"column_start":1,"column_end":45}},{"value":"/ - HH: Hereditary harrop predicates. What Chalk deals in.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":2391,"byte_end":2451,"line_start":53,"line_end":53,"column_start":1,"column_end":61}},{"value":"/   Popularized by Lambda Prolog.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":2452,"byte_end":2487,"line_start":54,"line_end":54,"column_start":1,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":10},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"context","qualname":"::context","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":891},{"krate":0,"index":17},{"krate":0,"index":893},{"krate":0,"index":18},{"krate":0,"index":25},{"krate":0,"index":54},{"krate":0,"index":66},{"krate":0,"index":70},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":89},{"krate":0,"index":93},{"krate":0,"index":97}],"decl_id":null,"docs":" Defines traits used to embed the chalk-engine in another crate.","sig":null,"attributes":[{"value":"/ Defines traits used to embed the chalk-engine in another crate.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":11221,"byte_end":11288,"line_start":1,"line_end":1,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":11289,"byte_end":11292,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ chalk and rustc both define types which implement the traits in this","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":11293,"byte_end":11365,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"/ module. This allows each user of chalk-engine to define their own","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":11366,"byte_end":11435,"line_start":4,"line_end":4,"column_start":1,"column_end":70}},{"value":"/ `DomainGoal` type, add arena lifetime parameters, and more. See","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":11436,"byte_end":11503,"line_start":5,"line_end":5,"column_start":1,"column_end":68}},{"value":"/ [`Context`] trait for a list of types.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":11504,"byte_end":11546,"line_start":6,"line_end":6,"column_start":1,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":25},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12743,"byte_end":12750,"line_start":35,"line_end":35,"column_start":11,"column_end":18},"name":"Context","qualname":"::context::Context","value":"Context: Clone + Debug","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53}],"decl_id":null,"docs":" The \"context\" in which the SLG solver operates. It defines all the\n types that the SLG solver may need to refer to, as well as a few\n very simple interconversion methods.","sig":null,"attributes":[{"value":"/ The \"context\" in which the SLG solver operates. It defines all the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":11701,"byte_end":11771,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/ types that the SLG solver may need to refer to, as well as a few","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":11772,"byte_end":11840,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ very simple interconversion methods.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":11841,"byte_end":11881,"line_start":18,"line_end":18,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":11882,"byte_end":11885,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ At any given time, the SLG solver may have more than one context","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":11886,"byte_end":11954,"line_start":20,"line_end":20,"column_start":1,"column_end":69}},{"value":"/ active. First, there is always the *global* context, but when we","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":11955,"byte_end":12023,"line_start":21,"line_end":21,"column_start":1,"column_end":69}},{"value":"/ are in the midst of pursuing some particular strand, we will","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12024,"byte_end":12088,"line_start":22,"line_end":22,"column_start":1,"column_end":65}},{"value":"/ instantiate a second context just for that work, via the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12089,"byte_end":12149,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/ `instantiate_ucanonical_goal` and `instantiate_ex_clause` methods.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12150,"byte_end":12220,"line_start":24,"line_end":24,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12221,"byte_end":12224,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ In the chalk implementation, these two contexts are mapped to the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12225,"byte_end":12294,"line_start":26,"line_end":26,"column_start":1,"column_end":70}},{"value":"/ same type. But in the rustc implementation, this second context","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12295,"byte_end":12362,"line_start":27,"line_end":27,"column_start":1,"column_end":68}},{"value":"/ corresponds to a fresh arena, and data allocated in that second","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12363,"byte_end":12430,"line_start":28,"line_end":28,"column_start":1,"column_end":68}},{"value":"/ context will be freed once the work is done. (The \"canonicalizing\"","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12431,"byte_end":12501,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/ steps offer a way to convert data from the inference context back","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12502,"byte_end":12571,"line_start":30,"line_end":30,"column_start":1,"column_end":70}},{"value":"/ into the global context.)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12572,"byte_end":12601,"line_start":31,"line_end":31,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12602,"byte_end":12605,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ FIXME: Clone and Debug bounds are just for easy derive, they are","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12606,"byte_end":12674,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/ not actually necessary. But dang are they convenient.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12675,"byte_end":12732,"line_start":34,"line_end":34,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":26},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12777,"byte_end":12794,"line_start":36,"line_end":36,"column_start":10,"column_end":27},"name":"CanonicalExClause","qualname":"::context::Context::CanonicalExClause","value":"type CanonicalExClause: Debug;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":27},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12982,"byte_end":12993,"line_start":41,"line_end":41,"column_start":10,"column_end":21},"name":"UniverseMap","qualname":"::context::Context::UniverseMap","value":"type UniverseMap: Clone + Debug;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" A map between universes. These are produced when\n u-canonicalizing something; they map canonical results back to\n the universes from the original.\n","sig":null,"attributes":[{"value":"/ A map between universes. These are produced when","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12808,"byte_end":12860,"line_start":38,"line_end":38,"column_start":5,"column_end":57}},{"value":"/ u-canonicalizing something; they map canonical results back to","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12865,"byte_end":12931,"line_start":39,"line_end":39,"column_start":5,"column_end":71}},{"value":"/ the universes from the original.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12936,"byte_end":12972,"line_start":40,"line_end":40,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":28},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":13203,"byte_end":13227,"line_start":45,"line_end":45,"column_start":10,"column_end":34},"name":"InferenceNormalizedSubst","qualname":"::context::Context::InferenceNormalizedSubst","value":"type InferenceNormalizedSubst: Debug;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Extracted from a canonicalized substitution or canonicalized ex clause, this is the type of\n substitution that is fully normalized with respect to inference variables.\n","sig":null,"attributes":[{"value":"/ Extracted from a canonicalized substitution or canonicalized ex clause, this is the type of","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":13015,"byte_end":13110,"line_start":43,"line_end":43,"column_start":5,"column_end":100}},{"value":"/ substitution that is fully normalized with respect to inference variables.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":13115,"byte_end":13193,"line_start":44,"line_end":44,"column_start":5,"column_end":83}}]},{"kind":"Type","id":{"krate":0,"index":29},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":13548,"byte_end":13574,"line_start":52,"line_end":52,"column_start":10,"column_end":36},"name":"CanonicalGoalInEnvironment","qualname":"::context::Context::CanonicalGoalInEnvironment","value":"type CanonicalGoalInEnvironment: Debug;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" A canonicalized `GoalInEnvironment` -- that is, one where all\n free inference variables have been bound into the canonical\n binder. See [the rustc-guide] for more information.","sig":null,"attributes":[{"value":"/ A canonicalized `GoalInEnvironment` -- that is, one where all","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":13241,"byte_end":13306,"line_start":47,"line_end":47,"column_start":5,"column_end":70}},{"value":"/ free inference variables have been bound into the canonical","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":13311,"byte_end":13374,"line_start":48,"line_end":48,"column_start":5,"column_end":68}},{"value":"/ binder. See [the rustc-guide] for more information.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":13379,"byte_end":13434,"line_start":49,"line_end":49,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":13439,"byte_end":13442,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ [the rustc-guide]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":13447,"byte_end":13538,"line_start":51,"line_end":51,"column_start":5,"column_end":96}}]},{"kind":"Type","id":{"krate":0,"index":30},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":13790,"byte_end":13817,"line_start":57,"line_end":57,"column_start":10,"column_end":37},"name":"UCanonicalGoalInEnvironment","qualname":"::context::Context::UCanonicalGoalInEnvironment","value":"type UCanonicalGoalInEnvironment: Debug + Clone + Eq + Hash;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" A u-canonicalized `GoalInEnvironment` -- this is one where the\n free universes are renumbered to consecutive integers starting\n from U1 (but preserving their relative order).\n","sig":null,"attributes":[{"value":"/ A u-canonicalized `GoalInEnvironment` -- this is one where the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":13588,"byte_end":13654,"line_start":54,"line_end":54,"column_start":5,"column_end":71}},{"value":"/ free universes are renumbered to consecutive integers starting","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":13659,"byte_end":13725,"line_start":55,"line_end":55,"column_start":5,"column_end":71}},{"value":"/ from U1 (but preserving their relative order).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":13730,"byte_end":13780,"line_start":56,"line_end":56,"column_start":5,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":31},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14010,"byte_end":14018,"line_start":62,"line_end":62,"column_start":10,"column_end":18},"name":"Solution","qualname":"::context::Context::Solution","value":"type Solution;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" A final solution that is passed back to the user. This is\n completely opaque to the SLG solver; it is produced by\n `make_solution`.\n","sig":null,"attributes":[{"value":"/ A final solution that is passed back to the user. This is","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":13851,"byte_end":13912,"line_start":59,"line_end":59,"column_start":5,"column_end":66}},{"value":"/ completely opaque to the SLG solver; it is produced by","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":13917,"byte_end":13975,"line_start":60,"line_end":60,"column_start":5,"column_end":63}},{"value":"/ `make_solution`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":13980,"byte_end":14000,"line_start":61,"line_end":61,"column_start":5,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":32},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14320,"byte_end":14345,"line_start":68,"line_end":68,"column_start":10,"column_end":35},"name":"CanonicalConstrainedSubst","qualname":"::context::Context::CanonicalConstrainedSubst","value":"type CanonicalConstrainedSubst: Clone + Debug + Eq + Hash;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Part of an answer: represents a canonicalized substitution,\n combined with region constraints. See [the rustc-guide] for more information.","sig":null,"attributes":[{"value":"/ Part of an answer: represents a canonicalized substitution,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14025,"byte_end":14088,"line_start":64,"line_end":64,"column_start":5,"column_end":68}},{"value":"/ combined with region constraints. See [the rustc-guide] for more information.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14093,"byte_end":14174,"line_start":65,"line_end":65,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14179,"byte_end":14182,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ [the rustc-guide]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html#canonicalizing-the-query-result","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14187,"byte_end":14310,"line_start":67,"line_end":67,"column_start":5,"column_end":128}}]},{"kind":"Type","id":{"krate":0,"index":33},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14503,"byte_end":14515,"line_start":72,"line_end":72,"column_start":10,"column_end":22},"name":"Substitution","qualname":"::context::Context::Substitution","value":"type Substitution: Debug;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Represents a substitution from the \"canonical variables\" found\n in a canonical goal to specific values.\n","sig":null,"attributes":[{"value":"/ Represents a substitution from the \"canonical variables\" found","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14379,"byte_end":14445,"line_start":70,"line_end":70,"column_start":5,"column_end":71}},{"value":"/ in a canonical goal to specific values.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14450,"byte_end":14493,"line_start":71,"line_end":71,"column_start":5,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14630,"byte_end":14646,"line_start":76,"line_end":76,"column_start":10,"column_end":26},"name":"RegionConstraint","qualname":"::context::Context::RegionConstraint","value":"type RegionConstraint: Debug;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Represents a region constraint that will be propagated back\n (but not verified).\n","sig":null,"attributes":[{"value":"/ Represents a region constraint that will be propagated back","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14529,"byte_end":14592,"line_start":74,"line_end":74,"column_start":5,"column_end":68}},{"value":"/ (but not verified).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14597,"byte_end":14620,"line_start":75,"line_end":75,"column_start":5,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":35},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14718,"byte_end":14735,"line_start":79,"line_end":79,"column_start":10,"column_end":27},"name":"GoalInEnvironment","qualname":"::context::Context::GoalInEnvironment","value":"type GoalInEnvironment: Debug + Clone + Eq + Hash;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Represents a goal along with an environment.\n","sig":null,"attributes":[{"value":"/ Represents a goal along with an environment.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14660,"byte_end":14708,"line_start":78,"line_end":78,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":36},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14813,"byte_end":14827,"line_start":82,"line_end":82,"column_start":10,"column_end":24},"name":"InferenceTable","qualname":"::context::Context::InferenceTable","value":"type InferenceTable: InferenceTable<Self>;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Represents an inference table.\n","sig":null,"attributes":[{"value":"/ Represents an inference table.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14769,"byte_end":14803,"line_start":81,"line_end":81,"column_start":5,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":37},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14929,"byte_end":14940,"line_start":85,"line_end":85,"column_start":10,"column_end":21},"name":"Environment","qualname":"::context::Context::Environment","value":"type Environment: Debug + Clone;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Represents a set of hypotheses that are assumed to be true.\n","sig":null,"attributes":[{"value":"/ Represents a set of hypotheses that are assumed to be true.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14856,"byte_end":14919,"line_start":84,"line_end":84,"column_start":5,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":38},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15016,"byte_end":15020,"line_start":88,"line_end":88,"column_start":10,"column_end":14},"name":"Goal","qualname":"::context::Context::Goal","value":"type Goal: Clone + Debug + Eq;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Goals correspond to things we can prove.\n","sig":null,"attributes":[{"value":"/ Goals correspond to things we can prove.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":14962,"byte_end":15006,"line_start":87,"line_end":87,"column_start":5,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":39},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15243,"byte_end":15253,"line_start":93,"line_end":93,"column_start":10,"column_end":20},"name":"DomainGoal","qualname":"::context::Context::DomainGoal","value":"type DomainGoal: Debug;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" A goal that can be targeted by a program clause. The SLG\n solver treats these opaquely; in contrast, it understands\n \"meta\" goals like `G1 && G2` and so forth natively.\n","sig":null,"attributes":[{"value":"/ A goal that can be targeted by a program clause. The SLG","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15047,"byte_end":15107,"line_start":90,"line_end":90,"column_start":5,"column_end":65}},{"value":"/ solver treats these opaquely; in contrast, it understands","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15112,"byte_end":15173,"line_start":91,"line_end":91,"column_start":5,"column_end":66}},{"value":"/ \"meta\" goals like `G1 && G2` and so forth natively.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15178,"byte_end":15233,"line_start":92,"line_end":92,"column_start":5,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":40},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15576,"byte_end":15587,"line_start":101,"line_end":101,"column_start":10,"column_end":21},"name":"BindersGoal","qualname":"::context::Context::BindersGoal","value":"type BindersGoal: Debug;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" A \"higher-order\" goal, quantified over some types and/or\n lifetimes. When you have a quantification, like `forall<T> { G\n }` or `exists<T> { G }`, this represents the `<T> { G }` part.","sig":null,"attributes":[{"value":"/ A \"higher-order\" goal, quantified over some types and/or","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15267,"byte_end":15327,"line_start":95,"line_end":95,"column_start":5,"column_end":65}},{"value":"/ lifetimes. When you have a quantification, like `forall<T> { G","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15332,"byte_end":15398,"line_start":96,"line_end":96,"column_start":5,"column_end":71}},{"value":"/ }` or `exists<T> { G }`, this represents the `<T> { G }` part.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15403,"byte_end":15469,"line_start":97,"line_end":97,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15474,"byte_end":15477,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ (In Lambda Prolog, this would be a \"lambda predicate\", like `T","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15482,"byte_end":15548,"line_start":99,"line_end":99,"column_start":5,"column_end":71}},{"value":"/ \\ Goal`).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15553,"byte_end":15566,"line_start":100,"line_end":100,"column_start":5,"column_end":18}}]},{"kind":"Type","id":{"krate":0,"index":41},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15717,"byte_end":15726,"line_start":105,"line_end":105,"column_start":10,"column_end":19},"name":"Parameter","qualname":"::context::Context::Parameter","value":"type Parameter: Debug;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" A term that can be quantified over and unified -- in current\n Chalk, either a type or lifetime.\n","sig":null,"attributes":[{"value":"/ A term that can be quantified over and unified -- in current","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15601,"byte_end":15665,"line_start":103,"line_end":103,"column_start":5,"column_end":69}},{"value":"/ Chalk, either a type or lifetime.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15670,"byte_end":15707,"line_start":104,"line_end":104,"column_start":5,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":42},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15924,"byte_end":15937,"line_start":111,"line_end":111,"column_start":10,"column_end":23},"name":"ProgramClause","qualname":"::context::Context::ProgramClause","value":"type ProgramClause: Debug;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" A rule like `DomainGoal :- Goal`.","sig":null,"attributes":[{"value":"/ A rule like `DomainGoal :- Goal`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15740,"byte_end":15777,"line_start":107,"line_end":107,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15782,"byte_end":15785,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ `resolvent_clause` combines a program-clause and a concrete","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15790,"byte_end":15853,"line_start":109,"line_end":109,"column_start":5,"column_end":68}},{"value":"/ goal we are trying to solve to produce an ex-clause.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15858,"byte_end":15914,"line_start":110,"line_end":110,"column_start":5,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":43},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15993,"byte_end":16007,"line_start":114,"line_end":114,"column_start":10,"column_end":24},"name":"ProgramClauses","qualname":"::context::Context::ProgramClauses","value":"type ProgramClauses: Debug;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" A vector of program clauses.\n","sig":null,"attributes":[{"value":"/ A vector of program clauses.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":15951,"byte_end":15983,"line_start":113,"line_end":113,"column_start":5,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":44},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":16208,"byte_end":16216,"line_start":119,"line_end":119,"column_start":10,"column_end":18},"name":"Variance","qualname":"::context::Context::Variance","value":"type Variance;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" How to relate two kinds when unifying: for example in rustc, we\n may want to unify parameters either for the sub-typing relation or for\n the equality relation.\n","sig":null,"attributes":[{"value":"/ How to relate two kinds when unifying: for example in rustc, we","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":16021,"byte_end":16088,"line_start":116,"line_end":116,"column_start":5,"column_end":72}},{"value":"/ may want to unify parameters either for the sub-typing relation or for","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":16093,"byte_end":16167,"line_start":117,"line_end":117,"column_start":5,"column_end":79}},{"value":"/ the equality relation.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":16172,"byte_end":16198,"line_start":118,"line_end":118,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":16327,"byte_end":16346,"line_start":123,"line_end":123,"column_start":8,"column_end":27},"name":"goal_in_environment","qualname":"::context::Context::goal_in_environment","value":"pub fn goal_in_environment(&Self::Environment, Self::Goal)\n-> Self::GoalInEnvironment","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Given an environment and a goal, glue them together to create\n a `GoalInEnvironment`.\n","sig":null,"attributes":[{"value":"/ Given an environment and a goal, glue them together to create","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":16223,"byte_end":16288,"line_start":121,"line_end":121,"column_start":5,"column_end":70}},{"value":"/ a `GoalInEnvironment`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":16293,"byte_end":16319,"line_start":122,"line_end":122,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":16536,"byte_end":16577,"line_start":129,"line_end":129,"column_start":8,"column_end":49},"name":"inference_normalized_subst_from_ex_clause","qualname":"::context::Context::inference_normalized_subst_from_ex_clause","value":"pub fn inference_normalized_subst_from_ex_clause(&Self::CanonicalExClause)\n-> &Self::InferenceNormalizedSubst","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Extracts the inner normalized substitution from a canonical ex-clause.\n","sig":null,"attributes":[{"value":"/ Extracts the inner normalized substitution from a canonical ex-clause.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":16454,"byte_end":16528,"line_start":128,"line_end":128,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":16766,"byte_end":16803,"line_start":134,"line_end":134,"column_start":8,"column_end":45},"name":"inference_normalized_subst_from_subst","qualname":"::context::Context::inference_normalized_subst_from_subst","value":"pub fn inference_normalized_subst_from_subst(&Self::CanonicalConstrainedSubst)\n-> &Self::InferenceNormalizedSubst","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Extracts the inner normalized substitution from a canonical constraint subst.\n","sig":null,"attributes":[{"value":"/ Extracts the inner normalized substitution from a canonical constraint subst.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":16677,"byte_end":16758,"line_start":133,"line_end":133,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":16971,"byte_end":16988,"line_start":139,"line_end":139,"column_start":8,"column_end":25},"name":"empty_constraints","qualname":"::context::Context::empty_constraints","value":"pub fn empty_constraints(&Self::CanonicalConstrainedSubst) -> bool","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" True if this solution has no region constraints.\n","sig":null,"attributes":[{"value":"/ True if this solution has no region constraints.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":16911,"byte_end":16963,"line_start":138,"line_end":138,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":17045,"byte_end":17054,"line_start":141,"line_end":141,"column_start":8,"column_end":17},"name":"canonical","qualname":"::context::Context::canonical","value":"pub fn canonical(&Self::UCanonicalGoalInEnvironment)\n-> &Self::CanonicalGoalInEnvironment","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":17146,"byte_end":17169,"line_start":143,"line_end":143,"column_start":8,"column_end":31},"name":"is_trivial_substitution","qualname":"::context::Context::is_trivial_substitution","value":"pub fn is_trivial_substitution(&Self::UCanonicalGoalInEnvironment,\n                               &Self::CanonicalConstrainedSubst) -> bool","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":17306,"byte_end":17319,"line_start":148,"line_end":148,"column_start":8,"column_end":21},"name":"num_universes","qualname":"::context::Context::num_universes","value":"pub fn num_universes(&Self::UCanonicalGoalInEnvironment) -> usize","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":17575,"byte_end":17598,"line_start":153,"line_end":153,"column_start":8,"column_end":31},"name":"map_goal_from_canonical","qualname":"::context::Context::map_goal_from_canonical","value":"pub fn map_goal_from_canonical(&Self::UniverseMap,\n                               &Self::CanonicalGoalInEnvironment)\n-> Self::CanonicalGoalInEnvironment","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Convert a goal G *from* the canonical universes *into* our\n local universes. This will yield a goal G' that is the same\n but for the universes of universally quantified names.\n","sig":null,"attributes":[{"value":"/ Convert a goal G *from* the canonical universes *into* our","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":17374,"byte_end":17436,"line_start":150,"line_end":150,"column_start":5,"column_end":67}},{"value":"/ local universes. This will yield a goal G' that is the same","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":17441,"byte_end":17504,"line_start":151,"line_end":151,"column_start":5,"column_end":68}},{"value":"/ but for the universes of universally quantified names.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":17509,"byte_end":17567,"line_start":152,"line_end":152,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":17952,"byte_end":17976,"line_start":162,"line_end":162,"column_start":8,"column_end":32},"name":"map_subst_from_canonical","qualname":"::context::Context::map_subst_from_canonical","value":"pub fn map_subst_from_canonical(&Self::UniverseMap,\n                                &Self::CanonicalConstrainedSubst)\n-> Self::CanonicalConstrainedSubst","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Convert a substitution *from* the canonical universes *into*\n our local universes. This will yield a substitution S' that is\n the same but for the universes of universally quantified\n names.\n","sig":null,"attributes":[{"value":"/ Convert a substitution *from* the canonical universes *into*","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":17729,"byte_end":17793,"line_start":158,"line_end":158,"column_start":5,"column_end":69}},{"value":"/ our local universes. This will yield a substitution S' that is","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":17798,"byte_end":17864,"line_start":159,"line_end":159,"column_start":5,"column_end":71}},{"value":"/ the same but for the universes of universally quantified","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":17869,"byte_end":17929,"line_start":160,"line_end":160,"column_start":5,"column_end":65}},{"value":"/ names.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":17934,"byte_end":17944,"line_start":161,"line_end":161,"column_start":5,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":54},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":18113,"byte_end":18123,"line_start":168,"line_end":168,"column_start":11,"column_end":21},"name":"ContextOps","qualname":"::context::ContextOps","value":"ContextOps<C: Context>: Sized + Clone + Debug + AggregateOps<C>","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":65}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":18261,"byte_end":18275,"line_start":170,"line_end":170,"column_start":8,"column_end":22},"name":"is_coinductive","qualname":"::context::ContextOps::is_coinductive","value":"pub fn is_coinductive(&Self, &C::UCanonicalGoalInEnvironment) -> bool","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" True if this is a coinductive goal -- e.g., proving an auto trait.\n","sig":null,"attributes":[{"value":"/ True if this is a coinductive goal -- e.g., proving an auto trait.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":18183,"byte_end":18253,"line_start":169,"line_end":169,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":18380,"byte_end":18406,"line_start":173,"line_end":173,"column_start":8,"column_end":34},"name":"identity_constrained_subst","qualname":"::context::ContextOps::identity_constrained_subst","value":"pub fn identity_constrained_subst(&Self, &C::UCanonicalGoalInEnvironment)\n-> C::CanonicalConstrainedSubst","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Returns a identity substitution.\n","sig":null,"attributes":[{"value":"/ Returns a identity substitution.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":18336,"byte_end":18372,"line_start":172,"line_end":172,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":18907,"byte_end":18922,"line_start":185,"line_end":185,"column_start":8,"column_end":23},"name":"program_clauses","qualname":"::context::ContextOps::program_clauses","value":"pub fn program_clauses(&Self, &C::Environment, &C::DomainGoal,\n                       &mut C::InferenceTable)\n-> Result<Vec<C::ProgramClause>, Floundered>","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Returns the set of program clauses that might apply to\n `goal`. (This set can be over-approximated, naturally.)","sig":null,"attributes":[{"value":"/ Returns the set of program clauses that might apply to","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":18514,"byte_end":18572,"line_start":178,"line_end":178,"column_start":5,"column_end":63}},{"value":"/ `goal`. (This set can be over-approximated, naturally.)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":18577,"byte_end":18636,"line_start":179,"line_end":179,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":18641,"byte_end":18644,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ If this callback returns `None`, that indicates that the set","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":18649,"byte_end":18713,"line_start":181,"line_end":181,"column_start":5,"column_end":69}},{"value":"/ of program clauses cannot be enumerated because there are","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":18718,"byte_end":18779,"line_start":182,"line_end":182,"column_start":5,"column_end":66}},{"value":"/ unresolved type variables that would have to be resolved","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":18784,"byte_end":18844,"line_start":183,"line_end":183,"column_start":5,"column_end":65}},{"value":"/ first; the goal will be considered floundered.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":18849,"byte_end":18899,"line_start":184,"line_end":184,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":19684,"byte_end":19711,"line_start":204,"line_end":204,"column_start":8,"column_end":35},"name":"instantiate_ucanonical_goal","qualname":"::context::ContextOps::instantiate_ucanonical_goal","value":"pub fn instantiate_ucanonical_goal<R,\n                                   impl FnOnce(C::InferenceTable, C::Substitution, C::Environment, C::Goal) -> R: FnOnce(C::InferenceTable,\n                                                                                                                         C::Substitution,\n                                                                                                                         C::Environment,\n                                                                                                                         C::Goal)\n                                   ->\n                                   R>(&Self, &C::UCanonicalGoalInEnvironment,\n                                      impl FnOnce(C::InferenceTable, C::Substitution, C::Environment, C::Goal) -> R)\n-> R","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Create an inference table for processing a new goal and instantiate that goal\n in that context, returning \"all the pieces\".","sig":null,"attributes":[{"value":"/ Create an inference table for processing a new goal and instantiate that goal","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":19103,"byte_end":19184,"line_start":192,"line_end":192,"column_start":5,"column_end":86}},{"value":"/ in that context, returning \"all the pieces\".","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":19189,"byte_end":19237,"line_start":193,"line_end":193,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":19242,"byte_end":19245,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ More specifically: given a u-canonical goal `arg`, creates a","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":19250,"byte_end":19314,"line_start":195,"line_end":195,"column_start":5,"column_end":69}},{"value":"/ new inference table `T` and populates it with the universes","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":19319,"byte_end":19382,"line_start":196,"line_end":196,"column_start":5,"column_end":68}},{"value":"/ found in `arg`. Then, creates a substitution `S` that maps","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":19387,"byte_end":19449,"line_start":197,"line_end":197,"column_start":5,"column_end":67}},{"value":"/ each bound variable in `arg` to a fresh inference variable","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":19454,"byte_end":19516,"line_start":198,"line_end":198,"column_start":5,"column_end":67}},{"value":"/ from T. Returns:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":19521,"byte_end":19541,"line_start":199,"line_end":199,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":19546,"byte_end":19549,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ - the table `T`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":19554,"byte_end":19573,"line_start":201,"line_end":201,"column_start":5,"column_end":24}},{"value":"/ - the substitution `S`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":19578,"byte_end":19604,"line_start":202,"line_end":202,"column_start":5,"column_end":31}},{"value":"/ - the environment and goal found by substitution `S` into `arg`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":19609,"byte_end":19676,"line_start":203,"line_end":203,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":19888,"byte_end":19909,"line_start":210,"line_end":210,"column_start":8,"column_end":29},"name":"instantiate_ex_clause","qualname":"::context::ContextOps::instantiate_ex_clause","value":"pub fn instantiate_ex_clause<R,\n                             impl FnOnce(C::InferenceTable, ExClause<C>) -> R: FnOnce(C::InferenceTable,\n                                                                                      ExClause<C>)\n                             ->\n                             R>(&Self, usize, &C::CanonicalExClause,\n                                impl FnOnce(C::InferenceTable, ExClause<C>) -> R)\n-> R","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":20137,"byte_end":20166,"line_start":218,"line_end":218,"column_start":8,"column_end":37},"name":"constrained_subst_from_answer","qualname":"::context::ContextOps::constrained_subst_from_answer","value":"pub fn constrained_subst_from_answer(&Self, Answer<C>)\n-> C::CanonicalConstrainedSubst","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" returns unique solution from answer\n","sig":null,"attributes":[{"value":"/ returns unique solution from answer","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":20090,"byte_end":20129,"line_start":217,"line_end":217,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":66},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":20307,"byte_end":20319,"line_start":222,"line_end":222,"column_start":11,"column_end":23},"name":"AggregateOps","qualname":"::context::AggregateOps","value":"AggregateOps<C: Context>","parent":null,"children":[{"krate":0,"index":68}],"decl_id":null,"docs":" Methods for combining solutions to yield an aggregate solution.\n","sig":null,"attributes":[{"value":"/ Methods for combining solutions to yield an aggregate solution.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":20229,"byte_end":20296,"line_start":221,"line_end":221,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":20341,"byte_end":20354,"line_start":223,"line_end":223,"column_start":8,"column_end":21},"name":"make_solution","qualname":"::context::AggregateOps::make_solution","value":"pub fn make_solution<impl AnswerStream<C>: AnswerStream<C>>(&Self,\n                                                            &C::CanonicalGoalInEnvironment,\n                                                            impl AnswerStream<C>)\n-> Option<C::Solution>","parent":{"krate":0,"index":66},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":70},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":20606,"byte_end":20620,"line_start":232,"line_end":232,"column_start":11,"column_end":25},"name":"InferenceTable","qualname":"::context::InferenceTable","value":"InferenceTable<C: Context>: ResolventOps<C> + TruncateOps<C> + UnificationOps<C>","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75}],"decl_id":null,"docs":" An \"inference table\" contains the state to support unification and\n other operations on terms.\n","sig":null,"attributes":[{"value":"/ An \"inference table\" contains the state to support unification and","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":20494,"byte_end":20564,"line_start":230,"line_end":230,"column_start":1,"column_end":71}},{"value":"/ other operations on terms.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":20565,"byte_end":20595,"line_start":231,"line_end":231,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":21176,"byte_end":21188,"line_start":241,"line_end":241,"column_start":8,"column_end":20},"name":"into_hh_goal","qualname":"::context::InferenceTable::into_hh_goal","value":"pub fn into_hh_goal(&mut Self, C::Goal) -> HhGoal<C>","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" Convert the context's goal type into the `HhGoal` type that\n the SLG solver understands. The expectation is that the\n context's goal type has the same set of variants, but with\n different names and a different setup. If you inspect\n `HhGoal`, you will see that this is a \"shallow\" or \"lazy\"\n conversion -- that is, we convert the outermost goal into an\n `HhGoal`, but the goals contained within are left as context\n goals.\n","sig":null,"attributes":[{"value":"/ Convert the context's goal type into the `HhGoal` type that","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":20693,"byte_end":20756,"line_start":233,"line_end":233,"column_start":5,"column_end":68}},{"value":"/ the SLG solver understands. The expectation is that the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":20761,"byte_end":20820,"line_start":234,"line_end":234,"column_start":5,"column_end":64}},{"value":"/ context's goal type has the same set of variants, but with","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":20825,"byte_end":20887,"line_start":235,"line_end":235,"column_start":5,"column_end":67}},{"value":"/ different names and a different setup. If you inspect","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":20892,"byte_end":20949,"line_start":236,"line_end":236,"column_start":5,"column_end":62}},{"value":"/ `HhGoal`, you will see that this is a \"shallow\" or \"lazy\"","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":20954,"byte_end":21015,"line_start":237,"line_end":237,"column_start":5,"column_end":66}},{"value":"/ conversion -- that is, we convert the outermost goal into an","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":21020,"byte_end":21084,"line_start":238,"line_end":238,"column_start":5,"column_end":69}},{"value":"/ `HhGoal`, but the goals contained within are left as context","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":21089,"byte_end":21153,"line_start":239,"line_end":239,"column_start":5,"column_end":69}},{"value":"/ goals.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":21158,"byte_end":21168,"line_start":240,"line_end":240,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":21262,"byte_end":21273,"line_start":244,"line_end":244,"column_start":8,"column_end":19},"name":"add_clauses","qualname":"::context::InferenceTable::add_clauses","value":"pub fn add_clauses(&mut Self, &C::Environment, C::ProgramClauses)\n-> C::Environment","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":21420,"byte_end":21429,"line_start":247,"line_end":247,"column_start":8,"column_end":17},"name":"into_goal","qualname":"::context::InferenceTable::into_goal","value":"pub fn into_goal(&Self, C::DomainGoal) -> C::Goal","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" Upcast this domain goal into a more general goal.\n","sig":null,"attributes":[{"value":"/ Upcast this domain goal into a more general goal.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":21359,"byte_end":21412,"line_start":246,"line_end":246,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":21575,"byte_end":21593,"line_start":251,"line_end":251,"column_start":8,"column_end":26},"name":"next_subgoal_index","qualname":"::context::InferenceTable::next_subgoal_index","value":"pub fn next_subgoal_index(&mut Self, &ExClause<C>) -> usize","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" Selects the next appropriate subgoal index for evaluation.\n Used by: logic\n","sig":null,"attributes":[{"value":"/ Selects the next appropriate subgoal index for evaluation.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":21482,"byte_end":21544,"line_start":249,"line_end":249,"column_start":5,"column_end":67}},{"value":"/ Used by: logic","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":21549,"byte_end":21567,"line_start":250,"line_end":250,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":76},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":21816,"byte_end":21826,"line_start":257,"line_end":257,"column_start":12,"column_end":22},"name":"Floundered","qualname":"::context::Floundered","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error type for the `UnificationOps::program_clauses` method --\n indicates that the complete set of program clauses for this goal\n cannot be enumerated.\n","sig":null,"attributes":[{"value":"/ Error type for the `UnificationOps::program_clauses` method --","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":21643,"byte_end":21709,"line_start":254,"line_end":254,"column_start":1,"column_end":67}},{"value":"/ indicates that the complete set of program clauses for this goal","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":21710,"byte_end":21778,"line_start":255,"line_end":255,"column_start":1,"column_end":69}},{"value":"/ cannot be enumerated.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":21779,"byte_end":21804,"line_start":256,"line_end":256,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":78},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":21900,"byte_end":21914,"line_start":260,"line_end":260,"column_start":11,"column_end":25},"name":"UnificationOps","qualname":"::context::UnificationOps","value":"UnificationOps<C: Context>","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88}],"decl_id":null,"docs":" Methods for unifying and manipulating terms and binders.\n","sig":null,"attributes":[{"value":"/ Methods for unifying and manipulating terms and binders.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":21829,"byte_end":21889,"line_start":259,"line_end":259,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":21961,"byte_end":21992,"line_start":262,"line_end":262,"column_start":8,"column_end":39},"name":"instantiate_binders_universally","qualname":"::context::UnificationOps::instantiate_binders_universally","value":"pub fn instantiate_binders_universally(&mut Self, &C::BindersGoal) -> C::Goal","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":22071,"byte_end":22104,"line_start":265,"line_end":265,"column_start":8,"column_end":41},"name":"instantiate_binders_existentially","qualname":"::context::UnificationOps::instantiate_binders_existentially","value":"pub fn instantiate_binders_existentially(&mut Self, &C::BindersGoal)\n-> C::Goal","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":22205,"byte_end":22220,"line_start":268,"line_end":268,"column_start":8,"column_end":23},"name":"debug_ex_clause","qualname":"::context::UnificationOps::debug_ex_clause","value":"pub fn debug_ex_clause<'v>(&mut Self, &'v ExClause<C>) -> Box<Debug + 'v>","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":22314,"byte_end":22337,"line_start":271,"line_end":271,"column_start":8,"column_end":31},"name":"fully_canonicalize_goal","qualname":"::context::UnificationOps::fully_canonicalize_goal","value":"pub fn fully_canonicalize_goal(&mut Self, &C::GoalInEnvironment)\n-> (C::UCanonicalGoalInEnvironment, C::UniverseMap)","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":22485,"byte_end":22507,"line_start":277,"line_end":277,"column_start":8,"column_end":30},"name":"canonicalize_ex_clause","qualname":"::context::UnificationOps::canonicalize_ex_clause","value":"pub fn canonicalize_ex_clause(&mut Self, &ExClause<C>) -> C::CanonicalExClause","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":22595,"byte_end":22625,"line_start":280,"line_end":280,"column_start":8,"column_end":38},"name":"canonicalize_constrained_subst","qualname":"::context::UnificationOps::canonicalize_constrained_subst","value":"pub fn canonicalize_constrained_subst(&mut Self, C::Substitution,\n                                      Vec<C::RegionConstraint>)\n-> C::CanonicalConstrainedSubst","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":22794,"byte_end":22805,"line_start":287,"line_end":287,"column_start":8,"column_end":19},"name":"invert_goal","qualname":"::context::UnificationOps::invert_goal","value":"pub fn invert_goal(&mut Self, &C::GoalInEnvironment)\n-> Option<C::GoalInEnvironment>","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":23133,"byte_end":23164,"line_start":295,"line_end":295,"column_start":8,"column_end":39},"name":"unify_parameters_into_ex_clause","qualname":"::context::UnificationOps::unify_parameters_into_ex_clause","value":"pub fn unify_parameters_into_ex_clause(&mut Self, &C::Environment,\n                                       C::Variance, &C::Parameter,\n                                       &C::Parameter, &mut ExClause<C>)\n-> Fallible<()>","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":" First unify the parameters, then add the residual subgoals\n as new subgoals of the ex-clause.\n Also add region constraints.","sig":null,"attributes":[{"value":"/ First unify the parameters, then add the residual subgoals","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":22885,"byte_end":22947,"line_start":289,"line_end":289,"column_start":5,"column_end":67}},{"value":"/ as new subgoals of the ex-clause.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":22952,"byte_end":22989,"line_start":290,"line_end":290,"column_start":5,"column_end":42}},{"value":"/ Also add region constraints.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":22994,"byte_end":23026,"line_start":291,"line_end":291,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":23031,"byte_end":23034,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ If the parameters fail to unify, then `Error` is returned","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":23039,"byte_end":23100,"line_start":293,"line_end":293,"column_start":5,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":89},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":23918,"byte_end":23929,"line_start":318,"line_end":318,"column_start":11,"column_end":22},"name":"TruncateOps","qualname":"::context::TruncateOps","value":"TruncateOps<C: Context>","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92}],"decl_id":null,"docs":" \"Truncation\" (called \"abstraction\" in the papers referenced below)\n refers to the act of modifying a goal or answer that has become\n too large in order to guarantee termination.","sig":null,"attributes":[{"value":"/ \"Truncation\" (called \"abstraction\" in the papers referenced below)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":23369,"byte_end":23439,"line_start":305,"line_end":305,"column_start":1,"column_end":71}},{"value":"/ refers to the act of modifying a goal or answer that has become","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":23440,"byte_end":23507,"line_start":306,"line_end":306,"column_start":1,"column_end":68}},{"value":"/ too large in order to guarantee termination.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":23508,"byte_end":23556,"line_start":307,"line_end":307,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":23557,"byte_end":23560,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ The SLG solver doesn't care about the precise truncation function,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":23561,"byte_end":23631,"line_start":309,"line_end":309,"column_start":1,"column_end":71}},{"value":"/ so long as it's deterministic and so forth.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":23632,"byte_end":23679,"line_start":310,"line_end":310,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":23680,"byte_end":23683,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ Citations:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":23684,"byte_end":23698,"line_start":312,"line_end":312,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":23699,"byte_end":23702,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"/ - Terminating Evaluation of Logic Programs with Finite Three-Valued Models","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":23703,"byte_end":23781,"line_start":314,"line_end":314,"column_start":1,"column_end":79}},{"value":"/   - Riguzzi and Swift; ACM Transactions on Computational Logic 2013","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":23782,"byte_end":23853,"line_start":315,"line_end":315,"column_start":1,"column_end":72}},{"value":"/ - Radial Restraint","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":23854,"byte_end":23876,"line_start":316,"line_end":316,"column_start":1,"column_end":23}},{"value":"/   - Grosof and Swift; 2013","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":23877,"byte_end":23907,"line_start":317,"line_end":317,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":24043,"byte_end":24056,"line_start":321,"line_end":321,"column_start":8,"column_end":21},"name":"truncate_goal","qualname":"::context::TruncateOps::truncate_goal","value":"pub fn truncate_goal(&mut Self, &C::GoalInEnvironment)\n-> Option<C::GoalInEnvironment>","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" If `subgoal` is too large, return a truncated variant (else\n return `None`).\n","sig":null,"attributes":[{"value":"/ If `subgoal` is too large, return a truncated variant (else","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":23948,"byte_end":24011,"line_start":319,"line_end":319,"column_start":5,"column_end":68}},{"value":"/ return `None`).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":24016,"byte_end":24035,"line_start":320,"line_end":320,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":24231,"byte_end":24246,"line_start":325,"line_end":325,"column_start":8,"column_end":23},"name":"truncate_answer","qualname":"::context::TruncateOps::truncate_answer","value":"pub fn truncate_answer(&mut Self, &C::Substitution) -> Option<C::Substitution>","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" If `subst` is too large, return a truncated variant (else\n return `None`).\n","sig":null,"attributes":[{"value":"/ If `subst` is too large, return a truncated variant (else","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":24138,"byte_end":24199,"line_start":323,"line_end":323,"column_start":5,"column_end":66}},{"value":"/ return `None`).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":24204,"byte_end":24223,"line_start":324,"line_end":324,"column_start":5,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":93},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":24324,"byte_end":24336,"line_start":328,"line_end":328,"column_start":11,"column_end":23},"name":"ResolventOps","qualname":"::context::ResolventOps","value":"ResolventOps<C: Context>","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":24596,"byte_end":24612,"line_start":334,"line_end":334,"column_start":8,"column_end":24},"name":"resolvent_clause","qualname":"::context::ResolventOps::resolvent_clause","value":"pub fn resolvent_clause(&mut Self, &C::Environment, &C::DomainGoal,\n                        &C::Substitution, &C::ProgramClause)\n-> Fallible<C::CanonicalExClause>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Combines the `goal` (instantiated within `infer`) with the\n given program clause to yield the start of a new strand (a\n canonical ex-clause).","sig":null,"attributes":[{"value":"/ Combines the `goal` (instantiated within `infer`) with the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":24355,"byte_end":24417,"line_start":329,"line_end":329,"column_start":5,"column_end":67}},{"value":"/ given program clause to yield the start of a new strand (a","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":24422,"byte_end":24484,"line_start":330,"line_end":330,"column_start":5,"column_end":67}},{"value":"/ canonical ex-clause).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":24489,"byte_end":24514,"line_start":331,"line_end":331,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":24519,"byte_end":24522,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ The bindings in `infer` are unaffected by this operation.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":24527,"byte_end":24588,"line_start":333,"line_end":333,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":24818,"byte_end":24836,"line_start":342,"line_end":342,"column_start":8,"column_end":26},"name":"apply_answer_subst","qualname":"::context::ResolventOps::apply_answer_subst","value":"pub fn apply_answer_subst(&mut Self, &mut ExClause<C>, &C::GoalInEnvironment,\n                          &C::CanonicalGoalInEnvironment,\n                          &C::CanonicalConstrainedSubst) -> Fallible<()>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":97},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":25098,"byte_end":25110,"line_start":351,"line_end":351,"column_start":11,"column_end":23},"name":"AnswerStream","qualname":"::context::AnswerStream","value":"AnswerStream<C: Context>","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":25132,"byte_end":25143,"line_start":352,"line_end":352,"column_start":8,"column_end":19},"name":"peek_answer","qualname":"::context::AnswerStream::peek_answer","value":"pub fn peek_answer(&mut Self) -> Option<Answer<C>>","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":25184,"byte_end":25195,"line_start":353,"line_end":353,"column_start":8,"column_end":19},"name":"next_answer","qualname":"::context::AnswerStream::next_answer","value":"pub fn next_answer(&mut Self) -> Option<Answer<C>>","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":25382,"byte_end":25399,"line_start":357,"line_end":357,"column_start":8,"column_end":25},"name":"any_future_answer","qualname":"::context::AnswerStream::any_future_answer","value":"pub fn any_future_answer<impl FnMut(&C::InferenceNormalizedSubst) -> bool: FnMut(&C::InferenceNormalizedSubst)\n                         ->\n                         bool>(&mut Self,\n                               impl FnMut(&C::InferenceNormalizedSubst) -> bool)\n-> bool","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Invokes `test` with each possible future answer, returning true immediately\n if we find any answer for which `test` returns true.\n","sig":null,"attributes":[{"value":"/ Invokes `test` with each possible future answer, returning true immediately","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":25234,"byte_end":25313,"line_start":355,"line_end":355,"column_start":5,"column_end":84}},{"value":"/ if we find any answer for which `test` returns true.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":25318,"byte_end":25374,"line_start":356,"line_end":356,"column_start":5,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":121},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/fallible.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fallible","qualname":"::fallible","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/fallible.rs","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":390},{"krate":0,"index":409},{"krate":0,"index":407},{"krate":0,"index":405},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":397},{"krate":0,"index":395},{"krate":0,"index":392}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":122},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/fallible.rs","byte_start":26849,"byte_end":26857,"line_start":3,"line_end":3,"column_start":10,"column_end":18},"name":"Fallible","qualname":"::fallible::Fallible","value":"Result<T, NoSolution>","parent":null,"children":[],"decl_id":null,"docs":" Many of our internal operations (e.g., unification) are an attempt\n to perform some operation which may not complete.\n","sig":null,"attributes":[{"value":"/ Many of our internal operations (e.g., unification) are an attempt","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/fallible.rs","byte_start":26715,"byte_end":26785,"line_start":1,"line_end":1,"column_start":1,"column_end":71}},{"value":"/ to perform some operation which may not complete.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/fallible.rs","byte_start":26786,"byte_end":26839,"line_start":2,"line_end":2,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":390},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/fallible.rs","byte_start":27061,"byte_end":27071,"line_start":8,"line_end":8,"column_start":12,"column_end":22},"name":"NoSolution","qualname":"::fallible::NoSolution","value":"","parent":null,"children":[],"decl_id":null,"docs":" Indicates that the attempted operation has \"no solution\" -- i.e.,\n cannot be performed.\n","sig":null,"attributes":[{"value":"/ Indicates that the attempted operation has \"no solution\" -- i.e.,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/fallible.rs","byte_start":26887,"byte_end":26956,"line_start":5,"line_end":5,"column_start":1,"column_end":70}},{"value":"/ cannot be performed.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/fallible.rs","byte_start":26957,"byte_end":26981,"line_start":6,"line_end":6,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":124},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"forest","qualname":"::forest","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":143},{"krate":0,"index":163},{"krate":0,"index":171}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":137},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":27345,"byte_end":27351,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Forest","qualname":"::forest::Forest","value":"Forest {  }","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":27516,"byte_end":27519,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"new","qualname":"<Forest<C>>::new","value":"pub fn new(C) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":28083,"byte_end":28090,"line_start":34,"line_end":34,"column_start":12,"column_end":19},"name":"context","qualname":"<Forest<C>>::context","value":"pub fn context(&Self) -> &C","parent":null,"children":[],"decl_id":null,"docs":" Gives access to `self.context`. In fact, the SLG solver\n doesn't ever use `self.context` for anything, and only cares\n about the associated types and methods defined on it.  But the\n creator of the forest can use the context field to store\n configuration info (e.g., in chalk, we store the max size of a\n term in here).\n","sig":null,"attributes":[{"value":"/ Gives access to `self.context`. In fact, the SLG solver","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":27713,"byte_end":27772,"line_start":28,"line_end":28,"column_start":5,"column_end":64}},{"value":"/ doesn't ever use `self.context` for anything, and only cares","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":27777,"byte_end":27841,"line_start":29,"line_end":29,"column_start":5,"column_end":69}},{"value":"/ about the associated types and methods defined on it.  But the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":27846,"byte_end":27912,"line_start":30,"line_end":30,"column_start":5,"column_end":71}},{"value":"/ creator of the forest can use the context field to store","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":27917,"byte_end":27977,"line_start":31,"line_end":31,"column_start":5,"column_end":65}},{"value":"/ configuration info (e.g., in chalk, we store the max size of a","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":27982,"byte_end":28048,"line_start":32,"line_end":32,"column_start":5,"column_end":71}},{"value":"/ term in here).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":28053,"byte_end":28071,"line_start":33,"line_end":33,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":28609,"byte_end":28622,"line_start":52,"line_end":52,"column_start":12,"column_end":25},"name":"force_answers","qualname":"<Forest<C>>::force_answers","value":"pub fn force_answers<impl ContextOps<C>: ContextOps<C>>(&mut Self,\n                                                        &impl ContextOps<C>,\n                                                        C::UCanonicalGoalInEnvironment,\n                                                        usize)\n-> Option<Vec<Answer<C>>>","parent":null,"children":[],"decl_id":null,"docs":" Finds the first N answers, looping as much as needed to get\n them. Returns `None` if the result flounders.","sig":null,"attributes":[{"value":"/ Finds the first N answers, looping as much as needed to get","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":28300,"byte_end":28363,"line_start":43,"line_end":43,"column_start":5,"column_end":68}},{"value":"/ them. Returns `None` if the result flounders.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":28368,"byte_end":28417,"line_start":44,"line_end":44,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":28422,"byte_end":28425,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ Thanks to subgoal abstraction and so forth, this should always","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":28430,"byte_end":28496,"line_start":46,"line_end":46,"column_start":5,"column_end":71}},{"value":"/ terminate.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":28501,"byte_end":28515,"line_start":47,"line_end":47,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":28520,"byte_end":28523,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":28528,"byte_end":28540,"line_start":49,"line_end":49,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":28545,"byte_end":28548,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ Panics if a negative cycle was detected.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":28553,"byte_end":28597,"line_start":51,"line_end":51,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":30967,"byte_end":30972,"line_start":107,"line_end":107,"column_start":12,"column_end":17},"name":"solve","qualname":"<Forest<C>>::solve","value":"pub fn solve<impl ContextOps<C>: ContextOps<C>>(&mut Self,\n                                                &impl ContextOps<C>,\n                                                &C::UCanonicalGoalInEnvironment)\n-> Option<C::Solution>","parent":null,"children":[],"decl_id":null,"docs":" Solves a given goal, producing the solution. This will do only\n as much work towards `goal` as it has to (and that works is\n cached for future attempts).\n","sig":null,"attributes":[{"value":"/ Solves a given goal, producing the solution. This will do only","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":30784,"byte_end":30850,"line_start":104,"line_end":104,"column_start":5,"column_end":71}},{"value":"/ as much work towards `goal` as it has to (and that works is","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":30855,"byte_end":30918,"line_start":105,"line_end":105,"column_start":5,"column_end":68}},{"value":"/ cached for future attempts).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":30923,"byte_end":30955,"line_start":106,"line_end":106,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":31494,"byte_end":31508,"line_start":119,"line_end":119,"column_start":12,"column_end":26},"name":"solve_multiple","qualname":"<Forest<C>>::solve_multiple","value":"pub fn solve_multiple<impl ContextOps<C>: ContextOps<C>,\n                      impl FnMut(C::CanonicalConstrainedSubst, bool) -> bool: FnMut(C::CanonicalConstrainedSubst,\n                                                                                    bool)\n                      ->\n                      bool>(&mut Self, &impl ContextOps<C>,\n                            &C::UCanonicalGoalInEnvironment,\n                            impl FnMut(C::CanonicalConstrainedSubst, bool) -> bool)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Solves a given goal, producing the solution. This will do only\n as much work towards `goal` as it has to (and that works is\n cached for future attempts). Calls provided function `f` to\n iterate over multiple solutions until the function return `false`.\n","sig":null,"attributes":[{"value":"/ Solves a given goal, producing the solution. This will do only","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":31205,"byte_end":31271,"line_start":115,"line_end":115,"column_start":5,"column_end":71}},{"value":"/ as much work towards `goal` as it has to (and that works is","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":31276,"byte_end":31339,"line_start":116,"line_end":116,"column_start":5,"column_end":68}},{"value":"/ cached for future attempts). Calls provided function `f` to","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":31344,"byte_end":31407,"line_start":117,"line_end":117,"column_start":5,"column_end":68}},{"value":"/ iterate over multiple solutions until the function return `false`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":31412,"byte_end":31482,"line_start":118,"line_end":118,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":33358,"byte_end":33385,"line_start":171,"line_end":171,"column_start":12,"column_end":39},"name":"num_cached_answers_for_goal","qualname":"<Forest<C>>::num_cached_answers_for_goal","value":"pub fn num_cached_answers_for_goal<impl ContextOps<C>: ContextOps<C>>(&mut Self,\n                                                                      &impl ContextOps<C>,\n                                                                      &C::UCanonicalGoalInEnvironment)\n-> usize","parent":null,"children":[],"decl_id":null,"docs":" Useful for testing.\n","sig":null,"attributes":[{"value":"/ Useful for testing.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":33323,"byte_end":33346,"line_start":170,"line_end":170,"column_start":5,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":180},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hh","qualname":"::hh","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":410},{"krate":0,"index":480},{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":469},{"krate":0,"index":471},{"krate":0,"index":465},{"krate":0,"index":442},{"krate":0,"index":439}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":412},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":36141,"byte_end":36147,"line_start":8,"line_end":8,"column_start":5,"column_end":11},"name":"ForAll","qualname":"::hh::HhGoal::ForAll","value":"HhGoal::ForAll(C::BindersGoal)","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":" Introduces a binding at depth 0, shifting other bindings up\n (deBruijn index).\n","sig":null,"attributes":[{"value":"/ Introduces a binding at depth 0, shifting other bindings up","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":36047,"byte_end":36110,"line_start":6,"line_end":6,"column_start":5,"column_end":68}},{"value":"/ (deBruijn index).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":36115,"byte_end":36136,"line_start":7,"line_end":7,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":415},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":36169,"byte_end":36175,"line_start":9,"line_end":9,"column_start":5,"column_end":11},"name":"Exists","qualname":"::hh::HhGoal::Exists","value":"HhGoal::Exists(C::BindersGoal)","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":418},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":36197,"byte_end":36204,"line_start":10,"line_end":10,"column_start":5,"column_end":12},"name":"Implies","qualname":"::hh::HhGoal::Implies","value":"HhGoal::Implies(C::ProgramClauses, C::Goal)","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":422},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":36238,"byte_end":36241,"line_start":11,"line_end":11,"column_start":5,"column_end":8},"name":"And","qualname":"::hh::HhGoal::And","value":"HhGoal::And(C::Goal, C::Goal)","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":426},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":36265,"byte_end":36268,"line_start":12,"line_end":12,"column_start":5,"column_end":8},"name":"Not","qualname":"::hh::HhGoal::Not","value":"HhGoal::Not(C::Goal)","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":429},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":36283,"byte_end":36288,"line_start":13,"line_end":13,"column_start":5,"column_end":10},"name":"Unify","qualname":"::hh::HhGoal::Unify","value":"HhGoal::Unify(C::Variance, C::Parameter, C::Parameter)","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":434},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":36335,"byte_end":36345,"line_start":14,"line_end":14,"column_start":5,"column_end":15},"name":"DomainGoal","qualname":"::hh::HhGoal::DomainGoal","value":"HhGoal::DomainGoal(C::DomainGoal)","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":437},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":36804,"byte_end":36815,"line_start":23,"line_end":23,"column_start":5,"column_end":16},"name":"CannotProve","qualname":"::hh::HhGoal::CannotProve","value":"HhGoal::CannotProve","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":" Indicates something that cannot be proven to be true or false\n definitively. This can occur with overflow but also with\n unifications of placeholder variables like `forall<X,Y> { X = Y\n }`. Of course, that statement is false, as there exist types\n X, Y where `X = Y` is not true. But we treat it as \"cannot\n prove\" so that `forall<X,Y> { not { X = Y } }` also winds up\n as cannot prove.\n","sig":null,"attributes":[{"value":"/ Indicates something that cannot be proven to be true or false","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":36367,"byte_end":36432,"line_start":16,"line_end":16,"column_start":5,"column_end":70}},{"value":"/ definitively. This can occur with overflow but also with","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":36437,"byte_end":36497,"line_start":17,"line_end":17,"column_start":5,"column_end":65}},{"value":"/ unifications of placeholder variables like `forall<X,Y> { X = Y","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":36502,"byte_end":36569,"line_start":18,"line_end":18,"column_start":5,"column_end":72}},{"value":"/ }`. Of course, that statement is false, as there exist types","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":36574,"byte_end":36638,"line_start":19,"line_end":19,"column_start":5,"column_end":69}},{"value":"/ X, Y where `X = Y` is not true. But we treat it as \"cannot","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":36643,"byte_end":36705,"line_start":20,"line_end":20,"column_start":5,"column_end":67}},{"value":"/ prove\" so that `forall<X,Y> { not { X = Y } }` also winds up","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":36710,"byte_end":36774,"line_start":21,"line_end":21,"column_start":5,"column_end":69}},{"value":"/ as cannot prove.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":36779,"byte_end":36799,"line_start":22,"line_end":22,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":410},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":36022,"byte_end":36028,"line_start":5,"line_end":5,"column_start":10,"column_end":16},"name":"HhGoal","qualname":"::hh::HhGoal","value":"pub enum HhGoal<C: Context> {\n\n    /// Introduces a binding at depth 0, shifting other bindings up\n    /// (deBruijn index).\n    ForAll(C::BindersGoal),\n    Exists(C::BindersGoal),\n    Implies(C::ProgramClauses, C::Goal),\n    And(C::Goal, C::Goal),\n    Not(C::Goal),\n    Unify(C::Variance, C::Parameter, C::Parameter),\n    DomainGoal(C::DomainGoal),\n\n    /// Indicates something that cannot be proven to be true or false\n    /// definitively. This can occur with overflow but also with\n    /// unifications of placeholder variables like `forall<X,Y> { X = Y\n    /// }`. Of course, that statement is false, as there exist types\n    /// X, Y where `X = Y` is not true. But we treat it as \"cannot\n    /// prove\" so that `forall<X,Y> { not { X = Y } }` also winds up\n    /// as cannot prove.\n    CannotProve,\n}","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":415},{"krate":0,"index":418},{"krate":0,"index":422},{"krate":0,"index":426},{"krate":0,"index":429},{"krate":0,"index":434},{"krate":0,"index":437}],"decl_id":null,"docs":" A general goal; this is the full range of questions you can pose to Chalk.\n","sig":null,"attributes":[{"value":"/ A general goal; this is the full range of questions you can pose to Chalk.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/hh.rs","byte_start":35934,"byte_end":36012,"line_start":4,"line_end":4,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":631},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":2881,"byte_end":2891,"line_start":82,"line_end":82,"column_start":16,"column_end":26},"name":"TableIndex","qualname":"::TableIndex","value":"TableIndex {  }","parent":null,"children":[{"krate":0,"index":632}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":709},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":3782,"byte_end":3790,"line_start":109,"line_end":109,"column_start":12,"column_end":20},"name":"ExClause","qualname":"::ExClause","value":"ExClause { subst, ambiguous, constraints, subgoals, current_time, floundered_subgoals }","parent":null,"children":[{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716}],"decl_id":null,"docs":" The paper describes these as `A :- D | G`.\n","sig":null,"attributes":[{"value":"/ The paper describes these as `A :- D | G`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":3679,"byte_end":3725,"line_start":107,"line_end":107,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":711},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":3902,"byte_end":3907,"line_start":112,"line_end":112,"column_start":9,"column_end":14},"name":"subst","qualname":"::ExClause::subst","value":"<C as context::Context>::Substitution","parent":{"krate":0,"index":709},"children":[],"decl_id":null,"docs":" The substitution which, applied to the goal of our table,\n would yield A.\n","sig":null,"attributes":[{"value":"/ The substitution which, applied to the goal of our table,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":3809,"byte_end":3870,"line_start":110,"line_end":110,"column_start":5,"column_end":66}},{"value":"/ would yield A.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":3875,"byte_end":3893,"line_start":111,"line_end":111,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":712},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":4208,"byte_end":4217,"line_start":118,"line_end":118,"column_start":9,"column_end":18},"name":"ambiguous","qualname":"::ExClause::ambiguous","value":"bool","parent":{"krate":0,"index":709},"children":[],"decl_id":null,"docs":" True if any subgoals were depended upon negatively and\n were not fully evaluated, or if we encountered a `CannotProve`\n goal. (In the full SLG algorithm, we would use delayed literals here,\n but we don't bother, as we don't need that support.)\n","sig":null,"attributes":[{"value":"/ True if any subgoals were depended upon negatively and","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":3931,"byte_end":3989,"line_start":114,"line_end":114,"column_start":5,"column_end":63}},{"value":"/ were not fully evaluated, or if we encountered a `CannotProve`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":3994,"byte_end":4060,"line_start":115,"line_end":115,"column_start":5,"column_end":71}},{"value":"/ goal. (In the full SLG algorithm, we would use delayed literals here,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":4065,"byte_end":4138,"line_start":116,"line_end":116,"column_start":5,"column_end":78}},{"value":"/ but we don't bother, as we don't need that support.)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":4143,"byte_end":4199,"line_start":117,"line_end":117,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":713},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":4282,"byte_end":4293,"line_start":121,"line_end":121,"column_start":9,"column_end":20},"name":"constraints","qualname":"::ExClause::constraints","value":"std::vec::Vec<<C as context::Context>::RegionConstraint>","parent":{"krate":0,"index":709},"children":[],"decl_id":null,"docs":" Region constraints we have accumulated.\n","sig":null,"attributes":[{"value":"/ Region constraints we have accumulated.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":4230,"byte_end":4273,"line_start":120,"line_end":120,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":714},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":4377,"byte_end":4385,"line_start":124,"line_end":124,"column_start":9,"column_end":17},"name":"subgoals","qualname":"::ExClause::subgoals","value":"std::vec::Vec<Literal<C>>","parent":{"krate":0,"index":709},"children":[],"decl_id":null,"docs":" Subgoals: literals that must be proven\n","sig":null,"attributes":[{"value":"/ Subgoals: literals that must be proven","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":4326,"byte_end":4368,"line_start":123,"line_end":123,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":715},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":4783,"byte_end":4795,"line_start":132,"line_end":132,"column_start":9,"column_end":21},"name":"current_time","qualname":"::ExClause::current_time","value":"TimeStamp","parent":{"krate":0,"index":709},"children":[],"decl_id":null,"docs":" Time stamp that is incremented each time we find an answer to\n some subgoal. This is used to figure out whether any of the\n floundered subgoals may no longer be floundered: we record the\n current time when we add something to the list of floundered\n subgoals, and then we can compare whether its value has\n changed since then.\n","sig":null,"attributes":[{"value":"/ Time stamp that is incremented each time we find an answer to","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":4409,"byte_end":4474,"line_start":126,"line_end":126,"column_start":5,"column_end":70}},{"value":"/ some subgoal. This is used to figure out whether any of the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":4479,"byte_end":4542,"line_start":127,"line_end":127,"column_start":5,"column_end":68}},{"value":"/ floundered subgoals may no longer be floundered: we record the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":4547,"byte_end":4613,"line_start":128,"line_end":128,"column_start":5,"column_end":71}},{"value":"/ current time when we add something to the list of floundered","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":4618,"byte_end":4682,"line_start":129,"line_end":129,"column_start":5,"column_end":69}},{"value":"/ subgoals, and then we can compare whether its value has","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":4687,"byte_end":4746,"line_start":130,"line_end":130,"column_start":5,"column_end":64}},{"value":"/ changed since then.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":4751,"byte_end":4774,"line_start":131,"line_end":131,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":716},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":4918,"byte_end":4937,"line_start":136,"line_end":136,"column_start":9,"column_end":28},"name":"floundered_subgoals","qualname":"::ExClause::floundered_subgoals","value":"std::vec::Vec<FlounderedSubgoal<C>>","parent":{"krate":0,"index":709},"children":[],"decl_id":null,"docs":" List of subgoals that have floundered. See `FlounderedSubgoal`\n for more information.\n","sig":null,"attributes":[{"value":"/ List of subgoals that have floundered. See `FlounderedSubgoal`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":4813,"byte_end":4879,"line_start":134,"line_end":134,"column_start":5,"column_end":71}},{"value":"/ for more information.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":4884,"byte_end":4909,"line_start":135,"line_end":135,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":738},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5308,"byte_end":5317,"line_start":144,"line_end":144,"column_start":12,"column_end":21},"name":"TimeStamp","qualname":"::TimeStamp","value":"TimeStamp {  }","parent":null,"children":[{"krate":0,"index":739}],"decl_id":null,"docs":" The \"time stamp\" is a simple clock that gets incremented each time\n we encounter a positive answer in processing a particular\n strand. This is used as an optimization to help us figure out when\n we *may* have changed inference variables.\n","sig":null,"attributes":[{"value":"/ The \"time stamp\" is a simple clock that gets incremented each time","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":4969,"byte_end":5039,"line_start":139,"line_end":139,"column_start":1,"column_end":71}},{"value":"/ we encounter a positive answer in processing a particular","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5040,"byte_end":5101,"line_start":140,"line_end":140,"column_start":1,"column_end":62}},{"value":"/ strand. This is used as an optimization to help us figure out when","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5102,"byte_end":5172,"line_start":141,"line_end":141,"column_start":1,"column_end":71}},{"value":"/ we *may* have changed inference variables.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5173,"byte_end":5219,"line_start":142,"line_end":142,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":765},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6695,"byte_end":6712,"line_start":185,"line_end":185,"column_start":12,"column_end":29},"name":"FlounderedSubgoal","qualname":"::FlounderedSubgoal","value":"FlounderedSubgoal { floundered_literal, floundered_time }","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":768}],"decl_id":null,"docs":" A \"floundered\" subgoal is one that contains unbound existential\n variables for which it cannot produce a value. The classic example\n of floundering is a negative subgoal:","sig":null,"attributes":[{"value":"/ A \"floundered\" subgoal is one that contains unbound existential","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5420,"byte_end":5487,"line_start":154,"line_end":154,"column_start":1,"column_end":68}},{"value":"/ variables for which it cannot produce a value. The classic example","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5488,"byte_end":5558,"line_start":155,"line_end":155,"column_start":1,"column_end":71}},{"value":"/ of floundering is a negative subgoal:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5559,"byte_end":5600,"line_start":156,"line_end":156,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5601,"byte_end":5604,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ ```notrust","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5605,"byte_end":5619,"line_start":158,"line_end":158,"column_start":1,"column_end":15}},{"value":"/ not { Implemented(?T: Foo) }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5620,"byte_end":5652,"line_start":159,"line_end":159,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5653,"byte_end":5660,"line_start":160,"line_end":160,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5661,"byte_end":5664,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ The way the prolog solver works, it basically enumerates all the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5665,"byte_end":5733,"line_start":162,"line_end":162,"column_start":1,"column_end":69}},{"value":"/ ways that a given goal can be *true*. But we can't use this","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5734,"byte_end":5797,"line_start":163,"line_end":163,"column_start":1,"column_end":64}},{"value":"/ technique to find all the ways that `?T: Foo` can be *false* -- so","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5798,"byte_end":5868,"line_start":164,"line_end":164,"column_start":1,"column_end":71}},{"value":"/ we call it floundered. In other words, we can evaluate a negative","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5869,"byte_end":5938,"line_start":165,"line_end":165,"column_start":1,"column_end":70}},{"value":"/ goal, but only if we know what `?T` is -- we can't use the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5939,"byte_end":6001,"line_start":166,"line_end":166,"column_start":1,"column_end":63}},{"value":"/ negative goal to help us figuring out `?T`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6002,"byte_end":6049,"line_start":167,"line_end":167,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6050,"byte_end":6053,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ In addition to negative goals, we use floundering to prevent the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6054,"byte_end":6122,"line_start":169,"line_end":169,"column_start":1,"column_end":69}},{"value":"/ trait solver from trying to enumerate very large goals with tons","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6123,"byte_end":6191,"line_start":170,"line_end":170,"column_start":1,"column_end":69}},{"value":"/ of answers. For example, we consider a goal like `?T: Sized` to","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6192,"byte_end":6259,"line_start":171,"line_end":171,"column_start":1,"column_end":68}},{"value":"/ \"flounder\", since we can't hope to enumerate all types that are","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6260,"byte_end":6327,"line_start":172,"line_end":172,"column_start":1,"column_end":68}},{"value":"/ `Sized`. The same is true for other special traits like `Clone`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6328,"byte_end":6396,"line_start":173,"line_end":173,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6397,"byte_end":6400,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ Floundering can also occur indirectly. For example:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6401,"byte_end":6456,"line_start":175,"line_end":175,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6457,"byte_end":6460,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ ```notrust","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6461,"byte_end":6475,"line_start":177,"line_end":177,"column_start":1,"column_end":15}},{"value":"/ trait Foo { }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6476,"byte_end":6493,"line_start":178,"line_end":178,"column_start":1,"column_end":18}},{"value":"/ impl<T> Foo for T { }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6494,"byte_end":6519,"line_start":179,"line_end":179,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6520,"byte_end":6527,"line_start":180,"line_end":180,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6528,"byte_end":6531,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ trying to solve `?T: Foo` would immediately require solving `?T:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6532,"byte_end":6600,"line_start":182,"line_end":182,"column_start":1,"column_end":69}},{"value":"/ Sized`, and hence would flounder.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6601,"byte_end":6638,"line_start":183,"line_end":183,"column_start":1,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":767},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6768,"byte_end":6786,"line_start":187,"line_end":187,"column_start":9,"column_end":27},"name":"floundered_literal","qualname":"::FlounderedSubgoal::floundered_literal","value":"Literal<C>","parent":{"krate":0,"index":765},"children":[],"decl_id":null,"docs":" Literal that floundered.\n","sig":null,"attributes":[{"value":"/ Literal that floundered.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6731,"byte_end":6759,"line_start":186,"line_end":186,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":768},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6889,"byte_end":6904,"line_start":191,"line_end":191,"column_start":9,"column_end":24},"name":"floundered_time","qualname":"::FlounderedSubgoal::floundered_time","value":"TimeStamp","parent":{"krate":0,"index":765},"children":[],"decl_id":null,"docs":" Current value of the strand's clock at the time of\n floundering.\n","sig":null,"attributes":[{"value":"/ Current value of the strand's clock at the time of","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6805,"byte_end":6859,"line_start":189,"line_end":189,"column_start":5,"column_end":59}},{"value":"/ floundering.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":6864,"byte_end":6880,"line_start":190,"line_end":190,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":814},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":7259,"byte_end":7265,"line_start":203,"line_end":203,"column_start":12,"column_end":18},"name":"Answer","qualname":"::Answer","value":"Answer { subst, ambiguous }","parent":null,"children":[{"krate":0,"index":816},{"krate":0,"index":817}],"decl_id":null,"docs":" An \"answer\" in the on-demand solver corresponds to a fully solved\n goal for a particular table (modulo delayed literals). It contains\n a substitution\n","sig":null,"attributes":[{"value":"/ An \"answer\" in the on-demand solver corresponds to a fully solved","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":7026,"byte_end":7095,"line_start":199,"line_end":199,"column_start":1,"column_end":70}},{"value":"/ goal for a particular table (modulo delayed literals). It contains","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":7096,"byte_end":7166,"line_start":200,"line_end":200,"column_start":1,"column_end":71}},{"value":"/ a substitution","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":7167,"byte_end":7185,"line_start":201,"line_end":201,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":816},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":7405,"byte_end":7410,"line_start":206,"line_end":206,"column_start":9,"column_end":14},"name":"subst","qualname":"::Answer::subst","value":"<C as context::Context>::CanonicalConstrainedSubst","parent":{"krate":0,"index":814},"children":[],"decl_id":null,"docs":" A fully instantiated version of the goal for which the query\n is true (including region constraints).\n","sig":null,"attributes":[{"value":"/ A fully instantiated version of the goal for which the query","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":7284,"byte_end":7348,"line_start":204,"line_end":204,"column_start":5,"column_end":69}},{"value":"/ is true (including region constraints).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":7353,"byte_end":7396,"line_start":205,"line_end":205,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":817},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":7664,"byte_end":7673,"line_start":211,"line_end":211,"column_start":9,"column_end":18},"name":"ambiguous","qualname":"::Answer::ambiguous","value":"bool","parent":{"krate":0,"index":814},"children":[],"decl_id":null,"docs":" If this flag is set, then the answer could be neither proven\n nor disproven. This could be the size of the answer exceeded\n `max_size` or because of a negative loop (e.g., `P :- not { P }`).\n","sig":null,"attributes":[{"value":"/ If this flag is set, then the answer could be neither proven","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":7447,"byte_end":7511,"line_start":208,"line_end":208,"column_start":5,"column_end":69}},{"value":"/ nor disproven. This could be the size of the answer exceeded","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":7516,"byte_end":7580,"line_start":209,"line_end":209,"column_start":5,"column_end":69}},{"value":"/ `max_size` or because of a negative loop (e.g., `P :- not { P }`).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":7585,"byte_end":7655,"line_start":210,"line_end":210,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":855},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":7824,"byte_end":7832,"line_start":218,"line_end":218,"column_start":5,"column_end":13},"name":"Positive","qualname":"::Literal::Positive","value":"Literal::Positive(C::GoalInEnvironment)","parent":{"krate":0,"index":853},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":858},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":7860,"byte_end":7868,"line_start":219,"line_end":219,"column_start":5,"column_end":13},"name":"Negative","qualname":"::Literal::Negative","value":"Literal::Negative(C::GoalInEnvironment)","parent":{"krate":0,"index":853},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":853},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":7771,"byte_end":7778,"line_start":216,"line_end":216,"column_start":10,"column_end":17},"name":"Literal","qualname":"::Literal","value":"pub enum Literal<C: Context> {\n    Positive(C::GoalInEnvironment),\n    Negative(C::GoalInEnvironment),\n}","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":858}],"decl_id":null,"docs":" Either `A` or `~A`, where `A` is a `Env |- Goal`.\n","sig":null,"attributes":[{"value":"/ Either `A` or `~A`, where `A` is a `Env |- Goal`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":7684,"byte_end":7737,"line_start":214,"line_end":214,"column_start":1,"column_end":54}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/derived.rs","byte_start":26105,"byte_end":26112,"line_start":12,"line_end":12,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/derived.rs","byte_start":26414,"byte_end":26421,"line_start":23,"line_end":23,"column_start":25,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/derived.rs","byte_start":26455,"byte_end":26462,"line_start":25,"line_end":25,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":27493,"byte_end":27499,"line_start":18,"line_end":18,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":159},{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":33878,"byte_end":33890,"line_start":188,"line_end":188,"column_start":62,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/logic.rs","byte_start":40263,"byte_end":40269,"line_start":104,"line_end":104,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/simplify.rs","byte_start":93327,"byte_end":93333,"line_start":7,"line_end":7,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/stack.rs","byte_start":97054,"byte_end":97059,"line_start":29,"line_end":29,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/stack.rs","byte_start":98241,"byte_end":98246,"line_start":67,"line_end":67,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/stack.rs","byte_start":98408,"byte_end":98413,"line_start":75,"line_end":75,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/strand.rs","byte_start":99692,"byte_end":99698,"line_start":39,"line_end":39,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/table.rs","byte_start":101401,"byte_end":101406,"line_start":44,"line_end":44,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/table.rs","byte_start":104522,"byte_end":104533,"line_start":148,"line_end":148,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/table.rs","byte_start":104623,"byte_end":104629,"line_start":152,"line_end":152,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/tables.rs","byte_start":105328,"byte_end":105334,"line_start":17,"line_end":17,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/tables.rs","byte_start":106217,"byte_end":106223,"line_start":48,"line_end":48,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/tables.rs","byte_start":106397,"byte_end":106403,"line_start":56,"line_end":56,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5344,"byte_end":5353,"line_start":148,"line_end":148,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":9680,"byte_end":9688,"line_start":262,"line_end":262,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":10212,"byte_end":10228,"line_start":280,"line_end":280,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":2710,"byte_end":2717,"line_start":69,"line_end":69,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":10}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":2740,"byte_end":2748,"line_start":71,"line_end":71,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":121}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":2758,"byte_end":2764,"line_start":72,"line_end":72,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":124}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":2774,"byte_end":2776,"line_start":73,"line_end":73,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":180}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12752,"byte_end":12757,"line_start":35,"line_end":35,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":1742},"to":{"krate":0,"index":25}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":12760,"byte_end":12765,"line_start":35,"line_end":35,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":6599},"to":{"krate":0,"index":25}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":18137,"byte_end":18142,"line_start":168,"line_end":168,"column_start":35,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":18145,"byte_end":18150,"line_start":168,"line_end":168,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":1742},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":18153,"byte_end":18158,"line_start":168,"line_end":168,"column_start":51,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":6599},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":18161,"byte_end":18173,"line_start":168,"line_end":168,"column_start":59,"column_end":71},"kind":"SuperTrait","from":{"krate":0,"index":66},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":20634,"byte_end":20646,"line_start":232,"line_end":232,"column_start":39,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":93},"to":{"krate":0,"index":70}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":20652,"byte_end":20663,"line_start":232,"line_end":232,"column_start":57,"column_end":68},"kind":"SuperTrait","from":{"krate":0,"index":89},"to":{"krate":0,"index":70}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/context.rs","byte_start":20669,"byte_end":20683,"line_start":232,"line_end":232,"column_start":74,"column_end":88},"kind":"SuperTrait","from":{"krate":0,"index":78},"to":{"krate":0,"index":70}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/derived.rs","byte_start":26105,"byte_end":26112,"line_start":12,"line_end":12,"column_start":32,"column_end":39},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":853},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/derived.rs","byte_start":26414,"byte_end":26421,"line_start":23,"line_end":23,"column_start":25,"column_end":32},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":853},"to":{"krate":2,"index":1775}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/derived.rs","byte_start":26455,"byte_end":26462,"line_start":25,"line_end":25,"column_start":27,"column_end":34},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":853},"to":{"krate":2,"index":6787}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":27493,"byte_end":27499,"line_start":18,"line_end":18,"column_start":18,"column_end":24},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":137},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/forest.rs","byte_start":33878,"byte_end":33890,"line_start":188,"line_end":188,"column_start":62,"column_end":74},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":163},"to":{"krate":0,"index":97}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/logic.rs","byte_start":40263,"byte_end":40269,"line_start":104,"line_end":104,"column_start":18,"column_end":24},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":137},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/simplify.rs","byte_start":93327,"byte_end":93333,"line_start":7,"line_end":7,"column_start":18,"column_end":24},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":137},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/stack.rs","byte_start":97054,"byte_end":97059,"line_start":29,"line_end":29,"column_start":6,"column_end":11},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":532},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/stack.rs","byte_start":98241,"byte_end":98246,"line_start":67,"line_end":67,"column_start":28,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":532},"to":{"krate":2,"index":2323}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/stack.rs","byte_start":98408,"byte_end":98413,"line_start":75,"line_end":75,"column_start":31,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":532},"to":{"krate":2,"index":2327}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/strand.rs","byte_start":99692,"byte_end":99698,"line_start":39,"line_end":39,"column_start":36,"column_end":42},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":300},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/table.rs","byte_start":101401,"byte_end":101406,"line_start":44,"line_end":44,"column_start":18,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":317},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/table.rs","byte_start":104522,"byte_end":104533,"line_start":148,"line_end":148,"column_start":6,"column_end":17},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":598},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/table.rs","byte_start":104623,"byte_end":104629,"line_start":152,"line_end":152,"column_start":18,"column_end":24},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":814},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/tables.rs","byte_start":105328,"byte_end":105334,"line_start":17,"line_end":17,"column_start":18,"column_end":24},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":354},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/tables.rs","byte_start":106217,"byte_end":106223,"line_start":48,"line_end":48,"column_start":40,"column_end":46},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":354},"to":{"krate":2,"index":2323}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/tables.rs","byte_start":106397,"byte_end":106403,"line_start":56,"line_end":56,"column_start":43,"column_end":49},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":354},"to":{"krate":2,"index":2327}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":5344,"byte_end":5353,"line_start":148,"line_end":148,"column_start":6,"column_end":15},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":738},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":9680,"byte_end":9688,"line_start":262,"line_end":262,"column_start":6,"column_end":14},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":867},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-engine/src/lib.rs","byte_start":10212,"byte_end":10228,"line_start":280,"line_end":280,"column_start":6,"column_end":22},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":687},"to":{"krate":4294967295,"index":4294967295}}]}