{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2","program":"/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","byteorder","/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=156fbd7e0147e2e5","-C","extra-filename=-156fbd7e0147e2e5","--out-dir","/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","-L","dependency=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","--cap-lints","allow","--cfg","byteorder_i128","--error-format=json","--sysroot","/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libbyteorder-156fbd7e0147e2e5.rmeta"},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[7786802486158187971,17904586164133949077]},"crate_root":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src","external_crates":[{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3710194649008989715,14559669089861450418]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9392975149979234998,17049149762166397483]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16512841426258775062,11665789721448774207]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10630307797325716480,16523273723520132349]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3264716338318844693,12681592148182797578]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[140397795414171834,1910274434865169512]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5557669672741662647,10322216614238315513]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14339503364484872598,13531520383629478599]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14161909693946419124,17554770295131960960]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9716880057120631437,4575334529379688610]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17190292700912465587,13293574150729131089]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[16973425767318922457,5762286362994384933]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[3049460603833016674,5895625007283919048]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[8971705811930800565,4802059752817986136]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[7414259369911982492,16117941559470048194]}}],"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":0,"byte_end":103311,"line_start":1,"line_end":3328,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":17},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":2688,"byte_end":2700,"line_start":89,"line_end":89,"column_start":14,"column_end":26},"alias_span":null,"name":"ReadBytesExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":103},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":2702,"byte_end":2715,"line_start":89,"line_end":89,"column_start":28,"column_end":41},"alias_span":null,"name":"WriteBytesExt","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":0,"byte_end":103311,"line_start":1,"line_end":3328,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":365},{"krate":0,"index":5},{"krate":0,"index":367},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":175},{"krate":0,"index":319},{"krate":0,"index":336},{"krate":0,"index":335},{"krate":0,"index":333},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":327},{"krate":0,"index":325},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":320},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":338},{"krate":0,"index":355},{"krate":0,"index":354},{"krate":0,"index":352},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":346},{"krate":0,"index":344},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":339},{"krate":0,"index":247},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":257},{"krate":0,"index":288}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].","sig":null,"attributes":[{"value":"*\nThis crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].\n\nThe organization of the crate is pretty simple. A trait, [`ByteOrder`], specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, [`BigEndian`]\nand [`LittleEndian`] implement these methods. Finally, [`ReadBytesExt`] and\n[`WriteBytesExt`] provide convenience methods available to all types that\nimplement [`Read`] and [`Write`].\n\nAn alias, [`NetworkEndian`], for [`BigEndian`] is provided to help improve\ncode clarity.\n\nAn additional alias, [`NativeEndian`], is provided for the endianness of the\nlocal platform. This is convenient when serializing data for use and\nconversions are not desired.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`] type:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n// Note that we use type parameters to indicate which kind of byte order\n// we want!\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\nWrite unsigned 16 bit little-endian integers to a [`Write`] type:\n\n```rust\nuse byteorder::{LittleEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<LittleEndian>(517).unwrap();\nwtr.write_u16::<LittleEndian>(768).unwrap();\nassert_eq!(wtr, vec![5, 2, 0, 3]);\n```\n\n# Optional Features\n\nThis crate optionally provides support for 128 bit values (`i128` and `u128`)\nwhen built with the `i128` feature enabled.\n\nThis crate can also be used without the standard library.\n\n# Alternatives\n\nNote that as of Rust 1.32, the standard numeric types provide built-in methods\nlike `to_le_bytes` and `from_le_bytes`, which support some of the same use\ncases.\n\n[big-endian or little-endian order]: https://en.wikipedia.org/wiki/Endianness\n[`ByteOrder`]: trait.ByteOrder.html\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`ReadBytesExt`]: trait.ReadBytesExt.html\n[`WriteBytesExt`]: trait.WriteBytesExt.html\n[`NetworkEndian`]: type.NetworkEndian.html\n[`NativeEndian`]: type.NativeEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html\n*/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":0,"byte_end":2347,"line_start":1,"line_end":68,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":2349,"byte_end":2371,"line_start":70,"line_end":70,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":17},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104192,"byte_end":104204,"line_start":28,"line_end":28,"column_start":11,"column_end":23},"name":"ReadBytesExt","qualname":"::io::ReadBytesExt","value":"ReadBytesExt: io::Read","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99}],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[{"value":"/ Extends [`Read`] with methods for reading numbers. (For `std::io`.)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":103375,"byte_end":103446,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":103447,"byte_end":103450,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Most of the methods defined here have an unconstrained type parameter that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":103451,"byte_end":103529,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ must be explicitly instantiated. Typically, it is instantiated with either","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":103530,"byte_end":103608,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/ the [`BigEndian`] or [`LittleEndian`] types defined in this crate.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":103609,"byte_end":103679,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":103680,"byte_end":103683,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":103684,"byte_end":103698,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":103699,"byte_end":103702,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Read unsigned 16 bit big-endian integers from a [`Read`]:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":103703,"byte_end":103764,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":103765,"byte_end":103768,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":103769,"byte_end":103780,"line_start":16,"line_end":16,"column_start":1,"column_end":12}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":103781,"byte_end":103805,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":103806,"byte_end":103851,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":103852,"byte_end":103855,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":103856,"byte_end":103904,"line_start":20,"line_end":20,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":103905,"byte_end":103963,"line_start":21,"line_end":21,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":103964,"byte_end":104022,"line_start":22,"line_end":22,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104023,"byte_end":104030,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104031,"byte_end":104034,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104035,"byte_end":104073,"line_start":25,"line_end":25,"column_start":1,"column_end":39}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104074,"byte_end":104118,"line_start":26,"line_end":26,"column_start":1,"column_end":45}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104119,"byte_end":104181,"line_start":27,"line_end":27,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104986,"byte_end":104993,"line_start":53,"line_end":53,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::io::ReadBytesExt::read_u8","value":"pub fn read_u8(&mut Self) -> Result<u8>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads an unsigned 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 8 bit integer from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104221,"byte_end":104284,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104289,"byte_end":104292,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Note that since this reads a single byte, no byte order conversions","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104297,"byte_end":104368,"line_start":31,"line_end":31,"column_start":5,"column_end":76}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104373,"byte_end":104419,"line_start":32,"line_end":32,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104424,"byte_end":104427,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104432,"byte_end":104444,"line_start":34,"line_end":34,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104449,"byte_end":104452,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104457,"byte_end":104521,"line_start":36,"line_end":36,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104526,"byte_end":104529,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104534,"byte_end":104626,"line_start":38,"line_end":38,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104631,"byte_end":104634,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104639,"byte_end":104653,"line_start":40,"line_end":40,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104658,"byte_end":104661,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 8 bit integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104666,"byte_end":104713,"line_start":42,"line_end":42,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104718,"byte_end":104721,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104726,"byte_end":104737,"line_start":44,"line_end":44,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104742,"byte_end":104766,"line_start":45,"line_end":45,"column_start":5,"column_end":29}},{"value":"/ use byteorder::ReadBytesExt;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104771,"byte_end":104803,"line_start":46,"line_end":46,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104808,"byte_end":104811,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104816,"byte_end":104858,"line_start":48,"line_end":48,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(2, rdr.read_u8().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104863,"byte_end":104905,"line_start":49,"line_end":49,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(5, rdr.read_u8().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104910,"byte_end":104952,"line_start":50,"line_end":50,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104957,"byte_end":104964,"line_start":51,"line_end":51,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104969,"byte_end":104978,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105889,"byte_end":105896,"line_start":83,"line_end":83,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::io::ReadBytesExt::read_i8","value":"pub fn read_i8(&mut Self) -> Result<i8>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a signed 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 8 bit integer from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105122,"byte_end":105182,"line_start":59,"line_end":59,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105187,"byte_end":105190,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Note that since this reads a single byte, no byte order conversions","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105195,"byte_end":105266,"line_start":61,"line_end":61,"column_start":5,"column_end":76}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105271,"byte_end":105317,"line_start":62,"line_end":62,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105322,"byte_end":105325,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105330,"byte_end":105342,"line_start":64,"line_end":64,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105347,"byte_end":105350,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105355,"byte_end":105419,"line_start":66,"line_end":66,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105424,"byte_end":105427,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105432,"byte_end":105524,"line_start":68,"line_end":68,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105529,"byte_end":105532,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105537,"byte_end":105551,"line_start":70,"line_end":70,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105556,"byte_end":105559,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Read signed 8 bit integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105564,"byte_end":105609,"line_start":72,"line_end":72,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105614,"byte_end":105617,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105622,"byte_end":105633,"line_start":74,"line_end":74,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105638,"byte_end":105662,"line_start":75,"line_end":75,"column_start":5,"column_end":29}},{"value":"/ use byteorder::ReadBytesExt;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105667,"byte_end":105699,"line_start":76,"line_end":76,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105704,"byte_end":105707,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x02, 0xfb]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105712,"byte_end":105760,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(2, rdr.read_i8().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105765,"byte_end":105807,"line_start":79,"line_end":79,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(-5, rdr.read_i8().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105812,"byte_end":105855,"line_start":80,"line_end":80,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105860,"byte_end":105867,"line_start":81,"line_end":81,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":105872,"byte_end":105881,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106725,"byte_end":106733,"line_start":110,"line_end":110,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::io::ReadBytesExt::read_u16","value":"pub fn read_u16<T: ByteOrder>(&mut Self) -> Result<u16>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 16 bit integer from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106031,"byte_end":106095,"line_start":89,"line_end":89,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106100,"byte_end":106103,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106108,"byte_end":106120,"line_start":91,"line_end":91,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106125,"byte_end":106128,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106133,"byte_end":106197,"line_start":93,"line_end":93,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106202,"byte_end":106205,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106210,"byte_end":106302,"line_start":95,"line_end":95,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106307,"byte_end":106310,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106315,"byte_end":106329,"line_start":97,"line_end":97,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106334,"byte_end":106337,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 16 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106342,"byte_end":106401,"line_start":99,"line_end":99,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106406,"byte_end":106409,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106414,"byte_end":106425,"line_start":101,"line_end":101,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106430,"byte_end":106454,"line_start":102,"line_end":102,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106459,"byte_end":106504,"line_start":103,"line_end":103,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106509,"byte_end":106512,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106517,"byte_end":106565,"line_start":105,"line_end":105,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106570,"byte_end":106628,"line_start":106,"line_end":106,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106633,"byte_end":106691,"line_start":107,"line_end":107,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106696,"byte_end":106703,"line_start":108,"line_end":108,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106708,"byte_end":106717,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107590,"byte_end":107598,"line_start":137,"line_end":137,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::io::ReadBytesExt::read_i16","value":"pub fn read_i16<T: ByteOrder>(&mut Self) -> Result<i16>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 16 bit integer from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106888,"byte_end":106949,"line_start":116,"line_end":116,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106954,"byte_end":106957,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106962,"byte_end":106974,"line_start":118,"line_end":118,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106979,"byte_end":106982,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":106987,"byte_end":107051,"line_start":120,"line_end":120,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107056,"byte_end":107059,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107064,"byte_end":107156,"line_start":122,"line_end":122,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107161,"byte_end":107164,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107169,"byte_end":107183,"line_start":124,"line_end":124,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107188,"byte_end":107191,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ Read signed 16 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107196,"byte_end":107253,"line_start":126,"line_end":126,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107258,"byte_end":107261,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107266,"byte_end":107277,"line_start":128,"line_end":128,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107282,"byte_end":107306,"line_start":129,"line_end":129,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107311,"byte_end":107356,"line_start":130,"line_end":130,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107361,"byte_end":107364,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0xc1, 0xff, 0x7c]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107369,"byte_end":107429,"line_start":132,"line_end":132,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(193, rdr.read_i16::<BigEndian>().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107434,"byte_end":107492,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(-132, rdr.read_i16::<BigEndian>().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107497,"byte_end":107556,"line_start":134,"line_end":134,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107561,"byte_end":107568,"line_start":135,"line_end":135,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107573,"byte_end":107582,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108390,"byte_end":108398,"line_start":163,"line_end":163,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::io::ReadBytesExt::read_u24","value":"pub fn read_u24<T: ByteOrder>(&mut Self) -> Result<u32>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 24 bit integer from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107753,"byte_end":107817,"line_start":143,"line_end":143,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107822,"byte_end":107825,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107830,"byte_end":107842,"line_start":145,"line_end":145,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107847,"byte_end":107850,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107855,"byte_end":107919,"line_start":147,"line_end":147,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107924,"byte_end":107927,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":107932,"byte_end":108024,"line_start":149,"line_end":149,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108029,"byte_end":108032,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108037,"byte_end":108051,"line_start":151,"line_end":151,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108056,"byte_end":108059,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 24 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108064,"byte_end":108123,"line_start":153,"line_end":153,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108128,"byte_end":108131,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108136,"byte_end":108147,"line_start":155,"line_end":155,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108152,"byte_end":108176,"line_start":156,"line_end":156,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108181,"byte_end":108226,"line_start":157,"line_end":157,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108231,"byte_end":108234,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0x01, 0x0b]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108239,"byte_end":108293,"line_start":159,"line_end":159,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(267, rdr.read_u24::<BigEndian>().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108298,"byte_end":108356,"line_start":160,"line_end":160,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108361,"byte_end":108368,"line_start":161,"line_end":161,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108373,"byte_end":108382,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109188,"byte_end":109196,"line_start":189,"line_end":189,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::io::ReadBytesExt::read_i24","value":"pub fn read_i24<T: ByteOrder>(&mut Self) -> Result<i32>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 24 bit integer from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108553,"byte_end":108614,"line_start":169,"line_end":169,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108619,"byte_end":108622,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108627,"byte_end":108639,"line_start":171,"line_end":171,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108644,"byte_end":108647,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108652,"byte_end":108716,"line_start":173,"line_end":173,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108721,"byte_end":108724,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108729,"byte_end":108821,"line_start":175,"line_end":175,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108826,"byte_end":108829,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108834,"byte_end":108848,"line_start":177,"line_end":177,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108853,"byte_end":108856,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Read signed 24 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108861,"byte_end":108918,"line_start":179,"line_end":179,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108923,"byte_end":108926,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108931,"byte_end":108942,"line_start":181,"line_end":181,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108947,"byte_end":108971,"line_start":182,"line_end":182,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":108976,"byte_end":109021,"line_start":183,"line_end":183,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109026,"byte_end":109029,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xff, 0x7a, 0x33]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109034,"byte_end":109088,"line_start":185,"line_end":185,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-34253, rdr.read_i24::<BigEndian>().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109093,"byte_end":109154,"line_start":186,"line_end":186,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109159,"byte_end":109166,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109171,"byte_end":109180,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109994,"byte_end":110002,"line_start":215,"line_end":215,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::io::ReadBytesExt::read_u32","value":"pub fn read_u32<T: ByteOrder>(&mut Self) -> Result<u32>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 32 bit integer from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109351,"byte_end":109415,"line_start":195,"line_end":195,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109420,"byte_end":109423,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109428,"byte_end":109440,"line_start":197,"line_end":197,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109445,"byte_end":109448,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109453,"byte_end":109517,"line_start":199,"line_end":199,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109522,"byte_end":109525,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109530,"byte_end":109622,"line_start":201,"line_end":201,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109627,"byte_end":109630,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109635,"byte_end":109649,"line_start":203,"line_end":203,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109654,"byte_end":109657,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 32 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109662,"byte_end":109721,"line_start":205,"line_end":205,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109726,"byte_end":109729,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109734,"byte_end":109745,"line_start":207,"line_end":207,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109750,"byte_end":109774,"line_start":208,"line_end":208,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109779,"byte_end":109824,"line_start":209,"line_end":209,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109829,"byte_end":109832,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0x00, 0x01, 0x0b]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109837,"byte_end":109897,"line_start":211,"line_end":211,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(267, rdr.read_u32::<BigEndian>().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109902,"byte_end":109960,"line_start":212,"line_end":212,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109965,"byte_end":109972,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":109977,"byte_end":109986,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110798,"byte_end":110806,"line_start":241,"line_end":241,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::io::ReadBytesExt::read_i32","value":"pub fn read_i32<T: ByteOrder>(&mut Self) -> Result<i32>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 32 bit integer from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110157,"byte_end":110218,"line_start":221,"line_end":221,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110223,"byte_end":110226,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110231,"byte_end":110243,"line_start":223,"line_end":223,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110248,"byte_end":110251,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110256,"byte_end":110320,"line_start":225,"line_end":225,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110325,"byte_end":110328,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110333,"byte_end":110425,"line_start":227,"line_end":227,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110430,"byte_end":110433,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110438,"byte_end":110452,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110457,"byte_end":110460,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Read signed 32 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110465,"byte_end":110522,"line_start":231,"line_end":231,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110527,"byte_end":110530,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110535,"byte_end":110546,"line_start":233,"line_end":233,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110551,"byte_end":110575,"line_start":234,"line_end":234,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110580,"byte_end":110625,"line_start":235,"line_end":235,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110630,"byte_end":110633,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xff, 0xff, 0x7a, 0x33]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110638,"byte_end":110698,"line_start":237,"line_end":237,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(-34253, rdr.read_i32::<BigEndian>().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110703,"byte_end":110764,"line_start":238,"line_end":238,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110769,"byte_end":110776,"line_start":239,"line_end":239,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110781,"byte_end":110790,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111628,"byte_end":111636,"line_start":267,"line_end":267,"column_start":8,"column_end":16},"name":"read_u48","qualname":"::io::ReadBytesExt::read_u48","value":"pub fn read_u48<T: ByteOrder>(&mut Self) -> Result<u64>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads an unsigned 48 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 48 bit integer from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":110961,"byte_end":111025,"line_start":247,"line_end":247,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111030,"byte_end":111033,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111038,"byte_end":111050,"line_start":249,"line_end":249,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111055,"byte_end":111058,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111063,"byte_end":111127,"line_start":251,"line_end":251,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111132,"byte_end":111135,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111140,"byte_end":111232,"line_start":253,"line_end":253,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111237,"byte_end":111240,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111245,"byte_end":111259,"line_start":255,"line_end":255,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111264,"byte_end":111267,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 48 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111272,"byte_end":111331,"line_start":257,"line_end":257,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111336,"byte_end":111339,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111344,"byte_end":111355,"line_start":259,"line_end":259,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111360,"byte_end":111384,"line_start":260,"line_end":260,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111389,"byte_end":111434,"line_start":261,"line_end":261,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111439,"byte_end":111442,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xb6, 0x71, 0x6b, 0xdc, 0x2b, 0x31]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111447,"byte_end":111519,"line_start":263,"line_end":263,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(200598257150769, rdr.read_u48::<BigEndian>().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111524,"byte_end":111594,"line_start":264,"line_end":264,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111599,"byte_end":111606,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111611,"byte_end":111620,"line_start":266,"line_end":266,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112454,"byte_end":112462,"line_start":293,"line_end":293,"column_start":8,"column_end":16},"name":"read_i48","qualname":"::io::ReadBytesExt::read_i48","value":"pub fn read_i48<T: ByteOrder>(&mut Self) -> Result<i64>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a signed 48 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 48 bit integer from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111791,"byte_end":111852,"line_start":273,"line_end":273,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111857,"byte_end":111860,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111865,"byte_end":111877,"line_start":275,"line_end":275,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111882,"byte_end":111885,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111890,"byte_end":111954,"line_start":277,"line_end":277,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111959,"byte_end":111962,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":111967,"byte_end":112059,"line_start":279,"line_end":279,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112064,"byte_end":112067,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112072,"byte_end":112086,"line_start":281,"line_end":281,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112091,"byte_end":112094,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ Read signed 48 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112099,"byte_end":112156,"line_start":283,"line_end":283,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112161,"byte_end":112164,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112169,"byte_end":112180,"line_start":285,"line_end":285,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112185,"byte_end":112209,"line_start":286,"line_end":286,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112214,"byte_end":112259,"line_start":287,"line_end":287,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112264,"byte_end":112267,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x9d, 0x71, 0xab, 0xe7, 0x97, 0x8f]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112272,"byte_end":112344,"line_start":289,"line_end":289,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(-108363435763825, rdr.read_i48::<BigEndian>().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112349,"byte_end":112420,"line_start":290,"line_end":290,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112425,"byte_end":112432,"line_start":291,"line_end":291,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112437,"byte_end":112446,"line_start":292,"line_end":292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113298,"byte_end":113306,"line_start":319,"line_end":319,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::io::ReadBytesExt::read_u64","value":"pub fn read_u64<T: ByteOrder>(&mut Self) -> Result<u64>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 64 bit integer from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112617,"byte_end":112681,"line_start":299,"line_end":299,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112686,"byte_end":112689,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112694,"byte_end":112706,"line_start":301,"line_end":301,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112711,"byte_end":112714,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112719,"byte_end":112783,"line_start":303,"line_end":303,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112788,"byte_end":112791,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112796,"byte_end":112888,"line_start":305,"line_end":305,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112893,"byte_end":112896,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112901,"byte_end":112915,"line_start":307,"line_end":307,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112920,"byte_end":112923,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned 64 bit big-endian integer from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112928,"byte_end":112989,"line_start":309,"line_end":309,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":112994,"byte_end":112997,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113002,"byte_end":113013,"line_start":311,"line_end":311,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113018,"byte_end":113042,"line_start":312,"line_end":312,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113047,"byte_end":113092,"line_start":313,"line_end":313,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113097,"byte_end":113100,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113105,"byte_end":113189,"line_start":315,"line_end":315,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(918733457491587, rdr.read_u64::<BigEndian>().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113194,"byte_end":113264,"line_start":316,"line_end":316,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113269,"byte_end":113276,"line_start":317,"line_end":317,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113281,"byte_end":113290,"line_start":318,"line_end":318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114116,"byte_end":114124,"line_start":345,"line_end":345,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::io::ReadBytesExt::read_i64","value":"pub fn read_i64<T: ByteOrder>(&mut Self) -> Result<i64>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 64 bit integer from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113461,"byte_end":113522,"line_start":325,"line_end":325,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113527,"byte_end":113530,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113535,"byte_end":113547,"line_start":327,"line_end":327,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113552,"byte_end":113555,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113560,"byte_end":113624,"line_start":329,"line_end":329,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113629,"byte_end":113632,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113637,"byte_end":113729,"line_start":331,"line_end":331,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113734,"byte_end":113737,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113742,"byte_end":113756,"line_start":333,"line_end":333,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113761,"byte_end":113764,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ Read a signed 64 bit big-endian integer from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113769,"byte_end":113827,"line_start":335,"line_end":335,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113832,"byte_end":113835,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113840,"byte_end":113851,"line_start":337,"line_end":337,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113856,"byte_end":113880,"line_start":338,"line_end":338,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113885,"byte_end":113930,"line_start":339,"line_end":339,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113935,"byte_end":113938,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":113943,"byte_end":114006,"line_start":341,"line_end":341,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(i64::min_value(), rdr.read_i64::<BigEndian>().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114011,"byte_end":114082,"line_start":342,"line_end":342,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114087,"byte_end":114094,"line_start":343,"line_end":343,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114099,"byte_end":114108,"line_start":344,"line_end":344,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115092,"byte_end":115101,"line_start":375,"line_end":375,"column_start":8,"column_end":17},"name":"read_u128","qualname":"::io::ReadBytesExt::read_u128","value":"pub fn read_u128<T: ByteOrder>(&mut Self) -> Result<u128>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads an unsigned 128 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 128 bit integer from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114279,"byte_end":114344,"line_start":351,"line_end":351,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114349,"byte_end":114352,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114357,"byte_end":114369,"line_start":353,"line_end":353,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114374,"byte_end":114377,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114382,"byte_end":114446,"line_start":355,"line_end":355,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114451,"byte_end":114454,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114459,"byte_end":114551,"line_start":357,"line_end":357,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114556,"byte_end":114559,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114564,"byte_end":114578,"line_start":359,"line_end":359,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114583,"byte_end":114586,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned 128 bit big-endian integer from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114591,"byte_end":114653,"line_start":361,"line_end":361,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114658,"byte_end":114661,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114666,"byte_end":114677,"line_start":363,"line_end":363,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114682,"byte_end":114706,"line_start":364,"line_end":364,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114711,"byte_end":114756,"line_start":365,"line_end":365,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114761,"byte_end":114764,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114769,"byte_end":114804,"line_start":367,"line_end":367,"column_start":5,"column_end":40}},{"value":"/     0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114809,"byte_end":114864,"line_start":368,"line_end":368,"column_start":5,"column_end":60}},{"value":"/     0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114869,"byte_end":114923,"line_start":369,"line_end":369,"column_start":5,"column_end":59}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114928,"byte_end":114935,"line_start":370,"line_end":370,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(16947640962301618749969007319746179, rdr.read_u128::<BigEndian>().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":114940,"byte_end":115031,"line_start":371,"line_end":371,"column_start":5,"column_end":96}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115036,"byte_end":115043,"line_start":372,"line_end":372,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115048,"byte_end":115070,"line_start":373,"line_end":373,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115075,"byte_end":115084,"line_start":374,"line_end":374,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115969,"byte_end":115978,"line_start":402,"line_end":402,"column_start":8,"column_end":17},"name":"read_i128","qualname":"::io::ReadBytesExt::read_i128","value":"pub fn read_i128<T: ByteOrder>(&mut Self) -> Result<i128>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a signed 128 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 128 bit integer from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115259,"byte_end":115321,"line_start":381,"line_end":381,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115326,"byte_end":115329,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115334,"byte_end":115346,"line_start":383,"line_end":383,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115351,"byte_end":115354,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115359,"byte_end":115423,"line_start":385,"line_end":385,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115428,"byte_end":115431,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115436,"byte_end":115528,"line_start":387,"line_end":387,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115533,"byte_end":115536,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115541,"byte_end":115555,"line_start":389,"line_end":389,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115560,"byte_end":115563,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ Read a signed 128 bit big-endian integer from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115568,"byte_end":115627,"line_start":391,"line_end":391,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115632,"byte_end":115635,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115640,"byte_end":115651,"line_start":393,"line_end":393,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115656,"byte_end":115680,"line_start":394,"line_end":394,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115685,"byte_end":115730,"line_start":395,"line_end":395,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115735,"byte_end":115738,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115743,"byte_end":115830,"line_start":397,"line_end":397,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(i128::min_value(), rdr.read_i128::<BigEndian>().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115835,"byte_end":115908,"line_start":398,"line_end":398,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115913,"byte_end":115920,"line_start":399,"line_end":399,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115925,"byte_end":115947,"line_start":400,"line_end":400,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":115952,"byte_end":115961,"line_start":401,"line_end":401,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116770,"byte_end":116779,"line_start":427,"line_end":427,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::io::ReadBytesExt::read_uint","value":"pub fn read_uint<T: ByteOrder>(&mut Self, usize) -> Result<u64>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116136,"byte_end":116201,"line_start":408,"line_end":408,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116206,"byte_end":116209,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116214,"byte_end":116226,"line_start":410,"line_end":410,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116231,"byte_end":116234,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116239,"byte_end":116303,"line_start":412,"line_end":412,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116308,"byte_end":116311,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116316,"byte_end":116408,"line_start":414,"line_end":414,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116413,"byte_end":116416,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116421,"byte_end":116435,"line_start":416,"line_end":416,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116440,"byte_end":116443,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned n-byte big-endian integer from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116448,"byte_end":116509,"line_start":418,"line_end":418,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116514,"byte_end":116517,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116522,"byte_end":116533,"line_start":420,"line_end":420,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116538,"byte_end":116562,"line_start":421,"line_end":421,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116567,"byte_end":116612,"line_start":422,"line_end":422,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116617,"byte_end":116620,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x80, 0x74, 0xfa]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116625,"byte_end":116679,"line_start":424,"line_end":424,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(8418554, rdr.read_uint::<BigEndian>(3).unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116684,"byte_end":116748,"line_start":425,"line_end":425,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116753,"byte_end":116762,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117609,"byte_end":117617,"line_start":452,"line_end":452,"column_start":8,"column_end":16},"name":"read_int","qualname":"::io::ReadBytesExt::read_int","value":"pub fn read_int<T: ByteOrder>(&mut Self, usize) -> Result<i64>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":116978,"byte_end":117040,"line_start":433,"line_end":433,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117045,"byte_end":117048,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117053,"byte_end":117065,"line_start":435,"line_end":435,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117070,"byte_end":117073,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117078,"byte_end":117142,"line_start":437,"line_end":437,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117147,"byte_end":117150,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117155,"byte_end":117247,"line_start":439,"line_end":439,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117252,"byte_end":117255,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117260,"byte_end":117274,"line_start":441,"line_end":441,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117279,"byte_end":117282,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned n-byte big-endian integer from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117287,"byte_end":117348,"line_start":443,"line_end":443,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117353,"byte_end":117356,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117361,"byte_end":117372,"line_start":445,"line_end":445,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117377,"byte_end":117401,"line_start":446,"line_end":446,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117406,"byte_end":117451,"line_start":447,"line_end":447,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117456,"byte_end":117459,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xc1, 0xff, 0x7c]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117464,"byte_end":117518,"line_start":449,"line_end":449,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-4063364, rdr.read_int::<BigEndian>(3).unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117523,"byte_end":117587,"line_start":450,"line_end":450,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117592,"byte_end":117601,"line_start":451,"line_end":451,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117929,"byte_end":117941,"line_start":461,"line_end":461,"column_start":8,"column_end":20},"name":"read_uint128","qualname":"::io::ReadBytesExt::read_uint128","value":"pub fn read_uint128<T: ByteOrder>(&mut Self, usize) -> Result<u128>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117815,"byte_end":117880,"line_start":458,"line_end":458,"column_start":5,"column_end":70}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117885,"byte_end":117907,"line_start":459,"line_end":459,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":117912,"byte_end":117921,"line_start":460,"line_end":460,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118256,"byte_end":118267,"line_start":470,"line_end":470,"column_start":8,"column_end":19},"name":"read_int128","qualname":"::io::ReadBytesExt::read_int128","value":"pub fn read_int128<T: ByteOrder>(&mut Self, usize) -> Result<i128>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118145,"byte_end":118207,"line_start":467,"line_end":467,"column_start":5,"column_end":67}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118212,"byte_end":118234,"line_start":468,"line_end":468,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118239,"byte_end":118248,"line_start":469,"line_end":469,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119234,"byte_end":119242,"line_start":501,"line_end":501,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::io::ReadBytesExt::read_f32","value":"pub fn read_f32<T: ByteOrder>(&mut Self) -> Result<f32>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number from\n the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 single-precision (4 bytes) floating point number from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118470,"byte_end":118543,"line_start":476,"line_end":476,"column_start":5,"column_end":78}},{"value":"/ the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118548,"byte_end":118574,"line_start":477,"line_end":477,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118579,"byte_end":118582,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118587,"byte_end":118599,"line_start":479,"line_end":479,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118604,"byte_end":118607,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118612,"byte_end":118676,"line_start":481,"line_end":481,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118681,"byte_end":118684,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118689,"byte_end":118781,"line_start":483,"line_end":483,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118786,"byte_end":118789,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118794,"byte_end":118808,"line_start":485,"line_end":485,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118813,"byte_end":118816,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ Read a big-endian single-precision floating point number from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118821,"byte_end":118896,"line_start":487,"line_end":487,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118901,"byte_end":118904,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118909,"byte_end":118920,"line_start":489,"line_end":489,"column_start":5,"column_end":16}},{"value":"/ use std::f32;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118925,"byte_end":118942,"line_start":490,"line_end":490,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118947,"byte_end":118971,"line_start":491,"line_end":491,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118976,"byte_end":118979,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":118984,"byte_end":119029,"line_start":493,"line_end":493,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119034,"byte_end":119037,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119042,"byte_end":119077,"line_start":495,"line_end":495,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x49, 0x0f, 0xdb,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119082,"byte_end":119113,"line_start":496,"line_end":496,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119118,"byte_end":119125,"line_start":497,"line_end":497,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(f32::consts::PI, rdr.read_f32::<BigEndian>().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119130,"byte_end":119200,"line_start":498,"line_end":498,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119205,"byte_end":119212,"line_start":499,"line_end":499,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119217,"byte_end":119226,"line_start":500,"line_end":500,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120185,"byte_end":120193,"line_start":532,"line_end":532,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::io::ReadBytesExt::read_f64","value":"pub fn read_f64<T: ByteOrder>(&mut Self) -> Result<f64>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number from\n the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 double-precision (8 bytes) floating point number from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119397,"byte_end":119470,"line_start":507,"line_end":507,"column_start":5,"column_end":78}},{"value":"/ the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119475,"byte_end":119501,"line_start":508,"line_end":508,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119506,"byte_end":119509,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119514,"byte_end":119526,"line_start":510,"line_end":510,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119531,"byte_end":119534,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119539,"byte_end":119603,"line_start":512,"line_end":512,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119608,"byte_end":119611,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119616,"byte_end":119708,"line_start":514,"line_end":514,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119713,"byte_end":119716,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119721,"byte_end":119735,"line_start":516,"line_end":516,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119740,"byte_end":119743,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ Read a big-endian double-precision floating point number from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119748,"byte_end":119823,"line_start":518,"line_end":518,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119828,"byte_end":119831,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119836,"byte_end":119847,"line_start":520,"line_end":520,"column_start":5,"column_end":16}},{"value":"/ use std::f64;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119852,"byte_end":119869,"line_start":521,"line_end":521,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119874,"byte_end":119898,"line_start":522,"line_end":522,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119903,"byte_end":119906,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119911,"byte_end":119956,"line_start":524,"line_end":524,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119961,"byte_end":119964,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":119969,"byte_end":120004,"line_start":526,"line_end":526,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120009,"byte_end":120064,"line_start":527,"line_end":527,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120069,"byte_end":120076,"line_start":528,"line_end":528,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(f64::consts::PI, rdr.read_f64::<BigEndian>().unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120081,"byte_end":120151,"line_start":529,"line_end":529,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120156,"byte_end":120163,"line_start":530,"line_end":530,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120168,"byte_end":120177,"line_start":531,"line_end":531,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121234,"byte_end":121247,"line_start":564,"line_end":564,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::io::ReadBytesExt::read_u16_into","value":"pub fn read_u16_into<T: ByteOrder>(&mut Self, &mut [u16]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 16 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of unsigned 16 bit integers from the underlying","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120348,"byte_end":120416,"line_start":538,"line_end":538,"column_start":5,"column_end":73}},{"value":"/ reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120421,"byte_end":120432,"line_start":539,"line_end":539,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120437,"byte_end":120440,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120445,"byte_end":120518,"line_start":541,"line_end":541,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120523,"byte_end":120590,"line_start":542,"line_end":542,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120595,"byte_end":120598,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120603,"byte_end":120615,"line_start":544,"line_end":544,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120620,"byte_end":120623,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120628,"byte_end":120692,"line_start":546,"line_end":546,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120697,"byte_end":120700,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120705,"byte_end":120797,"line_start":548,"line_end":548,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120802,"byte_end":120805,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120810,"byte_end":120824,"line_start":550,"line_end":550,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120829,"byte_end":120832,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of unsigned 16 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120837,"byte_end":120910,"line_start":552,"line_end":552,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120915,"byte_end":120918,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120923,"byte_end":120934,"line_start":554,"line_end":554,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120939,"byte_end":120963,"line_start":555,"line_end":555,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":120968,"byte_end":121013,"line_start":556,"line_end":556,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121018,"byte_end":121021,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121026,"byte_end":121074,"line_start":558,"line_end":558,"column_start":5,"column_end":53}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121079,"byte_end":121104,"line_start":559,"line_end":559,"column_start":5,"column_end":30}},{"value":"/ rdr.read_u16_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121109,"byte_end":121163,"line_start":560,"line_end":560,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121168,"byte_end":121200,"line_start":561,"line_end":561,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121205,"byte_end":121212,"line_start":562,"line_end":562,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121217,"byte_end":121226,"line_start":563,"line_end":563,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122377,"byte_end":122390,"line_start":599,"line_end":599,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::io::ReadBytesExt::read_u32_into","value":"pub fn read_u32_into<T: ByteOrder>(&mut Self, &mut [u32]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 32 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of unsigned 32 bit integers from the underlying","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121479,"byte_end":121547,"line_start":573,"line_end":573,"column_start":5,"column_end":73}},{"value":"/ reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121552,"byte_end":121563,"line_start":574,"line_end":574,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121568,"byte_end":121571,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121576,"byte_end":121649,"line_start":576,"line_end":576,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121654,"byte_end":121721,"line_start":577,"line_end":577,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121726,"byte_end":121729,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121734,"byte_end":121746,"line_start":579,"line_end":579,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121751,"byte_end":121754,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121759,"byte_end":121823,"line_start":581,"line_end":581,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121828,"byte_end":121831,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121836,"byte_end":121928,"line_start":583,"line_end":583,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121933,"byte_end":121936,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121941,"byte_end":121955,"line_start":585,"line_end":585,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121960,"byte_end":121963,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of unsigned 32 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":121968,"byte_end":122041,"line_start":587,"line_end":587,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122046,"byte_end":122049,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122054,"byte_end":122065,"line_start":589,"line_end":589,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122070,"byte_end":122094,"line_start":590,"line_end":590,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122099,"byte_end":122144,"line_start":591,"line_end":591,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122149,"byte_end":122152,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122157,"byte_end":122217,"line_start":593,"line_end":593,"column_start":5,"column_end":65}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122222,"byte_end":122247,"line_start":594,"line_end":594,"column_start":5,"column_end":30}},{"value":"/ rdr.read_u32_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122252,"byte_end":122306,"line_start":595,"line_end":595,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122311,"byte_end":122343,"line_start":596,"line_end":596,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122348,"byte_end":122355,"line_start":597,"line_end":597,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122360,"byte_end":122369,"line_start":598,"line_end":598,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123579,"byte_end":123592,"line_start":637,"line_end":637,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::io::ReadBytesExt::read_u64_into","value":"pub fn read_u64_into<T: ByteOrder>(&mut Self, &mut [u64]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 64 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of unsigned 64 bit integers from the underlying","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122622,"byte_end":122690,"line_start":608,"line_end":608,"column_start":5,"column_end":73}},{"value":"/ reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122695,"byte_end":122706,"line_start":609,"line_end":609,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122711,"byte_end":122714,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122719,"byte_end":122792,"line_start":611,"line_end":611,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122797,"byte_end":122864,"line_start":612,"line_end":612,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122869,"byte_end":122872,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122877,"byte_end":122889,"line_start":614,"line_end":614,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122894,"byte_end":122897,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122902,"byte_end":122966,"line_start":616,"line_end":616,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122971,"byte_end":122974,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":122979,"byte_end":123071,"line_start":618,"line_end":618,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123076,"byte_end":123079,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123084,"byte_end":123098,"line_start":620,"line_end":620,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123103,"byte_end":123106,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of unsigned 64 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123111,"byte_end":123184,"line_start":622,"line_end":622,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123189,"byte_end":123192,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123197,"byte_end":123208,"line_start":624,"line_end":624,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123213,"byte_end":123237,"line_start":625,"line_end":625,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123242,"byte_end":123287,"line_start":626,"line_end":626,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123292,"byte_end":123295,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123300,"byte_end":123335,"line_start":628,"line_end":628,"column_start":5,"column_end":40}},{"value":"/     0, 0, 0, 0, 0, 0, 2, 5,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123340,"byte_end":123371,"line_start":629,"line_end":629,"column_start":5,"column_end":36}},{"value":"/     0, 0, 0, 0, 0, 0, 3, 0,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123376,"byte_end":123407,"line_start":630,"line_end":630,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123412,"byte_end":123419,"line_start":631,"line_end":631,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123424,"byte_end":123449,"line_start":632,"line_end":632,"column_start":5,"column_end":30}},{"value":"/ rdr.read_u64_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123454,"byte_end":123508,"line_start":633,"line_end":633,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123513,"byte_end":123545,"line_start":634,"line_end":634,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123550,"byte_end":123557,"line_start":635,"line_end":635,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123562,"byte_end":123571,"line_start":636,"line_end":636,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124859,"byte_end":124873,"line_start":676,"line_end":676,"column_start":8,"column_end":22},"name":"read_u128_into","qualname":"::io::ReadBytesExt::read_u128_into","value":"pub fn read_u128_into<T: ByteOrder>(&mut Self, &mut [u128]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 128 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of unsigned 128 bit integers from the underlying","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123824,"byte_end":123893,"line_start":646,"line_end":646,"column_start":5,"column_end":74}},{"value":"/ reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123898,"byte_end":123909,"line_start":647,"line_end":647,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123914,"byte_end":123917,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":123922,"byte_end":123995,"line_start":649,"line_end":649,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124000,"byte_end":124067,"line_start":650,"line_end":650,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124072,"byte_end":124075,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124080,"byte_end":124092,"line_start":652,"line_end":652,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124097,"byte_end":124100,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124105,"byte_end":124169,"line_start":654,"line_end":654,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124174,"byte_end":124177,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124182,"byte_end":124274,"line_start":656,"line_end":656,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124279,"byte_end":124282,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124287,"byte_end":124301,"line_start":658,"line_end":658,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124306,"byte_end":124309,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of unsigned 128 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124314,"byte_end":124388,"line_start":660,"line_end":660,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124393,"byte_end":124396,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124401,"byte_end":124412,"line_start":662,"line_end":662,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124417,"byte_end":124441,"line_start":663,"line_end":663,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124446,"byte_end":124491,"line_start":664,"line_end":664,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124496,"byte_end":124499,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124504,"byte_end":124539,"line_start":666,"line_end":666,"column_start":5,"column_end":40}},{"value":"/     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124544,"byte_end":124599,"line_start":667,"line_end":667,"column_start":5,"column_end":60}},{"value":"/     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124604,"byte_end":124659,"line_start":668,"line_end":668,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124664,"byte_end":124671,"line_start":669,"line_end":669,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124676,"byte_end":124701,"line_start":670,"line_end":670,"column_start":5,"column_end":30}},{"value":"/ rdr.read_u128_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124706,"byte_end":124761,"line_start":671,"line_end":671,"column_start":5,"column_end":60}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124766,"byte_end":124798,"line_start":672,"line_end":672,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124803,"byte_end":124810,"line_start":673,"line_end":673,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124815,"byte_end":124837,"line_start":674,"line_end":674,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":124842,"byte_end":124851,"line_start":675,"line_end":675,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126333,"byte_end":126345,"line_start":719,"line_end":719,"column_start":8,"column_end":20},"name":"read_i8_into","qualname":"::io::ReadBytesExt::read_i8_into","value":"pub fn read_i8_into(&mut Self, &mut [i8]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 8 bit integers from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 8 bit integers from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125130,"byte_end":125203,"line_start":688,"line_end":688,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125208,"byte_end":125211,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125216,"byte_end":125289,"line_start":690,"line_end":690,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125294,"byte_end":125361,"line_start":691,"line_end":691,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125366,"byte_end":125369,"line_start":692,"line_end":692,"column_start":5,"column_end":8}},{"value":"/ Note that since each `i8` is a single byte, no byte order conversions","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125374,"byte_end":125447,"line_start":693,"line_end":693,"column_start":5,"column_end":78}},{"value":"/ are used. This method is included because it provides a safe, simple","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125452,"byte_end":125524,"line_start":694,"line_end":694,"column_start":5,"column_end":77}},{"value":"/ way for the caller to read into a `&mut [i8]` buffer. (Without this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125529,"byte_end":125600,"line_start":695,"line_end":695,"column_start":5,"column_end":76}},{"value":"/ method, the caller would have to either use `unsafe` code or convert","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125605,"byte_end":125677,"line_start":696,"line_end":696,"column_start":5,"column_end":77}},{"value":"/ each byte to `i8` individually.)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125682,"byte_end":125718,"line_start":697,"line_end":697,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125723,"byte_end":125726,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125731,"byte_end":125743,"line_start":699,"line_end":699,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125748,"byte_end":125751,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125756,"byte_end":125820,"line_start":701,"line_end":701,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125825,"byte_end":125828,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125833,"byte_end":125925,"line_start":703,"line_end":703,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125930,"byte_end":125933,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125938,"byte_end":125952,"line_start":705,"line_end":705,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125957,"byte_end":125960,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 8 bit integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":125965,"byte_end":126024,"line_start":707,"line_end":707,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126029,"byte_end":126032,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126037,"byte_end":126048,"line_start":709,"line_end":709,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126053,"byte_end":126077,"line_start":710,"line_end":710,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126082,"byte_end":126127,"line_start":711,"line_end":711,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126132,"byte_end":126135,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 251, 3]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126140,"byte_end":126187,"line_start":713,"line_end":713,"column_start":5,"column_end":52}},{"value":"/ let mut dst = [0; 3];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126192,"byte_end":126217,"line_start":714,"line_end":714,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i8_into(&mut dst).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126222,"byte_end":126262,"line_start":715,"line_end":715,"column_start":5,"column_end":45}},{"value":"/ assert_eq!([2, -5, 3], dst);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126267,"byte_end":126299,"line_start":716,"line_end":716,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126304,"byte_end":126311,"line_start":717,"line_end":717,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126316,"byte_end":126325,"line_start":718,"line_end":718,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127362,"byte_end":127375,"line_start":750,"line_end":750,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::io::ReadBytesExt::read_i16_into","value":"pub fn read_i16_into<T: ByteOrder>(&mut Self, &mut [i16]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 16 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 16 bit integers from the underlying","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126480,"byte_end":126546,"line_start":724,"line_end":724,"column_start":5,"column_end":71}},{"value":"/ reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126551,"byte_end":126562,"line_start":725,"line_end":725,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126567,"byte_end":126570,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126575,"byte_end":126648,"line_start":727,"line_end":727,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126653,"byte_end":126720,"line_start":728,"line_end":728,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126725,"byte_end":126728,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126733,"byte_end":126745,"line_start":730,"line_end":730,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126750,"byte_end":126753,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126758,"byte_end":126822,"line_start":732,"line_end":732,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126827,"byte_end":126830,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126835,"byte_end":126927,"line_start":734,"line_end":734,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126932,"byte_end":126935,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126940,"byte_end":126954,"line_start":736,"line_end":736,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126959,"byte_end":126962,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 16 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":126967,"byte_end":127038,"line_start":738,"line_end":738,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127043,"byte_end":127046,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127051,"byte_end":127062,"line_start":740,"line_end":740,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127067,"byte_end":127091,"line_start":741,"line_end":741,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127096,"byte_end":127141,"line_start":742,"line_end":742,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127146,"byte_end":127149,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127154,"byte_end":127202,"line_start":744,"line_end":744,"column_start":5,"column_end":53}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127207,"byte_end":127232,"line_start":745,"line_end":745,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i16_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127237,"byte_end":127291,"line_start":746,"line_end":746,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127296,"byte_end":127328,"line_start":747,"line_end":747,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127333,"byte_end":127340,"line_start":748,"line_end":748,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127345,"byte_end":127354,"line_start":749,"line_end":749,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128501,"byte_end":128514,"line_start":785,"line_end":785,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::io::ReadBytesExt::read_i32_into","value":"pub fn read_i32_into<T: ByteOrder>(&mut Self, &mut [i32]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 32 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 32 bit integers from the underlying","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127607,"byte_end":127673,"line_start":759,"line_end":759,"column_start":5,"column_end":71}},{"value":"/ reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127678,"byte_end":127689,"line_start":760,"line_end":760,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127694,"byte_end":127697,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127702,"byte_end":127775,"line_start":762,"line_end":762,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127780,"byte_end":127847,"line_start":763,"line_end":763,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127852,"byte_end":127855,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127860,"byte_end":127872,"line_start":765,"line_end":765,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127877,"byte_end":127880,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127885,"byte_end":127949,"line_start":767,"line_end":767,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127954,"byte_end":127957,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":127962,"byte_end":128054,"line_start":769,"line_end":769,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128059,"byte_end":128062,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128067,"byte_end":128081,"line_start":771,"line_end":771,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128086,"byte_end":128089,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 32 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128094,"byte_end":128165,"line_start":773,"line_end":773,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128170,"byte_end":128173,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128178,"byte_end":128189,"line_start":775,"line_end":775,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128194,"byte_end":128218,"line_start":776,"line_end":776,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128223,"byte_end":128268,"line_start":777,"line_end":777,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128273,"byte_end":128276,"line_start":778,"line_end":778,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128281,"byte_end":128341,"line_start":779,"line_end":779,"column_start":5,"column_end":65}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128346,"byte_end":128371,"line_start":780,"line_end":780,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i32_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128376,"byte_end":128430,"line_start":781,"line_end":781,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128435,"byte_end":128467,"line_start":782,"line_end":782,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128472,"byte_end":128479,"line_start":783,"line_end":783,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128484,"byte_end":128493,"line_start":784,"line_end":784,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129699,"byte_end":129712,"line_start":823,"line_end":823,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::io::ReadBytesExt::read_i64_into","value":"pub fn read_i64_into<T: ByteOrder>(&mut Self, &mut [i64]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 64 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 64 bit integers from the underlying","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128746,"byte_end":128812,"line_start":794,"line_end":794,"column_start":5,"column_end":71}},{"value":"/ reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128817,"byte_end":128828,"line_start":795,"line_end":795,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128833,"byte_end":128836,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128841,"byte_end":128914,"line_start":797,"line_end":797,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128919,"byte_end":128986,"line_start":798,"line_end":798,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128991,"byte_end":128994,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":128999,"byte_end":129011,"line_start":800,"line_end":800,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129016,"byte_end":129019,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129024,"byte_end":129088,"line_start":802,"line_end":802,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129093,"byte_end":129096,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129101,"byte_end":129193,"line_start":804,"line_end":804,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129198,"byte_end":129201,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129206,"byte_end":129220,"line_start":806,"line_end":806,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129225,"byte_end":129228,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 64 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129233,"byte_end":129304,"line_start":808,"line_end":808,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129309,"byte_end":129312,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129317,"byte_end":129328,"line_start":810,"line_end":810,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129333,"byte_end":129357,"line_start":811,"line_end":811,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129362,"byte_end":129407,"line_start":812,"line_end":812,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129412,"byte_end":129415,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129420,"byte_end":129455,"line_start":814,"line_end":814,"column_start":5,"column_end":40}},{"value":"/     0, 0, 0, 0, 0, 0, 2, 5,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129460,"byte_end":129491,"line_start":815,"line_end":815,"column_start":5,"column_end":36}},{"value":"/     0, 0, 0, 0, 0, 0, 3, 0,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129496,"byte_end":129527,"line_start":816,"line_end":816,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129532,"byte_end":129539,"line_start":817,"line_end":817,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129544,"byte_end":129569,"line_start":818,"line_end":818,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i64_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129574,"byte_end":129628,"line_start":819,"line_end":819,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129633,"byte_end":129665,"line_start":820,"line_end":820,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129670,"byte_end":129677,"line_start":821,"line_end":821,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129682,"byte_end":129691,"line_start":822,"line_end":822,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130975,"byte_end":130989,"line_start":862,"line_end":862,"column_start":8,"column_end":22},"name":"read_i128_into","qualname":"::io::ReadBytesExt::read_i128_into","value":"pub fn read_i128_into<T: ByteOrder>(&mut Self, &mut [i128]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 128 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 128 bit integers from the underlying","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":129944,"byte_end":130011,"line_start":832,"line_end":832,"column_start":5,"column_end":72}},{"value":"/ reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130016,"byte_end":130027,"line_start":833,"line_end":833,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130032,"byte_end":130035,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130040,"byte_end":130113,"line_start":835,"line_end":835,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130118,"byte_end":130185,"line_start":836,"line_end":836,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130190,"byte_end":130193,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130198,"byte_end":130210,"line_start":838,"line_end":838,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130215,"byte_end":130218,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130223,"byte_end":130287,"line_start":840,"line_end":840,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130292,"byte_end":130295,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130300,"byte_end":130392,"line_start":842,"line_end":842,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130397,"byte_end":130400,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130405,"byte_end":130419,"line_start":844,"line_end":844,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130424,"byte_end":130427,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 128 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130432,"byte_end":130504,"line_start":846,"line_end":846,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130509,"byte_end":130512,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130517,"byte_end":130528,"line_start":848,"line_end":848,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130533,"byte_end":130557,"line_start":849,"line_end":849,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130562,"byte_end":130607,"line_start":850,"line_end":850,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130612,"byte_end":130615,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130620,"byte_end":130655,"line_start":852,"line_end":852,"column_start":5,"column_end":40}},{"value":"/     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130660,"byte_end":130715,"line_start":853,"line_end":853,"column_start":5,"column_end":60}},{"value":"/     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130720,"byte_end":130775,"line_start":854,"line_end":854,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130780,"byte_end":130787,"line_start":855,"line_end":855,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130792,"byte_end":130817,"line_start":856,"line_end":856,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i128_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130822,"byte_end":130877,"line_start":857,"line_end":857,"column_start":5,"column_end":60}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130882,"byte_end":130914,"line_start":858,"line_end":858,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130919,"byte_end":130926,"line_start":859,"line_end":859,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130931,"byte_end":130953,"line_start":860,"line_end":860,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":130958,"byte_end":130967,"line_start":861,"line_end":861,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132302,"byte_end":132315,"line_start":906,"line_end":906,"column_start":8,"column_end":21},"name":"read_f32_into","qualname":"::io::ReadBytesExt::read_f32_into","value":"pub fn read_f32_into<T: ByteOrder>(&mut Self, &mut [f32]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of IEEE754 single-precision (4 bytes) floating\n point numbers from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of IEEE754 single-precision (4 bytes) floating","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131246,"byte_end":131313,"line_start":874,"line_end":874,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131318,"byte_end":131363,"line_start":875,"line_end":875,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131368,"byte_end":131371,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131376,"byte_end":131449,"line_start":877,"line_end":877,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131454,"byte_end":131521,"line_start":878,"line_end":878,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131526,"byte_end":131529,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131534,"byte_end":131546,"line_start":880,"line_end":880,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131551,"byte_end":131554,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131559,"byte_end":131623,"line_start":882,"line_end":882,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131628,"byte_end":131631,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131636,"byte_end":131728,"line_start":884,"line_end":884,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131733,"byte_end":131736,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131741,"byte_end":131755,"line_start":886,"line_end":886,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131760,"byte_end":131763,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131768,"byte_end":131840,"line_start":888,"line_end":888,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131845,"byte_end":131863,"line_start":889,"line_end":889,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131868,"byte_end":131871,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131876,"byte_end":131887,"line_start":891,"line_end":891,"column_start":5,"column_end":16}},{"value":"/ use std::f32;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131892,"byte_end":131909,"line_start":892,"line_end":892,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131914,"byte_end":131938,"line_start":893,"line_end":893,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131943,"byte_end":131946,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":131951,"byte_end":131996,"line_start":895,"line_end":895,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132001,"byte_end":132004,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132009,"byte_end":132044,"line_start":897,"line_end":897,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x49, 0x0f, 0xdb,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132049,"byte_end":132080,"line_start":898,"line_end":898,"column_start":5,"column_end":36}},{"value":"/     0x3f, 0x80, 0x00, 0x00,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132085,"byte_end":132116,"line_start":899,"line_end":899,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132121,"byte_end":132128,"line_start":900,"line_end":900,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132133,"byte_end":132160,"line_start":901,"line_end":901,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f32_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132165,"byte_end":132219,"line_start":902,"line_end":902,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([f32::consts::PI, 1.0], dst);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132224,"byte_end":132268,"line_start":903,"line_end":903,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132273,"byte_end":132280,"line_start":904,"line_end":904,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132285,"byte_end":132294,"line_start":905,"line_end":905,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133816,"byte_end":133839,"line_start":955,"line_end":955,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::io::ReadBytesExt::read_f32_into_unchecked","value":"pub fn read_f32_into_unchecked<T: ByteOrder>(&mut Self, &mut [f32])\n-> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"/ **DEPRECATED**.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132570,"byte_end":132589,"line_start":918,"line_end":918,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132594,"byte_end":132597,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ This method is deprecated. Use `read_f32_into` instead.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132602,"byte_end":132661,"line_start":920,"line_end":920,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132666,"byte_end":132669,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ Reads a sequence of IEEE754 single-precision (4 bytes) floating","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132674,"byte_end":132741,"line_start":922,"line_end":922,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132746,"byte_end":132791,"line_start":923,"line_end":923,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132796,"byte_end":132799,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132804,"byte_end":132877,"line_start":925,"line_end":925,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132882,"byte_end":132949,"line_start":926,"line_end":926,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132954,"byte_end":132957,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132962,"byte_end":132974,"line_start":928,"line_end":928,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132979,"byte_end":132982,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":132987,"byte_end":133051,"line_start":930,"line_end":930,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133056,"byte_end":133059,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133064,"byte_end":133156,"line_start":932,"line_end":932,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133161,"byte_end":133164,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133169,"byte_end":133183,"line_start":934,"line_end":934,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133188,"byte_end":133191,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133196,"byte_end":133268,"line_start":936,"line_end":936,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133273,"byte_end":133291,"line_start":937,"line_end":937,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133296,"byte_end":133299,"line_start":938,"line_end":938,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133304,"byte_end":133315,"line_start":939,"line_end":939,"column_start":5,"column_end":16}},{"value":"/ use std::f32;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133320,"byte_end":133337,"line_start":940,"line_end":940,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133342,"byte_end":133366,"line_start":941,"line_end":941,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133371,"byte_end":133374,"line_start":942,"line_end":942,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133379,"byte_end":133424,"line_start":943,"line_end":943,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133429,"byte_end":133432,"line_start":944,"line_end":944,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133437,"byte_end":133472,"line_start":945,"line_end":945,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x49, 0x0f, 0xdb,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133477,"byte_end":133508,"line_start":946,"line_end":946,"column_start":5,"column_end":36}},{"value":"/     0x3f, 0x80, 0x00, 0x00,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133513,"byte_end":133544,"line_start":947,"line_end":947,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133549,"byte_end":133556,"line_start":948,"line_end":948,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133561,"byte_end":133588,"line_start":949,"line_end":949,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f32_into_unchecked::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133593,"byte_end":133657,"line_start":950,"line_end":950,"column_start":5,"column_end":69}},{"value":"/ assert_eq!([f32::consts::PI, 1.0], dst);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133662,"byte_end":133706,"line_start":951,"line_end":951,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133711,"byte_end":133718,"line_start":952,"line_end":952,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133723,"byte_end":133732,"line_start":953,"line_end":953,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.2.0\", note = \"please use `read_f32_into` instead\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133737,"byte_end":133808,"line_start":954,"line_end":954,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135073,"byte_end":135086,"line_start":994,"line_end":994,"column_start":8,"column_end":21},"name":"read_f64_into","qualname":"::io::ReadBytesExt::read_f64_into","value":"pub fn read_f64_into<T: ByteOrder>(&mut Self, &mut [f64]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of IEEE754 double-precision (8 bytes) floating\n point numbers from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of IEEE754 double-precision (8 bytes) floating","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":133969,"byte_end":134036,"line_start":962,"line_end":962,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134041,"byte_end":134086,"line_start":963,"line_end":963,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134091,"byte_end":134094,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134099,"byte_end":134172,"line_start":965,"line_end":965,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134177,"byte_end":134244,"line_start":966,"line_end":966,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134249,"byte_end":134252,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134257,"byte_end":134269,"line_start":968,"line_end":968,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134274,"byte_end":134277,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134282,"byte_end":134346,"line_start":970,"line_end":970,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134351,"byte_end":134354,"line_start":971,"line_end":971,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134359,"byte_end":134451,"line_start":972,"line_end":972,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134456,"byte_end":134459,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134464,"byte_end":134478,"line_start":974,"line_end":974,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134483,"byte_end":134486,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134491,"byte_end":134563,"line_start":976,"line_end":976,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134568,"byte_end":134586,"line_start":977,"line_end":977,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134591,"byte_end":134594,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134599,"byte_end":134610,"line_start":979,"line_end":979,"column_start":5,"column_end":16}},{"value":"/ use std::f64;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134615,"byte_end":134632,"line_start":980,"line_end":980,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134637,"byte_end":134661,"line_start":981,"line_end":981,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134666,"byte_end":134669,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134674,"byte_end":134719,"line_start":983,"line_end":983,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134724,"byte_end":134727,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134732,"byte_end":134767,"line_start":985,"line_end":985,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134772,"byte_end":134827,"line_start":986,"line_end":986,"column_start":5,"column_end":60}},{"value":"/     0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134832,"byte_end":134887,"line_start":987,"line_end":987,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134892,"byte_end":134899,"line_start":988,"line_end":988,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134904,"byte_end":134931,"line_start":989,"line_end":989,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f64_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134936,"byte_end":134990,"line_start":990,"line_end":990,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([f64::consts::PI, 1.0], dst);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":134995,"byte_end":135039,"line_start":991,"line_end":991,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135044,"byte_end":135051,"line_start":992,"line_end":992,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135056,"byte_end":135065,"line_start":993,"line_end":993,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136886,"byte_end":136909,"line_start":1049,"line_end":1049,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::io::ReadBytesExt::read_f64_into_unchecked","value":"pub fn read_f64_into_unchecked<T: ByteOrder>(&mut Self, &mut [f64])\n-> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"/ **DEPRECATED**.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135341,"byte_end":135360,"line_start":1006,"line_end":1006,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135365,"byte_end":135368,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ This method is deprecated. Use `read_f64_into` instead.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135373,"byte_end":135432,"line_start":1008,"line_end":1008,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135437,"byte_end":135440,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ Reads a sequence of IEEE754 double-precision (8 bytes) floating","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135445,"byte_end":135512,"line_start":1010,"line_end":1010,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135517,"byte_end":135562,"line_start":1011,"line_end":1011,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135567,"byte_end":135570,"line_start":1012,"line_end":1012,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135575,"byte_end":135648,"line_start":1013,"line_end":1013,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135653,"byte_end":135720,"line_start":1014,"line_end":1014,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135725,"byte_end":135728,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135733,"byte_end":135745,"line_start":1016,"line_end":1016,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135750,"byte_end":135753,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because there are no guarantees made about the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135758,"byte_end":135830,"line_start":1018,"line_end":1018,"column_start":5,"column_end":77}},{"value":"/ floating point values. In particular, this method does not check for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135835,"byte_end":135907,"line_start":1019,"line_end":1019,"column_start":5,"column_end":77}},{"value":"/ signaling NaNs, which may result in undefined behavior.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135912,"byte_end":135971,"line_start":1020,"line_end":1020,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135976,"byte_end":135979,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":135984,"byte_end":135996,"line_start":1022,"line_end":1022,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136001,"byte_end":136004,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136009,"byte_end":136073,"line_start":1024,"line_end":1024,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136078,"byte_end":136081,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136086,"byte_end":136178,"line_start":1026,"line_end":1026,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136183,"byte_end":136186,"line_start":1027,"line_end":1027,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136191,"byte_end":136205,"line_start":1028,"line_end":1028,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136210,"byte_end":136213,"line_start":1029,"line_end":1029,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136218,"byte_end":136290,"line_start":1030,"line_end":1030,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136295,"byte_end":136313,"line_start":1031,"line_end":1031,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136318,"byte_end":136321,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136326,"byte_end":136337,"line_start":1033,"line_end":1033,"column_start":5,"column_end":16}},{"value":"/ use std::f64;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136342,"byte_end":136359,"line_start":1034,"line_end":1034,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136364,"byte_end":136388,"line_start":1035,"line_end":1035,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136393,"byte_end":136396,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136401,"byte_end":136446,"line_start":1037,"line_end":1037,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136451,"byte_end":136454,"line_start":1038,"line_end":1038,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136459,"byte_end":136494,"line_start":1039,"line_end":1039,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136499,"byte_end":136554,"line_start":1040,"line_end":1040,"column_start":5,"column_end":60}},{"value":"/     0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136559,"byte_end":136614,"line_start":1041,"line_end":1041,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136619,"byte_end":136626,"line_start":1042,"line_end":1042,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136631,"byte_end":136658,"line_start":1043,"line_end":1043,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f64_into_unchecked::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136663,"byte_end":136727,"line_start":1044,"line_end":1044,"column_start":5,"column_end":69}},{"value":"/ assert_eq!([f64::consts::PI, 1.0], dst);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136732,"byte_end":136776,"line_start":1045,"line_end":1045,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136781,"byte_end":136788,"line_start":1046,"line_end":1046,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136793,"byte_end":136802,"line_start":1047,"line_end":1047,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.2.0\", note = \"please use `read_f64_into` instead\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":136807,"byte_end":136878,"line_start":1048,"line_end":1048,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":103},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137961,"byte_end":137974,"line_start":1083,"line_end":1083,"column_start":11,"column_end":24},"name":"WriteBytesExt","qualname":"::io::WriteBytesExt","value":"WriteBytesExt: io::Write","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":154},{"krate":0,"index":157}],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[{"value":"/ Extends [`Write`] with methods for writing numbers. (For `std::io`.)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137175,"byte_end":137247,"line_start":1061,"line_end":1061,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137248,"byte_end":137251,"line_start":1062,"line_end":1062,"column_start":1,"column_end":4}},{"value":"/ Most of the methods defined here have an unconstrained type parameter that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137252,"byte_end":137330,"line_start":1063,"line_end":1063,"column_start":1,"column_end":79}},{"value":"/ must be explicitly instantiated. Typically, it is instantiated with either","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137331,"byte_end":137409,"line_start":1064,"line_end":1064,"column_start":1,"column_end":79}},{"value":"/ the [`BigEndian`] or [`LittleEndian`] types defined in this crate.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137410,"byte_end":137480,"line_start":1065,"line_end":1065,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137481,"byte_end":137484,"line_start":1066,"line_end":1066,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137485,"byte_end":137499,"line_start":1067,"line_end":1067,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137500,"byte_end":137503,"line_start":1068,"line_end":1068,"column_start":1,"column_end":4}},{"value":"/ Write unsigned 16 bit big-endian integers to a [`Write`]:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137504,"byte_end":137565,"line_start":1069,"line_end":1069,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137566,"byte_end":137569,"line_start":1070,"line_end":1070,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137570,"byte_end":137581,"line_start":1071,"line_end":1071,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137582,"byte_end":137628,"line_start":1072,"line_end":1072,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137629,"byte_end":137632,"line_start":1073,"line_end":1073,"column_start":1,"column_end":4}},{"value":"/ let mut wtr = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137633,"byte_end":137658,"line_start":1074,"line_end":1074,"column_start":1,"column_end":26}},{"value":"/ wtr.write_u16::<BigEndian>(517).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137659,"byte_end":137704,"line_start":1075,"line_end":1075,"column_start":1,"column_end":46}},{"value":"/ wtr.write_u16::<BigEndian>(768).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137705,"byte_end":137750,"line_start":1076,"line_end":1076,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(wtr, vec![2, 5, 3, 0]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137751,"byte_end":137789,"line_start":1077,"line_end":1077,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137790,"byte_end":137797,"line_start":1078,"line_end":1078,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137798,"byte_end":137801,"line_start":1079,"line_end":1079,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137802,"byte_end":137840,"line_start":1080,"line_end":1080,"column_start":1,"column_end":39}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137841,"byte_end":137885,"line_start":1081,"line_end":1081,"column_start":1,"column_end":45}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137886,"byte_end":137950,"line_start":1082,"line_end":1082,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138728,"byte_end":138736,"line_start":1108,"line_end":1108,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::io::WriteBytesExt::write_u8","value":"pub fn write_u8(&mut Self, u8) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes an unsigned 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 8 bit integer to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137992,"byte_end":138054,"line_start":1084,"line_end":1084,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138059,"byte_end":138062,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ Note that since this writes a single byte, no byte order conversions","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138067,"byte_end":138139,"line_start":1086,"line_end":1086,"column_start":5,"column_end":77}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138144,"byte_end":138190,"line_start":1087,"line_end":1087,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138195,"byte_end":138198,"line_start":1088,"line_end":1088,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138203,"byte_end":138215,"line_start":1089,"line_end":1089,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138220,"byte_end":138223,"line_start":1090,"line_end":1090,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138228,"byte_end":138292,"line_start":1091,"line_end":1091,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138297,"byte_end":138300,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138305,"byte_end":138397,"line_start":1093,"line_end":1093,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138402,"byte_end":138405,"line_start":1094,"line_end":1094,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138410,"byte_end":138424,"line_start":1095,"line_end":1095,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138429,"byte_end":138432,"line_start":1096,"line_end":1096,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 8 bit integers to a `Write`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138437,"byte_end":138484,"line_start":1097,"line_end":1097,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138489,"byte_end":138492,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138497,"byte_end":138508,"line_start":1099,"line_end":1099,"column_start":5,"column_end":16}},{"value":"/ use byteorder::WriteBytesExt;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138513,"byte_end":138546,"line_start":1100,"line_end":1100,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138551,"byte_end":138554,"line_start":1101,"line_end":1101,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138559,"byte_end":138588,"line_start":1102,"line_end":1102,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u8(2).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138593,"byte_end":138622,"line_start":1103,"line_end":1103,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u8(5).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138627,"byte_end":138656,"line_start":1104,"line_end":1104,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(wtr, b\"\\x02\\x05\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138661,"byte_end":138694,"line_start":1105,"line_end":1105,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138699,"byte_end":138706,"line_start":1106,"line_end":1106,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138711,"byte_end":138720,"line_start":1107,"line_end":1107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139543,"byte_end":139551,"line_start":1136,"line_end":1136,"column_start":8,"column_end":16},"name":"write_i8","qualname":"::io::WriteBytesExt::write_i8","value":"pub fn write_i8(&mut Self, i8) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes a signed 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 8 bit integer to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138811,"byte_end":138870,"line_start":1112,"line_end":1112,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138875,"byte_end":138878,"line_start":1113,"line_end":1113,"column_start":5,"column_end":8}},{"value":"/ Note that since this writes a single byte, no byte order conversions","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138883,"byte_end":138955,"line_start":1114,"line_end":1114,"column_start":5,"column_end":77}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":138960,"byte_end":139006,"line_start":1115,"line_end":1115,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139011,"byte_end":139014,"line_start":1116,"line_end":1116,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139019,"byte_end":139031,"line_start":1117,"line_end":1117,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139036,"byte_end":139039,"line_start":1118,"line_end":1118,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139044,"byte_end":139108,"line_start":1119,"line_end":1119,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139113,"byte_end":139116,"line_start":1120,"line_end":1120,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139121,"byte_end":139213,"line_start":1121,"line_end":1121,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139218,"byte_end":139221,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139226,"byte_end":139240,"line_start":1123,"line_end":1123,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139245,"byte_end":139248,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ Write signed 8 bit integers to a `Write`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139253,"byte_end":139298,"line_start":1125,"line_end":1125,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139303,"byte_end":139306,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139311,"byte_end":139322,"line_start":1127,"line_end":1127,"column_start":5,"column_end":16}},{"value":"/ use byteorder::WriteBytesExt;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139327,"byte_end":139360,"line_start":1128,"line_end":1128,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139365,"byte_end":139368,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139373,"byte_end":139402,"line_start":1130,"line_end":1130,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i8(2).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139407,"byte_end":139436,"line_start":1131,"line_end":1131,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i8(-5).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139441,"byte_end":139471,"line_start":1132,"line_end":1132,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(wtr, b\"\\x02\\xfb\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139476,"byte_end":139509,"line_start":1133,"line_end":1133,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139514,"byte_end":139521,"line_start":1134,"line_end":1134,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139526,"byte_end":139535,"line_start":1135,"line_end":1135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140298,"byte_end":140307,"line_start":1161,"line_end":1161,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::io::WriteBytesExt::write_u16","value":"pub fn write_u16<T: ByteOrder>(&mut Self, u16) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139632,"byte_end":139695,"line_start":1140,"line_end":1140,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139700,"byte_end":139703,"line_start":1141,"line_end":1141,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139708,"byte_end":139720,"line_start":1142,"line_end":1142,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139725,"byte_end":139728,"line_start":1143,"line_end":1143,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139733,"byte_end":139797,"line_start":1144,"line_end":1144,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139802,"byte_end":139805,"line_start":1145,"line_end":1145,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139810,"byte_end":139902,"line_start":1146,"line_end":1146,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139907,"byte_end":139910,"line_start":1147,"line_end":1147,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139915,"byte_end":139929,"line_start":1148,"line_end":1148,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139934,"byte_end":139937,"line_start":1149,"line_end":1149,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 16 bit big-endian integers to a `Write`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":139942,"byte_end":140001,"line_start":1150,"line_end":1150,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140006,"byte_end":140009,"line_start":1151,"line_end":1151,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140014,"byte_end":140025,"line_start":1152,"line_end":1152,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140030,"byte_end":140076,"line_start":1153,"line_end":1153,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140081,"byte_end":140084,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140089,"byte_end":140118,"line_start":1155,"line_end":1155,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u16::<BigEndian>(517).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140123,"byte_end":140168,"line_start":1156,"line_end":1156,"column_start":5,"column_end":50}},{"value":"/ wtr.write_u16::<BigEndian>(768).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140173,"byte_end":140218,"line_start":1157,"line_end":1157,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(wtr, b\"\\x02\\x05\\x03\\x00\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140223,"byte_end":140264,"line_start":1158,"line_end":1158,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140269,"byte_end":140276,"line_start":1159,"line_end":1159,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140281,"byte_end":140290,"line_start":1160,"line_end":1160,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141124,"byte_end":141133,"line_start":1188,"line_end":1188,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::io::WriteBytesExt::write_i16","value":"pub fn write_i16<T: ByteOrder>(&mut Self, i16) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 16 bit integer to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140462,"byte_end":140522,"line_start":1167,"line_end":1167,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140527,"byte_end":140530,"line_start":1168,"line_end":1168,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140535,"byte_end":140547,"line_start":1169,"line_end":1169,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140552,"byte_end":140555,"line_start":1170,"line_end":1170,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140560,"byte_end":140624,"line_start":1171,"line_end":1171,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140629,"byte_end":140632,"line_start":1172,"line_end":1172,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140637,"byte_end":140729,"line_start":1173,"line_end":1173,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140734,"byte_end":140737,"line_start":1174,"line_end":1174,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140742,"byte_end":140756,"line_start":1175,"line_end":1175,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140761,"byte_end":140764,"line_start":1176,"line_end":1176,"column_start":5,"column_end":8}},{"value":"/ Write signed 16 bit big-endian integers to a `Write`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140769,"byte_end":140826,"line_start":1177,"line_end":1177,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140831,"byte_end":140834,"line_start":1178,"line_end":1178,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140839,"byte_end":140850,"line_start":1179,"line_end":1179,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140855,"byte_end":140901,"line_start":1180,"line_end":1180,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140906,"byte_end":140909,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140914,"byte_end":140943,"line_start":1182,"line_end":1182,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i16::<BigEndian>(193).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140948,"byte_end":140993,"line_start":1183,"line_end":1183,"column_start":5,"column_end":50}},{"value":"/ wtr.write_i16::<BigEndian>(-132).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":140998,"byte_end":141044,"line_start":1184,"line_end":1184,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(wtr, b\"\\x00\\xc1\\xff\\x7c\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141049,"byte_end":141090,"line_start":1185,"line_end":1185,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141095,"byte_end":141102,"line_start":1186,"line_end":1186,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141107,"byte_end":141116,"line_start":1187,"line_end":1187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141965,"byte_end":141974,"line_start":1215,"line_end":1215,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::io::WriteBytesExt::write_u24","value":"pub fn write_u24<T: ByteOrder>(&mut Self, u32) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes an unsigned 24 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 24 bit integer to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141288,"byte_end":141351,"line_start":1194,"line_end":1194,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141356,"byte_end":141359,"line_start":1195,"line_end":1195,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141364,"byte_end":141376,"line_start":1196,"line_end":1196,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141381,"byte_end":141384,"line_start":1197,"line_end":1197,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141389,"byte_end":141453,"line_start":1198,"line_end":1198,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141458,"byte_end":141461,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141466,"byte_end":141558,"line_start":1200,"line_end":1200,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141563,"byte_end":141566,"line_start":1201,"line_end":1201,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141571,"byte_end":141585,"line_start":1202,"line_end":1202,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141590,"byte_end":141593,"line_start":1203,"line_end":1203,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 24 bit big-endian integers to a `Write`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141598,"byte_end":141657,"line_start":1204,"line_end":1204,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141662,"byte_end":141665,"line_start":1205,"line_end":1205,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141670,"byte_end":141681,"line_start":1206,"line_end":1206,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141686,"byte_end":141732,"line_start":1207,"line_end":1207,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141737,"byte_end":141740,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141745,"byte_end":141774,"line_start":1209,"line_end":1209,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u24::<BigEndian>(267).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141779,"byte_end":141824,"line_start":1210,"line_end":1210,"column_start":5,"column_end":50}},{"value":"/ wtr.write_u24::<BigEndian>(120111).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141829,"byte_end":141877,"line_start":1211,"line_end":1211,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(wtr, b\"\\x00\\x01\\x0b\\x01\\xd5\\x2f\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141882,"byte_end":141931,"line_start":1212,"line_end":1212,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141936,"byte_end":141943,"line_start":1213,"line_end":1213,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":141948,"byte_end":141957,"line_start":1214,"line_end":1214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142804,"byte_end":142813,"line_start":1242,"line_end":1242,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::io::WriteBytesExt::write_i24","value":"pub fn write_i24<T: ByteOrder>(&mut Self, i32) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes a signed 24 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 24 bit integer to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142129,"byte_end":142189,"line_start":1221,"line_end":1221,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142194,"byte_end":142197,"line_start":1222,"line_end":1222,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142202,"byte_end":142214,"line_start":1223,"line_end":1223,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142219,"byte_end":142222,"line_start":1224,"line_end":1224,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142227,"byte_end":142291,"line_start":1225,"line_end":1225,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142296,"byte_end":142299,"line_start":1226,"line_end":1226,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142304,"byte_end":142396,"line_start":1227,"line_end":1227,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142401,"byte_end":142404,"line_start":1228,"line_end":1228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142409,"byte_end":142423,"line_start":1229,"line_end":1229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142428,"byte_end":142431,"line_start":1230,"line_end":1230,"column_start":5,"column_end":8}},{"value":"/ Write signed 24 bit big-endian integers to a `Write`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142436,"byte_end":142493,"line_start":1231,"line_end":1231,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142498,"byte_end":142501,"line_start":1232,"line_end":1232,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142506,"byte_end":142517,"line_start":1233,"line_end":1233,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142522,"byte_end":142568,"line_start":1234,"line_end":1234,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142573,"byte_end":142576,"line_start":1235,"line_end":1235,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142581,"byte_end":142610,"line_start":1236,"line_end":1236,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i24::<BigEndian>(-34253).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142615,"byte_end":142663,"line_start":1237,"line_end":1237,"column_start":5,"column_end":53}},{"value":"/ wtr.write_i24::<BigEndian>(120111).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142668,"byte_end":142716,"line_start":1238,"line_end":1238,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(wtr, b\"\\xff\\x7a\\x33\\x01\\xd5\\x2f\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142721,"byte_end":142770,"line_start":1239,"line_end":1239,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142775,"byte_end":142782,"line_start":1240,"line_end":1240,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142787,"byte_end":142796,"line_start":1241,"line_end":1241,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143657,"byte_end":143666,"line_start":1269,"line_end":1269,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::io::WriteBytesExt::write_u32","value":"pub fn write_u32<T: ByteOrder>(&mut Self, u32) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":142968,"byte_end":143031,"line_start":1248,"line_end":1248,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143036,"byte_end":143039,"line_start":1249,"line_end":1249,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143044,"byte_end":143056,"line_start":1250,"line_end":1250,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143061,"byte_end":143064,"line_start":1251,"line_end":1251,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143069,"byte_end":143133,"line_start":1252,"line_end":1252,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143138,"byte_end":143141,"line_start":1253,"line_end":1253,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143146,"byte_end":143238,"line_start":1254,"line_end":1254,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143243,"byte_end":143246,"line_start":1255,"line_end":1255,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143251,"byte_end":143265,"line_start":1256,"line_end":1256,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143270,"byte_end":143273,"line_start":1257,"line_end":1257,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 32 bit big-endian integers to a `Write`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143278,"byte_end":143337,"line_start":1258,"line_end":1258,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143342,"byte_end":143345,"line_start":1259,"line_end":1259,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143350,"byte_end":143361,"line_start":1260,"line_end":1260,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143366,"byte_end":143412,"line_start":1261,"line_end":1261,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143417,"byte_end":143420,"line_start":1262,"line_end":1262,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143425,"byte_end":143454,"line_start":1263,"line_end":1263,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u32::<BigEndian>(267).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143459,"byte_end":143504,"line_start":1264,"line_end":1264,"column_start":5,"column_end":50}},{"value":"/ wtr.write_u32::<BigEndian>(1205419366).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143509,"byte_end":143561,"line_start":1265,"line_end":1265,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(wtr, b\"\\x00\\x00\\x01\\x0b\\x47\\xd9\\x3d\\x66\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143566,"byte_end":143623,"line_start":1266,"line_end":1266,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143628,"byte_end":143635,"line_start":1267,"line_end":1267,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143640,"byte_end":143649,"line_start":1268,"line_end":1268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144508,"byte_end":144517,"line_start":1296,"line_end":1296,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::io::WriteBytesExt::write_i32","value":"pub fn write_i32<T: ByteOrder>(&mut Self, i32) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 32 bit integer to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143821,"byte_end":143881,"line_start":1275,"line_end":1275,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143886,"byte_end":143889,"line_start":1276,"line_end":1276,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143894,"byte_end":143906,"line_start":1277,"line_end":1277,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143911,"byte_end":143914,"line_start":1278,"line_end":1278,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143919,"byte_end":143983,"line_start":1279,"line_end":1279,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143988,"byte_end":143991,"line_start":1280,"line_end":1280,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":143996,"byte_end":144088,"line_start":1281,"line_end":1281,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144093,"byte_end":144096,"line_start":1282,"line_end":1282,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144101,"byte_end":144115,"line_start":1283,"line_end":1283,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144120,"byte_end":144123,"line_start":1284,"line_end":1284,"column_start":5,"column_end":8}},{"value":"/ Write signed 32 bit big-endian integers to a `Write`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144128,"byte_end":144185,"line_start":1285,"line_end":1285,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144190,"byte_end":144193,"line_start":1286,"line_end":1286,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144198,"byte_end":144209,"line_start":1287,"line_end":1287,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144214,"byte_end":144260,"line_start":1288,"line_end":1288,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144265,"byte_end":144268,"line_start":1289,"line_end":1289,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144273,"byte_end":144302,"line_start":1290,"line_end":1290,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i32::<BigEndian>(-34253).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144307,"byte_end":144355,"line_start":1291,"line_end":1291,"column_start":5,"column_end":53}},{"value":"/ wtr.write_i32::<BigEndian>(1205419366).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144360,"byte_end":144412,"line_start":1292,"line_end":1292,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(wtr, b\"\\xff\\xff\\x7a\\x33\\x47\\xd9\\x3d\\x66\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144417,"byte_end":144474,"line_start":1293,"line_end":1293,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144479,"byte_end":144486,"line_start":1294,"line_end":1294,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144491,"byte_end":144500,"line_start":1295,"line_end":1295,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145381,"byte_end":145390,"line_start":1323,"line_end":1323,"column_start":8,"column_end":17},"name":"write_u48","qualname":"::io::WriteBytesExt::write_u48","value":"pub fn write_u48<T: ByteOrder>(&mut Self, u64) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes an unsigned 48 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 48 bit integer to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144672,"byte_end":144735,"line_start":1302,"line_end":1302,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144740,"byte_end":144743,"line_start":1303,"line_end":1303,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144748,"byte_end":144760,"line_start":1304,"line_end":1304,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144765,"byte_end":144768,"line_start":1305,"line_end":1305,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144773,"byte_end":144837,"line_start":1306,"line_end":1306,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144842,"byte_end":144845,"line_start":1307,"line_end":1307,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144850,"byte_end":144942,"line_start":1308,"line_end":1308,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144947,"byte_end":144950,"line_start":1309,"line_end":1309,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144955,"byte_end":144969,"line_start":1310,"line_end":1310,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144974,"byte_end":144977,"line_start":1311,"line_end":1311,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 48 bit big-endian integers to a `Write`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":144982,"byte_end":145041,"line_start":1312,"line_end":1312,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145046,"byte_end":145049,"line_start":1313,"line_end":1313,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145054,"byte_end":145065,"line_start":1314,"line_end":1314,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145070,"byte_end":145116,"line_start":1315,"line_end":1315,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145121,"byte_end":145124,"line_start":1316,"line_end":1316,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145129,"byte_end":145158,"line_start":1317,"line_end":1317,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u48::<BigEndian>(52360336390828).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145163,"byte_end":145219,"line_start":1318,"line_end":1318,"column_start":5,"column_end":61}},{"value":"/ wtr.write_u48::<BigEndian>(541).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145224,"byte_end":145269,"line_start":1319,"line_end":1319,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(wtr, b\"\\x2f\\x9f\\x17\\x40\\x3a\\xac\\x00\\x00\\x00\\x00\\x02\\x1d\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145274,"byte_end":145347,"line_start":1320,"line_end":1320,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145352,"byte_end":145359,"line_start":1321,"line_end":1321,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145364,"byte_end":145373,"line_start":1322,"line_end":1322,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146250,"byte_end":146259,"line_start":1350,"line_end":1350,"column_start":8,"column_end":17},"name":"write_i48","qualname":"::io::WriteBytesExt::write_i48","value":"pub fn write_i48<T: ByteOrder>(&mut Self, i64) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes a signed 48 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 48 bit integer to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145545,"byte_end":145605,"line_start":1329,"line_end":1329,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145610,"byte_end":145613,"line_start":1330,"line_end":1330,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145618,"byte_end":145630,"line_start":1331,"line_end":1331,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145635,"byte_end":145638,"line_start":1332,"line_end":1332,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145643,"byte_end":145707,"line_start":1333,"line_end":1333,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145712,"byte_end":145715,"line_start":1334,"line_end":1334,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145720,"byte_end":145812,"line_start":1335,"line_end":1335,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145817,"byte_end":145820,"line_start":1336,"line_end":1336,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145825,"byte_end":145839,"line_start":1337,"line_end":1337,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145844,"byte_end":145847,"line_start":1338,"line_end":1338,"column_start":5,"column_end":8}},{"value":"/ Write signed 48 bit big-endian integers to a `Write`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145852,"byte_end":145909,"line_start":1339,"line_end":1339,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145914,"byte_end":145917,"line_start":1340,"line_end":1340,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145922,"byte_end":145933,"line_start":1341,"line_end":1341,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145938,"byte_end":145984,"line_start":1342,"line_end":1342,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145989,"byte_end":145992,"line_start":1343,"line_end":1343,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":145997,"byte_end":146026,"line_start":1344,"line_end":1344,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i48::<BigEndian>(-108363435763825).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146031,"byte_end":146089,"line_start":1345,"line_end":1345,"column_start":5,"column_end":63}},{"value":"/ wtr.write_i48::<BigEndian>(77).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146094,"byte_end":146138,"line_start":1346,"line_end":1346,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(wtr, b\"\\x9d\\x71\\xab\\xe7\\x97\\x8f\\x00\\x00\\x00\\x00\\x00\\x4d\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146143,"byte_end":146216,"line_start":1347,"line_end":1347,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146221,"byte_end":146228,"line_start":1348,"line_end":1348,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146233,"byte_end":146242,"line_start":1349,"line_end":1349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147140,"byte_end":147149,"line_start":1377,"line_end":1377,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::io::WriteBytesExt::write_u64","value":"pub fn write_u64<T: ByteOrder>(&mut Self, u64) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146414,"byte_end":146477,"line_start":1356,"line_end":1356,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146482,"byte_end":146485,"line_start":1357,"line_end":1357,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146490,"byte_end":146502,"line_start":1358,"line_end":1358,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146507,"byte_end":146510,"line_start":1359,"line_end":1359,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146515,"byte_end":146579,"line_start":1360,"line_end":1360,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146584,"byte_end":146587,"line_start":1361,"line_end":1361,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146592,"byte_end":146684,"line_start":1362,"line_end":1362,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146689,"byte_end":146692,"line_start":1363,"line_end":1363,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146697,"byte_end":146711,"line_start":1364,"line_end":1364,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146716,"byte_end":146719,"line_start":1365,"line_end":1365,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 64 bit big-endian integers to a `Write`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146724,"byte_end":146783,"line_start":1366,"line_end":1366,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146788,"byte_end":146791,"line_start":1367,"line_end":1367,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146796,"byte_end":146807,"line_start":1368,"line_end":1368,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146812,"byte_end":146858,"line_start":1369,"line_end":1369,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146863,"byte_end":146866,"line_start":1370,"line_end":1370,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146871,"byte_end":146900,"line_start":1371,"line_end":1371,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u64::<BigEndian>(918733457491587).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146905,"byte_end":146962,"line_start":1372,"line_end":1372,"column_start":5,"column_end":62}},{"value":"/ wtr.write_u64::<BigEndian>(143).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":146967,"byte_end":147012,"line_start":1373,"line_end":1373,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(wtr, b\"\\x00\\x03\\x43\\x95\\x4d\\x60\\x86\\x83\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8f\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147017,"byte_end":147106,"line_start":1374,"line_end":1374,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147111,"byte_end":147118,"line_start":1375,"line_end":1375,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147123,"byte_end":147132,"line_start":1376,"line_end":1376,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":148039,"byte_end":148048,"line_start":1404,"line_end":1404,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::io::WriteBytesExt::write_i64","value":"pub fn write_i64<T: ByteOrder>(&mut Self, i64) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 64 bit integer to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147304,"byte_end":147364,"line_start":1383,"line_end":1383,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147369,"byte_end":147372,"line_start":1384,"line_end":1384,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147377,"byte_end":147389,"line_start":1385,"line_end":1385,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147394,"byte_end":147397,"line_start":1386,"line_end":1386,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147402,"byte_end":147466,"line_start":1387,"line_end":1387,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147471,"byte_end":147474,"line_start":1388,"line_end":1388,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147479,"byte_end":147571,"line_start":1389,"line_end":1389,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147576,"byte_end":147579,"line_start":1390,"line_end":1390,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147584,"byte_end":147598,"line_start":1391,"line_end":1391,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147603,"byte_end":147606,"line_start":1392,"line_end":1392,"column_start":5,"column_end":8}},{"value":"/ Write signed 64 bit big-endian integers to a `Write`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147611,"byte_end":147668,"line_start":1393,"line_end":1393,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147673,"byte_end":147676,"line_start":1394,"line_end":1394,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147681,"byte_end":147692,"line_start":1395,"line_end":1395,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147697,"byte_end":147743,"line_start":1396,"line_end":1396,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147748,"byte_end":147751,"line_start":1397,"line_end":1397,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147756,"byte_end":147785,"line_start":1398,"line_end":1398,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i64::<BigEndian>(i64::min_value()).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147790,"byte_end":147848,"line_start":1399,"line_end":1399,"column_start":5,"column_end":63}},{"value":"/ wtr.write_i64::<BigEndian>(i64::max_value()).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147853,"byte_end":147911,"line_start":1400,"line_end":1400,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(wtr, b\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":147916,"byte_end":148005,"line_start":1401,"line_end":1401,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":148010,"byte_end":148017,"line_start":1402,"line_end":1402,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":148022,"byte_end":148031,"line_start":1403,"line_end":1403,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":148316,"byte_end":148326,"line_start":1413,"line_end":1413,"column_start":8,"column_end":18},"name":"write_u128","qualname":"::io::WriteBytesExt::write_u128","value":"pub fn write_u128<T: ByteOrder>(&mut Self, u128) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes an unsigned 128 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes an unsigned 128 bit integer to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":148203,"byte_end":148267,"line_start":1410,"line_end":1410,"column_start":5,"column_end":69}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":148272,"byte_end":148294,"line_start":1411,"line_end":1411,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":148299,"byte_end":148308,"line_start":1412,"line_end":1412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":148594,"byte_end":148604,"line_start":1422,"line_end":1422,"column_start":8,"column_end":18},"name":"write_i128","qualname":"::io::WriteBytesExt::write_i128","value":"pub fn write_i128<T: ByteOrder>(&mut Self, i128) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes a signed 128 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes a signed 128 bit integer to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":148484,"byte_end":148545,"line_start":1419,"line_end":1419,"column_start":5,"column_end":66}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":148550,"byte_end":148572,"line_start":1420,"line_end":1420,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":148577,"byte_end":148586,"line_start":1421,"line_end":1421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149647,"byte_end":149657,"line_start":1454,"line_end":1454,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::io::WriteBytesExt::write_uint","value":"pub fn write_uint<T: ByteOrder>(&mut Self, u64, usize) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes an unsigned n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned n-bytes integer to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":148762,"byte_end":148826,"line_start":1428,"line_end":1428,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":148831,"byte_end":148834,"line_start":1429,"line_end":1429,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":148839,"byte_end":148851,"line_start":1430,"line_end":1430,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":148856,"byte_end":148859,"line_start":1431,"line_end":1431,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":148864,"byte_end":148928,"line_start":1432,"line_end":1432,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":148933,"byte_end":148936,"line_start":1433,"line_end":1433,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":148941,"byte_end":149033,"line_start":1434,"line_end":1434,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149038,"byte_end":149041,"line_start":1435,"line_end":1435,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149046,"byte_end":149058,"line_start":1436,"line_end":1436,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149063,"byte_end":149066,"line_start":1437,"line_end":1437,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149071,"byte_end":149146,"line_start":1438,"line_end":1438,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 8`, this method panics.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149151,"byte_end":149211,"line_start":1439,"line_end":1439,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149216,"byte_end":149219,"line_start":1440,"line_end":1440,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149224,"byte_end":149238,"line_start":1441,"line_end":1441,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149243,"byte_end":149246,"line_start":1442,"line_end":1442,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 40 bit big-endian integers to a `Write`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149251,"byte_end":149310,"line_start":1443,"line_end":1443,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149315,"byte_end":149318,"line_start":1444,"line_end":1444,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149323,"byte_end":149334,"line_start":1445,"line_end":1445,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149339,"byte_end":149385,"line_start":1446,"line_end":1446,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149390,"byte_end":149393,"line_start":1447,"line_end":1447,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149398,"byte_end":149427,"line_start":1448,"line_end":1448,"column_start":5,"column_end":34}},{"value":"/ wtr.write_uint::<BigEndian>(312550384361, 5).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149432,"byte_end":149490,"line_start":1449,"line_end":1449,"column_start":5,"column_end":63}},{"value":"/ wtr.write_uint::<BigEndian>(43, 5).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149495,"byte_end":149543,"line_start":1450,"line_end":1450,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(wtr, b\"\\x48\\xc5\\x74\\x62\\xe9\\x00\\x00\\x00\\x00\\x2b\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149548,"byte_end":149613,"line_start":1451,"line_end":1451,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149618,"byte_end":149625,"line_start":1452,"line_end":1452,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149630,"byte_end":149639,"line_start":1453,"line_end":1453,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150777,"byte_end":150786,"line_start":1490,"line_end":1490,"column_start":8,"column_end":17},"name":"write_int","qualname":"::io::WriteBytesExt::write_int","value":"pub fn write_int<T: ByteOrder>(&mut Self, i64, usize) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes a signed n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed n-bytes integer to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149878,"byte_end":149939,"line_start":1464,"line_end":1464,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149944,"byte_end":149947,"line_start":1465,"line_end":1465,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149952,"byte_end":149964,"line_start":1466,"line_end":1466,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149969,"byte_end":149972,"line_start":1467,"line_end":1467,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":149977,"byte_end":150041,"line_start":1468,"line_end":1468,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150046,"byte_end":150049,"line_start":1469,"line_end":1469,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150054,"byte_end":150146,"line_start":1470,"line_end":1470,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150151,"byte_end":150154,"line_start":1471,"line_end":1471,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150159,"byte_end":150171,"line_start":1472,"line_end":1472,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150176,"byte_end":150179,"line_start":1473,"line_end":1473,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150184,"byte_end":150259,"line_start":1474,"line_end":1474,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 8`, this method panics.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150264,"byte_end":150324,"line_start":1475,"line_end":1475,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150329,"byte_end":150332,"line_start":1476,"line_end":1476,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150337,"byte_end":150351,"line_start":1477,"line_end":1477,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150356,"byte_end":150359,"line_start":1478,"line_end":1478,"column_start":5,"column_end":8}},{"value":"/ Write signed 56 bit big-endian integers to a `Write`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150364,"byte_end":150421,"line_start":1479,"line_end":1479,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150426,"byte_end":150429,"line_start":1480,"line_end":1480,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150434,"byte_end":150445,"line_start":1481,"line_end":1481,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150450,"byte_end":150496,"line_start":1482,"line_end":1482,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150501,"byte_end":150504,"line_start":1483,"line_end":1483,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150509,"byte_end":150538,"line_start":1484,"line_end":1484,"column_start":5,"column_end":34}},{"value":"/ wtr.write_int::<BigEndian>(-3548172039376767, 7).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150543,"byte_end":150605,"line_start":1485,"line_end":1485,"column_start":5,"column_end":67}},{"value":"/ wtr.write_int::<BigEndian>(43, 7).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150610,"byte_end":150657,"line_start":1486,"line_end":1486,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(wtr, b\"\\xf3\\x64\\xf4\\xd1\\xfd\\xb0\\x81\\x00\\x00\\x00\\x00\\x00\\x00\\x2b\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150662,"byte_end":150743,"line_start":1487,"line_end":1487,"column_start":5,"column_end":86}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150748,"byte_end":150755,"line_start":1488,"line_end":1488,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":150760,"byte_end":150769,"line_start":1489,"line_end":1489,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":151273,"byte_end":151286,"line_start":1506,"line_end":1506,"column_start":8,"column_end":21},"name":"write_uint128","qualname":"::io::WriteBytesExt::write_uint128","value":"pub fn write_uint128<T: ByteOrder>(&mut Self, u128, usize) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes an unsigned n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned n-bytes integer to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":151006,"byte_end":151070,"line_start":1500,"line_end":1500,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":151075,"byte_end":151078,"line_start":1501,"line_end":1501,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":151083,"byte_end":151158,"line_start":1502,"line_end":1502,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 16`, this method panics.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":151163,"byte_end":151224,"line_start":1503,"line_end":1503,"column_start":5,"column_end":66}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":151229,"byte_end":151251,"line_start":1504,"line_end":1504,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":151256,"byte_end":151265,"line_start":1505,"line_end":1505,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":151776,"byte_end":151788,"line_start":1522,"line_end":1522,"column_start":8,"column_end":20},"name":"write_int128","qualname":"::io::WriteBytesExt::write_int128","value":"pub fn write_int128<T: ByteOrder>(&mut Self, i128, usize) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes a signed n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed n-bytes integer to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":151512,"byte_end":151573,"line_start":1516,"line_end":1516,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":151578,"byte_end":151581,"line_start":1517,"line_end":1517,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":151586,"byte_end":151661,"line_start":1518,"line_end":1518,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 16`, this method panics.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":151666,"byte_end":151727,"line_start":1519,"line_end":1519,"column_start":5,"column_end":66}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":151732,"byte_end":151754,"line_start":1520,"line_end":1520,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":151759,"byte_end":151768,"line_start":1521,"line_end":1521,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152727,"byte_end":152736,"line_start":1555,"line_end":1555,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::io::WriteBytesExt::write_f32","value":"pub fn write_f32<T: ByteOrder>(&mut Self, f32) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number to\n the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 single-precision (4 bytes) floating point number to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152013,"byte_end":152085,"line_start":1532,"line_end":1532,"column_start":5,"column_end":77}},{"value":"/ the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152090,"byte_end":152116,"line_start":1533,"line_end":1533,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152121,"byte_end":152124,"line_start":1534,"line_end":1534,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152129,"byte_end":152141,"line_start":1535,"line_end":1535,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152146,"byte_end":152149,"line_start":1536,"line_end":1536,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152154,"byte_end":152218,"line_start":1537,"line_end":1537,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152223,"byte_end":152226,"line_start":1538,"line_end":1538,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152231,"byte_end":152323,"line_start":1539,"line_end":1539,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152328,"byte_end":152331,"line_start":1540,"line_end":1540,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152336,"byte_end":152350,"line_start":1541,"line_end":1541,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152355,"byte_end":152358,"line_start":1542,"line_end":1542,"column_start":5,"column_end":8}},{"value":"/ Write a big-endian single-precision floating point number to a `Write`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152363,"byte_end":152438,"line_start":1543,"line_end":1543,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152443,"byte_end":152446,"line_start":1544,"line_end":1544,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152451,"byte_end":152462,"line_start":1545,"line_end":1545,"column_start":5,"column_end":16}},{"value":"/ use std::f32;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152467,"byte_end":152484,"line_start":1546,"line_end":1546,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152489,"byte_end":152492,"line_start":1547,"line_end":1547,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152497,"byte_end":152543,"line_start":1548,"line_end":1548,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152548,"byte_end":152551,"line_start":1549,"line_end":1549,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152556,"byte_end":152585,"line_start":1550,"line_end":1550,"column_start":5,"column_end":34}},{"value":"/ wtr.write_f32::<BigEndian>(f32::consts::PI).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152590,"byte_end":152647,"line_start":1551,"line_end":1551,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(wtr, b\"\\x40\\x49\\x0f\\xdb\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152652,"byte_end":152693,"line_start":1552,"line_end":1552,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152698,"byte_end":152705,"line_start":1553,"line_end":1553,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152710,"byte_end":152719,"line_start":1554,"line_end":1554,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153621,"byte_end":153630,"line_start":1584,"line_end":1584,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::io::WriteBytesExt::write_f64","value":"pub fn write_f64<T: ByteOrder>(&mut Self, f64) -> Result<()>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number to\n the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 double-precision (8 bytes) floating point number to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152891,"byte_end":152963,"line_start":1561,"line_end":1561,"column_start":5,"column_end":77}},{"value":"/ the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152968,"byte_end":152994,"line_start":1562,"line_end":1562,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":152999,"byte_end":153002,"line_start":1563,"line_end":1563,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153007,"byte_end":153019,"line_start":1564,"line_end":1564,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153024,"byte_end":153027,"line_start":1565,"line_end":1565,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153032,"byte_end":153096,"line_start":1566,"line_end":1566,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153101,"byte_end":153104,"line_start":1567,"line_end":1567,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153109,"byte_end":153201,"line_start":1568,"line_end":1568,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153206,"byte_end":153209,"line_start":1569,"line_end":1569,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153214,"byte_end":153228,"line_start":1570,"line_end":1570,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153233,"byte_end":153236,"line_start":1571,"line_end":1571,"column_start":5,"column_end":8}},{"value":"/ Write a big-endian double-precision floating point number to a `Write`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153241,"byte_end":153316,"line_start":1572,"line_end":1572,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153321,"byte_end":153324,"line_start":1573,"line_end":1573,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153329,"byte_end":153340,"line_start":1574,"line_end":1574,"column_start":5,"column_end":16}},{"value":"/ use std::f64;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153345,"byte_end":153362,"line_start":1575,"line_end":1575,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153367,"byte_end":153370,"line_start":1576,"line_end":1576,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153375,"byte_end":153421,"line_start":1577,"line_end":1577,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153426,"byte_end":153429,"line_start":1578,"line_end":1578,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153434,"byte_end":153463,"line_start":1579,"line_end":1579,"column_start":5,"column_end":34}},{"value":"/ wtr.write_f64::<BigEndian>(f64::consts::PI).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153468,"byte_end":153525,"line_start":1580,"line_end":1580,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(wtr, b\"\\x40\\x09\\x21\\xfb\\x54\\x44\\x2d\\x18\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153530,"byte_end":153587,"line_start":1581,"line_end":1581,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153592,"byte_end":153599,"line_start":1582,"line_end":1582,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153604,"byte_end":153613,"line_start":1583,"line_end":1583,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":172},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":4472,"byte_end":4478,"line_start":182,"line_end":182,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Sealed stops crates other than byteorder from implementing any traits\n that use it.\n","sig":null,"attributes":[{"value":"/ Sealed stops crates other than byteorder from implementing any traits","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":4363,"byte_end":4436,"line_start":180,"line_end":180,"column_start":5,"column_end":78}},{"value":"/ that use it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":4441,"byte_end":4457,"line_start":181,"line_end":181,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":175},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5724,"byte_end":5733,"line_start":222,"line_end":222,"column_start":11,"column_end":20},"name":"ByteOrder","qualname":"::ByteOrder","value":"ByteOrder: Clone + Copy + Debug + Default + Eq + Hash + Ord + PartialEq + PartialOrd +\nprivate::Sealed","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243}],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[{"value":"/ `ByteOrder` describes types that can serialize integers as bytes.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":4567,"byte_end":4636,"line_start":187,"line_end":187,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":4637,"byte_end":4640,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ Note that `Self` does not appear anywhere in this trait's definition!","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":4641,"byte_end":4714,"line_start":189,"line_end":189,"column_start":1,"column_end":74}},{"value":"/ Therefore, in order to use it, you'll need to use syntax like","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":4715,"byte_end":4780,"line_start":190,"line_end":190,"column_start":1,"column_end":66}},{"value":"/ `T::read_u16(&[0, 1])` where `T` implements `ByteOrder`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":4781,"byte_end":4841,"line_start":191,"line_end":191,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":4842,"byte_end":4845,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ This crate provides two types that implement `ByteOrder`: [`BigEndian`]","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":4846,"byte_end":4921,"line_start":193,"line_end":193,"column_start":1,"column_end":76}},{"value":"/ and [`LittleEndian`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":4922,"byte_end":4947,"line_start":194,"line_end":194,"column_start":1,"column_end":26}},{"value":"/ This trait is sealed and cannot be implemented for callers to avoid","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":4948,"byte_end":5019,"line_start":195,"line_end":195,"column_start":1,"column_end":72}},{"value":"/ breaking backwards compatibility when adding new derived traits.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5020,"byte_end":5088,"line_start":196,"line_end":196,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5089,"byte_end":5092,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5093,"byte_end":5107,"line_start":198,"line_end":198,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5108,"byte_end":5111,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5112,"byte_end":5168,"line_start":200,"line_end":200,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5169,"byte_end":5172,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5173,"byte_end":5184,"line_start":202,"line_end":202,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5185,"byte_end":5230,"line_start":203,"line_end":203,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5231,"byte_end":5234,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5235,"byte_end":5260,"line_start":205,"line_end":205,"column_start":1,"column_end":26}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5261,"byte_end":5310,"line_start":206,"line_end":206,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5311,"byte_end":5367,"line_start":207,"line_end":207,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5368,"byte_end":5375,"line_start":208,"line_end":208,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5376,"byte_end":5379,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ Write and read `i16` numbers in big endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5380,"byte_end":5433,"line_start":210,"line_end":210,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5434,"byte_end":5437,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5438,"byte_end":5449,"line_start":212,"line_end":212,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5450,"byte_end":5492,"line_start":213,"line_end":213,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5493,"byte_end":5496,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5497,"byte_end":5522,"line_start":215,"line_end":215,"column_start":1,"column_end":26}},{"value":"/ BigEndian::write_i16(&mut buf, -5_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5523,"byte_end":5566,"line_start":216,"line_end":216,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(-5_000, BigEndian::read_i16(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5567,"byte_end":5617,"line_start":217,"line_end":217,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5618,"byte_end":5625,"line_start":218,"line_end":218,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5626,"byte_end":5629,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5630,"byte_end":5668,"line_start":220,"line_end":220,"column_start":1,"column_end":39}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5669,"byte_end":5713,"line_start":221,"line_end":221,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5968,"byte_end":5976,"line_start":231,"line_end":231,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::ByteOrder::read_u16","value":"pub fn read_u16(&[u8]) -> u16","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 16 bit integer from `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5842,"byte_end":5890,"line_start":226,"line_end":226,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5895,"byte_end":5898,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5903,"byte_end":5915,"line_start":228,"line_end":228,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5920,"byte_end":5923,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5928,"byte_end":5960,"line_start":230,"line_end":230,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6485,"byte_end":6493,"line_start":250,"line_end":250,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::ByteOrder::read_u24","value":"pub fn read_u24(&[u8]) -> u32","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from `buf`, stored in u32.","sig":null,"attributes":[{"value":"/ Reads an unsigned 24 bit integer from `buf`, stored in u32.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6002,"byte_end":6065,"line_start":233,"line_end":233,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6070,"byte_end":6073,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6078,"byte_end":6090,"line_start":235,"line_end":235,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6095,"byte_end":6098,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6103,"byte_end":6135,"line_start":237,"line_end":237,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6140,"byte_end":6143,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6148,"byte_end":6162,"line_start":239,"line_end":239,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6167,"byte_end":6170,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `u32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6175,"byte_end":6238,"line_start":241,"line_end":241,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6243,"byte_end":6246,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6251,"byte_end":6262,"line_start":243,"line_end":243,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6267,"byte_end":6312,"line_start":244,"line_end":244,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6317,"byte_end":6320,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6325,"byte_end":6350,"line_start":246,"line_end":246,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u24(&mut buf, 1_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6355,"byte_end":6404,"line_start":247,"line_end":247,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u24(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6409,"byte_end":6465,"line_start":248,"line_end":248,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6470,"byte_end":6477,"line_start":249,"line_end":249,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7026,"byte_end":7034,"line_start":271,"line_end":271,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::ByteOrder::read_u32","value":"pub fn read_u32(&[u8]) -> u32","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 32 bit integer from `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6565,"byte_end":6613,"line_start":254,"line_end":254,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6618,"byte_end":6621,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6626,"byte_end":6638,"line_start":256,"line_end":256,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6643,"byte_end":6646,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6651,"byte_end":6683,"line_start":258,"line_end":258,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6688,"byte_end":6691,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6696,"byte_end":6710,"line_start":260,"line_end":260,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6715,"byte_end":6718,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6723,"byte_end":6779,"line_start":262,"line_end":262,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6784,"byte_end":6787,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6792,"byte_end":6803,"line_start":264,"line_end":264,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6808,"byte_end":6853,"line_start":265,"line_end":265,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6858,"byte_end":6861,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6866,"byte_end":6891,"line_start":267,"line_end":267,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6896,"byte_end":6945,"line_start":268,"line_end":268,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":6950,"byte_end":7006,"line_start":269,"line_end":269,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7011,"byte_end":7018,"line_start":270,"line_end":270,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7559,"byte_end":7567,"line_start":290,"line_end":290,"column_start":8,"column_end":16},"name":"read_u48","qualname":"::ByteOrder::read_u48","value":"pub fn read_u48(&[u8]) -> u64","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads an unsigned 48 bit integer from `buf`, stored in u64.","sig":null,"attributes":[{"value":"/ Reads an unsigned 48 bit integer from `buf`, stored in u64.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7060,"byte_end":7123,"line_start":273,"line_end":273,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7128,"byte_end":7131,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7136,"byte_end":7148,"line_start":275,"line_end":275,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7153,"byte_end":7156,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 6`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7161,"byte_end":7193,"line_start":277,"line_end":277,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7198,"byte_end":7201,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7206,"byte_end":7220,"line_start":279,"line_end":279,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7225,"byte_end":7228,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ Write and read 48 bit `u64` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7233,"byte_end":7296,"line_start":281,"line_end":281,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7301,"byte_end":7304,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7309,"byte_end":7320,"line_start":283,"line_end":283,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7325,"byte_end":7370,"line_start":284,"line_end":284,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7375,"byte_end":7378,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 6];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7383,"byte_end":7408,"line_start":286,"line_end":286,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u48(&mut buf, 1_000_000_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7413,"byte_end":7470,"line_start":287,"line_end":287,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7475,"byte_end":7539,"line_start":288,"line_end":288,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7544,"byte_end":7551,"line_start":289,"line_end":289,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8100,"byte_end":8108,"line_start":311,"line_end":311,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::ByteOrder::read_u64","value":"pub fn read_u64(&[u8]) -> u64","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 64 bit integer from `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7639,"byte_end":7687,"line_start":294,"line_end":294,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7692,"byte_end":7695,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7700,"byte_end":7712,"line_start":296,"line_end":296,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7717,"byte_end":7720,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7725,"byte_end":7757,"line_start":298,"line_end":298,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7762,"byte_end":7765,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7770,"byte_end":7784,"line_start":300,"line_end":300,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7789,"byte_end":7792,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7797,"byte_end":7853,"line_start":302,"line_end":302,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7858,"byte_end":7861,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7866,"byte_end":7877,"line_start":304,"line_end":304,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7882,"byte_end":7927,"line_start":305,"line_end":305,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7932,"byte_end":7935,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7940,"byte_end":7965,"line_start":307,"line_end":307,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u64(&mut buf, 1_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":7970,"byte_end":8019,"line_start":308,"line_end":308,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u64(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8024,"byte_end":8080,"line_start":309,"line_end":309,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8085,"byte_end":8092,"line_start":310,"line_end":310,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8628,"byte_end":8637,"line_start":331,"line_end":331,"column_start":8,"column_end":17},"name":"read_u128","qualname":"::ByteOrder::read_u128","value":"pub fn read_u128(&[u8]) -> u128","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads an unsigned 128 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 128 bit integer from `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8134,"byte_end":8183,"line_start":313,"line_end":313,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8188,"byte_end":8191,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8196,"byte_end":8208,"line_start":315,"line_end":315,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8213,"byte_end":8216,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 16`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8221,"byte_end":8254,"line_start":317,"line_end":317,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8259,"byte_end":8262,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8267,"byte_end":8281,"line_start":319,"line_end":319,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8286,"byte_end":8289,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ Write and read `u128` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8294,"byte_end":8351,"line_start":321,"line_end":321,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8356,"byte_end":8359,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8364,"byte_end":8375,"line_start":323,"line_end":323,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8380,"byte_end":8425,"line_start":324,"line_end":324,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8430,"byte_end":8433,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 16];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8438,"byte_end":8464,"line_start":326,"line_end":326,"column_start":5,"column_end":31}},{"value":"/ LittleEndian::write_u128(&mut buf, 1_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8469,"byte_end":8519,"line_start":327,"line_end":327,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u128(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8524,"byte_end":8581,"line_start":328,"line_end":328,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8586,"byte_end":8593,"line_start":329,"line_end":329,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8598,"byte_end":8620,"line_start":330,"line_end":330,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9181,"byte_end":9190,"line_start":351,"line_end":351,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::ByteOrder::read_uint","value":"pub fn read_uint(&[u8], usize) -> u64","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8664,"byte_end":8713,"line_start":333,"line_end":333,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8718,"byte_end":8721,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8726,"byte_end":8738,"line_start":335,"line_end":335,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8743,"byte_end":8746,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 8` or","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8751,"byte_end":8798,"line_start":337,"line_end":337,"column_start":5,"column_end":52}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8803,"byte_end":8827,"line_start":338,"line_end":338,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8832,"byte_end":8835,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8840,"byte_end":8854,"line_start":340,"line_end":340,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8859,"byte_end":8862,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8867,"byte_end":8926,"line_start":342,"line_end":342,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8931,"byte_end":8934,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8939,"byte_end":8950,"line_start":344,"line_end":344,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":8955,"byte_end":9000,"line_start":345,"line_end":345,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9005,"byte_end":9008,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9013,"byte_end":9038,"line_start":347,"line_end":347,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_uint(&mut buf, 1_000_000, 3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9043,"byte_end":9096,"line_start":348,"line_end":348,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9101,"byte_end":9161,"line_start":349,"line_end":349,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9166,"byte_end":9173,"line_start":350,"line_end":350,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9782,"byte_end":9794,"line_start":372,"line_end":372,"column_start":8,"column_end":20},"name":"read_uint128","qualname":"::ByteOrder::read_uint128","value":"pub fn read_uint128(&[u8], usize) -> u128","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9231,"byte_end":9280,"line_start":353,"line_end":353,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9285,"byte_end":9288,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9293,"byte_end":9305,"line_start":355,"line_end":355,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9310,"byte_end":9313,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 16` or","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9318,"byte_end":9366,"line_start":357,"line_end":357,"column_start":5,"column_end":53}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9371,"byte_end":9395,"line_start":358,"line_end":358,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9400,"byte_end":9403,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9408,"byte_end":9422,"line_start":360,"line_end":360,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9427,"byte_end":9430,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9435,"byte_end":9494,"line_start":362,"line_end":362,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9499,"byte_end":9502,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9507,"byte_end":9518,"line_start":364,"line_end":364,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9523,"byte_end":9568,"line_start":365,"line_end":365,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9573,"byte_end":9576,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9581,"byte_end":9606,"line_start":367,"line_end":367,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_uint128(&mut buf, 1_000_000, 3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9611,"byte_end":9667,"line_start":368,"line_end":368,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9672,"byte_end":9735,"line_start":369,"line_end":369,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9740,"byte_end":9747,"line_start":370,"line_end":370,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9752,"byte_end":9774,"line_start":371,"line_end":371,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10292,"byte_end":10301,"line_start":391,"line_end":391,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::ByteOrder::write_u16","value":"pub fn write_u16(&mut [u8], u16)","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer `n` to `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9836,"byte_end":9887,"line_start":374,"line_end":374,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9892,"byte_end":9895,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9900,"byte_end":9912,"line_start":376,"line_end":376,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9917,"byte_end":9920,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9925,"byte_end":9957,"line_start":378,"line_end":378,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9962,"byte_end":9965,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9970,"byte_end":9984,"line_start":380,"line_end":380,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9989,"byte_end":9992,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ Write and read `u16` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":9997,"byte_end":10053,"line_start":382,"line_end":382,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10058,"byte_end":10061,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10066,"byte_end":10077,"line_start":384,"line_end":384,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10082,"byte_end":10127,"line_start":385,"line_end":385,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10132,"byte_end":10135,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10140,"byte_end":10165,"line_start":387,"line_end":387,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u16(&mut buf, 1_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10170,"byte_end":10215,"line_start":388,"line_end":388,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(1_000, LittleEndian::read_u16(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10220,"byte_end":10272,"line_start":389,"line_end":389,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10277,"byte_end":10284,"line_start":390,"line_end":390,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10818,"byte_end":10827,"line_start":410,"line_end":410,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::ByteOrder::write_u24","value":"pub fn write_u24(&mut [u8], u32)","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.","sig":null,"attributes":[{"value":"/ Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10332,"byte_end":10398,"line_start":393,"line_end":393,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10403,"byte_end":10406,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10411,"byte_end":10423,"line_start":395,"line_end":395,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10428,"byte_end":10431,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10436,"byte_end":10468,"line_start":397,"line_end":397,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10473,"byte_end":10476,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10481,"byte_end":10495,"line_start":399,"line_end":399,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10500,"byte_end":10503,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `u32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10508,"byte_end":10571,"line_start":401,"line_end":401,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10576,"byte_end":10579,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10584,"byte_end":10595,"line_start":403,"line_end":403,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10600,"byte_end":10645,"line_start":404,"line_end":404,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10650,"byte_end":10653,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10658,"byte_end":10683,"line_start":406,"line_end":406,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u24(&mut buf, 1_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10688,"byte_end":10737,"line_start":407,"line_end":407,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u24(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10742,"byte_end":10798,"line_start":408,"line_end":408,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10803,"byte_end":10810,"line_start":409,"line_end":409,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11372,"byte_end":11381,"line_start":431,"line_end":431,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::ByteOrder::write_u32","value":"pub fn write_u32(&mut [u8], u32)","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer `n` to `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10908,"byte_end":10959,"line_start":414,"line_end":414,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10964,"byte_end":10967,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10972,"byte_end":10984,"line_start":416,"line_end":416,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10989,"byte_end":10992,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":10997,"byte_end":11029,"line_start":418,"line_end":418,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11034,"byte_end":11037,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11042,"byte_end":11056,"line_start":420,"line_end":420,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11061,"byte_end":11064,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11069,"byte_end":11125,"line_start":422,"line_end":422,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11130,"byte_end":11133,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11138,"byte_end":11149,"line_start":424,"line_end":424,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11154,"byte_end":11199,"line_start":425,"line_end":425,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11204,"byte_end":11207,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11212,"byte_end":11237,"line_start":427,"line_end":427,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11242,"byte_end":11291,"line_start":428,"line_end":428,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11296,"byte_end":11352,"line_start":429,"line_end":429,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11357,"byte_end":11364,"line_start":430,"line_end":430,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11914,"byte_end":11923,"line_start":450,"line_end":450,"column_start":8,"column_end":17},"name":"write_u48","qualname":"::ByteOrder::write_u48","value":"pub fn write_u48(&mut [u8], u64)","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.","sig":null,"attributes":[{"value":"/ Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11412,"byte_end":11478,"line_start":433,"line_end":433,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11483,"byte_end":11486,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11491,"byte_end":11503,"line_start":435,"line_end":435,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11508,"byte_end":11511,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 6`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11516,"byte_end":11548,"line_start":437,"line_end":437,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11553,"byte_end":11556,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11561,"byte_end":11575,"line_start":439,"line_end":439,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11580,"byte_end":11583,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ Write and read 48 bit `u64` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11588,"byte_end":11651,"line_start":441,"line_end":441,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11656,"byte_end":11659,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11664,"byte_end":11675,"line_start":443,"line_end":443,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11680,"byte_end":11725,"line_start":444,"line_end":444,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11730,"byte_end":11733,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 6];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11738,"byte_end":11763,"line_start":446,"line_end":446,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u48(&mut buf, 1_000_000_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11768,"byte_end":11825,"line_start":447,"line_end":447,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11830,"byte_end":11894,"line_start":448,"line_end":448,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":11899,"byte_end":11906,"line_start":449,"line_end":449,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12468,"byte_end":12477,"line_start":471,"line_end":471,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::ByteOrder::write_u64","value":"pub fn write_u64(&mut [u8], u64)","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer `n` to `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12004,"byte_end":12055,"line_start":454,"line_end":454,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12060,"byte_end":12063,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12068,"byte_end":12080,"line_start":456,"line_end":456,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12085,"byte_end":12088,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12093,"byte_end":12125,"line_start":458,"line_end":458,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12130,"byte_end":12133,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12138,"byte_end":12152,"line_start":460,"line_end":460,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12157,"byte_end":12160,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12165,"byte_end":12221,"line_start":462,"line_end":462,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12226,"byte_end":12229,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12234,"byte_end":12245,"line_start":464,"line_end":464,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12250,"byte_end":12295,"line_start":465,"line_end":465,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12300,"byte_end":12303,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12308,"byte_end":12333,"line_start":467,"line_end":467,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u64(&mut buf, 1_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12338,"byte_end":12387,"line_start":468,"line_end":468,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u64(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12392,"byte_end":12448,"line_start":469,"line_end":469,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12453,"byte_end":12460,"line_start":470,"line_end":470,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13005,"byte_end":13015,"line_start":491,"line_end":491,"column_start":8,"column_end":18},"name":"write_u128","qualname":"::ByteOrder::write_u128","value":"pub fn write_u128(&mut [u8], u128)","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes an unsigned 128 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 128 bit integer `n` to `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12508,"byte_end":12560,"line_start":473,"line_end":473,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12565,"byte_end":12568,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12573,"byte_end":12585,"line_start":475,"line_end":475,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12590,"byte_end":12593,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 16`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12598,"byte_end":12631,"line_start":477,"line_end":477,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12636,"byte_end":12639,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12644,"byte_end":12658,"line_start":479,"line_end":479,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12663,"byte_end":12666,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ Write and read `u128` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12671,"byte_end":12728,"line_start":481,"line_end":481,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12733,"byte_end":12736,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12741,"byte_end":12752,"line_start":483,"line_end":483,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12757,"byte_end":12802,"line_start":484,"line_end":484,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12807,"byte_end":12810,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 16];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12815,"byte_end":12841,"line_start":486,"line_end":486,"column_start":5,"column_end":31}},{"value":"/ LittleEndian::write_u128(&mut buf, 1_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12846,"byte_end":12896,"line_start":487,"line_end":487,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u128(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12901,"byte_end":12958,"line_start":488,"line_end":488,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12963,"byte_end":12970,"line_start":489,"line_end":489,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":12975,"byte_end":12997,"line_start":490,"line_end":490,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13605,"byte_end":13615,"line_start":511,"line_end":511,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::ByteOrder::write_uint","value":"pub fn write_uint(&mut [u8], u64, usize)","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes an unsigned integer `n` to `buf` using only `nbytes`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13047,"byte_end":13111,"line_start":493,"line_end":493,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13116,"byte_end":13119,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13124,"byte_end":13136,"line_start":495,"line_end":495,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13141,"byte_end":13144,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13149,"byte_end":13223,"line_start":497,"line_end":497,"column_start":5,"column_end":79}},{"value":"/ this method panics.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13228,"byte_end":13251,"line_start":498,"line_end":498,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13256,"byte_end":13259,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13264,"byte_end":13278,"line_start":500,"line_end":500,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13283,"byte_end":13286,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13291,"byte_end":13350,"line_start":502,"line_end":502,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13355,"byte_end":13358,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13363,"byte_end":13374,"line_start":504,"line_end":504,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13379,"byte_end":13424,"line_start":505,"line_end":505,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13429,"byte_end":13432,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13437,"byte_end":13462,"line_start":507,"line_end":507,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_uint(&mut buf, 1_000_000, 3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13467,"byte_end":13520,"line_start":508,"line_end":508,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13525,"byte_end":13585,"line_start":509,"line_end":509,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13590,"byte_end":13597,"line_start":510,"line_end":510,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14253,"byte_end":14266,"line_start":532,"line_end":532,"column_start":8,"column_end":21},"name":"write_uint128","qualname":"::ByteOrder::write_uint128","value":"pub fn write_uint128(&mut [u8], u128, usize)","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes an unsigned integer `n` to `buf` using only `nbytes`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13661,"byte_end":13725,"line_start":513,"line_end":513,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13730,"byte_end":13733,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13738,"byte_end":13750,"line_start":515,"line_end":515,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13755,"byte_end":13758,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13763,"byte_end":13838,"line_start":517,"line_end":517,"column_start":5,"column_end":80}},{"value":"/ this method panics.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13843,"byte_end":13866,"line_start":518,"line_end":518,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13871,"byte_end":13874,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13879,"byte_end":13893,"line_start":520,"line_end":520,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13898,"byte_end":13901,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13906,"byte_end":13965,"line_start":522,"line_end":522,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13970,"byte_end":13973,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13978,"byte_end":13989,"line_start":524,"line_end":524,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":13994,"byte_end":14039,"line_start":525,"line_end":525,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14044,"byte_end":14047,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14052,"byte_end":14077,"line_start":527,"line_end":527,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_uint128(&mut buf, 1_000_000, 3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14082,"byte_end":14138,"line_start":528,"line_end":528,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14143,"byte_end":14206,"line_start":529,"line_end":529,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14211,"byte_end":14218,"line_start":530,"line_end":530,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14223,"byte_end":14245,"line_start":531,"line_end":531,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14779,"byte_end":14787,"line_start":552,"line_end":552,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::ByteOrder::read_i16","value":"pub fn read_i16(&[u8]) -> i16","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 16 bit integer from `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14313,"byte_end":14358,"line_start":534,"line_end":534,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14363,"byte_end":14366,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14371,"byte_end":14383,"line_start":536,"line_end":536,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14388,"byte_end":14391,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14396,"byte_end":14428,"line_start":538,"line_end":538,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14433,"byte_end":14436,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14441,"byte_end":14455,"line_start":540,"line_end":540,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14460,"byte_end":14463,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14468,"byte_end":14524,"line_start":542,"line_end":542,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14529,"byte_end":14532,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14537,"byte_end":14548,"line_start":544,"line_end":544,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14553,"byte_end":14598,"line_start":545,"line_end":545,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14603,"byte_end":14606,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14611,"byte_end":14636,"line_start":547,"line_end":547,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i16(&mut buf, -1_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14641,"byte_end":14687,"line_start":548,"line_end":548,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_i16(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14692,"byte_end":14745,"line_start":549,"line_end":549,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14750,"byte_end":14757,"line_start":550,"line_end":550,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14762,"byte_end":14771,"line_start":551,"line_end":551,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15351,"byte_end":15359,"line_start":574,"line_end":574,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::ByteOrder::read_i24","value":"pub fn read_i24(&[u8]) -> i32","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from `buf`, stored in i32.","sig":null,"attributes":[{"value":"/ Reads a signed 24 bit integer from `buf`, stored in i32.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14855,"byte_end":14915,"line_start":556,"line_end":556,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14920,"byte_end":14923,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14928,"byte_end":14940,"line_start":558,"line_end":558,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14945,"byte_end":14948,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14953,"byte_end":14985,"line_start":560,"line_end":560,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14990,"byte_end":14993,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":14998,"byte_end":15012,"line_start":562,"line_end":562,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15017,"byte_end":15020,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `i32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15025,"byte_end":15088,"line_start":564,"line_end":564,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15093,"byte_end":15096,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15101,"byte_end":15112,"line_start":566,"line_end":566,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15117,"byte_end":15162,"line_start":567,"line_end":567,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15167,"byte_end":15170,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15175,"byte_end":15200,"line_start":569,"line_end":569,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i24(&mut buf, -1_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15205,"byte_end":15255,"line_start":570,"line_end":570,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i24(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15260,"byte_end":15317,"line_start":571,"line_end":571,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15322,"byte_end":15329,"line_start":572,"line_end":572,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15334,"byte_end":15343,"line_start":573,"line_end":573,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15904,"byte_end":15912,"line_start":596,"line_end":596,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::ByteOrder::read_i32","value":"pub fn read_i32(&[u8]) -> i32","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 32 bit integer from `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15430,"byte_end":15475,"line_start":578,"line_end":578,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15480,"byte_end":15483,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15488,"byte_end":15500,"line_start":580,"line_end":580,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15505,"byte_end":15508,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15513,"byte_end":15545,"line_start":582,"line_end":582,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15550,"byte_end":15553,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15558,"byte_end":15572,"line_start":584,"line_end":584,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15577,"byte_end":15580,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15585,"byte_end":15641,"line_start":586,"line_end":586,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15646,"byte_end":15649,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15654,"byte_end":15665,"line_start":588,"line_end":588,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15670,"byte_end":15715,"line_start":589,"line_end":589,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15720,"byte_end":15723,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15728,"byte_end":15753,"line_start":591,"line_end":591,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i32(&mut buf, -1_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15758,"byte_end":15808,"line_start":592,"line_end":592,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i32(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15813,"byte_end":15870,"line_start":593,"line_end":593,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15875,"byte_end":15882,"line_start":594,"line_end":594,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15887,"byte_end":15896,"line_start":595,"line_end":595,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16492,"byte_end":16500,"line_start":618,"line_end":618,"column_start":8,"column_end":16},"name":"read_i48","qualname":"::ByteOrder::read_i48","value":"pub fn read_i48(&[u8]) -> i64","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads a signed 48 bit integer from `buf`, stored in i64.","sig":null,"attributes":[{"value":"/ Reads a signed 48 bit integer from `buf`, stored in i64.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":15980,"byte_end":16040,"line_start":600,"line_end":600,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16045,"byte_end":16048,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16053,"byte_end":16065,"line_start":602,"line_end":602,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16070,"byte_end":16073,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 6`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16078,"byte_end":16110,"line_start":604,"line_end":604,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16115,"byte_end":16118,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16123,"byte_end":16137,"line_start":606,"line_end":606,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16142,"byte_end":16145,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ Write and read 48 bit `i64` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16150,"byte_end":16213,"line_start":608,"line_end":608,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16218,"byte_end":16221,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16226,"byte_end":16237,"line_start":610,"line_end":610,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16242,"byte_end":16287,"line_start":611,"line_end":611,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16292,"byte_end":16295,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 6];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16300,"byte_end":16325,"line_start":613,"line_end":613,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i48(&mut buf, -1_000_000_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16330,"byte_end":16388,"line_start":614,"line_end":614,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16393,"byte_end":16458,"line_start":615,"line_end":615,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16463,"byte_end":16470,"line_start":616,"line_end":616,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16475,"byte_end":16484,"line_start":617,"line_end":617,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17053,"byte_end":17061,"line_start":640,"line_end":640,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::ByteOrder::read_i64","value":"pub fn read_i64(&[u8]) -> i64","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 64 bit integer from `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16571,"byte_end":16616,"line_start":622,"line_end":622,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16621,"byte_end":16624,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16629,"byte_end":16641,"line_start":624,"line_end":624,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16646,"byte_end":16649,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16654,"byte_end":16686,"line_start":626,"line_end":626,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16691,"byte_end":16694,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16699,"byte_end":16713,"line_start":628,"line_end":628,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16718,"byte_end":16721,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16726,"byte_end":16782,"line_start":630,"line_end":630,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16787,"byte_end":16790,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16795,"byte_end":16806,"line_start":632,"line_end":632,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16811,"byte_end":16856,"line_start":633,"line_end":633,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16861,"byte_end":16864,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16869,"byte_end":16894,"line_start":635,"line_end":635,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i64(&mut buf, -1_000_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16899,"byte_end":16953,"line_start":636,"line_end":636,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":16958,"byte_end":17019,"line_start":637,"line_end":637,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17024,"byte_end":17031,"line_start":638,"line_end":638,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17036,"byte_end":17045,"line_start":639,"line_end":639,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17644,"byte_end":17653,"line_start":663,"line_end":663,"column_start":8,"column_end":17},"name":"read_i128","qualname":"::ByteOrder::read_i128","value":"pub fn read_i128(&[u8]) -> i128","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads a signed 128 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 128 bit integer from `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17129,"byte_end":17175,"line_start":644,"line_end":644,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17180,"byte_end":17183,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17188,"byte_end":17200,"line_start":646,"line_end":646,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17205,"byte_end":17208,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 16`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17213,"byte_end":17246,"line_start":648,"line_end":648,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17251,"byte_end":17254,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17259,"byte_end":17273,"line_start":650,"line_end":650,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17278,"byte_end":17281,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ Write and read `i128` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17286,"byte_end":17343,"line_start":652,"line_end":652,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17348,"byte_end":17351,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17356,"byte_end":17367,"line_start":654,"line_end":654,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17372,"byte_end":17417,"line_start":655,"line_end":655,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17422,"byte_end":17425,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 16];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17430,"byte_end":17456,"line_start":657,"line_end":657,"column_start":5,"column_end":31}},{"value":"/ LittleEndian::write_i128(&mut buf, -1_000_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17461,"byte_end":17516,"line_start":658,"line_end":658,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17521,"byte_end":17583,"line_start":659,"line_end":659,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17588,"byte_end":17595,"line_start":660,"line_end":660,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17600,"byte_end":17622,"line_start":661,"line_end":661,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17627,"byte_end":17636,"line_start":662,"line_end":662,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18251,"byte_end":18259,"line_start":686,"line_end":686,"column_start":8,"column_end":16},"name":"read_int","qualname":"::ByteOrder::read_int","value":"pub fn read_int(&[u8], usize) -> i64","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17724,"byte_end":17770,"line_start":667,"line_end":667,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17775,"byte_end":17778,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17783,"byte_end":17795,"line_start":669,"line_end":669,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17800,"byte_end":17803,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 8` or","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17808,"byte_end":17855,"line_start":671,"line_end":671,"column_start":5,"column_end":52}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17860,"byte_end":17884,"line_start":672,"line_end":672,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17889,"byte_end":17892,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17897,"byte_end":17911,"line_start":674,"line_end":674,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17916,"byte_end":17919,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ Write and read n-length signed numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17924,"byte_end":17990,"line_start":676,"line_end":676,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":17995,"byte_end":17998,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18003,"byte_end":18014,"line_start":678,"line_end":678,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18019,"byte_end":18064,"line_start":679,"line_end":679,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18069,"byte_end":18072,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18077,"byte_end":18102,"line_start":681,"line_end":681,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_int(&mut buf, -1_000, 3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18107,"byte_end":18156,"line_start":682,"line_end":682,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_int(&buf, 3));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18161,"byte_end":18217,"line_start":683,"line_end":683,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18222,"byte_end":18229,"line_start":684,"line_end":684,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18234,"byte_end":18243,"line_start":685,"line_end":685,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18926,"byte_end":18937,"line_start":710,"line_end":710,"column_start":8,"column_end":19},"name":"read_int128","qualname":"::ByteOrder::read_int128","value":"pub fn read_int128(&[u8], usize) -> i128","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18365,"byte_end":18411,"line_start":690,"line_end":690,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18416,"byte_end":18419,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18424,"byte_end":18436,"line_start":692,"line_end":692,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18441,"byte_end":18444,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 16` or","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18449,"byte_end":18497,"line_start":694,"line_end":694,"column_start":5,"column_end":53}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18502,"byte_end":18526,"line_start":695,"line_end":695,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18531,"byte_end":18534,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18539,"byte_end":18553,"line_start":697,"line_end":697,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18558,"byte_end":18561,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ Write and read n-length signed numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18566,"byte_end":18632,"line_start":699,"line_end":699,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18637,"byte_end":18640,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18645,"byte_end":18656,"line_start":701,"line_end":701,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18661,"byte_end":18706,"line_start":702,"line_end":702,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18711,"byte_end":18714,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18719,"byte_end":18744,"line_start":704,"line_end":704,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_int128(&mut buf, -1_000, 3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18749,"byte_end":18801,"line_start":705,"line_end":705,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18806,"byte_end":18865,"line_start":706,"line_end":706,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18870,"byte_end":18877,"line_start":707,"line_end":707,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18882,"byte_end":18904,"line_start":708,"line_end":708,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":18909,"byte_end":18918,"line_start":709,"line_end":709,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19555,"byte_end":19563,"line_start":733,"line_end":733,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::ByteOrder::read_f32","value":"pub fn read_f32(&[u8]) -> f32","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 single-precision (4 bytes) floating point number.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19050,"byte_end":19119,"line_start":714,"line_end":714,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19124,"byte_end":19127,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19132,"byte_end":19144,"line_start":716,"line_end":716,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19149,"byte_end":19152,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19157,"byte_end":19189,"line_start":718,"line_end":718,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19194,"byte_end":19197,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19202,"byte_end":19216,"line_start":720,"line_end":720,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19221,"byte_end":19224,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19229,"byte_end":19285,"line_start":722,"line_end":722,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19290,"byte_end":19293,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19298,"byte_end":19309,"line_start":724,"line_end":724,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19314,"byte_end":19359,"line_start":725,"line_end":725,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19364,"byte_end":19367,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ let e = 2.71828;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19372,"byte_end":19392,"line_start":727,"line_end":727,"column_start":5,"column_end":25}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19397,"byte_end":19422,"line_start":728,"line_end":728,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f32(&mut buf, e);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19427,"byte_end":19468,"line_start":729,"line_end":729,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(e, LittleEndian::read_f32(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19473,"byte_end":19521,"line_start":730,"line_end":730,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19526,"byte_end":19533,"line_start":731,"line_end":731,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19538,"byte_end":19547,"line_start":732,"line_end":732,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20183,"byte_end":20191,"line_start":756,"line_end":756,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::ByteOrder::read_f64","value":"pub fn read_f64(&[u8]) -> f64","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 double-precision (8 bytes) floating point number.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19667,"byte_end":19736,"line_start":737,"line_end":737,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19741,"byte_end":19744,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19749,"byte_end":19761,"line_start":739,"line_end":739,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19766,"byte_end":19769,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19774,"byte_end":19806,"line_start":741,"line_end":741,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19811,"byte_end":19814,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19819,"byte_end":19833,"line_start":743,"line_end":743,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19838,"byte_end":19841,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19846,"byte_end":19902,"line_start":745,"line_end":745,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19907,"byte_end":19910,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19915,"byte_end":19926,"line_start":747,"line_end":747,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19931,"byte_end":19976,"line_start":748,"line_end":748,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19981,"byte_end":19984,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ let phi = 1.6180339887;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":19989,"byte_end":20016,"line_start":750,"line_end":750,"column_start":5,"column_end":32}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20021,"byte_end":20046,"line_start":751,"line_end":751,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f64(&mut buf, phi);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20051,"byte_end":20094,"line_start":752,"line_end":752,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(phi, LittleEndian::read_f64(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20099,"byte_end":20149,"line_start":753,"line_end":753,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20154,"byte_end":20161,"line_start":754,"line_end":754,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20166,"byte_end":20175,"line_start":755,"line_end":755,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20764,"byte_end":20773,"line_start":778,"line_end":778,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::ByteOrder::write_i16","value":"pub fn write_i16(&mut [u8], i16)","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 16 bit integer `n` to `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20295,"byte_end":20343,"line_start":760,"line_end":760,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20348,"byte_end":20351,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20356,"byte_end":20368,"line_start":762,"line_end":762,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20373,"byte_end":20376,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20381,"byte_end":20413,"line_start":764,"line_end":764,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20418,"byte_end":20421,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20426,"byte_end":20440,"line_start":766,"line_end":766,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20445,"byte_end":20448,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20453,"byte_end":20509,"line_start":768,"line_end":768,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20514,"byte_end":20517,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20522,"byte_end":20533,"line_start":770,"line_end":770,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20538,"byte_end":20583,"line_start":771,"line_end":771,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20588,"byte_end":20591,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20596,"byte_end":20621,"line_start":773,"line_end":773,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i16(&mut buf, -1_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20626,"byte_end":20672,"line_start":774,"line_end":774,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_i16(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20677,"byte_end":20730,"line_start":775,"line_end":775,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20735,"byte_end":20742,"line_start":776,"line_end":776,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20747,"byte_end":20756,"line_start":777,"line_end":777,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21349,"byte_end":21358,"line_start":800,"line_end":800,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::ByteOrder::write_i24","value":"pub fn write_i24(&mut [u8], i32)","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes a signed 24 bit integer `n` to `buf`, stored in i32.","sig":null,"attributes":[{"value":"/ Writes a signed 24 bit integer `n` to `buf`, stored in i32.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20850,"byte_end":20913,"line_start":782,"line_end":782,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20918,"byte_end":20921,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20926,"byte_end":20938,"line_start":784,"line_end":784,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20943,"byte_end":20946,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20951,"byte_end":20983,"line_start":786,"line_end":786,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20988,"byte_end":20991,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":20996,"byte_end":21010,"line_start":788,"line_end":788,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21015,"byte_end":21018,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `i32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21023,"byte_end":21086,"line_start":790,"line_end":790,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21091,"byte_end":21094,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21099,"byte_end":21110,"line_start":792,"line_end":792,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21115,"byte_end":21160,"line_start":793,"line_end":793,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21165,"byte_end":21168,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21173,"byte_end":21198,"line_start":795,"line_end":795,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i24(&mut buf, -1_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21203,"byte_end":21253,"line_start":796,"line_end":796,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i24(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21258,"byte_end":21315,"line_start":797,"line_end":797,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21320,"byte_end":21327,"line_start":798,"line_end":798,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21332,"byte_end":21341,"line_start":799,"line_end":799,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21915,"byte_end":21924,"line_start":822,"line_end":822,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::ByteOrder::write_i32","value":"pub fn write_i32(&mut [u8], i32)","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 32 bit integer `n` to `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21438,"byte_end":21486,"line_start":804,"line_end":804,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21491,"byte_end":21494,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21499,"byte_end":21511,"line_start":806,"line_end":806,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21516,"byte_end":21519,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21524,"byte_end":21556,"line_start":808,"line_end":808,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21561,"byte_end":21564,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21569,"byte_end":21583,"line_start":810,"line_end":810,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21588,"byte_end":21591,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21596,"byte_end":21652,"line_start":812,"line_end":812,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21657,"byte_end":21660,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21665,"byte_end":21676,"line_start":814,"line_end":814,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21681,"byte_end":21726,"line_start":815,"line_end":815,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21731,"byte_end":21734,"line_start":816,"line_end":816,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21739,"byte_end":21764,"line_start":817,"line_end":817,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i32(&mut buf, -1_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21769,"byte_end":21819,"line_start":818,"line_end":818,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i32(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21824,"byte_end":21881,"line_start":819,"line_end":819,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21886,"byte_end":21893,"line_start":820,"line_end":820,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":21898,"byte_end":21907,"line_start":821,"line_end":821,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22516,"byte_end":22525,"line_start":844,"line_end":844,"column_start":8,"column_end":17},"name":"write_i48","qualname":"::ByteOrder::write_i48","value":"pub fn write_i48(&mut [u8], i64)","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes a signed 48 bit integer `n` to `buf`, stored in i64.","sig":null,"attributes":[{"value":"/ Writes a signed 48 bit integer `n` to `buf`, stored in i64.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22001,"byte_end":22064,"line_start":826,"line_end":826,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22069,"byte_end":22072,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22077,"byte_end":22089,"line_start":828,"line_end":828,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22094,"byte_end":22097,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 6`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22102,"byte_end":22134,"line_start":830,"line_end":830,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22139,"byte_end":22142,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22147,"byte_end":22161,"line_start":832,"line_end":832,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22166,"byte_end":22169,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ Write and read 48 bit `i64` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22174,"byte_end":22237,"line_start":834,"line_end":834,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22242,"byte_end":22245,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22250,"byte_end":22261,"line_start":836,"line_end":836,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22266,"byte_end":22311,"line_start":837,"line_end":837,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22316,"byte_end":22319,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 6];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22324,"byte_end":22349,"line_start":839,"line_end":839,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i48(&mut buf, -1_000_000_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22354,"byte_end":22412,"line_start":840,"line_end":840,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22417,"byte_end":22482,"line_start":841,"line_end":841,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22487,"byte_end":22494,"line_start":842,"line_end":842,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22499,"byte_end":22508,"line_start":843,"line_end":843,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23090,"byte_end":23099,"line_start":866,"line_end":866,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::ByteOrder::write_i64","value":"pub fn write_i64(&mut [u8], i64)","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 64 bit integer `n` to `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22605,"byte_end":22653,"line_start":848,"line_end":848,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22658,"byte_end":22661,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22666,"byte_end":22678,"line_start":850,"line_end":850,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22683,"byte_end":22686,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22691,"byte_end":22723,"line_start":852,"line_end":852,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22728,"byte_end":22731,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22736,"byte_end":22750,"line_start":854,"line_end":854,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22755,"byte_end":22758,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22763,"byte_end":22819,"line_start":856,"line_end":856,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22824,"byte_end":22827,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22832,"byte_end":22843,"line_start":858,"line_end":858,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22848,"byte_end":22893,"line_start":859,"line_end":859,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22898,"byte_end":22901,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22906,"byte_end":22931,"line_start":861,"line_end":861,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i64(&mut buf, -1_000_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22936,"byte_end":22990,"line_start":862,"line_end":862,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":22995,"byte_end":23056,"line_start":863,"line_end":863,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23061,"byte_end":23068,"line_start":864,"line_end":864,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23073,"byte_end":23082,"line_start":865,"line_end":865,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23701,"byte_end":23711,"line_start":889,"line_end":889,"column_start":8,"column_end":18},"name":"write_i128","qualname":"::ByteOrder::write_i128","value":"pub fn write_i128(&mut [u8], i128)","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes a signed 128 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 128 bit integer `n` to `buf`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23176,"byte_end":23225,"line_start":870,"line_end":870,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23230,"byte_end":23233,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23238,"byte_end":23250,"line_start":872,"line_end":872,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23255,"byte_end":23258,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 16`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23263,"byte_end":23296,"line_start":874,"line_end":874,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23301,"byte_end":23304,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23309,"byte_end":23323,"line_start":876,"line_end":876,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23328,"byte_end":23331,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ Write and read n-byte `i128` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23336,"byte_end":23400,"line_start":878,"line_end":878,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23405,"byte_end":23408,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23413,"byte_end":23424,"line_start":880,"line_end":880,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23429,"byte_end":23474,"line_start":881,"line_end":881,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23479,"byte_end":23482,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 16];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23487,"byte_end":23513,"line_start":883,"line_end":883,"column_start":5,"column_end":31}},{"value":"/ LittleEndian::write_i128(&mut buf, -1_000_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23518,"byte_end":23573,"line_start":884,"line_end":884,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23578,"byte_end":23640,"line_start":885,"line_end":885,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23645,"byte_end":23652,"line_start":886,"line_end":886,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23657,"byte_end":23679,"line_start":887,"line_end":887,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23684,"byte_end":23693,"line_start":888,"line_end":888,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24352,"byte_end":24361,"line_start":912,"line_end":912,"column_start":8,"column_end":17},"name":"write_int","qualname":"::ByteOrder::write_int","value":"pub fn write_int(&mut [u8], i64, usize)","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes a signed integer `n` to `buf` using only `nbytes`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23791,"byte_end":23852,"line_start":893,"line_end":893,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23857,"byte_end":23860,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23865,"byte_end":23877,"line_start":895,"line_end":895,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23882,"byte_end":23885,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23890,"byte_end":23964,"line_start":897,"line_end":897,"column_start":5,"column_end":79}},{"value":"/ this method panics.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23969,"byte_end":23992,"line_start":898,"line_end":898,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":23997,"byte_end":24000,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24005,"byte_end":24019,"line_start":900,"line_end":900,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24024,"byte_end":24027,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24032,"byte_end":24091,"line_start":902,"line_end":902,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24096,"byte_end":24099,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24104,"byte_end":24115,"line_start":904,"line_end":904,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24120,"byte_end":24165,"line_start":905,"line_end":905,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24170,"byte_end":24173,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24178,"byte_end":24203,"line_start":907,"line_end":907,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_int(&mut buf, -1_000, 3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24208,"byte_end":24257,"line_start":908,"line_end":908,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_int(&buf, 3));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24262,"byte_end":24318,"line_start":909,"line_end":909,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24323,"byte_end":24330,"line_start":910,"line_end":910,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24335,"byte_end":24344,"line_start":911,"line_end":911,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25080,"byte_end":25092,"line_start":936,"line_end":936,"column_start":8,"column_end":20},"name":"write_int128","qualname":"::ByteOrder::write_int128","value":"pub fn write_int128(&mut [u8], i128, usize)","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes a signed integer `n` to `buf` using only `nbytes`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24478,"byte_end":24539,"line_start":916,"line_end":916,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24544,"byte_end":24547,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24552,"byte_end":24564,"line_start":918,"line_end":918,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24569,"byte_end":24572,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24577,"byte_end":24652,"line_start":920,"line_end":920,"column_start":5,"column_end":80}},{"value":"/ this method panics.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24657,"byte_end":24680,"line_start":921,"line_end":921,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24685,"byte_end":24688,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24693,"byte_end":24707,"line_start":923,"line_end":923,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24712,"byte_end":24715,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ Write and read n-length signed numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24720,"byte_end":24786,"line_start":925,"line_end":925,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24791,"byte_end":24794,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24799,"byte_end":24810,"line_start":927,"line_end":927,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24815,"byte_end":24860,"line_start":928,"line_end":928,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24865,"byte_end":24868,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24873,"byte_end":24898,"line_start":930,"line_end":930,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_int128(&mut buf, -1_000, 3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24903,"byte_end":24955,"line_start":931,"line_end":931,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":24960,"byte_end":25019,"line_start":932,"line_end":932,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25024,"byte_end":25031,"line_start":933,"line_end":933,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25036,"byte_end":25058,"line_start":934,"line_end":934,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25063,"byte_end":25072,"line_start":935,"line_end":935,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25722,"byte_end":25731,"line_start":959,"line_end":959,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::ByteOrder::write_f32","value":"pub fn write_f32(&mut [u8], f32)","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 single-precision (4 bytes) floating point number.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25216,"byte_end":25286,"line_start":940,"line_end":940,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25291,"byte_end":25294,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25299,"byte_end":25311,"line_start":942,"line_end":942,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25316,"byte_end":25319,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25324,"byte_end":25356,"line_start":944,"line_end":944,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25361,"byte_end":25364,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25369,"byte_end":25383,"line_start":946,"line_end":946,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25388,"byte_end":25391,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25396,"byte_end":25452,"line_start":948,"line_end":948,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25457,"byte_end":25460,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25465,"byte_end":25476,"line_start":950,"line_end":950,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25481,"byte_end":25526,"line_start":951,"line_end":951,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25531,"byte_end":25534,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ let e = 2.71828;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25539,"byte_end":25559,"line_start":953,"line_end":953,"column_start":5,"column_end":25}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25564,"byte_end":25589,"line_start":954,"line_end":954,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f32(&mut buf, e);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25594,"byte_end":25635,"line_start":955,"line_end":955,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(e, LittleEndian::read_f32(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25640,"byte_end":25688,"line_start":956,"line_end":956,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25693,"byte_end":25700,"line_start":957,"line_end":957,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25705,"byte_end":25714,"line_start":958,"line_end":958,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26380,"byte_end":26389,"line_start":983,"line_end":983,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::ByteOrder::write_f64","value":"pub fn write_f64(&mut [u8], f64)","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 double-precision (8 bytes) floating point number.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25863,"byte_end":25933,"line_start":964,"line_end":964,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25938,"byte_end":25941,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25946,"byte_end":25958,"line_start":966,"line_end":966,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25963,"byte_end":25966,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":25971,"byte_end":26003,"line_start":968,"line_end":968,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26008,"byte_end":26011,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26016,"byte_end":26030,"line_start":970,"line_end":970,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26035,"byte_end":26038,"line_start":971,"line_end":971,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26043,"byte_end":26099,"line_start":972,"line_end":972,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26104,"byte_end":26107,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26112,"byte_end":26123,"line_start":974,"line_end":974,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26128,"byte_end":26173,"line_start":975,"line_end":975,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26178,"byte_end":26181,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ let phi = 1.6180339887;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26186,"byte_end":26213,"line_start":977,"line_end":977,"column_start":5,"column_end":32}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26218,"byte_end":26243,"line_start":978,"line_end":978,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f64(&mut buf, phi);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26248,"byte_end":26291,"line_start":979,"line_end":979,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(phi, LittleEndian::read_f64(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26296,"byte_end":26346,"line_start":980,"line_end":980,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26351,"byte_end":26358,"line_start":981,"line_end":981,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26363,"byte_end":26372,"line_start":982,"line_end":982,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27164,"byte_end":27177,"line_start":1009,"line_end":1009,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::ByteOrder::read_u16_into","value":"pub fn read_u16_into(&[u8], &mut [u16])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads unsigned 16 bit integers from `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26521,"byte_end":26578,"line_start":988,"line_end":988,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26583,"byte_end":26586,"line_start":989,"line_end":989,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26591,"byte_end":26603,"line_start":990,"line_end":990,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26608,"byte_end":26611,"line_start":991,"line_end":991,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 2*dst.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26616,"byte_end":26659,"line_start":992,"line_end":992,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26664,"byte_end":26667,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26672,"byte_end":26686,"line_start":994,"line_end":994,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26691,"byte_end":26694,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ Write and read `u16` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26699,"byte_end":26755,"line_start":996,"line_end":996,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26760,"byte_end":26763,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26768,"byte_end":26779,"line_start":998,"line_end":998,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26784,"byte_end":26829,"line_start":999,"line_end":999,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26834,"byte_end":26837,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26842,"byte_end":26869,"line_start":1001,"line_end":1001,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26874,"byte_end":26921,"line_start":1002,"line_end":1002,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u16_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26926,"byte_end":26987,"line_start":1003,"line_end":1003,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":26992,"byte_end":26995,"line_start":1004,"line_end":1004,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27000,"byte_end":27033,"line_start":1005,"line_end":1005,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u16_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27038,"byte_end":27096,"line_start":1006,"line_end":1006,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27101,"byte_end":27144,"line_start":1007,"line_end":1007,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27149,"byte_end":27156,"line_start":1008,"line_end":1008,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27857,"byte_end":27870,"line_start":1032,"line_end":1032,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::ByteOrder::read_u32_into","value":"pub fn read_u32_into(&[u8], &mut [u32])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads unsigned 32 bit integers from `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27213,"byte_end":27270,"line_start":1011,"line_end":1011,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27275,"byte_end":27278,"line_start":1012,"line_end":1012,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27283,"byte_end":27295,"line_start":1013,"line_end":1013,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27300,"byte_end":27303,"line_start":1014,"line_end":1014,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27308,"byte_end":27351,"line_start":1015,"line_end":1015,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27356,"byte_end":27359,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27364,"byte_end":27378,"line_start":1017,"line_end":1017,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27383,"byte_end":27386,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27391,"byte_end":27447,"line_start":1019,"line_end":1019,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27452,"byte_end":27455,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27460,"byte_end":27471,"line_start":1021,"line_end":1021,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27476,"byte_end":27521,"line_start":1022,"line_end":1022,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27526,"byte_end":27529,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27534,"byte_end":27562,"line_start":1024,"line_end":1024,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27567,"byte_end":27614,"line_start":1025,"line_end":1025,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u32_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27619,"byte_end":27680,"line_start":1026,"line_end":1026,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27685,"byte_end":27688,"line_start":1027,"line_end":1027,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27693,"byte_end":27726,"line_start":1028,"line_end":1028,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u32_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27731,"byte_end":27789,"line_start":1029,"line_end":1029,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27794,"byte_end":27837,"line_start":1030,"line_end":1030,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27842,"byte_end":27849,"line_start":1031,"line_end":1031,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28550,"byte_end":28563,"line_start":1055,"line_end":1055,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::ByteOrder::read_u64_into","value":"pub fn read_u64_into(&[u8], &mut [u64])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads unsigned 64 bit integers from `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27906,"byte_end":27963,"line_start":1034,"line_end":1034,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27968,"byte_end":27971,"line_start":1035,"line_end":1035,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27976,"byte_end":27988,"line_start":1036,"line_end":1036,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":27993,"byte_end":27996,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28001,"byte_end":28044,"line_start":1038,"line_end":1038,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28049,"byte_end":28052,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28057,"byte_end":28071,"line_start":1040,"line_end":1040,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28076,"byte_end":28079,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28084,"byte_end":28140,"line_start":1042,"line_end":1042,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28145,"byte_end":28148,"line_start":1043,"line_end":1043,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28153,"byte_end":28164,"line_start":1044,"line_end":1044,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28169,"byte_end":28214,"line_start":1045,"line_end":1045,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28219,"byte_end":28222,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28227,"byte_end":28255,"line_start":1047,"line_end":1047,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28260,"byte_end":28307,"line_start":1048,"line_end":1048,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u64_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28312,"byte_end":28373,"line_start":1049,"line_end":1049,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28378,"byte_end":28381,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28386,"byte_end":28419,"line_start":1051,"line_end":1051,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u64_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28424,"byte_end":28482,"line_start":1052,"line_end":1052,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28487,"byte_end":28530,"line_start":1053,"line_end":1053,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28535,"byte_end":28542,"line_start":1054,"line_end":1054,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29275,"byte_end":29289,"line_start":1079,"line_end":1079,"column_start":8,"column_end":22},"name":"read_u128_into","qualname":"::ByteOrder::read_u128_into","value":"pub fn read_u128_into(&[u8], &mut [u128])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads unsigned 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads unsigned 128 bit integers from `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28599,"byte_end":28657,"line_start":1057,"line_end":1057,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28662,"byte_end":28665,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28670,"byte_end":28682,"line_start":1059,"line_end":1059,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28687,"byte_end":28690,"line_start":1060,"line_end":1060,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 16*dst.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28695,"byte_end":28739,"line_start":1061,"line_end":1061,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28744,"byte_end":28747,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28752,"byte_end":28766,"line_start":1063,"line_end":1063,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28771,"byte_end":28774,"line_start":1064,"line_end":1064,"column_start":5,"column_end":8}},{"value":"/ Write and read `u128` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28779,"byte_end":28836,"line_start":1065,"line_end":1065,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28841,"byte_end":28844,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28849,"byte_end":28860,"line_start":1067,"line_end":1067,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28865,"byte_end":28910,"line_start":1068,"line_end":1068,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28915,"byte_end":28918,"line_start":1069,"line_end":1069,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 64];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28923,"byte_end":28951,"line_start":1070,"line_end":1070,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":28956,"byte_end":29003,"line_start":1071,"line_end":1071,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u128_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29008,"byte_end":29070,"line_start":1072,"line_end":1072,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29075,"byte_end":29078,"line_start":1073,"line_end":1073,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29083,"byte_end":29116,"line_start":1074,"line_end":1074,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u128_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29121,"byte_end":29180,"line_start":1075,"line_end":1075,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29185,"byte_end":29228,"line_start":1076,"line_end":1076,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29233,"byte_end":29240,"line_start":1077,"line_end":1077,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29245,"byte_end":29267,"line_start":1078,"line_end":1078,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29975,"byte_end":29988,"line_start":1103,"line_end":1103,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::ByteOrder::read_i16_into","value":"pub fn read_i16_into(&[u8], &mut [i16])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads signed 16 bit integers from `src` to `dst`.","sig":null,"attributes":[{"value":"/ Reads signed 16 bit integers from `src` to `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29326,"byte_end":29379,"line_start":1081,"line_end":1081,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29384,"byte_end":29387,"line_start":1082,"line_end":1082,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29392,"byte_end":29404,"line_start":1083,"line_end":1083,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29409,"byte_end":29412,"line_start":1084,"line_end":1084,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() != 2*dst.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29417,"byte_end":29460,"line_start":1085,"line_end":1085,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29465,"byte_end":29468,"line_start":1086,"line_end":1086,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29473,"byte_end":29487,"line_start":1087,"line_end":1087,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29492,"byte_end":29495,"line_start":1088,"line_end":1088,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29500,"byte_end":29556,"line_start":1089,"line_end":1089,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29561,"byte_end":29564,"line_start":1090,"line_end":1090,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29569,"byte_end":29580,"line_start":1091,"line_end":1091,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29585,"byte_end":29630,"line_start":1092,"line_end":1092,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29635,"byte_end":29638,"line_start":1093,"line_end":1093,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29643,"byte_end":29670,"line_start":1094,"line_end":1094,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0x0f, 0xee];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29675,"byte_end":29718,"line_start":1095,"line_end":1095,"column_start":5,"column_end":48}},{"value":"/ LittleEndian::write_i16_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29723,"byte_end":29784,"line_start":1096,"line_end":1096,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29789,"byte_end":29792,"line_start":1097,"line_end":1097,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29797,"byte_end":29830,"line_start":1098,"line_end":1098,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i16_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29835,"byte_end":29893,"line_start":1099,"line_end":1099,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29898,"byte_end":29941,"line_start":1100,"line_end":1100,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29946,"byte_end":29953,"line_start":1101,"line_end":1101,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":29958,"byte_end":29967,"line_start":1102,"line_end":1102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30842,"byte_end":30855,"line_start":1132,"line_end":1132,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::ByteOrder::read_i32_into","value":"pub fn read_i32_into(&[u8], &mut [i32])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads signed 32 bit integers from `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30186,"byte_end":30241,"line_start":1110,"line_end":1110,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30246,"byte_end":30249,"line_start":1111,"line_end":1111,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30254,"byte_end":30266,"line_start":1112,"line_end":1112,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30271,"byte_end":30274,"line_start":1113,"line_end":1113,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30279,"byte_end":30322,"line_start":1114,"line_end":1114,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30327,"byte_end":30330,"line_start":1115,"line_end":1115,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30335,"byte_end":30349,"line_start":1116,"line_end":1116,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30354,"byte_end":30357,"line_start":1117,"line_end":1117,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30362,"byte_end":30418,"line_start":1118,"line_end":1118,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30423,"byte_end":30426,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30431,"byte_end":30442,"line_start":1120,"line_end":1120,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30447,"byte_end":30492,"line_start":1121,"line_end":1121,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30497,"byte_end":30500,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30505,"byte_end":30533,"line_start":1123,"line_end":1123,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30538,"byte_end":30585,"line_start":1124,"line_end":1124,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i32_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30590,"byte_end":30651,"line_start":1125,"line_end":1125,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30656,"byte_end":30659,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30664,"byte_end":30697,"line_start":1127,"line_end":1127,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i32_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30702,"byte_end":30760,"line_start":1128,"line_end":1128,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30765,"byte_end":30808,"line_start":1129,"line_end":1129,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30813,"byte_end":30820,"line_start":1130,"line_end":1130,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":30825,"byte_end":30834,"line_start":1131,"line_end":1131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31710,"byte_end":31723,"line_start":1161,"line_end":1161,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::ByteOrder::read_i64_into","value":"pub fn read_i64_into(&[u8], &mut [i64])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads signed 64 bit integers from `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31054,"byte_end":31109,"line_start":1139,"line_end":1139,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31114,"byte_end":31117,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31122,"byte_end":31134,"line_start":1141,"line_end":1141,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31139,"byte_end":31142,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31147,"byte_end":31190,"line_start":1143,"line_end":1143,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31195,"byte_end":31198,"line_start":1144,"line_end":1144,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31203,"byte_end":31217,"line_start":1145,"line_end":1145,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31222,"byte_end":31225,"line_start":1146,"line_end":1146,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31230,"byte_end":31286,"line_start":1147,"line_end":1147,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31291,"byte_end":31294,"line_start":1148,"line_end":1148,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31299,"byte_end":31310,"line_start":1149,"line_end":1149,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31315,"byte_end":31360,"line_start":1150,"line_end":1150,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31365,"byte_end":31368,"line_start":1151,"line_end":1151,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31373,"byte_end":31401,"line_start":1152,"line_end":1152,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31406,"byte_end":31453,"line_start":1153,"line_end":1153,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i64_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31458,"byte_end":31519,"line_start":1154,"line_end":1154,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31524,"byte_end":31527,"line_start":1155,"line_end":1155,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31532,"byte_end":31565,"line_start":1156,"line_end":1156,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i64_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31570,"byte_end":31628,"line_start":1157,"line_end":1157,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31633,"byte_end":31676,"line_start":1158,"line_end":1158,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31681,"byte_end":31688,"line_start":1159,"line_end":1159,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31693,"byte_end":31702,"line_start":1160,"line_end":1160,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32610,"byte_end":32624,"line_start":1191,"line_end":1191,"column_start":8,"column_end":22},"name":"read_i128_into","qualname":"::ByteOrder::read_i128_into","value":"pub fn read_i128_into(&[u8], &mut [i128])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads signed 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads signed 128 bit integers from `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31922,"byte_end":31978,"line_start":1168,"line_end":1168,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31983,"byte_end":31986,"line_start":1169,"line_end":1169,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":31991,"byte_end":32003,"line_start":1170,"line_end":1170,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32008,"byte_end":32011,"line_start":1171,"line_end":1171,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 16*dst.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32016,"byte_end":32060,"line_start":1172,"line_end":1172,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32065,"byte_end":32068,"line_start":1173,"line_end":1173,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32073,"byte_end":32087,"line_start":1174,"line_end":1174,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32092,"byte_end":32095,"line_start":1175,"line_end":1175,"column_start":5,"column_end":8}},{"value":"/ Write and read `i128` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32100,"byte_end":32157,"line_start":1176,"line_end":1176,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32162,"byte_end":32165,"line_start":1177,"line_end":1177,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32170,"byte_end":32181,"line_start":1178,"line_end":1178,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32186,"byte_end":32231,"line_start":1179,"line_end":1179,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32236,"byte_end":32239,"line_start":1180,"line_end":1180,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 64];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32244,"byte_end":32272,"line_start":1181,"line_end":1181,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32277,"byte_end":32324,"line_start":1182,"line_end":1182,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i128_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32329,"byte_end":32391,"line_start":1183,"line_end":1183,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32396,"byte_end":32399,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32404,"byte_end":32437,"line_start":1185,"line_end":1185,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i128_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32442,"byte_end":32501,"line_start":1186,"line_end":1186,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32506,"byte_end":32549,"line_start":1187,"line_end":1187,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32554,"byte_end":32561,"line_start":1188,"line_end":1188,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32566,"byte_end":32588,"line_start":1189,"line_end":1189,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32593,"byte_end":32602,"line_start":1190,"line_end":1190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33537,"byte_end":33550,"line_start":1221,"line_end":1221,"column_start":8,"column_end":21},"name":"read_f32_into","qualname":"::ByteOrder::read_f32_into","value":"pub fn read_f32_into(&[u8], &mut [f32])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32826,"byte_end":32898,"line_start":1198,"line_end":1198,"column_start":5,"column_end":77}},{"value":"/ `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32903,"byte_end":32924,"line_start":1199,"line_end":1199,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32929,"byte_end":32932,"line_start":1200,"line_end":1200,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32937,"byte_end":32949,"line_start":1201,"line_end":1201,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32954,"byte_end":32957,"line_start":1202,"line_end":1202,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":32962,"byte_end":33005,"line_start":1203,"line_end":1203,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33010,"byte_end":33013,"line_start":1204,"line_end":1204,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33018,"byte_end":33032,"line_start":1205,"line_end":1205,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33037,"byte_end":33040,"line_start":1206,"line_end":1206,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33045,"byte_end":33101,"line_start":1207,"line_end":1207,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33106,"byte_end":33109,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33114,"byte_end":33125,"line_start":1209,"line_end":1209,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33130,"byte_end":33175,"line_start":1210,"line_end":1210,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33180,"byte_end":33183,"line_start":1211,"line_end":1211,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33188,"byte_end":33216,"line_start":1212,"line_end":1212,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33221,"byte_end":33278,"line_start":1213,"line_end":1213,"column_start":5,"column_end":62}},{"value":"/ LittleEndian::write_f32_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33283,"byte_end":33344,"line_start":1214,"line_end":1214,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33349,"byte_end":33352,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33357,"byte_end":33392,"line_start":1216,"line_end":1216,"column_start":5,"column_end":40}},{"value":"/ LittleEndian::read_f32_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33397,"byte_end":33455,"line_start":1217,"line_end":1217,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33460,"byte_end":33503,"line_start":1218,"line_end":1218,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33508,"byte_end":33515,"line_start":1219,"line_end":1219,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33520,"byte_end":33529,"line_start":1220,"line_end":1220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34642,"byte_end":34665,"line_start":1255,"line_end":1255,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::ByteOrder::read_f32_into_unchecked","value":"pub fn read_f32_into_unchecked(&[u8], &mut [f32])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"/ **DEPRECATED**.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33749,"byte_end":33768,"line_start":1228,"line_end":1228,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33773,"byte_end":33776,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ This method is deprecated. Use `read_f32_into` instead.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33781,"byte_end":33840,"line_start":1230,"line_end":1230,"column_start":5,"column_end":64}},{"value":"/ Reads IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33845,"byte_end":33917,"line_start":1231,"line_end":1231,"column_start":5,"column_end":77}},{"value":"/ `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33922,"byte_end":33943,"line_start":1232,"line_end":1232,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33948,"byte_end":33951,"line_start":1233,"line_end":1233,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33956,"byte_end":33968,"line_start":1234,"line_end":1234,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33973,"byte_end":33976,"line_start":1235,"line_end":1235,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":33981,"byte_end":34024,"line_start":1236,"line_end":1236,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34029,"byte_end":34032,"line_start":1237,"line_end":1237,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34037,"byte_end":34051,"line_start":1238,"line_end":1238,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34056,"byte_end":34059,"line_start":1239,"line_end":1239,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34064,"byte_end":34120,"line_start":1240,"line_end":1240,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34125,"byte_end":34128,"line_start":1241,"line_end":1241,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34133,"byte_end":34144,"line_start":1242,"line_end":1242,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34149,"byte_end":34194,"line_start":1243,"line_end":1243,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34199,"byte_end":34202,"line_start":1244,"line_end":1244,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34207,"byte_end":34235,"line_start":1245,"line_end":1245,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34240,"byte_end":34297,"line_start":1246,"line_end":1246,"column_start":5,"column_end":62}},{"value":"/ LittleEndian::write_f32_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34302,"byte_end":34363,"line_start":1247,"line_end":1247,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34368,"byte_end":34371,"line_start":1248,"line_end":1248,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34376,"byte_end":34411,"line_start":1249,"line_end":1249,"column_start":5,"column_end":40}},{"value":"/ LittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34416,"byte_end":34484,"line_start":1250,"line_end":1250,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34489,"byte_end":34532,"line_start":1251,"line_end":1251,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34537,"byte_end":34544,"line_start":1252,"line_end":1252,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34549,"byte_end":34558,"line_start":1253,"line_end":1253,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.3.0\", note = \"please use `read_f32_into` instead\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34563,"byte_end":34634,"line_start":1254,"line_end":1254,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35459,"byte_end":35472,"line_start":1282,"line_end":1282,"column_start":8,"column_end":21},"name":"read_f64_into","qualname":"::ByteOrder::read_f64_into","value":"pub fn read_f64_into(&[u8], &mut [f64])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34747,"byte_end":34819,"line_start":1259,"line_end":1259,"column_start":5,"column_end":77}},{"value":"/ `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34824,"byte_end":34845,"line_start":1260,"line_end":1260,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34850,"byte_end":34853,"line_start":1261,"line_end":1261,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34858,"byte_end":34870,"line_start":1262,"line_end":1262,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34875,"byte_end":34878,"line_start":1263,"line_end":1263,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34883,"byte_end":34926,"line_start":1264,"line_end":1264,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34931,"byte_end":34934,"line_start":1265,"line_end":1265,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34939,"byte_end":34953,"line_start":1266,"line_end":1266,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34958,"byte_end":34961,"line_start":1267,"line_end":1267,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":34966,"byte_end":35022,"line_start":1268,"line_end":1268,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35027,"byte_end":35030,"line_start":1269,"line_end":1269,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35035,"byte_end":35046,"line_start":1270,"line_end":1270,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35051,"byte_end":35096,"line_start":1271,"line_end":1271,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35101,"byte_end":35104,"line_start":1272,"line_end":1272,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35109,"byte_end":35137,"line_start":1273,"line_end":1273,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35142,"byte_end":35200,"line_start":1274,"line_end":1274,"column_start":5,"column_end":63}},{"value":"/ LittleEndian::write_f64_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35205,"byte_end":35266,"line_start":1275,"line_end":1275,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35271,"byte_end":35274,"line_start":1276,"line_end":1276,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35279,"byte_end":35314,"line_start":1277,"line_end":1277,"column_start":5,"column_end":40}},{"value":"/ LittleEndian::read_f64_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35319,"byte_end":35377,"line_start":1278,"line_end":1278,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35382,"byte_end":35425,"line_start":1279,"line_end":1279,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35430,"byte_end":35437,"line_start":1280,"line_end":1280,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35442,"byte_end":35451,"line_start":1281,"line_end":1281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36573,"byte_end":36596,"line_start":1317,"line_end":1317,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::ByteOrder::read_f64_into_unchecked","value":"pub fn read_f64_into_unchecked(&[u8], &mut [f64])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"/ **DEPRECATED**.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35671,"byte_end":35690,"line_start":1289,"line_end":1289,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35695,"byte_end":35698,"line_start":1290,"line_end":1290,"column_start":5,"column_end":8}},{"value":"/ This method is deprecated. Use `read_f64_into` instead.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35703,"byte_end":35762,"line_start":1291,"line_end":1291,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35767,"byte_end":35770,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8}},{"value":"/ Reads IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35775,"byte_end":35847,"line_start":1293,"line_end":1293,"column_start":5,"column_end":77}},{"value":"/ `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35852,"byte_end":35873,"line_start":1294,"line_end":1294,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35878,"byte_end":35881,"line_start":1295,"line_end":1295,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35886,"byte_end":35898,"line_start":1296,"line_end":1296,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35903,"byte_end":35906,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35911,"byte_end":35954,"line_start":1298,"line_end":1298,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35959,"byte_end":35962,"line_start":1299,"line_end":1299,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35967,"byte_end":35981,"line_start":1300,"line_end":1300,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35986,"byte_end":35989,"line_start":1301,"line_end":1301,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":35994,"byte_end":36050,"line_start":1302,"line_end":1302,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36055,"byte_end":36058,"line_start":1303,"line_end":1303,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36063,"byte_end":36074,"line_start":1304,"line_end":1304,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36079,"byte_end":36124,"line_start":1305,"line_end":1305,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36129,"byte_end":36132,"line_start":1306,"line_end":1306,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36137,"byte_end":36165,"line_start":1307,"line_end":1307,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36170,"byte_end":36228,"line_start":1308,"line_end":1308,"column_start":5,"column_end":63}},{"value":"/ LittleEndian::write_f64_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36233,"byte_end":36294,"line_start":1309,"line_end":1309,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36299,"byte_end":36302,"line_start":1310,"line_end":1310,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36307,"byte_end":36342,"line_start":1311,"line_end":1311,"column_start":5,"column_end":40}},{"value":"/ LittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36347,"byte_end":36415,"line_start":1312,"line_end":1312,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36420,"byte_end":36463,"line_start":1313,"line_end":1313,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36468,"byte_end":36475,"line_start":1314,"line_end":1314,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36480,"byte_end":36489,"line_start":1315,"line_end":1315,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.3.0\", note = \"please use `read_f64_into` instead\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36494,"byte_end":36565,"line_start":1316,"line_end":1316,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37322,"byte_end":37336,"line_start":1342,"line_end":1342,"column_start":8,"column_end":22},"name":"write_u16_into","qualname":"::ByteOrder::write_u16_into","value":"pub fn write_u16_into(&[u16], &mut [u8])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes unsigned 16 bit integers from `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36678,"byte_end":36736,"line_start":1321,"line_end":1321,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36741,"byte_end":36744,"line_start":1322,"line_end":1322,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36749,"byte_end":36761,"line_start":1323,"line_end":1323,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36766,"byte_end":36769,"line_start":1324,"line_end":1324,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 2*src.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36774,"byte_end":36817,"line_start":1325,"line_end":1325,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36822,"byte_end":36825,"line_start":1326,"line_end":1326,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36830,"byte_end":36844,"line_start":1327,"line_end":1327,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36849,"byte_end":36852,"line_start":1328,"line_end":1328,"column_start":5,"column_end":8}},{"value":"/ Write and read `u16` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36857,"byte_end":36913,"line_start":1329,"line_end":1329,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36918,"byte_end":36921,"line_start":1330,"line_end":1330,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36926,"byte_end":36937,"line_start":1331,"line_end":1331,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36942,"byte_end":36987,"line_start":1332,"line_end":1332,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":36992,"byte_end":36995,"line_start":1333,"line_end":1333,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37000,"byte_end":37027,"line_start":1334,"line_end":1334,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37032,"byte_end":37079,"line_start":1335,"line_end":1335,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u16_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37084,"byte_end":37145,"line_start":1336,"line_end":1336,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37150,"byte_end":37153,"line_start":1337,"line_end":1337,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37158,"byte_end":37191,"line_start":1338,"line_end":1338,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u16_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37196,"byte_end":37254,"line_start":1339,"line_end":1339,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37259,"byte_end":37302,"line_start":1340,"line_end":1340,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37307,"byte_end":37314,"line_start":1341,"line_end":1341,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38017,"byte_end":38031,"line_start":1365,"line_end":1365,"column_start":8,"column_end":22},"name":"write_u32_into","qualname":"::ByteOrder::write_u32_into","value":"pub fn write_u32_into(&[u32], &mut [u8])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes unsigned 32 bit integers from `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37372,"byte_end":37430,"line_start":1344,"line_end":1344,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37435,"byte_end":37438,"line_start":1345,"line_end":1345,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37443,"byte_end":37455,"line_start":1346,"line_end":1346,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37460,"byte_end":37463,"line_start":1347,"line_end":1347,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 4*src.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37468,"byte_end":37511,"line_start":1348,"line_end":1348,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37516,"byte_end":37519,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37524,"byte_end":37538,"line_start":1350,"line_end":1350,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37543,"byte_end":37546,"line_start":1351,"line_end":1351,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37551,"byte_end":37607,"line_start":1352,"line_end":1352,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37612,"byte_end":37615,"line_start":1353,"line_end":1353,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37620,"byte_end":37631,"line_start":1354,"line_end":1354,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37636,"byte_end":37681,"line_start":1355,"line_end":1355,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37686,"byte_end":37689,"line_start":1356,"line_end":1356,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37694,"byte_end":37722,"line_start":1357,"line_end":1357,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37727,"byte_end":37774,"line_start":1358,"line_end":1358,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u32_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37779,"byte_end":37840,"line_start":1359,"line_end":1359,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37845,"byte_end":37848,"line_start":1360,"line_end":1360,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37853,"byte_end":37886,"line_start":1361,"line_end":1361,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u32_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37891,"byte_end":37949,"line_start":1362,"line_end":1362,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":37954,"byte_end":37997,"line_start":1363,"line_end":1363,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38002,"byte_end":38009,"line_start":1364,"line_end":1364,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38712,"byte_end":38726,"line_start":1388,"line_end":1388,"column_start":8,"column_end":22},"name":"write_u64_into","qualname":"::ByteOrder::write_u64_into","value":"pub fn write_u64_into(&[u64], &mut [u8])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes unsigned 64 bit integers from `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38067,"byte_end":38125,"line_start":1367,"line_end":1367,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38130,"byte_end":38133,"line_start":1368,"line_end":1368,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38138,"byte_end":38150,"line_start":1369,"line_end":1369,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38155,"byte_end":38158,"line_start":1370,"line_end":1370,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 8*src.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38163,"byte_end":38206,"line_start":1371,"line_end":1371,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38211,"byte_end":38214,"line_start":1372,"line_end":1372,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38219,"byte_end":38233,"line_start":1373,"line_end":1373,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38238,"byte_end":38241,"line_start":1374,"line_end":1374,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38246,"byte_end":38302,"line_start":1375,"line_end":1375,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38307,"byte_end":38310,"line_start":1376,"line_end":1376,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38315,"byte_end":38326,"line_start":1377,"line_end":1377,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38331,"byte_end":38376,"line_start":1378,"line_end":1378,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38381,"byte_end":38384,"line_start":1379,"line_end":1379,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38389,"byte_end":38417,"line_start":1380,"line_end":1380,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38422,"byte_end":38469,"line_start":1381,"line_end":1381,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u64_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38474,"byte_end":38535,"line_start":1382,"line_end":1382,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38540,"byte_end":38543,"line_start":1383,"line_end":1383,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38548,"byte_end":38581,"line_start":1384,"line_end":1384,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u64_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38586,"byte_end":38644,"line_start":1385,"line_end":1385,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38649,"byte_end":38692,"line_start":1386,"line_end":1386,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38697,"byte_end":38704,"line_start":1387,"line_end":1387,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39439,"byte_end":39454,"line_start":1412,"line_end":1412,"column_start":8,"column_end":23},"name":"write_u128_into","qualname":"::ByteOrder::write_u128_into","value":"pub fn write_u128_into(&[u128], &mut [u8])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes unsigned 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes unsigned 128 bit integers from `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38762,"byte_end":38821,"line_start":1390,"line_end":1390,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38826,"byte_end":38829,"line_start":1391,"line_end":1391,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38834,"byte_end":38846,"line_start":1392,"line_end":1392,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38851,"byte_end":38854,"line_start":1393,"line_end":1393,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 16*src.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38859,"byte_end":38903,"line_start":1394,"line_end":1394,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38908,"byte_end":38911,"line_start":1395,"line_end":1395,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38916,"byte_end":38930,"line_start":1396,"line_end":1396,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38935,"byte_end":38938,"line_start":1397,"line_end":1397,"column_start":5,"column_end":8}},{"value":"/ Write and read `u128` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":38943,"byte_end":39000,"line_start":1398,"line_end":1398,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39005,"byte_end":39008,"line_start":1399,"line_end":1399,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39013,"byte_end":39024,"line_start":1400,"line_end":1400,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39029,"byte_end":39074,"line_start":1401,"line_end":1401,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39079,"byte_end":39082,"line_start":1402,"line_end":1402,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 64];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39087,"byte_end":39115,"line_start":1403,"line_end":1403,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39120,"byte_end":39167,"line_start":1404,"line_end":1404,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u128_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39172,"byte_end":39234,"line_start":1405,"line_end":1405,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39239,"byte_end":39242,"line_start":1406,"line_end":1406,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39247,"byte_end":39280,"line_start":1407,"line_end":1407,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u128_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39285,"byte_end":39344,"line_start":1408,"line_end":1408,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39349,"byte_end":39392,"line_start":1409,"line_end":1409,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39397,"byte_end":39404,"line_start":1410,"line_end":1410,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39409,"byte_end":39431,"line_start":1411,"line_end":1411,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40129,"byte_end":40143,"line_start":1435,"line_end":1435,"column_start":8,"column_end":22},"name":"write_i16_into","qualname":"::ByteOrder::write_i16_into","value":"pub fn write_i16_into(&[i16], &mut [u8])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes signed 16 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 16 bit integers from `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39491,"byte_end":39547,"line_start":1414,"line_end":1414,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39552,"byte_end":39555,"line_start":1415,"line_end":1415,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39560,"byte_end":39572,"line_start":1416,"line_end":1416,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39577,"byte_end":39580,"line_start":1417,"line_end":1417,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() != 2*src.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39585,"byte_end":39628,"line_start":1418,"line_end":1418,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39633,"byte_end":39636,"line_start":1419,"line_end":1419,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39641,"byte_end":39655,"line_start":1420,"line_end":1420,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39660,"byte_end":39663,"line_start":1421,"line_end":1421,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39668,"byte_end":39724,"line_start":1422,"line_end":1422,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39729,"byte_end":39732,"line_start":1423,"line_end":1423,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39737,"byte_end":39748,"line_start":1424,"line_end":1424,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39753,"byte_end":39798,"line_start":1425,"line_end":1425,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39803,"byte_end":39806,"line_start":1426,"line_end":1426,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39811,"byte_end":39838,"line_start":1427,"line_end":1427,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0x0f, 0xee];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39843,"byte_end":39886,"line_start":1428,"line_end":1428,"column_start":5,"column_end":48}},{"value":"/ LittleEndian::write_i16_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39891,"byte_end":39952,"line_start":1429,"line_end":1429,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39957,"byte_end":39960,"line_start":1430,"line_end":1430,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":39965,"byte_end":39998,"line_start":1431,"line_end":1431,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i16_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40003,"byte_end":40061,"line_start":1432,"line_end":1432,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40066,"byte_end":40109,"line_start":1433,"line_end":1433,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40114,"byte_end":40121,"line_start":1434,"line_end":1434,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40980,"byte_end":40994,"line_start":1463,"line_end":1463,"column_start":8,"column_end":22},"name":"write_i32_into","qualname":"::ByteOrder::write_i32_into","value":"pub fn write_i32_into(&[i32], &mut [u8])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 32 bit integers from `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40337,"byte_end":40393,"line_start":1442,"line_end":1442,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40398,"byte_end":40401,"line_start":1443,"line_end":1443,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40406,"byte_end":40418,"line_start":1444,"line_end":1444,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40423,"byte_end":40426,"line_start":1445,"line_end":1445,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 4*src.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40431,"byte_end":40474,"line_start":1446,"line_end":1446,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40479,"byte_end":40482,"line_start":1447,"line_end":1447,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40487,"byte_end":40501,"line_start":1448,"line_end":1448,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40506,"byte_end":40509,"line_start":1449,"line_end":1449,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40514,"byte_end":40570,"line_start":1450,"line_end":1450,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40575,"byte_end":40578,"line_start":1451,"line_end":1451,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40583,"byte_end":40594,"line_start":1452,"line_end":1452,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40599,"byte_end":40644,"line_start":1453,"line_end":1453,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40649,"byte_end":40652,"line_start":1454,"line_end":1454,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40657,"byte_end":40685,"line_start":1455,"line_end":1455,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40690,"byte_end":40737,"line_start":1456,"line_end":1456,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i32_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40742,"byte_end":40803,"line_start":1457,"line_end":1457,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40808,"byte_end":40811,"line_start":1458,"line_end":1458,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40816,"byte_end":40849,"line_start":1459,"line_end":1459,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i32_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40854,"byte_end":40912,"line_start":1460,"line_end":1460,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40917,"byte_end":40960,"line_start":1461,"line_end":1461,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":40965,"byte_end":40972,"line_start":1462,"line_end":1462,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41831,"byte_end":41845,"line_start":1491,"line_end":1491,"column_start":8,"column_end":22},"name":"write_i64_into","qualname":"::ByteOrder::write_i64_into","value":"pub fn write_i64_into(&[i64], &mut [u8])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 64 bit integers from `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41188,"byte_end":41244,"line_start":1470,"line_end":1470,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41249,"byte_end":41252,"line_start":1471,"line_end":1471,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41257,"byte_end":41269,"line_start":1472,"line_end":1472,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41274,"byte_end":41277,"line_start":1473,"line_end":1473,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 8*src.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41282,"byte_end":41325,"line_start":1474,"line_end":1474,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41330,"byte_end":41333,"line_start":1475,"line_end":1475,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41338,"byte_end":41352,"line_start":1476,"line_end":1476,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41357,"byte_end":41360,"line_start":1477,"line_end":1477,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41365,"byte_end":41421,"line_start":1478,"line_end":1478,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41426,"byte_end":41429,"line_start":1479,"line_end":1479,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41434,"byte_end":41445,"line_start":1480,"line_end":1480,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41450,"byte_end":41495,"line_start":1481,"line_end":1481,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41500,"byte_end":41503,"line_start":1482,"line_end":1482,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41508,"byte_end":41536,"line_start":1483,"line_end":1483,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41541,"byte_end":41588,"line_start":1484,"line_end":1484,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i64_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41593,"byte_end":41654,"line_start":1485,"line_end":1485,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41659,"byte_end":41662,"line_start":1486,"line_end":1486,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41667,"byte_end":41700,"line_start":1487,"line_end":1487,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i64_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41705,"byte_end":41763,"line_start":1488,"line_end":1488,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41768,"byte_end":41811,"line_start":1489,"line_end":1489,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":41816,"byte_end":41823,"line_start":1490,"line_end":1490,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42714,"byte_end":42729,"line_start":1520,"line_end":1520,"column_start":8,"column_end":23},"name":"write_i128_into","qualname":"::ByteOrder::write_i128_into","value":"pub fn write_i128_into(&[i128], &mut [u8])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes signed 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 128 bit integers from `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42039,"byte_end":42096,"line_start":1498,"line_end":1498,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42101,"byte_end":42104,"line_start":1499,"line_end":1499,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42109,"byte_end":42121,"line_start":1500,"line_end":1500,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42126,"byte_end":42129,"line_start":1501,"line_end":1501,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 16*src.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42134,"byte_end":42178,"line_start":1502,"line_end":1502,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42183,"byte_end":42186,"line_start":1503,"line_end":1503,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42191,"byte_end":42205,"line_start":1504,"line_end":1504,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42210,"byte_end":42213,"line_start":1505,"line_end":1505,"column_start":5,"column_end":8}},{"value":"/ Write and read `i128` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42218,"byte_end":42275,"line_start":1506,"line_end":1506,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42280,"byte_end":42283,"line_start":1507,"line_end":1507,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42288,"byte_end":42299,"line_start":1508,"line_end":1508,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42304,"byte_end":42349,"line_start":1509,"line_end":1509,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42354,"byte_end":42357,"line_start":1510,"line_end":1510,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 64];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42362,"byte_end":42390,"line_start":1511,"line_end":1511,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42395,"byte_end":42442,"line_start":1512,"line_end":1512,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i128_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42447,"byte_end":42509,"line_start":1513,"line_end":1513,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42514,"byte_end":42517,"line_start":1514,"line_end":1514,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42522,"byte_end":42555,"line_start":1515,"line_end":1515,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i128_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42560,"byte_end":42619,"line_start":1516,"line_end":1516,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42624,"byte_end":42667,"line_start":1517,"line_end":1517,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42672,"byte_end":42679,"line_start":1518,"line_end":1518,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42684,"byte_end":42706,"line_start":1519,"line_end":1519,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43655,"byte_end":43669,"line_start":1551,"line_end":1551,"column_start":8,"column_end":22},"name":"write_f32_into","qualname":"::ByteOrder::write_f32_into","value":"pub fn write_f32_into(&[f32], &mut [u8])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":42926,"byte_end":42999,"line_start":1527,"line_end":1527,"column_start":5,"column_end":78}},{"value":"/ `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43004,"byte_end":43025,"line_start":1528,"line_end":1528,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43030,"byte_end":43033,"line_start":1529,"line_end":1529,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43038,"byte_end":43050,"line_start":1530,"line_end":1530,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43055,"byte_end":43058,"line_start":1531,"line_end":1531,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43063,"byte_end":43106,"line_start":1532,"line_end":1532,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43111,"byte_end":43114,"line_start":1533,"line_end":1533,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43119,"byte_end":43133,"line_start":1534,"line_end":1534,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43138,"byte_end":43141,"line_start":1535,"line_end":1535,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43146,"byte_end":43202,"line_start":1536,"line_end":1536,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43207,"byte_end":43210,"line_start":1537,"line_end":1537,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43215,"byte_end":43226,"line_start":1538,"line_end":1538,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43231,"byte_end":43276,"line_start":1539,"line_end":1539,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43281,"byte_end":43284,"line_start":1540,"line_end":1540,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43289,"byte_end":43317,"line_start":1541,"line_end":1541,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43322,"byte_end":43379,"line_start":1542,"line_end":1542,"column_start":5,"column_end":62}},{"value":"/ LittleEndian::write_f32_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43384,"byte_end":43445,"line_start":1543,"line_end":1543,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43450,"byte_end":43453,"line_start":1544,"line_end":1544,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43458,"byte_end":43493,"line_start":1545,"line_end":1545,"column_start":5,"column_end":40}},{"value":"/ unsafe {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43498,"byte_end":43510,"line_start":1546,"line_end":1546,"column_start":5,"column_end":17}},{"value":"/     LittleEndian::read_f32_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43515,"byte_end":43577,"line_start":1547,"line_end":1547,"column_start":5,"column_end":67}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43582,"byte_end":43587,"line_start":1548,"line_end":1548,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43592,"byte_end":43635,"line_start":1549,"line_end":1549,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43640,"byte_end":43647,"line_start":1550,"line_end":1550,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44593,"byte_end":44607,"line_start":1582,"line_end":1582,"column_start":8,"column_end":22},"name":"write_f64_into","qualname":"::ByteOrder::write_f64_into","value":"pub fn write_f64_into(&[f64], &mut [u8])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Writes IEEE754 double-precision (8 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes IEEE754 double-precision (8 bytes) floating point numbers from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43863,"byte_end":43936,"line_start":1558,"line_end":1558,"column_start":5,"column_end":78}},{"value":"/ `src` into `dst`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43941,"byte_end":43962,"line_start":1559,"line_end":1559,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43967,"byte_end":43970,"line_start":1560,"line_end":1560,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43975,"byte_end":43987,"line_start":1561,"line_end":1561,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":43992,"byte_end":43995,"line_start":1562,"line_end":1562,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44000,"byte_end":44043,"line_start":1563,"line_end":1563,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44048,"byte_end":44051,"line_start":1564,"line_end":1564,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44056,"byte_end":44070,"line_start":1565,"line_end":1565,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44075,"byte_end":44078,"line_start":1566,"line_end":1566,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44083,"byte_end":44139,"line_start":1567,"line_end":1567,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44144,"byte_end":44147,"line_start":1568,"line_end":1568,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44152,"byte_end":44163,"line_start":1569,"line_end":1569,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44168,"byte_end":44213,"line_start":1570,"line_end":1570,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44218,"byte_end":44221,"line_start":1571,"line_end":1571,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44226,"byte_end":44254,"line_start":1572,"line_end":1572,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44259,"byte_end":44317,"line_start":1573,"line_end":1573,"column_start":5,"column_end":63}},{"value":"/ LittleEndian::write_f64_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44322,"byte_end":44383,"line_start":1574,"line_end":1574,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44388,"byte_end":44391,"line_start":1575,"line_end":1575,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44396,"byte_end":44431,"line_start":1576,"line_end":1576,"column_start":5,"column_end":40}},{"value":"/ unsafe {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44436,"byte_end":44448,"line_start":1577,"line_end":1577,"column_start":5,"column_end":17}},{"value":"/     LittleEndian::read_f64_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44453,"byte_end":44515,"line_start":1578,"line_end":1578,"column_start":5,"column_end":67}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44520,"byte_end":44525,"line_start":1579,"line_end":1579,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44530,"byte_end":44573,"line_start":1580,"line_end":1580,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44578,"byte_end":44585,"line_start":1581,"line_end":1581,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45348,"byte_end":45362,"line_start":1606,"line_end":1606,"column_start":8,"column_end":22},"name":"from_slice_u16","qualname":"::ByteOrder::from_slice_u16","value":"pub fn from_slice_u16(&mut [u16])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 16 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of unsigned 16 bit integers to a particular","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44801,"byte_end":44873,"line_start":1589,"line_end":1589,"column_start":5,"column_end":77}},{"value":"/ endianness.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44878,"byte_end":44893,"line_start":1590,"line_end":1590,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44898,"byte_end":44901,"line_start":1591,"line_end":1591,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44906,"byte_end":44977,"line_start":1592,"line_end":1592,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":44982,"byte_end":45002,"line_start":1593,"line_end":1593,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45007,"byte_end":45010,"line_start":1594,"line_end":1594,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45015,"byte_end":45029,"line_start":1595,"line_end":1595,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45034,"byte_end":45037,"line_start":1596,"line_end":1596,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45042,"byte_end":45099,"line_start":1597,"line_end":1597,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45104,"byte_end":45107,"line_start":1598,"line_end":1598,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45112,"byte_end":45123,"line_start":1599,"line_end":1599,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45128,"byte_end":45170,"line_start":1600,"line_end":1600,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45175,"byte_end":45178,"line_start":1601,"line_end":1601,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45183,"byte_end":45216,"line_start":1602,"line_end":1602,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_u16(&mut numbers);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45221,"byte_end":45265,"line_start":1603,"line_end":1603,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5u16.to_be(), 65000u16.to_be()]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45270,"byte_end":45328,"line_start":1604,"line_end":1604,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45333,"byte_end":45340,"line_start":1605,"line_end":1605,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45937,"byte_end":45951,"line_start":1625,"line_end":1625,"column_start":8,"column_end":22},"name":"from_slice_u32","qualname":"::ByteOrder::from_slice_u32","value":"pub fn from_slice_u32(&mut [u32])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 32 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of unsigned 32 bit integers to a particular","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45390,"byte_end":45462,"line_start":1608,"line_end":1608,"column_start":5,"column_end":77}},{"value":"/ endianness.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45467,"byte_end":45482,"line_start":1609,"line_end":1609,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45487,"byte_end":45490,"line_start":1610,"line_end":1610,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45495,"byte_end":45566,"line_start":1611,"line_end":1611,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45571,"byte_end":45591,"line_start":1612,"line_end":1612,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45596,"byte_end":45599,"line_start":1613,"line_end":1613,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45604,"byte_end":45618,"line_start":1614,"line_end":1614,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45623,"byte_end":45626,"line_start":1615,"line_end":1615,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45631,"byte_end":45688,"line_start":1616,"line_end":1616,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45693,"byte_end":45696,"line_start":1617,"line_end":1617,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45701,"byte_end":45712,"line_start":1618,"line_end":1618,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45717,"byte_end":45759,"line_start":1619,"line_end":1619,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45764,"byte_end":45767,"line_start":1620,"line_end":1620,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45772,"byte_end":45805,"line_start":1621,"line_end":1621,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_u32(&mut numbers);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45810,"byte_end":45854,"line_start":1622,"line_end":1622,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5u32.to_be(), 65000u32.to_be()]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45859,"byte_end":45917,"line_start":1623,"line_end":1623,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45922,"byte_end":45929,"line_start":1624,"line_end":1624,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46526,"byte_end":46540,"line_start":1644,"line_end":1644,"column_start":8,"column_end":22},"name":"from_slice_u64","qualname":"::ByteOrder::from_slice_u64","value":"pub fn from_slice_u64(&mut [u64])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 64 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of unsigned 64 bit integers to a particular","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":45979,"byte_end":46051,"line_start":1627,"line_end":1627,"column_start":5,"column_end":77}},{"value":"/ endianness.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46056,"byte_end":46071,"line_start":1628,"line_end":1628,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46076,"byte_end":46079,"line_start":1629,"line_end":1629,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46084,"byte_end":46155,"line_start":1630,"line_end":1630,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46160,"byte_end":46180,"line_start":1631,"line_end":1631,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46185,"byte_end":46188,"line_start":1632,"line_end":1632,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46193,"byte_end":46207,"line_start":1633,"line_end":1633,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46212,"byte_end":46215,"line_start":1634,"line_end":1634,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46220,"byte_end":46277,"line_start":1635,"line_end":1635,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46282,"byte_end":46285,"line_start":1636,"line_end":1636,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46290,"byte_end":46301,"line_start":1637,"line_end":1637,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46306,"byte_end":46348,"line_start":1638,"line_end":1638,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46353,"byte_end":46356,"line_start":1639,"line_end":1639,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46361,"byte_end":46394,"line_start":1640,"line_end":1640,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_u64(&mut numbers);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46399,"byte_end":46443,"line_start":1641,"line_end":1641,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5u64.to_be(), 65000u64.to_be()]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46448,"byte_end":46506,"line_start":1642,"line_end":1642,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46511,"byte_end":46518,"line_start":1643,"line_end":1643,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47146,"byte_end":47161,"line_start":1664,"line_end":1664,"column_start":8,"column_end":23},"name":"from_slice_u128","qualname":"::ByteOrder::from_slice_u128","value":"pub fn from_slice_u128(&mut [u128])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 128 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of unsigned 128 bit integers to a particular","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46568,"byte_end":46641,"line_start":1646,"line_end":1646,"column_start":5,"column_end":78}},{"value":"/ endianness.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46646,"byte_end":46661,"line_start":1647,"line_end":1647,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46666,"byte_end":46669,"line_start":1648,"line_end":1648,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46674,"byte_end":46745,"line_start":1649,"line_end":1649,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46750,"byte_end":46770,"line_start":1650,"line_end":1650,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46775,"byte_end":46778,"line_start":1651,"line_end":1651,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46783,"byte_end":46797,"line_start":1652,"line_end":1652,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46802,"byte_end":46805,"line_start":1653,"line_end":1653,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46810,"byte_end":46867,"line_start":1654,"line_end":1654,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46872,"byte_end":46875,"line_start":1655,"line_end":1655,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46880,"byte_end":46891,"line_start":1656,"line_end":1656,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46896,"byte_end":46938,"line_start":1657,"line_end":1657,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46943,"byte_end":46946,"line_start":1658,"line_end":1658,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46951,"byte_end":46984,"line_start":1659,"line_end":1659,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_u128(&mut numbers);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":46989,"byte_end":47034,"line_start":1660,"line_end":1660,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(numbers, [5u128.to_be(), 65000u128.to_be()]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47039,"byte_end":47099,"line_start":1661,"line_end":1661,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47104,"byte_end":47111,"line_start":1662,"line_end":1662,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47116,"byte_end":47138,"line_start":1663,"line_end":1663,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47747,"byte_end":47761,"line_start":1684,"line_end":1684,"column_start":8,"column_end":22},"name":"from_slice_i16","qualname":"::ByteOrder::from_slice_i16","value":"pub fn from_slice_i16(&mut [i16])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 16 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of signed 16 bit integers to a particular","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47190,"byte_end":47260,"line_start":1666,"line_end":1666,"column_start":5,"column_end":75}},{"value":"/ endianness.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47265,"byte_end":47280,"line_start":1667,"line_end":1667,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47285,"byte_end":47288,"line_start":1668,"line_end":1668,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47293,"byte_end":47364,"line_start":1669,"line_end":1669,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47369,"byte_end":47389,"line_start":1670,"line_end":1670,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47394,"byte_end":47397,"line_start":1671,"line_end":1671,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47402,"byte_end":47416,"line_start":1672,"line_end":1672,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47421,"byte_end":47424,"line_start":1673,"line_end":1673,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47429,"byte_end":47486,"line_start":1674,"line_end":1674,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47491,"byte_end":47494,"line_start":1675,"line_end":1675,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47499,"byte_end":47510,"line_start":1676,"line_end":1676,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47515,"byte_end":47557,"line_start":1677,"line_end":1677,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47562,"byte_end":47565,"line_start":1678,"line_end":1678,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 6500];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47570,"byte_end":47602,"line_start":1679,"line_end":1679,"column_start":5,"column_end":37}},{"value":"/ BigEndian::from_slice_i16(&mut numbers);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47607,"byte_end":47651,"line_start":1680,"line_end":1680,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5i16.to_be(), 6500i16.to_be()]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47656,"byte_end":47713,"line_start":1681,"line_end":1681,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47718,"byte_end":47725,"line_start":1682,"line_end":1682,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47730,"byte_end":47739,"line_start":1683,"line_end":1683,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48499,"byte_end":48513,"line_start":1709,"line_end":1709,"column_start":8,"column_end":22},"name":"from_slice_i32","qualname":"::ByteOrder::from_slice_i32","value":"pub fn from_slice_i32(&mut [i32])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 32 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of signed 32 bit integers to a particular","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":47940,"byte_end":48010,"line_start":1691,"line_end":1691,"column_start":5,"column_end":75}},{"value":"/ endianness.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48015,"byte_end":48030,"line_start":1692,"line_end":1692,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48035,"byte_end":48038,"line_start":1693,"line_end":1693,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48043,"byte_end":48114,"line_start":1694,"line_end":1694,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48119,"byte_end":48139,"line_start":1695,"line_end":1695,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48144,"byte_end":48147,"line_start":1696,"line_end":1696,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48152,"byte_end":48166,"line_start":1697,"line_end":1697,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48171,"byte_end":48174,"line_start":1698,"line_end":1698,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48179,"byte_end":48236,"line_start":1699,"line_end":1699,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48241,"byte_end":48244,"line_start":1700,"line_end":1700,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48249,"byte_end":48260,"line_start":1701,"line_end":1701,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48265,"byte_end":48307,"line_start":1702,"line_end":1702,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48312,"byte_end":48315,"line_start":1703,"line_end":1703,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48320,"byte_end":48353,"line_start":1704,"line_end":1704,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_i32(&mut numbers);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48358,"byte_end":48402,"line_start":1705,"line_end":1705,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5i32.to_be(), 65000i32.to_be()]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48407,"byte_end":48465,"line_start":1706,"line_end":1706,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48470,"byte_end":48477,"line_start":1707,"line_end":1707,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48482,"byte_end":48491,"line_start":1708,"line_end":1708,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49251,"byte_end":49265,"line_start":1734,"line_end":1734,"column_start":8,"column_end":22},"name":"from_slice_i64","qualname":"::ByteOrder::from_slice_i64","value":"pub fn from_slice_i64(&mut [i64])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 64 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of signed 64 bit integers to a particular","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48692,"byte_end":48762,"line_start":1716,"line_end":1716,"column_start":5,"column_end":75}},{"value":"/ endianness.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48767,"byte_end":48782,"line_start":1717,"line_end":1717,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48787,"byte_end":48790,"line_start":1718,"line_end":1718,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48795,"byte_end":48866,"line_start":1719,"line_end":1719,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48871,"byte_end":48891,"line_start":1720,"line_end":1720,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48896,"byte_end":48899,"line_start":1721,"line_end":1721,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48904,"byte_end":48918,"line_start":1722,"line_end":1722,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48923,"byte_end":48926,"line_start":1723,"line_end":1723,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48931,"byte_end":48988,"line_start":1724,"line_end":1724,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":48993,"byte_end":48996,"line_start":1725,"line_end":1725,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49001,"byte_end":49012,"line_start":1726,"line_end":1726,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49017,"byte_end":49059,"line_start":1727,"line_end":1727,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49064,"byte_end":49067,"line_start":1728,"line_end":1728,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49072,"byte_end":49105,"line_start":1729,"line_end":1729,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_i64(&mut numbers);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49110,"byte_end":49154,"line_start":1730,"line_end":1730,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5i64.to_be(), 65000i64.to_be()]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49159,"byte_end":49217,"line_start":1731,"line_end":1731,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49222,"byte_end":49229,"line_start":1732,"line_end":1732,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49234,"byte_end":49243,"line_start":1733,"line_end":1733,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50034,"byte_end":50049,"line_start":1760,"line_end":1760,"column_start":8,"column_end":23},"name":"from_slice_i128","qualname":"::ByteOrder::from_slice_i128","value":"pub fn from_slice_i128(&mut [i128])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 128 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of signed 128 bit integers to a particular","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49444,"byte_end":49515,"line_start":1741,"line_end":1741,"column_start":5,"column_end":76}},{"value":"/ endianness.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49520,"byte_end":49535,"line_start":1742,"line_end":1742,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49540,"byte_end":49543,"line_start":1743,"line_end":1743,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49548,"byte_end":49619,"line_start":1744,"line_end":1744,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49624,"byte_end":49644,"line_start":1745,"line_end":1745,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49649,"byte_end":49652,"line_start":1746,"line_end":1746,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49657,"byte_end":49671,"line_start":1747,"line_end":1747,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49676,"byte_end":49679,"line_start":1748,"line_end":1748,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49684,"byte_end":49741,"line_start":1749,"line_end":1749,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49746,"byte_end":49749,"line_start":1750,"line_end":1750,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49754,"byte_end":49765,"line_start":1751,"line_end":1751,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49770,"byte_end":49812,"line_start":1752,"line_end":1752,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49817,"byte_end":49820,"line_start":1753,"line_end":1753,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49825,"byte_end":49858,"line_start":1754,"line_end":1754,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_i128(&mut numbers);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49863,"byte_end":49908,"line_start":1755,"line_end":1755,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(numbers, [5i128.to_be(), 65000i128.to_be()]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49913,"byte_end":49973,"line_start":1756,"line_end":1756,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49978,"byte_end":49985,"line_start":1757,"line_end":1757,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":49990,"byte_end":50012,"line_start":1758,"line_end":1758,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50017,"byte_end":50026,"line_start":1759,"line_end":1759,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50473,"byte_end":50487,"line_start":1772,"line_end":1772,"column_start":8,"column_end":22},"name":"from_slice_f32","qualname":"::ByteOrder::from_slice_f32","value":"pub fn from_slice_f32(&mut [f32])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 single-precision (4 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of IEEE754 single-precision (4 bytes) floating","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50231,"byte_end":50306,"line_start":1767,"line_end":1767,"column_start":5,"column_end":80}},{"value":"/ point numbers to a particular endianness.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50311,"byte_end":50356,"line_start":1768,"line_end":1768,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50361,"byte_end":50364,"line_start":1769,"line_end":1769,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50369,"byte_end":50440,"line_start":1770,"line_end":1770,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50445,"byte_end":50465,"line_start":1771,"line_end":1771,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50757,"byte_end":50771,"line_start":1779,"line_end":1779,"column_start":8,"column_end":22},"name":"from_slice_f64","qualname":"::ByteOrder::from_slice_f64","value":"pub fn from_slice_f64(&mut [f64])","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 double-precision (8 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of IEEE754 double-precision (8 bytes) floating","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50515,"byte_end":50590,"line_start":1774,"line_end":1774,"column_start":5,"column_end":80}},{"value":"/ point numbers to a particular endianness.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50595,"byte_end":50640,"line_start":1775,"line_end":1775,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50645,"byte_end":50648,"line_start":1776,"line_end":1776,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50653,"byte_end":50724,"line_start":1777,"line_end":1777,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50729,"byte_end":50749,"line_start":1778,"line_end":1778,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":319},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51282,"byte_end":51291,"line_start":1799,"line_end":1799,"column_start":10,"column_end":19},"name":"BigEndian","qualname":"::BigEndian","value":"pub enum BigEndian { }","parent":null,"children":[],"decl_id":null,"docs":" Defines big-endian serialization.","sig":null,"attributes":[{"value":"/ Defines big-endian serialization.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50797,"byte_end":50834,"line_start":1782,"line_end":1782,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50835,"byte_end":50838,"line_start":1783,"line_end":1783,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50839,"byte_end":50913,"line_start":1784,"line_end":1784,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50914,"byte_end":50929,"line_start":1785,"line_end":1785,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50930,"byte_end":50933,"line_start":1786,"line_end":1786,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50934,"byte_end":50948,"line_start":1787,"line_end":1787,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50949,"byte_end":50952,"line_start":1788,"line_end":1788,"column_start":1,"column_end":4}},{"value":"/ Write and read `u32` numbers in big endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":50953,"byte_end":51006,"line_start":1789,"line_end":1789,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51007,"byte_end":51010,"line_start":1790,"line_end":1790,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51011,"byte_end":51022,"line_start":1791,"line_end":1791,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51023,"byte_end":51065,"line_start":1792,"line_end":1792,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51066,"byte_end":51069,"line_start":1793,"line_end":1793,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51070,"byte_end":51095,"line_start":1794,"line_end":1794,"column_start":1,"column_end":26}},{"value":"/ BigEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51096,"byte_end":51142,"line_start":1795,"line_end":1795,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(1_000_000, BigEndian::read_u32(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51143,"byte_end":51196,"line_start":1796,"line_end":1796,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51197,"byte_end":51204,"line_start":1797,"line_end":1797,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":246},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51490,"byte_end":51492,"line_start":1810,"line_end":1810,"column_start":10,"column_end":12},"name":"BE","qualname":"::BE","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`BigEndian`].","sig":null,"attributes":[{"value":"/ A type alias for [`BigEndian`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51402,"byte_end":51437,"line_start":1807,"line_end":1807,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51438,"byte_end":51441,"line_start":1808,"line_end":1808,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51442,"byte_end":51480,"line_start":1809,"line_end":1809,"column_start":1,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":338},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52007,"byte_end":52019,"line_start":1829,"line_end":1829,"column_start":10,"column_end":22},"name":"LittleEndian","qualname":"::LittleEndian","value":"pub enum LittleEndian { }","parent":null,"children":[],"decl_id":null,"docs":" Defines little-endian serialization.","sig":null,"attributes":[{"value":"/ Defines little-endian serialization.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51507,"byte_end":51547,"line_start":1812,"line_end":1812,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51548,"byte_end":51551,"line_start":1813,"line_end":1813,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51552,"byte_end":51626,"line_start":1814,"line_end":1814,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51627,"byte_end":51642,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51643,"byte_end":51646,"line_start":1816,"line_end":1816,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51647,"byte_end":51661,"line_start":1817,"line_end":1817,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51662,"byte_end":51665,"line_start":1818,"line_end":1818,"column_start":1,"column_end":4}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51666,"byte_end":51722,"line_start":1819,"line_end":1819,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51723,"byte_end":51726,"line_start":1820,"line_end":1820,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51727,"byte_end":51738,"line_start":1821,"line_end":1821,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51739,"byte_end":51784,"line_start":1822,"line_end":1822,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51785,"byte_end":51788,"line_start":1823,"line_end":1823,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51789,"byte_end":51814,"line_start":1824,"line_end":1824,"column_start":1,"column_end":26}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51815,"byte_end":51864,"line_start":1825,"line_end":1825,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51865,"byte_end":51921,"line_start":1826,"line_end":1826,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51922,"byte_end":51929,"line_start":1827,"line_end":1827,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":249},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52236,"byte_end":52238,"line_start":1840,"line_end":1840,"column_start":10,"column_end":12},"name":"LE","qualname":"::LE","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`LittleEndian`].","sig":null,"attributes":[{"value":"/ A type alias for [`LittleEndian`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52139,"byte_end":52177,"line_start":1837,"line_end":1837,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52178,"byte_end":52181,"line_start":1838,"line_end":1838,"column_start":1,"column_end":4}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52182,"byte_end":52226,"line_start":1839,"line_end":1839,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":250},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52963,"byte_end":52976,"line_start":1866,"line_end":1866,"column_start":10,"column_end":23},"name":"NetworkEndian","qualname":"::NetworkEndian","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines network byte order serialization.","sig":null,"attributes":[{"value":"/ Defines network byte order serialization.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52256,"byte_end":52301,"line_start":1842,"line_end":1842,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52302,"byte_end":52305,"line_start":1843,"line_end":1843,"column_start":1,"column_end":4}},{"value":"/ Network byte order is defined by [RFC 1700][1] to be big-endian, and is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52306,"byte_end":52381,"line_start":1844,"line_end":1844,"column_start":1,"column_end":76}},{"value":"/ referred to in several protocol specifications.  This type is an alias of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52382,"byte_end":52459,"line_start":1845,"line_end":1845,"column_start":1,"column_end":78}},{"value":"/ [`BigEndian`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52460,"byte_end":52478,"line_start":1846,"line_end":1846,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52479,"byte_end":52482,"line_start":1847,"line_end":1847,"column_start":1,"column_end":4}},{"value":"/ [1]: https://tools.ietf.org/html/rfc1700","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52483,"byte_end":52527,"line_start":1848,"line_end":1848,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52528,"byte_end":52531,"line_start":1849,"line_end":1849,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52532,"byte_end":52606,"line_start":1850,"line_end":1850,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52607,"byte_end":52622,"line_start":1851,"line_end":1851,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52623,"byte_end":52626,"line_start":1852,"line_end":1852,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52627,"byte_end":52641,"line_start":1853,"line_end":1853,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52642,"byte_end":52645,"line_start":1854,"line_end":1854,"column_start":1,"column_end":4}},{"value":"/ Write and read `i16` numbers in big endian order:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52646,"byte_end":52699,"line_start":1855,"line_end":1855,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52700,"byte_end":52703,"line_start":1856,"line_end":1856,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52704,"byte_end":52715,"line_start":1857,"line_end":1857,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, NetworkEndian, BigEndian};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52716,"byte_end":52773,"line_start":1858,"line_end":1858,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52774,"byte_end":52777,"line_start":1859,"line_end":1859,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52778,"byte_end":52803,"line_start":1860,"line_end":1860,"column_start":1,"column_end":26}},{"value":"/ BigEndian::write_i16(&mut buf, -5_000);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52804,"byte_end":52847,"line_start":1861,"line_end":1861,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(-5_000, NetworkEndian::read_i16(&buf));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52848,"byte_end":52902,"line_start":1862,"line_end":1862,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52903,"byte_end":52910,"line_start":1863,"line_end":1863,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52911,"byte_end":52914,"line_start":1864,"line_end":1864,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52915,"byte_end":52953,"line_start":1865,"line_end":1865,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":251},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":53290,"byte_end":53302,"line_start":1877,"line_end":1877,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines system native-endian serialization.","sig":null,"attributes":[{"value":"/ Defines system native-endian serialization.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52991,"byte_end":53038,"line_start":1868,"line_end":1868,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":53039,"byte_end":53042,"line_start":1869,"line_end":1869,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":53043,"byte_end":53117,"line_start":1870,"line_end":1870,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":53118,"byte_end":53133,"line_start":1871,"line_end":1871,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":53134,"byte_end":53137,"line_start":1872,"line_end":1872,"column_start":1,"column_end":4}},{"value":"/ On this platform, this is an alias for [`LittleEndian`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":53138,"byte_end":53198,"line_start":1873,"line_end":1873,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":53199,"byte_end":53202,"line_start":1874,"line_end":1874,"column_start":1,"column_end":4}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":53203,"byte_end":53247,"line_start":1875,"line_end":1875,"column_start":1,"column_end":45}},{"value":"cfg(target_endian = \"little\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":53248,"byte_end":53280,"line_start":1876,"line_end":1876,"column_start":1,"column_end":33}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137169,"byte_end":137170,"line_start":1059,"line_end":1059,"column_start":45,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153919,"byte_end":153920,"line_start":1593,"line_end":1593,"column_start":47,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":4508,"byte_end":4520,"line_start":183,"line_end":183,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":4551,"byte_end":4560,"line_start":184,"line_end":184,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51313,"byte_end":51322,"line_start":1801,"line_end":1801,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52041,"byte_end":52053,"line_start":1831,"line_end":1831,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":55543,"byte_end":55552,"line_start":1957,"line_end":1957,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":61258,"byte_end":61270,"line_start":2172,"line_end":2172,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":303},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":104210,"byte_end":104214,"line_start":28,"line_end":28,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3120},"to":{"krate":0,"index":17}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137169,"byte_end":137170,"line_start":1059,"line_end":1059,"column_start":45,"column_end":46},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":102},"to":{"krate":0,"index":17}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":137980,"byte_end":137985,"line_start":1083,"line_end":1083,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":3179},"to":{"krate":0,"index":103}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/io.rs","byte_start":153919,"byte_end":153920,"line_start":1593,"line_end":1593,"column_start":47,"column_end":48},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":161},"to":{"krate":0,"index":103}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":4508,"byte_end":4520,"line_start":183,"line_end":183,"column_start":28,"column_end":40},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":338},"to":{"krate":0,"index":172}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":4551,"byte_end":4560,"line_start":184,"line_end":184,"column_start":28,"column_end":37},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":319},"to":{"krate":0,"index":172}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5740,"byte_end":5745,"line_start":223,"line_end":223,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":1742},"to":{"krate":0,"index":175}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5748,"byte_end":5752,"line_start":223,"line_end":223,"column_start":15,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":2055},"to":{"krate":0,"index":175}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5755,"byte_end":5760,"line_start":223,"line_end":223,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":6599},"to":{"krate":0,"index":175}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5763,"byte_end":5770,"line_start":223,"line_end":223,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":2033},"to":{"krate":0,"index":175}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5773,"byte_end":5775,"line_start":223,"line_end":223,"column_start":40,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":1775},"to":{"krate":0,"index":175}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5778,"byte_end":5782,"line_start":223,"line_end":223,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":6787},"to":{"krate":0,"index":175}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5785,"byte_end":5788,"line_start":223,"line_end":223,"column_start":52,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1796},"to":{"krate":0,"index":175}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5791,"byte_end":5800,"line_start":223,"line_end":223,"column_start":58,"column_end":67},"kind":"SuperTrait","from":{"krate":2,"index":1770},"to":{"krate":0,"index":175}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5803,"byte_end":5813,"line_start":223,"line_end":223,"column_start":70,"column_end":80},"kind":"SuperTrait","from":{"krate":2,"index":1807},"to":{"krate":0,"index":175}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":5829,"byte_end":5835,"line_start":224,"line_end":224,"column_start":16,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":172},"to":{"krate":0,"index":175}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":51313,"byte_end":51322,"line_start":1801,"line_end":1801,"column_start":18,"column_end":27},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":319},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":52041,"byte_end":52053,"line_start":1831,"line_end":1831,"column_start":18,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":338},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":55543,"byte_end":55552,"line_start":1957,"line_end":1957,"column_start":20,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":319},"to":{"krate":0,"index":175}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs","byte_start":61258,"byte_end":61270,"line_start":2172,"line_end":2172,"column_start":20,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":338},"to":{"krate":0,"index":175}}]}