{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1","program":"/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","itertools","/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"use_std\"","-C","metadata=159fdcbd13436d91","-C","extra-filename=-159fdcbd13436d91","--out-dir","/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","-L","dependency=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","--extern","either=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libeither-b9ea6e92133e197a.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libitertools-159fdcbd13436d91.rmeta"},"prelude":{"crate_id":{"name":"itertools","disambiguator":[8284181664245312689,13408076743838181652]},"crate_root":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src","external_crates":[{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3710194649008989715,14559669089861450418]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9392975149979234998,17049149762166397483]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16512841426258775062,11665789721448774207]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10630307797325716480,16523273723520132349]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3264716338318844693,12681592148182797578]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[140397795414171834,1910274434865169512]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5557669672741662647,10322216614238315513]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14339503364484872598,13531520383629478599]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14161909693946419124,17554770295131960960]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9716880057120631437,4575334529379688610]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17190292700912465587,13293574150729131089]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[16973425767318922457,5762286362994384933]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[3049460603833016674,5895625007283919048]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[8971705811930800565,4802059752817986136]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[7414259369911982492,16117941559470048194]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","num":16,"id":{"name":"either","disambiguator":[3196927647482315206,6397018130719852552]}}],"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":0,"byte_end":79440,"line_start":1,"line_end":2391,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":16,"index":161},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":1446,"byte_end":1452,"line_start":55,"line_end":55,"column_start":17,"column_end":23},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":2,"index":3392},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":1923,"byte_end":1927,"line_start":76,"line_end":76,"column_start":14,"column_end":18},"alias_span":null,"name":"__std_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":300},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2027,"byte_end":2032,"line_start":81,"line_end":81,"column_start":9,"column_end":14},"alias_span":null,"name":"Dedup","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":285},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2042,"byte_end":2049,"line_start":82,"line_end":82,"column_start":9,"column_end":16},"alias_span":null,"name":"DedupBy","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1578},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2059,"byte_end":2069,"line_start":83,"line_end":83,"column_start":9,"column_end":19},"alias_span":null,"name":"Interleave","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1592},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2079,"byte_end":2097,"line_start":84,"line_end":84,"column_start":9,"column_end":27},"alias_span":null,"name":"InterleaveShortest","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1616},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2107,"byte_end":2114,"line_start":85,"line_end":85,"column_start":9,"column_end":16},"alias_span":null,"name":"Product","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1606},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2124,"byte_end":2131,"line_start":86,"line_end":86,"column_start":9,"column_end":16},"alias_span":null,"name":"PutBack","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1631},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2141,"byte_end":2149,"line_start":87,"line_end":87,"column_start":9,"column_end":17},"alias_span":null,"name":"Batching","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":376},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2159,"byte_end":2166,"line_start":88,"line_end":88,"column_start":9,"column_end":16},"alias_span":null,"name":"MapInto","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":403},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2176,"byte_end":2186,"line_start":89,"line_end":89,"column_start":9,"column_end":19},"alias_span":null,"name":"MapResults","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":221},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2196,"byte_end":2201,"line_start":90,"line_end":90,"column_start":9,"column_end":14},"alias_span":null,"name":"Merge","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":227},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2211,"byte_end":2218,"line_start":91,"line_end":91,"column_start":9,"column_end":16},"alias_span":null,"name":"MergeBy","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":325},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2228,"byte_end":2240,"line_start":92,"line_end":92,"column_start":9,"column_end":21},"alias_span":null,"name":"TakeWhileRef","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1673},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2250,"byte_end":2259,"line_start":93,"line_end":93,"column_start":9,"column_end":18},"alias_span":null,"name":"WhileSome","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":264},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2269,"byte_end":2277,"line_start":94,"line_end":94,"column_start":9,"column_end":17},"alias_span":null,"name":"Coalesce","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1682},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2287,"byte_end":2304,"line_start":95,"line_end":95,"column_start":9,"column_end":26},"alias_span":null,"name":"TupleCombinations","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":431},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2314,"byte_end":2323,"line_start":96,"line_end":96,"column_start":9,"column_end":18},"alias_span":null,"name":"Positions","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":450},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2333,"byte_end":2339,"line_start":97,"line_end":97,"column_start":9,"column_end":15},"alias_span":null,"name":"Update","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1641},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2395,"byte_end":2399,"line_start":100,"line_end":100,"column_start":23,"column_end":27},"alias_span":null,"name":"Step","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1553},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2455,"byte_end":2467,"line_start":102,"line_end":102,"column_start":23,"column_end":35},"alias_span":null,"name":"MultiProduct","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":590},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2527,"byte_end":2539,"line_start":104,"line_end":104,"column_start":27,"column_end":39},"alias_span":null,"name":"Combinations","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1968},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2616,"byte_end":2643,"line_start":106,"line_end":106,"column_start":44,"column_end":71},"alias_span":null,"name":"CombinationsWithReplacement","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1959},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2675,"byte_end":2685,"line_start":107,"line_end":107,"column_start":31,"column_end":41},"alias_span":null,"name":"ConsTuples","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1979},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2716,"byte_end":2731,"line_start":108,"line_end":108,"column_start":30,"column_end":45},"alias_span":null,"name":"ExactlyOneError","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1989},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2754,"byte_end":2760,"line_start":109,"line_end":109,"column_start":22,"column_end":28},"alias_span":null,"name":"Format","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":661},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2762,"byte_end":2772,"line_start":109,"line_end":109,"column_start":30,"column_end":40},"alias_span":null,"name":"FormatWith","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":811},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2833,"byte_end":2843,"line_start":111,"line_end":111,"column_start":27,"column_end":37},"alias_span":null,"name":"IntoChunks","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":835},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2845,"byte_end":2850,"line_start":111,"line_end":111,"column_start":39,"column_end":44},"alias_span":null,"name":"Chunk","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":825},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2852,"byte_end":2858,"line_start":111,"line_end":111,"column_start":46,"column_end":52},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":750},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2860,"byte_end":2867,"line_start":111,"line_end":111,"column_start":54,"column_end":61},"alias_span":null,"name":"GroupBy","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":788},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2869,"byte_end":2874,"line_start":111,"line_end":111,"column_start":63,"column_end":68},"alias_span":null,"name":"Group","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":774},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2876,"byte_end":2882,"line_start":111,"line_end":111,"column_start":70,"column_end":76},"alias_span":null,"name":"Groups","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2042},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2910,"byte_end":2921,"line_start":112,"line_end":112,"column_start":26,"column_end":37},"alias_span":null,"name":"Intersperse","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":885},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2981,"byte_end":2987,"line_start":114,"line_end":114,"column_start":27,"column_end":33},"alias_span":null,"name":"KMerge","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":899},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":2989,"byte_end":2997,"line_start":114,"line_end":114,"column_start":35,"column_end":43},"alias_span":null,"name":"KMergeBy","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":949},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3024,"byte_end":3035,"line_start":115,"line_end":115,"column_start":25,"column_end":36},"alias_span":null,"name":"MergeJoinBy","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2102},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3097,"byte_end":3106,"line_start":117,"line_end":117,"column_start":29,"column_end":38},"alias_span":null,"name":"MultiPeek","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2113},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3130,"byte_end":3138,"line_start":118,"line_end":118,"column_start":23,"column_end":31},"alias_span":null,"name":"PadUsing","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1038},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3172,"byte_end":3188,"line_start":119,"line_end":119,"column_start":33,"column_end":49},"alias_span":null,"name":"PeekingTakeWhile","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1059},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3248,"byte_end":3260,"line_start":121,"line_end":121,"column_start":27,"column_end":39},"alias_span":null,"name":"Permutations","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2192},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3296,"byte_end":3310,"line_start":122,"line_end":122,"column_start":35,"column_end":49},"alias_span":null,"name":"ProcessResults","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2203},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3373,"byte_end":3381,"line_start":124,"line_end":124,"column_start":30,"column_end":38},"alias_span":null,"name":"PutBackN","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2213},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3440,"byte_end":3446,"line_start":126,"line_end":126,"column_start":26,"column_end":32},"alias_span":null,"name":"RcIter","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2219},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3469,"byte_end":3476,"line_start":127,"line_end":127,"column_start":22,"column_end":29},"alias_span":null,"name":"RepeatN","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1176},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3525,"byte_end":3535,"line_start":129,"line_end":129,"column_start":23,"column_end":33},"alias_span":null,"name":"RepeatCall","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2228},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3537,"byte_end":3543,"line_start":129,"line_end":129,"column_start":35,"column_end":41},"alias_span":null,"name":"Unfold","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2237},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3545,"byte_end":3552,"line_start":129,"line_end":129,"column_start":43,"column_end":50},"alias_span":null,"name":"Iterate","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2257},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3604,"byte_end":3607,"line_start":131,"line_end":131,"column_start":18,"column_end":21},"alias_span":null,"name":"Tee","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2264},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3634,"byte_end":3645,"line_start":132,"line_end":132,"column_start":26,"column_end":37},"alias_span":null,"name":"TupleBuffer","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2271},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3647,"byte_end":3659,"line_start":132,"line_end":132,"column_start":39,"column_end":51},"alias_span":null,"name":"TupleWindows","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1243},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3661,"byte_end":3667,"line_start":132,"line_end":132,"column_start":53,"column_end":59},"alias_span":null,"name":"Tuples","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2341},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3728,"byte_end":3734,"line_start":134,"line_end":134,"column_start":27,"column_end":33},"alias_span":null,"name":"Unique","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2328},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3736,"byte_end":3744,"line_start":134,"line_end":134,"column_start":35,"column_end":43},"alias_span":null,"name":"UniqueBy","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1320},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3774,"byte_end":3786,"line_start":135,"line_end":135,"column_start":28,"column_end":40},"alias_span":null,"name":"WithPosition","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2376},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3813,"byte_end":3818,"line_start":136,"line_end":136,"column_start":26,"column_end":31},"alias_span":null,"name":"ZipEq","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2389},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3845,"byte_end":3855,"line_start":137,"line_end":137,"column_start":26,"column_end":36},"alias_span":null,"name":"ZipLongest","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2402},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3879,"byte_end":3882,"line_start":138,"line_end":138,"column_start":23,"column_end":26},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":19}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3924,"byte_end":3925,"line_start":141,"line_end":141,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"PutBackN, PeekingTakeWhile, MergeJoinBy, KMerge, GroupBy, IntoChunks, Format, MultiProduct, Positions, WhileSome, Merge, Batching, InterleaveShortest, TupleWindows, Tee, Dedup, Unique, WithPosition, PadUsing, KMergeBy, Intersperse, FormatWith, CombinationsWithReplacement, Update, ZipLongest, MergeBy, MapInto, Tuples, Product, Coalesce, DedupBy, UniqueBy, Permutations, ExactlyOneError, Combinations, Step, TupleCombinations, ZipEq, MapResults, PutBack, Interleave, TakeWhileRef","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":574},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3948,"byte_end":3954,"line_start":142,"line_end":142,"column_start":22,"column_end":28},"alias_span":null,"name":"concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":584},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":3982,"byte_end":3993,"line_start":143,"line_end":143,"column_start":27,"column_end":38},"alias_span":null,"name":"cons_tuples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":653},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":4009,"byte_end":4018,"line_start":144,"line_end":144,"column_start":15,"column_end":24},"alias_span":null,"name":"diff_with","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":637},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":4034,"byte_end":4038,"line_start":145,"line_end":145,"column_start":15,"column_end":19},"alias_span":null,"name":"Diff","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":907},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":4090,"byte_end":4099,"line_start":147,"line_end":147,"column_start":23,"column_end":32},"alias_span":null,"name":"kmerge_by","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2077},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":4118,"byte_end":4130,"line_start":148,"line_end":148,"column_start":17,"column_end":29},"alias_span":null,"name":"MinMaxResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1023},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":4160,"byte_end":4171,"line_start":149,"line_end":149,"column_start":29,"column_end":40},"alias_span":null,"name":"PeekingNext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1103},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":4203,"byte_end":4218,"line_start":150,"line_end":150,"column_start":31,"column_end":46},"alias_span":null,"name":"process_results","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1147},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":4237,"byte_end":4245,"line_start":151,"line_end":151,"column_start":18,"column_end":26},"alias_span":null,"name":"repeat_n","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1181},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":4286,"byte_end":4297,"line_start":153,"line_end":153,"column_start":19,"column_end":30},"alias_span":null,"name":"repeat_call","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1190},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":4299,"byte_end":4305,"line_start":153,"line_end":153,"column_start":32,"column_end":38},"alias_span":null,"name":"unfold","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1213},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":4307,"byte_end":4314,"line_start":153,"line_end":153,"column_start":40,"column_end":47},"alias_span":null,"name":"iterate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2348},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":4340,"byte_end":4348,"line_start":154,"line_end":154,"column_start":24,"column_end":32},"alias_span":null,"name":"Position","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1376},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":4368,"byte_end":4376,"line_start":155,"line_end":155,"column_start":19,"column_end":27},"alias_span":null,"name":"multizip","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1773},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":4436,"byte_end":4448,"line_start":158,"line_end":158,"column_start":25,"column_end":37},"alias_span":null,"name":"EitherOrBoth","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":142},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":124963,"byte_end":124973,"line_start":16,"line_end":16,"column_start":5,"column_end":15},"alias_span":null,"name":"interleave","value":"","parent":{"krate":0,"index":521}},{"kind":"Use","ref_id":{"krate":0,"index":224},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":124979,"byte_end":124984,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"alias_span":null,"name":"merge","value":"","parent":{"krate":0,"index":521}},{"kind":"Use","ref_id":{"krate":0,"index":161},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":124990,"byte_end":124998,"line_start":18,"line_end":18,"column_start":5,"column_end":13},"alias_span":null,"name":"put_back","value":"","parent":{"krate":0,"index":521}},{"kind":"Use","ref_id":{"krate":0,"index":1112},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125056,"byte_end":125066,"line_start":21,"line_end":21,"column_start":26,"column_end":36},"alias_span":null,"name":"put_back_n","value":"","parent":{"krate":0,"index":521}},{"kind":"Use","ref_id":{"krate":0,"index":981},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125120,"byte_end":125129,"line_start":23,"line_end":23,"column_start":25,"column_end":34},"alias_span":null,"name":"multipeek","value":"","parent":{"krate":0,"index":521}},{"kind":"Use","ref_id":{"krate":0,"index":897},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125180,"byte_end":125186,"line_start":25,"line_end":25,"column_start":22,"column_end":28},"alias_span":null,"name":"kmerge","value":"","parent":{"krate":0,"index":521}},{"kind":"Use","ref_id":{"krate":0,"index":1338},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125209,"byte_end":125215,"line_start":26,"line_end":26,"column_start":22,"column_end":28},"alias_span":null,"name":"zip_eq","value":"","parent":{"krate":0,"index":521}},{"kind":"Use","ref_id":{"krate":0,"index":945},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125237,"byte_end":125250,"line_start":27,"line_end":27,"column_start":21,"column_end":34},"alias_span":null,"name":"merge_join_by","value":"","parent":{"krate":0,"index":521}},{"kind":"Use","ref_id":{"krate":0,"index":1126},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125301,"byte_end":125307,"line_start":29,"line_end":29,"column_start":22,"column_end":28},"alias_span":null,"name":"rciter","value":"","parent":{"krate":0,"index":521}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":4508,"byte_end":4509,"line_start":162,"line_end":162,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"merge, interleave, merge_join_by, zip_eq, kmerge","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":0,"byte_end":79440,"line_start":1,"line_end":2391,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":2614},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":478},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":578},{"krate":0,"index":587},{"krate":0,"index":604},{"krate":0,"index":619},{"krate":0,"index":634},{"krate":0,"index":658},{"krate":0,"index":685},{"krate":0,"index":693},{"krate":0,"index":850},{"krate":0,"index":864},{"krate":0,"index":924},{"krate":0,"index":937},{"krate":0,"index":967},{"krate":0,"index":976},{"krate":0,"index":1000},{"krate":0,"index":1019},{"krate":0,"index":1055},{"krate":0,"index":1094},{"krate":0,"index":1110},{"krate":0,"index":1122},{"krate":0,"index":1146},{"krate":0,"index":1159},{"krate":0,"index":1173},{"krate":0,"index":1216},{"krate":0,"index":1230},{"krate":0,"index":1279},{"krate":0,"index":1316},{"krate":0,"index":1336},{"krate":0,"index":1350},{"krate":0,"index":1374},{"krate":0,"index":1382},{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1541},{"krate":0,"index":1544},{"krate":0,"index":2575},{"krate":0,"index":2600},{"krate":0,"index":2597},{"krate":0,"index":2594},{"krate":0,"index":2589},{"krate":0,"index":2591},{"krate":0,"index":2583},{"krate":0,"index":2585},{"krate":0,"index":1549}],"decl_id":null,"docs":" Extra iterator adaptors, functions and macros.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"crate_name = \"itertools\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":27}},{"value":"/ Extra iterator adaptors, functions and macros.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":98,"byte_end":148,"line_start":5,"line_end":5,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":149,"byte_end":152,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ To extend [`Iterator`] with methods in this crate, import","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":153,"byte_end":214,"line_start":7,"line_end":7,"column_start":1,"column_end":62}},{"value":"/ the [`Itertools` trait](./trait.Itertools.html):","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":215,"byte_end":267,"line_start":8,"line_end":8,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":268,"byte_end":271,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":272,"byte_end":279,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":280,"byte_end":309,"line_start":11,"line_end":11,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":310,"byte_end":317,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":318,"byte_end":321,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Now, new methods like [`interleave`](./trait.Itertools.html#method.interleave)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":322,"byte_end":404,"line_start":14,"line_end":14,"column_start":1,"column_end":83}},{"value":"/ are available on all iterators:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":405,"byte_end":440,"line_start":15,"line_end":15,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":441,"byte_end":444,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":445,"byte_end":452,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":453,"byte_end":482,"line_start":18,"line_end":18,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":483,"byte_end":486,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ let it = (1..3).interleave(vec![-1, -2]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":487,"byte_end":532,"line_start":20,"line_end":20,"column_start":1,"column_end":46}},{"value":"/ itertools::assert_equal(it, vec![1, -1, 2, -2]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":533,"byte_end":585,"line_start":21,"line_end":21,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":586,"byte_end":593,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":594,"byte_end":597,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Most iterator methods are also provided as functions (with the benefit","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":598,"byte_end":672,"line_start":24,"line_end":24,"column_start":1,"column_end":75}},{"value":"/ that they convert parameters using [`IntoIterator`]):","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":673,"byte_end":730,"line_start":25,"line_end":25,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":731,"byte_end":734,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":735,"byte_end":742,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ use itertools::interleave;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":743,"byte_end":773,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":774,"byte_end":777,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ for elt in interleave(&[1, 2, 3], &[2, 3, 4]) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":778,"byte_end":829,"line_start":30,"line_end":30,"column_start":1,"column_end":52}},{"value":"/     /* loop body */","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":830,"byte_end":853,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":854,"byte_end":859,"line_start":32,"line_end":32,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":860,"byte_end":867,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":868,"byte_end":871,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Crate Features","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":872,"byte_end":893,"line_start":35,"line_end":35,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":894,"byte_end":897,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ - `use_std`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":898,"byte_end":913,"line_start":37,"line_end":37,"column_start":1,"column_end":16}},{"value":"/   - Enabled by default.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":914,"byte_end":941,"line_start":38,"line_end":38,"column_start":1,"column_end":28}},{"value":"/   - Disable to compile itertools using `#![no_std]`. This disables","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":942,"byte_end":1012,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/     any items that depend on collections (like `group_by`, `unique`,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":1013,"byte_end":1085,"line_start":40,"line_end":40,"column_start":1,"column_end":73}},{"value":"/     `kmerge`, `join` and many more).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":1086,"byte_end":1126,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":1127,"byte_end":1130,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ## Rust Version","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":1131,"byte_end":1150,"line_start":43,"line_end":43,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":1151,"byte_end":1154,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This version of itertools requires Rust 1.24 or later.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":1155,"byte_end":1213,"line_start":45,"line_end":45,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":1214,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ [`Iterator`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":1218,"byte_end":1290,"line_start":47,"line_end":47,"column_start":1,"column_end":73}}]},{"kind":"Mod","id":{"krate":0,"index":19},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":1985,"byte_end":1992,"line_start":79,"line_end":79,"column_start":9,"column_end":16},"name":"structs","qualname":"::structs","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82}],"decl_id":null,"docs":" The concrete iterator types.\n","sig":null,"attributes":[{"value":"/ The concrete iterator types.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":1944,"byte_end":1976,"line_start":78,"line_end":78,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1553},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/multi_product.rs","byte_start":113109,"byte_end":113121,"line_start":15,"line_end":15,"column_start":12,"column_end":24},"name":"MultiProduct","qualname":"::adaptors::multi_product::MultiProduct","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n multiple iterators of type `I`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/multi_product.rs","byte_start":112749,"byte_end":112816,"line_start":7,"line_end":7,"column_start":1,"column_end":68}},{"value":"/ multiple iterators of type `I`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/multi_product.rs","byte_start":112817,"byte_end":112852,"line_start":8,"line_end":8,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/multi_product.rs","byte_start":112853,"byte_end":112856,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ An iterator element type is `Vec<I>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/multi_product.rs","byte_start":112857,"byte_end":112898,"line_start":10,"line_end":10,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/multi_product.rs","byte_start":112899,"byte_end":112902,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ See [`.multi_cartesian_product()`](../trait.Itertools.html#method.multi_cartesian_product)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/multi_product.rs","byte_start":112903,"byte_end":112997,"line_start":12,"line_end":12,"column_start":1,"column_end":95}},{"value":"/ for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/multi_product.rs","byte_start":112998,"byte_end":113023,"line_start":13,"line_end":13,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/multi_product.rs","byte_start":113024,"byte_end":113097,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1578},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":80842,"byte_end":80852,"line_start":35,"line_end":35,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::adaptors::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":1581},{"krate":0,"index":1582},{"krate":0,"index":1583}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from two iterators until both\n run out.","sig":null,"attributes":[{"value":"/ An iterator adaptor that alternates elements from two iterators until both","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":80512,"byte_end":80590,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ run out.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":80591,"byte_end":80603,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":80604,"byte_end":80607,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":80608,"byte_end":80637,"line_start":30,"line_end":30,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":80638,"byte_end":80641,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ See [`.interleave()`](../trait.Itertools.html#method.interleave) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":80642,"byte_end":80732,"line_start":32,"line_end":32,"column_start":1,"column_end":91}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":80757,"byte_end":80830,"line_start":34,"line_end":34,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":142},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":81182,"byte_end":81192,"line_start":52,"line_end":52,"column_start":8,"column_end":18},"name":"interleave","qualname":"::adaptors::interleave","value":"pub fn interleave<I, J>(I, J)\n-> Interleave<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>\nwhere I: IntoIterator, J: IntoIterator<Item = I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that interleaves elements in `i` and `j`.","sig":null,"attributes":[{"value":"/ Create an iterator that interleaves elements in `i` and `j`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":80912,"byte_end":80976,"line_start":41,"line_end":41,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":80977,"byte_end":80980,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.interleave(j)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":80981,"byte_end":81037,"line_start":43,"line_end":43,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":81038,"byte_end":81041,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":81042,"byte_end":81049,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ use itertools::interleave;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":81050,"byte_end":81080,"line_start":46,"line_end":46,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":81081,"byte_end":81084,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ for elt in interleave(&[1, 2, 3], &[2, 3, 4]) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":81085,"byte_end":81136,"line_start":48,"line_end":48,"column_start":1,"column_end":52}},{"value":"/     /* loop body */","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":81137,"byte_end":81160,"line_start":49,"line_end":49,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":81161,"byte_end":81166,"line_start":50,"line_end":50,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":81167,"byte_end":81174,"line_start":51,"line_end":51,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1592},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":82457,"byte_end":82475,"line_start":98,"line_end":98,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::adaptors::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":1595},{"krate":0,"index":1596},{"krate":0,"index":1597}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from the two iterators until\n one of them runs out.","sig":null,"attributes":[{"value":"/ An iterator adaptor that alternates elements from the two iterators until","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":82093,"byte_end":82170,"line_start":89,"line_end":89,"column_start":1,"column_end":78}},{"value":"/ one of them runs out.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":82171,"byte_end":82196,"line_start":90,"line_end":90,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":82197,"byte_end":82200,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":82201,"byte_end":82230,"line_start":92,"line_end":92,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":82231,"byte_end":82234,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ See [`.interleave_shortest()`](../trait.Itertools.html#method.interleave_shortest)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":82235,"byte_end":82321,"line_start":94,"line_end":94,"column_start":1,"column_end":87}},{"value":"/ for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":82322,"byte_end":82347,"line_start":95,"line_end":95,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":82372,"byte_end":82445,"line_start":97,"line_end":97,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1606},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":84877,"byte_end":84884,"line_start":187,"line_end":187,"column_start":12,"column_end":19},"name":"PutBack","qualname":"::adaptors::PutBack","value":"PutBack {  }","parent":null,"children":[{"krate":0,"index":1608},{"krate":0,"index":1609}],"decl_id":null,"docs":" An iterator adaptor that allows putting back a single\n item to the front of the iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows putting back a single","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":84725,"byte_end":84782,"line_start":183,"line_end":183,"column_start":1,"column_end":58}},{"value":"/ item to the front of the iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":84783,"byte_end":84821,"line_start":184,"line_end":184,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":84822,"byte_end":84825,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":84826,"byte_end":84865,"line_start":186,"line_end":186,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":161},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":85021,"byte_end":85029,"line_start":195,"line_end":195,"column_start":8,"column_end":16},"name":"put_back","qualname":"::adaptors::put_back","value":"pub fn put_back<I>(I) -> PutBack<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back a single item\n","sig":null,"attributes":[{"value":"/ Create an iterator where you can put back a single item","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":84954,"byte_end":85013,"line_start":194,"line_end":194,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":85278,"byte_end":85288,"line_start":208,"line_end":208,"column_start":12,"column_end":22},"name":"with_value","qualname":"<PutBack<I>>::with_value","value":"pub fn with_value(Self, I::Item) -> Self","parent":null,"children":[],"decl_id":null,"docs":" put back value `value` (builder method)\n","sig":null,"attributes":[{"value":"/ put back value `value` (builder method)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":85223,"byte_end":85266,"line_start":207,"line_end":207,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":85444,"byte_end":85454,"line_start":215,"line_end":215,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<PutBack<I>>::into_parts","value":"pub fn into_parts(Self) -> (Option<I::Item>, I)","parent":null,"children":[],"decl_id":null,"docs":" Split the `PutBack` into its parts.\n","sig":null,"attributes":[{"value":"/ Split the `PutBack` into its parts.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":85379,"byte_end":85418,"line_start":213,"line_end":213,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":85423,"byte_end":85432,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":85719,"byte_end":85727,"line_start":224,"line_end":224,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBack<I>>::put_back","value":"pub fn put_back(&mut Self, I::Item)","parent":null,"children":[],"decl_id":null,"docs":" Put back a single value to the front of the iterator.","sig":null,"attributes":[{"value":"/ Put back a single value to the front of the iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":85557,"byte_end":85614,"line_start":220,"line_end":220,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":85619,"byte_end":85622,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ If a value is already in the put back slot, it is overwritten.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":85627,"byte_end":85693,"line_start":222,"line_end":222,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":85698,"byte_end":85707,"line_start":223,"line_end":223,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1616},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":87188,"byte_end":87195,"line_start":276,"line_end":276,"column_start":12,"column_end":19},"name":"Product","qualname":"::adaptors::Product","value":"Product {  }","parent":null,"children":[{"krate":0,"index":1619},{"krate":0,"index":1620},{"krate":0,"index":1621},{"krate":0,"index":1622}],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `I` and `J`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":86820,"byte_end":86887,"line_start":269,"line_end":269,"column_start":1,"column_end":68}},{"value":"/ the element sets of two iterators `I` and `J`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":86888,"byte_end":86938,"line_start":270,"line_end":270,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":86939,"byte_end":86942,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `(I::Item, J::Item)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":86943,"byte_end":86993,"line_start":272,"line_end":272,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":86994,"byte_end":86997,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ See [`.cartesian_product()`](../trait.Itertools.html#method.cartesian_product) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":86998,"byte_end":87102,"line_start":274,"line_end":274,"column_start":1,"column_end":105}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":87103,"byte_end":87176,"line_start":275,"line_end":275,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1631},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":90035,"byte_end":90043,"line_start":372,"line_end":372,"column_start":12,"column_end":20},"name":"Batching","qualname":"::adaptors::Batching","value":"Batching {  }","parent":null,"children":[{"krate":0,"index":1634},{"krate":0,"index":1635}],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure receives a reference to the iterator\n and may pick off as many elements as it likes, to produce the next iterator element.","sig":null,"attributes":[{"value":"/ A “meta iterator adaptor”. Its closure receives a reference to the iterator","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":89587,"byte_end":89670,"line_start":364,"line_end":364,"column_start":1,"column_end":80}},{"value":"/ and may pick off as many elements as it likes, to produce the next iterator element.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":89671,"byte_end":89759,"line_start":365,"line_end":365,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":89760,"byte_end":89763,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is *X*, if the return type of `F` is *Option\\<X\\>*.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":89764,"byte_end":89841,"line_start":367,"line_end":367,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":89842,"byte_end":89845,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ See [`.batching()`](../trait.Itertools.html#method.batching) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":89846,"byte_end":89932,"line_start":369,"line_end":369,"column_start":1,"column_end":87}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":89950,"byte_end":90023,"line_start":371,"line_end":371,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1641},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":91167,"byte_end":91171,"line_start":414,"line_end":414,"column_start":12,"column_end":16},"name":"Step","qualname":"::adaptors::Step","value":"Step {  }","parent":null,"children":[{"krate":0,"index":1643},{"krate":0,"index":1644}],"decl_id":null,"docs":" An iterator adaptor that steps a number elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"/ An iterator adaptor that steps a number elements in the base iterator","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":90672,"byte_end":90745,"line_start":403,"line_end":403,"column_start":1,"column_end":74}},{"value":"/ for each iteration.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":90746,"byte_end":90769,"line_start":404,"line_end":404,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":90770,"byte_end":90773,"line_start":405,"line_end":405,"column_start":1,"column_end":4}},{"value":"/ The iterator steps by yielding the next element from the base iterator,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":90774,"byte_end":90849,"line_start":406,"line_end":406,"column_start":1,"column_end":76}},{"value":"/ then skipping forward *n-1* elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":90850,"byte_end":90891,"line_start":407,"line_end":407,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":90892,"byte_end":90895,"line_start":408,"line_end":408,"column_start":1,"column_end":4}},{"value":"/ See [`.step()`](../trait.Itertools.html#method.step) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":90896,"byte_end":90974,"line_start":409,"line_end":409,"column_start":1,"column_end":79}},{"value":"deprecated(note = \"Use std .step_by() instead\", since = \"0.8\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":90975,"byte_end":91036,"line_start":410,"line_end":410,"column_start":1,"column_end":62}},{"value":"allow(deprecated)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":91037,"byte_end":91057,"line_start":411,"line_end":411,"column_start":1,"column_end":21}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":91082,"byte_end":91155,"line_start":413,"line_end":413,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":215},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92189,"byte_end":92203,"line_start":466,"line_end":466,"column_start":11,"column_end":25},"name":"MergePredicate","qualname":"::adaptors::MergePredicate","value":"MergePredicate<T>","parent":null,"children":[{"krate":0,"index":217}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92216,"byte_end":92226,"line_start":467,"line_end":467,"column_start":8,"column_end":18},"name":"merge_pred","qualname":"::adaptors::MergePredicate::merge_pred","value":"pub fn merge_pred(&mut Self, &T, &T) -> bool","parent":{"krate":0,"index":215},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1651},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92292,"byte_end":92300,"line_start":471,"line_end":471,"column_start":12,"column_end":20},"name":"MergeLte","qualname":"::adaptors::MergeLte","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":221},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92800,"byte_end":92805,"line_start":486,"line_end":486,"column_start":10,"column_end":15},"name":"Merge","qualname":"::adaptors::Merge","value":"MergeBy<I, J, MergeLte>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges the two base iterators in ascending order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92433,"byte_end":92511,"line_start":479,"line_end":479,"column_start":1,"column_end":79}},{"value":"/ If both base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92512,"byte_end":92584,"line_start":480,"line_end":480,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92585,"byte_end":92588,"line_start":481,"line_end":481,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92589,"byte_end":92628,"line_start":482,"line_end":482,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92629,"byte_end":92632,"line_start":483,"line_end":483,"column_start":1,"column_end":4}},{"value":"/ See [`.merge()`](../trait.Itertools.html#method.merge_by) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92633,"byte_end":92716,"line_start":484,"line_end":484,"column_start":1,"column_end":84}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92717,"byte_end":92790,"line_start":485,"line_end":485,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":224},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":93090,"byte_end":93095,"line_start":499,"line_end":499,"column_start":8,"column_end":13},"name":"merge","qualname":"::adaptors::merge","value":"pub fn merge<I, J>(I, J)\n-> Merge<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter> where\nI: IntoIterator, J: IntoIterator<Item = I::Item>, I::Item: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements in `i` and `j`.","sig":null,"attributes":[{"value":"/ Create an iterator that merges elements in `i` and `j`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92840,"byte_end":92899,"line_start":488,"line_end":488,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92900,"byte_end":92903,"line_start":489,"line_end":489,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.merge(j)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92904,"byte_end":92955,"line_start":490,"line_end":490,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92956,"byte_end":92959,"line_start":491,"line_end":491,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92960,"byte_end":92967,"line_start":492,"line_end":492,"column_start":1,"column_end":8}},{"value":"/ use itertools::merge;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92968,"byte_end":92993,"line_start":493,"line_end":493,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92994,"byte_end":92997,"line_start":494,"line_end":494,"column_start":1,"column_end":4}},{"value":"/ for elt in merge(&[1, 2, 3], &[2, 3, 4]) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92998,"byte_end":93044,"line_start":495,"line_end":495,"column_start":1,"column_end":47}},{"value":"/     /* loop body */","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":93045,"byte_end":93068,"line_start":496,"line_end":496,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":93069,"byte_end":93074,"line_start":497,"line_end":497,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":93075,"byte_end":93082,"line_start":498,"line_end":498,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":227},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":93695,"byte_end":93702,"line_start":514,"line_end":514,"column_start":12,"column_end":19},"name":"MergeBy","qualname":"::adaptors::MergeBy","value":"MergeBy {  }","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges the two base iterators in ascending order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":93323,"byte_end":93401,"line_start":507,"line_end":507,"column_start":1,"column_end":79}},{"value":"/ If both base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":93402,"byte_end":93474,"line_start":508,"line_end":508,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":93475,"byte_end":93478,"line_start":509,"line_end":509,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":93479,"byte_end":93518,"line_start":510,"line_end":510,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":93519,"byte_end":93522,"line_start":511,"line_end":511,"column_start":1,"column_end":4}},{"value":"/ See [`.merge_by()`](../trait.Itertools.html#method.merge_by) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":93523,"byte_end":93609,"line_start":512,"line_end":512,"column_start":1,"column_end":87}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":93610,"byte_end":93683,"line_start":513,"line_end":513,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":264},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":97132,"byte_end":97140,"line_start":642,"line_end":642,"column_start":12,"column_end":20},"name":"Coalesce","qualname":"::adaptors::Coalesce","value":"Coalesce {  }","parent":null,"children":[{"krate":0,"index":267},{"krate":0,"index":268}],"decl_id":null,"docs":" An iterator adaptor that may join together adjacent elements.","sig":null,"attributes":[{"value":"/ An iterator adaptor that may join together adjacent elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":96890,"byte_end":96955,"line_start":638,"line_end":638,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":96956,"byte_end":96959,"line_start":639,"line_end":639,"column_start":1,"column_end":4}},{"value":"/ See [`.coalesce()`](../trait.Itertools.html#method.coalesce) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":96960,"byte_end":97046,"line_start":640,"line_end":640,"column_start":1,"column_end":87}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":97047,"byte_end":97120,"line_start":641,"line_end":641,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":285},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":98481,"byte_end":98488,"line_start":697,"line_end":697,"column_start":12,"column_end":19},"name":"DedupBy","qualname":"::adaptors::DedupBy","value":"DedupBy {  }","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":289}],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates, determining equality using a comparison function.","sig":null,"attributes":[{"value":"/ An iterator adaptor that removes repeated duplicates, determining equality using a comparison function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":98143,"byte_end":98250,"line_start":693,"line_end":693,"column_start":1,"column_end":108}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":98251,"byte_end":98254,"line_start":694,"line_end":694,"column_start":1,"column_end":4}},{"value":"/ See [`.dedup_by()`](../trait.Itertools.html#method.dedup_by) or [`.dedup()`](../trait.Itertools.html#method.dedup) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":98255,"byte_end":98395,"line_start":695,"line_end":695,"column_start":1,"column_end":141}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":98396,"byte_end":98469,"line_start":696,"line_end":696,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":290},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":98584,"byte_end":98598,"line_start":704,"line_end":704,"column_start":11,"column_end":25},"name":"DedupPredicate","qualname":"::adaptors::DedupPredicate","value":"DedupPredicate<T>","parent":null,"children":[{"krate":0,"index":292}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":98669,"byte_end":98679,"line_start":705,"line_end":705,"column_start":8,"column_end":18},"name":"dedup_pair","qualname":"::adaptors::DedupPredicate::dedup_pair","value":"pub fn dedup_pair(&mut Self, &T, &T) -> bool","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1667},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":98745,"byte_end":98752,"line_start":709,"line_end":709,"column_start":12,"column_end":19},"name":"DedupEq","qualname":"::adaptors::DedupEq","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":300},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":99172,"byte_end":99177,"line_start":726,"line_end":726,"column_start":10,"column_end":15},"name":"Dedup","qualname":"::adaptors::Dedup","value":"DedupBy<I, DedupEq>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates.","sig":null,"attributes":[{"value":"/ An iterator adaptor that removes repeated duplicates.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":99020,"byte_end":99077,"line_start":723,"line_end":723,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":99078,"byte_end":99081,"line_start":724,"line_end":724,"column_start":1,"column_end":4}},{"value":"/ See [`.dedup()`](../trait.Itertools.html#method.dedup) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":99082,"byte_end":99162,"line_start":725,"line_end":725,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":325},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":101286,"byte_end":101298,"line_start":806,"line_end":806,"column_start":12,"column_end":24},"name":"TakeWhileRef","qualname":"::adaptors::TakeWhileRef","value":"TakeWhileRef {  }","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":330}],"decl_id":null,"docs":" An iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate returns `true`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that borrows from a `Clone`-able iterator","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":100966,"byte_end":101031,"line_start":801,"line_end":801,"column_start":1,"column_end":66}},{"value":"/ to only pick off elements while the predicate returns `true`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":101032,"byte_end":101097,"line_start":802,"line_end":802,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":101098,"byte_end":101101,"line_start":803,"line_end":803,"column_start":1,"column_end":4}},{"value":"/ See [`.take_while_ref()`](../trait.Itertools.html#method.take_while_ref) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":101102,"byte_end":101200,"line_start":804,"line_end":804,"column_start":1,"column_end":99}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":101201,"byte_end":101274,"line_start":805,"line_end":805,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1673},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":102671,"byte_end":102680,"line_start":857,"line_end":857,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::adaptors::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":1675}],"decl_id":null,"docs":" An iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[{"value":"/ An iterator adaptor that filters `Option<A>` iterator elements","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":102339,"byte_end":102405,"line_start":851,"line_end":851,"column_start":1,"column_end":67}},{"value":"/ and produces `A`. Stops on the first `None` encountered.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":102406,"byte_end":102466,"line_start":852,"line_end":852,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":102467,"byte_end":102470,"line_start":853,"line_end":853,"column_start":1,"column_end":4}},{"value":"/ See [`.while_some()`](../trait.Itertools.html#method.while_some) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":102471,"byte_end":102561,"line_start":854,"line_end":854,"column_start":1,"column_end":91}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":102586,"byte_end":102659,"line_start":856,"line_end":856,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1682},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":103531,"byte_end":103548,"line_start":891,"line_end":891,"column_start":12,"column_end":29},"name":"TupleCombinations","qualname":"::adaptors::TupleCombinations","value":"TupleCombinations {  }","parent":null,"children":[{"krate":0,"index":1685},{"krate":0,"index":1686},{"krate":0,"index":1687}],"decl_id":null,"docs":" An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples\n of a specific size.","sig":null,"attributes":[{"value":"/ An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":103190,"byte_end":103289,"line_start":884,"line_end":884,"column_start":1,"column_end":100}},{"value":"/ of a specific size.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":103290,"byte_end":103313,"line_start":885,"line_end":885,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":103314,"byte_end":103317,"line_start":886,"line_end":886,"column_start":1,"column_end":4}},{"value":"/ See [`.tuple_combinations()`](../trait.Itertools.html#method.tuple_combinations) for more","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":103318,"byte_end":103411,"line_start":887,"line_end":887,"column_start":1,"column_end":94}},{"value":"/ information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":103412,"byte_end":103428,"line_start":888,"line_end":888,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":103446,"byte_end":103519,"line_start":890,"line_end":890,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":353},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":103699,"byte_end":103713,"line_start":900,"line_end":900,"column_start":11,"column_end":25},"name":"HasCombination","qualname":"::adaptors::HasCombination","value":"HasCombination<I>: Sized","parent":null,"children":[{"krate":0,"index":355}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":355},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":103735,"byte_end":103746,"line_start":901,"line_end":901,"column_start":10,"column_end":21},"name":"Combination","qualname":"::adaptors::HasCombination::Combination","value":"type Combination: From<I> + Iterator<Item = Self>;","parent":{"krate":0,"index":353},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1692},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":104367,"byte_end":104384,"line_start":929,"line_end":929,"column_start":12,"column_end":29},"name":"Tuple1Combination","qualname":"::adaptors::Tuple1Combination","value":"Tuple1Combination {  }","parent":null,"children":[{"krate":0,"index":1694}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1715},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":106605,"byte_end":106622,"line_start":1010,"line_end":1010,"column_start":25,"column_end":42},"name":"Tuple2Combination","qualname":"::adaptors::Tuple2Combination","value":"Tuple2Combination {  }","parent":null,"children":[{"krate":0,"index":1717},{"krate":0,"index":1718},{"krate":0,"index":1719}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1740},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":106681,"byte_end":106698,"line_start":1011,"line_end":1011,"column_start":25,"column_end":42},"name":"Tuple3Combination","qualname":"::adaptors::Tuple3Combination","value":"Tuple3Combination {  }","parent":null,"children":[{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1744}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1765},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":106762,"byte_end":106779,"line_start":1012,"line_end":1012,"column_start":25,"column_end":42},"name":"Tuple4Combination","qualname":"::adaptors::Tuple4Combination","value":"Tuple4Combination {  }","parent":null,"children":[{"krate":0,"index":1767},{"krate":0,"index":1768},{"krate":0,"index":1769}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":376},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":107068,"byte_end":107075,"line_start":1018,"line_end":1018,"column_start":12,"column_end":19},"name":"MapInto","qualname":"::adaptors::MapInto","value":"MapInto {  }","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380}],"decl_id":null,"docs":" An iterator adapter to apply `Into` conversion to each element.","sig":null,"attributes":[{"value":"/ An iterator adapter to apply `Into` conversion to each element.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":106824,"byte_end":106891,"line_start":1014,"line_end":1014,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":106892,"byte_end":106895,"line_start":1015,"line_end":1015,"column_start":1,"column_end":4}},{"value":"/ See [`.map_into()`](../trait.Itertools.html#method.map_into) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":106896,"byte_end":106982,"line_start":1016,"line_end":1016,"column_start":1,"column_end":87}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":106983,"byte_end":107056,"line_start":1017,"line_end":1017,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":403},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":108436,"byte_end":108446,"line_start":1075,"line_end":1075,"column_start":12,"column_end":22},"name":"MapResults","qualname":"::adaptors::MapResults","value":"MapResults {  }","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407}],"decl_id":null,"docs":" An iterator adapter to apply a transformation within a nested `Result`.","sig":null,"attributes":[{"value":"/ An iterator adapter to apply a transformation within a nested `Result`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":108178,"byte_end":108253,"line_start":1071,"line_end":1071,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":108254,"byte_end":108257,"line_start":1072,"line_end":1072,"column_start":1,"column_end":4}},{"value":"/ See [`.map_results()`](../trait.Itertools.html#method.map_results) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":108258,"byte_end":108350,"line_start":1073,"line_end":1073,"column_start":1,"column_end":93}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":108351,"byte_end":108424,"line_start":1074,"line_end":1074,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":431},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":109737,"byte_end":109746,"line_start":1124,"line_end":1124,"column_start":12,"column_end":21},"name":"Positions","qualname":"::adaptors::Positions","value":"Positions {  }","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436}],"decl_id":null,"docs":" An iterator adapter to get the positions of each element that matches a predicate.","sig":null,"attributes":[{"value":"/ An iterator adapter to get the positions of each element that matches a predicate.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":109472,"byte_end":109558,"line_start":1120,"line_end":1120,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":109559,"byte_end":109562,"line_start":1121,"line_end":1121,"column_start":1,"column_end":4}},{"value":"/ See [`.positions()`](../trait.Itertools.html#method.positions) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":109563,"byte_end":109651,"line_start":1122,"line_end":1122,"column_start":1,"column_end":89}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":109652,"byte_end":109725,"line_start":1123,"line_end":1123,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":450},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":111162,"byte_end":111168,"line_start":1182,"line_end":1182,"column_start":12,"column_end":18},"name":"Update","qualname":"::adaptors::Update","value":"Update {  }","parent":null,"children":[{"krate":0,"index":453},{"krate":0,"index":454}],"decl_id":null,"docs":" An iterator adapter to apply a mutating function to each element before yielding it.","sig":null,"attributes":[{"value":"/ An iterator adapter to apply a mutating function to each element before yielding it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":110901,"byte_end":110989,"line_start":1178,"line_end":1178,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":110990,"byte_end":110993,"line_start":1179,"line_end":1179,"column_start":1,"column_end":4}},{"value":"/ See [`.update()`](../trait.Itertools.html#method.update) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":110994,"byte_end":111076,"line_start":1180,"line_end":1180,"column_start":1,"column_end":83}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":111077,"byte_end":111150,"line_start":1181,"line_end":1181,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1776},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119117,"byte_end":119121,"line_start":9,"line_end":9,"column_start":5,"column_end":9},"name":"Both","qualname":"::either_or_both::EitherOrBoth::Both","value":"EitherOrBoth::Both(A, B)","parent":{"krate":0,"index":1773},"children":[],"decl_id":null,"docs":" Both values are present.\n","sig":null,"attributes":[{"value":"/ Both values are present.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119084,"byte_end":119112,"line_start":8,"line_end":8,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1780},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119185,"byte_end":119189,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"name":"Left","qualname":"::either_or_both::EitherOrBoth::Left","value":"EitherOrBoth::Left(A)","parent":{"krate":0,"index":1773},"children":[],"decl_id":null,"docs":" Only the left value of type `A` is present.\n","sig":null,"attributes":[{"value":"/ Only the left value of type `A` is present.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119133,"byte_end":119180,"line_start":10,"line_end":10,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1783},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119251,"byte_end":119256,"line_start":13,"line_end":13,"column_start":5,"column_end":10},"name":"Right","qualname":"::either_or_both::EitherOrBoth::Right","value":"EitherOrBoth::Right(B)","parent":{"krate":0,"index":1773},"children":[],"decl_id":null,"docs":" Only the right value of type `B` is present.\n","sig":null,"attributes":[{"value":"/ Only the right value of type `B` is present.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119198,"byte_end":119246,"line_start":12,"line_end":12,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":1773},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119059,"byte_end":119071,"line_start":7,"line_end":7,"column_start":10,"column_end":22},"name":"EitherOrBoth","qualname":"::either_or_both::EitherOrBoth","value":"pub enum EitherOrBoth<A, B> {\n\n    /// Both values are present.\n    Both(A, B),\n\n    /// Only the left value of type `A` is present.\n    Left(A),\n\n    /// Only the right value of type `B` is present.\n    Right(B),\n}","parent":null,"children":[{"krate":0,"index":1776},{"krate":0,"index":1780},{"krate":0,"index":1783}],"decl_id":null,"docs":" Value that either holds a single A or B, or both.\n","sig":null,"attributes":[{"value":"/ Value that either holds a single A or B, or both.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":118957,"byte_end":119010,"line_start":5,"line_end":5,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119375,"byte_end":119383,"line_start":18,"line_end":18,"column_start":12,"column_end":20},"name":"has_left","qualname":"<EitherOrBoth<A, B>>::has_left","value":"pub fn has_left(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If `Left`, or `Both`, return true, otherwise, return false.\n","sig":null,"attributes":[{"value":"/ If `Left`, or `Both`, return true, otherwise, return false.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119300,"byte_end":119363,"line_start":17,"line_end":17,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119527,"byte_end":119536,"line_start":23,"line_end":23,"column_start":12,"column_end":21},"name":"has_right","qualname":"<EitherOrBoth<A, B>>::has_right","value":"pub fn has_right(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If `Right`, or `Both`, return true, otherwise, return false.\n","sig":null,"attributes":[{"value":"/ If `Right`, or `Both`, return true, otherwise, return false.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119451,"byte_end":119515,"line_start":22,"line_end":22,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119709,"byte_end":119716,"line_start":29,"line_end":29,"column_start":12,"column_end":19},"name":"is_left","qualname":"<EitherOrBoth<A, B>>::is_left","value":"pub fn is_left(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If Left, return true otherwise, return false.\n Exclusive version of [`has_left`].\n","sig":null,"attributes":[{"value":"/ If Left, return true otherwise, return false.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119605,"byte_end":119654,"line_start":27,"line_end":27,"column_start":5,"column_end":54}},{"value":"/ Exclusive version of [`has_left`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119659,"byte_end":119697,"line_start":28,"line_end":28,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119936,"byte_end":119944,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"is_right","qualname":"<EitherOrBoth<A, B>>::is_right","value":"pub fn is_right(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If Right, return true otherwise, return false.\n Exclusive version of [`has_right`].\n","sig":null,"attributes":[{"value":"/ If Right, return true otherwise, return false.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119830,"byte_end":119880,"line_start":36,"line_end":36,"column_start":5,"column_end":55}},{"value":"/ Exclusive version of [`has_right`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119885,"byte_end":119924,"line_start":37,"line_end":37,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":120177,"byte_end":120184,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"is_both","qualname":"<EitherOrBoth<A, B>>::is_both","value":"pub fn is_both(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If Right, return true otherwise, return false.\n Equivalent to `self.as_ref().both().is_some()`.\n","sig":null,"attributes":[{"value":"/ If Right, return true otherwise, return false.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":120059,"byte_end":120109,"line_start":45,"line_end":45,"column_start":5,"column_end":55}},{"value":"/ Equivalent to `self.as_ref().both().is_some()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":120114,"byte_end":120165,"line_start":46,"line_end":46,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":120350,"byte_end":120354,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"left","qualname":"<EitherOrBoth<A, B>>::left","value":"pub fn left(Self) -> Option<A>","parent":null,"children":[],"decl_id":null,"docs":" If `Left`, or `Both`, return `Some` with the left value, otherwise, return `None`.\n","sig":null,"attributes":[{"value":"/ If `Left`, or `Both`, return `Some` with the left value, otherwise, return `None`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":120252,"byte_end":120338,"line_start":51,"line_end":51,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":120595,"byte_end":120600,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"right","qualname":"<EitherOrBoth<A, B>>::right","value":"pub fn right(Self) -> Option<B>","parent":null,"children":[],"decl_id":null,"docs":" If `Right`, or `Both`, return `Some` with the right value, otherwise, return `None`.\n","sig":null,"attributes":[{"value":"/ If `Right`, or `Both`, return `Some` with the right value, otherwise, return `None`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":120495,"byte_end":120583,"line_start":59,"line_end":59,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":120816,"byte_end":120820,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"both","qualname":"<EitherOrBoth<A, B>>::both","value":"pub fn both(Self) -> Option<(A, B)>","parent":null,"children":[],"decl_id":null,"docs":" If Both, return `Some` tuple containing left and right.\n","sig":null,"attributes":[{"value":"/ If Both, return `Some` tuple containing left and right.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":120745,"byte_end":120804,"line_start":67,"line_end":67,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":121030,"byte_end":121036,"line_start":76,"line_end":76,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<EitherOrBoth<A, B>>::as_ref","value":"pub fn as_ref(&Self) -> EitherOrBoth<&A, &B>","parent":null,"children":[],"decl_id":null,"docs":" Converts from `&EitherOrBoth<A, B>` to `EitherOrBoth<&A, &B>`.\n","sig":null,"attributes":[{"value":"/ Converts from `&EitherOrBoth<A, B>` to `EitherOrBoth<&A, &B>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":120952,"byte_end":121018,"line_start":75,"line_end":75,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":121351,"byte_end":121357,"line_start":85,"line_end":85,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<EitherOrBoth<A, B>>::as_mut","value":"pub fn as_mut(&mut Self) -> EitherOrBoth<&mut A, &mut B>","parent":null,"children":[],"decl_id":null,"docs":" Converts from `&mut EitherOrBoth<A, B>` to `EitherOrBoth<&mut A, &mut B>`.\n","sig":null,"attributes":[{"value":"/ Converts from `&mut EitherOrBoth<A, B>` to `EitherOrBoth<&mut A, &mut B>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":121261,"byte_end":121339,"line_start":84,"line_end":84,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":121679,"byte_end":121683,"line_start":94,"line_end":94,"column_start":12,"column_end":16},"name":"flip","qualname":"<EitherOrBoth<A, B>>::flip","value":"pub fn flip(Self) -> EitherOrBoth<B, A>","parent":null,"children":[],"decl_id":null,"docs":" Convert `EitherOrBoth<A, B>` to `EitherOrBoth<B, A>`.\n","sig":null,"attributes":[{"value":"/ Convert `EitherOrBoth<A, B>` to `EitherOrBoth<B, A>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":121610,"byte_end":121667,"line_start":93,"line_end":93,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":122031,"byte_end":122039,"line_start":104,"line_end":104,"column_start":12,"column_end":20},"name":"map_left","qualname":"<EitherOrBoth<A, B>>::map_left","value":"pub fn map_left<F, M>(Self, F) -> EitherOrBoth<M, B> where F: FnOnce(A) -> M","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `a` in `Left(a)` or `Both(a, b)` variants. If it is\n present rewrapping the result in `self`'s original variant.\n","sig":null,"attributes":[{"value":"/ Apply the function `f` on the value `a` in `Left(a)` or `Both(a, b)` variants. If it is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":121860,"byte_end":121951,"line_start":102,"line_end":102,"column_start":5,"column_end":96}},{"value":"/ present rewrapping the result in `self`'s original variant.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":121956,"byte_end":122019,"line_start":103,"line_end":103,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":122447,"byte_end":122456,"line_start":117,"line_end":117,"column_start":12,"column_end":21},"name":"map_right","qualname":"<EitherOrBoth<A, B>>::map_right","value":"pub fn map_right<F, M>(Self, F) -> EitherOrBoth<A, M> where F: FnOnce(B) -> M","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `b` in `Right(b)` or `Both(a, b)` variants.\n If it is present rewrapping the result in `self`'s original variant.\n","sig":null,"attributes":[{"value":"/ Apply the function `f` on the value `b` in `Right(b)` or `Both(a, b)` variants.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":122275,"byte_end":122358,"line_start":115,"line_end":115,"column_start":5,"column_end":88}},{"value":"/ If it is present rewrapping the result in `self`'s original variant.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":122363,"byte_end":122435,"line_start":116,"line_end":116,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":122903,"byte_end":122910,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"name":"map_any","qualname":"<EitherOrBoth<A, B>>::map_any","value":"pub fn map_any<F, L, G, R>(Self, F, G) -> EitherOrBoth<L, R> where\nF: FnOnce(A) -> L, G: FnOnce(B) -> R","parent":null,"children":[],"decl_id":null,"docs":" Apply the functions `f` and `g` on the value `a` and `b` respectively;\n found in `Left(a)`, `Right(b)`, or `Both(a, b)` variants.\n The Result is rewrapped `self`'s original variant.\n","sig":null,"attributes":[{"value":"/ Apply the functions `f` and `g` on the value `a` and `b` respectively;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":122692,"byte_end":122766,"line_start":128,"line_end":128,"column_start":5,"column_end":79}},{"value":"/ found in `Left(a)`, `Right(b)`, or `Both(a, b)` variants.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":122771,"byte_end":122832,"line_start":129,"line_end":129,"column_start":5,"column_end":66}},{"value":"/ The Result is rewrapped `self`'s original variant.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":122837,"byte_end":122891,"line_start":130,"line_end":130,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":123311,"byte_end":123324,"line_start":145,"line_end":145,"column_start":12,"column_end":25},"name":"left_and_then","qualname":"<EitherOrBoth<A, B>>::left_and_then","value":"pub fn left_and_then<F, L>(Self, F) -> EitherOrBoth<L, B> where F: FnOnce(A)\n-> EitherOrBoth<L, B>","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `b` in `Right(b)` or `Both(a, _)` variants if it is\n present.\n","sig":null,"attributes":[{"value":"/ Apply the function `f` on the value `b` in `Right(b)` or `Both(a, _)` variants if it is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":123191,"byte_end":123282,"line_start":143,"line_end":143,"column_start":5,"column_end":96}},{"value":"/ present.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":123287,"byte_end":123299,"line_start":144,"line_end":144,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":123662,"byte_end":123676,"line_start":157,"line_end":157,"column_start":12,"column_end":26},"name":"right_and_then","qualname":"<EitherOrBoth<A, B>>::right_and_then","value":"pub fn right_and_then<F, R>(Self, F) -> EitherOrBoth<A, R> where F: FnOnce(B)\n-> EitherOrBoth<A, R>","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `a`\n in `Left(a)` or `Both(a, _)` variants if it is present.\n","sig":null,"attributes":[{"value":"/ Apply the function `f` on the value `a`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":123543,"byte_end":123586,"line_start":155,"line_end":155,"column_start":5,"column_end":48}},{"value":"/ in `Left(a)` or `Both(a, _)` variants if it is present.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":123591,"byte_end":123650,"line_start":156,"line_end":156,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":124032,"byte_end":124038,"line_start":170,"line_end":170,"column_start":12,"column_end":18},"name":"reduce","qualname":"<EitherOrBoth<T, T>>::reduce","value":"pub fn reduce<F>(Self, F) -> T where F: FnOnce(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return either value of left, right, or the product of `f` applied where `Both` are present.\n","sig":null,"attributes":[{"value":"/ Return either value of left, right, or the product of `f` applied where `Both` are present.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":123925,"byte_end":124020,"line_start":169,"line_end":169,"column_start":5,"column_end":100}}]},{"kind":"Mod","id":{"krate":0,"index":521},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"free","qualname":"::free","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":541},{"krate":0,"index":543},{"krate":0,"index":546},{"krate":0,"index":549},{"krate":0,"index":553},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":565},{"krate":0,"index":567},{"krate":0,"index":569}],"decl_id":null,"docs":" Free functions that create iterator adaptors or call iterator methods.","sig":null,"attributes":[{"value":"/ Free functions that create iterator adaptors or call iterator methods.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":124525,"byte_end":124599,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":124600,"byte_end":124603,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The benefit of free functions is that they accept any `IntoIterator` as","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":124604,"byte_end":124679,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ argument, so the resulting code may be easier to read.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":124680,"byte_end":124738,"line_start":4,"line_end":4,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125548,"byte_end":125557,"line_start":42,"line_end":42,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::free::enumerate","value":"pub fn enumerate<I>(I) -> iter::Enumerate<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` with a running index.","sig":null,"attributes":[{"value":"/ Iterate `iterable` with a running index.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125310,"byte_end":125354,"line_start":31,"line_end":31,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125355,"byte_end":125358,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `.enumerate()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125359,"byte_end":125412,"line_start":33,"line_end":33,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125413,"byte_end":125416,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125417,"byte_end":125424,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ use itertools::enumerate;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125425,"byte_end":125454,"line_start":36,"line_end":36,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125455,"byte_end":125458,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ for (i, elt) in enumerate(&[1, 2, 3]) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125459,"byte_end":125502,"line_start":38,"line_end":38,"column_start":1,"column_end":44}},{"value":"/     /* loop body */","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125503,"byte_end":125526,"line_start":39,"line_end":39,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125527,"byte_end":125532,"line_start":40,"line_end":40,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125533,"byte_end":125540,"line_start":41,"line_end":41,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":541},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125879,"byte_end":125882,"line_start":59,"line_end":59,"column_start":8,"column_end":11},"name":"rev","qualname":"::free::rev","value":"pub fn rev<I>(I) -> iter::Rev<I::IntoIter> where I: IntoIterator,\nI::IntoIter: DoubleEndedIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` in reverse.","sig":null,"attributes":[{"value":"/ Iterate `iterable` in reverse.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125674,"byte_end":125708,"line_start":48,"line_end":48,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125709,"byte_end":125712,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `.rev()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125713,"byte_end":125760,"line_start":50,"line_end":50,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125761,"byte_end":125764,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125765,"byte_end":125772,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ use itertools::rev;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125773,"byte_end":125796,"line_start":53,"line_end":53,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125797,"byte_end":125800,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ for elt in rev(&[1, 2, 3]) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125801,"byte_end":125833,"line_start":55,"line_end":55,"column_start":1,"column_end":33}},{"value":"/     /* loop body */","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125834,"byte_end":125857,"line_start":56,"line_end":56,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125858,"byte_end":125863,"line_start":57,"line_end":57,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":125864,"byte_end":125871,"line_start":58,"line_end":58,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":543},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126283,"byte_end":126286,"line_start":78,"line_end":78,"column_start":8,"column_end":11},"name":"zip","qualname":"::free::zip","value":"pub fn zip<I, J>(I, J) -> Zip<I::IntoIter, J::IntoIter> where I: IntoIterator,\nJ: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[{"value":"/ Iterate `i` and `j` in lock step.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126031,"byte_end":126068,"line_start":66,"line_end":66,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126069,"byte_end":126072,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.zip(j)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126073,"byte_end":126122,"line_start":68,"line_end":68,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126123,"byte_end":126126,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126127,"byte_end":126134,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"/ use itertools::zip;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126135,"byte_end":126158,"line_start":71,"line_end":71,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126159,"byte_end":126162,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ let data = [1, 2, 3, 4, 5];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126163,"byte_end":126194,"line_start":73,"line_end":73,"column_start":1,"column_end":32}},{"value":"/ for (a, b) in zip(&data, &data[1..]) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126195,"byte_end":126237,"line_start":74,"line_end":74,"column_start":1,"column_end":43}},{"value":"/     /* loop body */","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126238,"byte_end":126261,"line_start":75,"line_end":75,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126262,"byte_end":126267,"line_start":76,"line_end":76,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126268,"byte_end":126275,"line_start":77,"line_end":77,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126666,"byte_end":126671,"line_start":96,"line_end":96,"column_start":8,"column_end":13},"name":"chain","qualname":"::free::chain","value":"pub fn chain<I, J>(I, J)\n-> iter::Chain<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>\nwhere I: IntoIterator, J: IntoIterator<Item = I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that first iterates `i` and then `j`.","sig":null,"attributes":[{"value":"/ Create an iterator that first iterates `i` and then `j`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126421,"byte_end":126481,"line_start":85,"line_end":85,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126482,"byte_end":126485,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.chain(j)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126486,"byte_end":126537,"line_start":87,"line_end":87,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126538,"byte_end":126541,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126542,"byte_end":126549,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/ use itertools::chain;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126550,"byte_end":126575,"line_start":90,"line_end":90,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126576,"byte_end":126579,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ for elt in chain(&[1, 2, 3], &[4]) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126580,"byte_end":126620,"line_start":92,"line_end":92,"column_start":1,"column_end":41}},{"value":"/     /* loop body */","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126621,"byte_end":126644,"line_start":93,"line_end":93,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126645,"byte_end":126650,"line_start":94,"line_end":94,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126651,"byte_end":126658,"line_start":95,"line_end":95,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":549},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127094,"byte_end":127100,"line_start":112,"line_end":112,"column_start":8,"column_end":14},"name":"cloned","qualname":"::free::cloned","value":"pub fn cloned<'a, I, T: 'a>(I) -> iter::Cloned<I::IntoIter> where\nI: IntoIterator<Item = &'a T>, T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that clones each element from &T to T","sig":null,"attributes":[{"value":"/ Create an iterator that clones each element from &T to T","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126868,"byte_end":126928,"line_start":103,"line_end":103,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126929,"byte_end":126932,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.cloned()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126933,"byte_end":126984,"line_start":105,"line_end":105,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126985,"byte_end":126988,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126989,"byte_end":126996,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/ use itertools::cloned;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":126997,"byte_end":127023,"line_start":108,"line_end":108,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127024,"byte_end":127027,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(cloned(b\"abc\").next(), Some(b'a'));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127028,"byte_end":127078,"line_start":110,"line_end":110,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127079,"byte_end":127086,"line_start":111,"line_end":111,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":553},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127488,"byte_end":127492,"line_start":128,"line_end":128,"column_start":8,"column_end":12},"name":"fold","qualname":"::free::fold","value":"pub fn fold<I, B, F>(I, B, F) -> B where I: IntoIterator, F: FnMut(B, I::Item)\n-> B","parent":null,"children":[],"decl_id":null,"docs":" Perform a fold operation over the iterable.","sig":null,"attributes":[{"value":"/ Perform a fold operation over the iterable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127255,"byte_end":127302,"line_start":119,"line_end":119,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127303,"byte_end":127306,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.fold(init, f)`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127307,"byte_end":127362,"line_start":121,"line_end":121,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127363,"byte_end":127366,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127367,"byte_end":127374,"line_start":123,"line_end":123,"column_start":1,"column_end":8}},{"value":"/ use itertools::fold;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127375,"byte_end":127399,"line_start":124,"line_end":124,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127400,"byte_end":127403,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(fold(&[1., 2., 3.], 0., |a, &b| f32::max(a, b)), 3.);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127404,"byte_end":127472,"line_start":126,"line_end":126,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127473,"byte_end":127480,"line_start":127,"line_end":127,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":557},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127867,"byte_end":127870,"line_start":144,"line_end":144,"column_start":8,"column_end":11},"name":"all","qualname":"::free::all","value":"pub fn all<I, F>(I, F) -> bool where I: IntoIterator, F: FnMut(I::Item) ->\nbool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for all elements in the iterable.","sig":null,"attributes":[{"value":"/ Test whether the predicate holds for all elements in the iterable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127642,"byte_end":127712,"line_start":135,"line_end":135,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127713,"byte_end":127716,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.all(f)`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127717,"byte_end":127765,"line_start":137,"line_end":137,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127766,"byte_end":127769,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127770,"byte_end":127777,"line_start":139,"line_end":139,"column_start":1,"column_end":8}},{"value":"/ use itertools::all;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127778,"byte_end":127801,"line_start":140,"line_end":140,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127802,"byte_end":127805,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ assert!(all(&[1, 2, 3], |elt| *elt > 0));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127806,"byte_end":127851,"line_start":142,"line_end":142,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":127852,"byte_end":127859,"line_start":143,"line_end":143,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128230,"byte_end":128233,"line_start":160,"line_end":160,"column_start":8,"column_end":11},"name":"any","qualname":"::free::any","value":"pub fn any<I, F>(I, F) -> bool where I: IntoIterator, F: FnMut(I::Item) ->\nbool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for any elements in the iterable.","sig":null,"attributes":[{"value":"/ Test whether the predicate holds for any elements in the iterable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128004,"byte_end":128074,"line_start":151,"line_end":151,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128075,"byte_end":128078,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.any(f)`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128079,"byte_end":128127,"line_start":153,"line_end":153,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128128,"byte_end":128131,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128132,"byte_end":128139,"line_start":155,"line_end":155,"column_start":1,"column_end":8}},{"value":"/ use itertools::any;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128140,"byte_end":128163,"line_start":156,"line_end":156,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128164,"byte_end":128167,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ assert!(any(&[0, -1, 2], |elt| *elt > 0));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128168,"byte_end":128214,"line_start":158,"line_end":158,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128215,"byte_end":128222,"line_start":159,"line_end":159,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":563},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128558,"byte_end":128561,"line_start":176,"line_end":176,"column_start":8,"column_end":11},"name":"max","qualname":"::free::max","value":"pub fn max<I>(I) -> Option<I::Item> where I: IntoIterator, I::Item: Ord","parent":null,"children":[],"decl_id":null,"docs":" Return the maximum value of the iterable.","sig":null,"attributes":[{"value":"/ Return the maximum value of the iterable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128367,"byte_end":128412,"line_start":167,"line_end":167,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128413,"byte_end":128416,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.max()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128417,"byte_end":128465,"line_start":169,"line_end":169,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128466,"byte_end":128469,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128470,"byte_end":128477,"line_start":171,"line_end":171,"column_start":1,"column_end":8}},{"value":"/ use itertools::max;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128478,"byte_end":128501,"line_start":172,"line_end":172,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128502,"byte_end":128505,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(max(0..10), Some(9));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128506,"byte_end":128542,"line_start":174,"line_end":174,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128543,"byte_end":128550,"line_start":175,"line_end":175,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":565},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128874,"byte_end":128877,"line_start":192,"line_end":192,"column_start":8,"column_end":11},"name":"min","qualname":"::free::min","value":"pub fn min<I>(I) -> Option<I::Item> where I: IntoIterator, I::Item: Ord","parent":null,"children":[],"decl_id":null,"docs":" Return the minimum value of the iterable.","sig":null,"attributes":[{"value":"/ Return the minimum value of the iterable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128683,"byte_end":128728,"line_start":183,"line_end":183,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128729,"byte_end":128732,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.min()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128733,"byte_end":128781,"line_start":185,"line_end":185,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128782,"byte_end":128785,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128786,"byte_end":128793,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"/ use itertools::min;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128794,"byte_end":128817,"line_start":188,"line_end":188,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128818,"byte_end":128821,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(min(0..10), Some(0));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128822,"byte_end":128858,"line_start":190,"line_end":190,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":128859,"byte_end":128866,"line_start":191,"line_end":191,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":567},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129270,"byte_end":129274,"line_start":210,"line_end":210,"column_start":8,"column_end":12},"name":"join","qualname":"::free::join","value":"pub fn join<I>(I, &str) -> String where I: IntoIterator, I::Item: Display","parent":null,"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, seperated by `sep`.","sig":null,"attributes":[{"value":"/ Combine all iterator elements into one String, seperated by `sep`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129000,"byte_end":129070,"line_start":200,"line_end":200,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129071,"byte_end":129074,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `iterable.join(sep)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129075,"byte_end":129134,"line_start":202,"line_end":202,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129135,"byte_end":129138,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129139,"byte_end":129146,"line_start":204,"line_end":204,"column_start":1,"column_end":8}},{"value":"/ use itertools::join;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129147,"byte_end":129171,"line_start":205,"line_end":205,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129172,"byte_end":129175,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(join(&[1, 2, 3], \", \"), \"1, 2, 3\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129176,"byte_end":129226,"line_start":207,"line_end":207,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129227,"byte_end":129234,"line_start":208,"line_end":208,"column_start":1,"column_end":8}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129235,"byte_end":129262,"line_start":209,"line_end":209,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":569},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129770,"byte_end":129776,"line_start":230,"line_end":230,"column_start":8,"column_end":14},"name":"sorted","qualname":"::free::sorted","value":"pub fn sorted<I>(I) -> VecIntoIter<I::Item> where I: IntoIterator,\nI::Item: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129406,"byte_end":129476,"line_start":217,"line_end":217,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129477,"byte_end":129480,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of [`iterable.sorted()`][1].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129481,"byte_end":129544,"line_start":219,"line_end":219,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129545,"byte_end":129548,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ [1]: trait.Itertools.html#method.sorted","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129549,"byte_end":129592,"line_start":221,"line_end":221,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129593,"byte_end":129596,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129597,"byte_end":129604,"line_start":223,"line_end":223,"column_start":1,"column_end":8}},{"value":"/ use itertools::sorted;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129605,"byte_end":129631,"line_start":224,"line_end":224,"column_start":1,"column_end":27}},{"value":"/ use itertools::assert_equal;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129632,"byte_end":129664,"line_start":225,"line_end":225,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129665,"byte_end":129668,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ assert_equal(sorted(\"rust\".chars()), \"rstu\".chars());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129669,"byte_end":129726,"line_start":227,"line_end":227,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129727,"byte_end":129734,"line_start":228,"line_end":228,"column_start":1,"column_end":8}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/free.rs","byte_start":129735,"byte_end":129762,"line_start":229,"line_end":229,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":574},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/concat_impl.rs","byte_start":130409,"byte_end":130415,"line_start":17,"line_end":17,"column_start":8,"column_end":14},"name":"concat","qualname":"::concat_impl::concat","value":"pub fn concat<I>(I) -> I::Item where I: IntoIterator,\nI::Item: Extend<<<I as IntoIterator>::Item as IntoIterator>::Item> +\nIntoIterator + Default","parent":null,"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using `Extend`.","sig":null,"attributes":[{"value":"/ Combine all an iterator's elements into one element by using `Extend`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/concat_impl.rs","byte_start":129923,"byte_end":129997,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/concat_impl.rs","byte_start":129998,"byte_end":130001,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator`-enabled version of `.concat()`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/concat_impl.rs","byte_start":130002,"byte_end":130051,"line_start":5,"line_end":5,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/concat_impl.rs","byte_start":130052,"byte_end":130055,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This combinator will extend the first item with each of the rest of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/concat_impl.rs","byte_start":130056,"byte_end":130131,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ items of the iterator. If the iterator is empty, the default value of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/concat_impl.rs","byte_start":130132,"byte_end":130205,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ `I::Item` is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/concat_impl.rs","byte_start":130206,"byte_end":130232,"line_start":9,"line_end":9,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/concat_impl.rs","byte_start":130233,"byte_end":130236,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/concat_impl.rs","byte_start":130237,"byte_end":130248,"line_start":11,"line_end":11,"column_start":1,"column_end":12}},{"value":"/ use itertools::concat;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/concat_impl.rs","byte_start":130249,"byte_end":130275,"line_start":12,"line_end":12,"column_start":1,"column_end":27}},{"value":"/ ","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/concat_impl.rs","byte_start":130276,"byte_end":130280,"line_start":13,"line_end":13,"column_start":1,"column_end":5}},{"value":"/ let input = vec![vec![1], vec![2, 3], vec![4, 5, 6]];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/concat_impl.rs","byte_start":130281,"byte_end":130338,"line_start":14,"line_end":14,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(concat(input), vec![1, 2, 3, 4, 5, 6]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/concat_impl.rs","byte_start":130339,"byte_end":130393,"line_start":15,"line_end":15,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/concat_impl.rs","byte_start":130394,"byte_end":130401,"line_start":16,"line_end":16,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1959},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/cons_tuples_impl.rs","byte_start":132191,"byte_end":132201,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"ConsTuples","qualname":"::cons_tuples_impl::ConsTuples","value":"ConsTuples {  }","parent":null,"children":[{"krate":0,"index":1962}],"decl_id":null,"docs":" An iterator that maps an iterator of tuples like\n `((A, B), C)` to an iterator of `(A, B, C)`.","sig":null,"attributes":[{"value":"/ An iterator that maps an iterator of tuples like","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/cons_tuples_impl.rs","byte_start":131946,"byte_end":131998,"line_start":40,"line_end":40,"column_start":1,"column_end":53}},{"value":"/ `((A, B), C)` to an iterator of `(A, B, C)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/cons_tuples_impl.rs","byte_start":131999,"byte_end":132047,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/cons_tuples_impl.rs","byte_start":132048,"byte_end":132051,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Used by the `iproduct!()` macro.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/cons_tuples_impl.rs","byte_start":132052,"byte_end":132088,"line_start":43,"line_end":43,"column_start":1,"column_end":37}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/cons_tuples_impl.rs","byte_start":132089,"byte_end":132162,"line_start":44,"line_end":44,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":584},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/cons_tuples_impl.rs","byte_start":132542,"byte_end":132553,"line_start":64,"line_end":64,"column_start":8,"column_end":19},"name":"cons_tuples","qualname":"::cons_tuples_impl::cons_tuples","value":"pub fn cons_tuples<I, J>(I) -> ConsTuples<I, J> where I: Iterator<Item = J>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that maps for example iterators of\n `((A, B), C)` to `(A, B, C)`.\n","sig":null,"attributes":[{"value":"/ Create an iterator that maps for example iterators of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/cons_tuples_impl.rs","byte_start":132443,"byte_end":132500,"line_start":62,"line_end":62,"column_start":1,"column_end":58}},{"value":"/ `((A, B), C)` to `(A, B, C)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/cons_tuples_impl.rs","byte_start":132501,"byte_end":132534,"line_start":63,"line_end":63,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":590},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations.rs","byte_start":132993,"byte_end":133005,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"Combinations","qualname":"::combinations::Combinations","value":"Combinations {  }","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595}],"decl_id":null,"docs":" An iterator to iterate through all the `k`-length combinations in an iterator.","sig":null,"attributes":[{"value":"/ An iterator to iterate through all the `k`-length combinations in an iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations.rs","byte_start":132726,"byte_end":132808,"line_start":5,"line_end":5,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations.rs","byte_start":132809,"byte_end":132812,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ See [`.combinations()`](../trait.Itertools.html#method.combinations) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations.rs","byte_start":132813,"byte_end":132907,"line_start":7,"line_end":7,"column_start":1,"column_end":95}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations.rs","byte_start":132908,"byte_end":132981,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1968},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations_with_replacement.rs","byte_start":135694,"byte_end":135721,"line_start":9,"line_end":9,"column_start":12,"column_end":39},"name":"CombinationsWithReplacement","qualname":"::combinations_with_replacement::CombinationsWithReplacement","value":"CombinationsWithReplacement {  }","parent":null,"children":[{"krate":0,"index":1970},{"krate":0,"index":1971},{"krate":0,"index":1972},{"krate":0,"index":1973},{"krate":0,"index":1974}],"decl_id":null,"docs":" An iterator to iterate through all the `n`-length combinations in an iterator, with replacement.","sig":null,"attributes":[{"value":"/ An iterator to iterate through all the `n`-length combinations in an iterator, with replacement.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations_with_replacement.rs","byte_start":135432,"byte_end":135532,"line_start":5,"line_end":5,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations_with_replacement.rs","byte_start":135533,"byte_end":135536,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ See [`.combinations_with_replacement()`](../trait.Itertools.html#method.combinations_with_replacement) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations_with_replacement.rs","byte_start":135537,"byte_end":135665,"line_start":7,"line_end":7,"column_start":1,"column_end":129}}]},{"kind":"Struct","id":{"krate":0,"index":1979},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/exactly_one_err.rs","byte_start":139082,"byte_end":139097,"line_start":14,"line_end":14,"column_start":12,"column_end":27},"name":"ExactlyOneError","qualname":"::exactly_one_err::ExactlyOneError","value":"ExactlyOneError {  }","parent":null,"children":[{"krate":0,"index":1981},{"krate":0,"index":1982}],"decl_id":null,"docs":" Iterator returned for the error case of `IterTools::exactly_one()`\n This iterator yields exactly the same elements as the input iterator.","sig":null,"attributes":[{"value":"/ Iterator returned for the error case of `IterTools::exactly_one()`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/exactly_one_err.rs","byte_start":138613,"byte_end":138683,"line_start":5,"line_end":5,"column_start":1,"column_end":71}},{"value":"/ This iterator yields exactly the same elements as the input iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/exactly_one_err.rs","byte_start":138684,"byte_end":138757,"line_start":6,"line_end":6,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/exactly_one_err.rs","byte_start":138758,"byte_end":138761,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ During the execution of exactly_one the iterator must be mutated.  This wrapper","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/exactly_one_err.rs","byte_start":138762,"byte_end":138845,"line_start":8,"line_end":8,"column_start":1,"column_end":84}},{"value":"/ effectively \"restores\" the state of the input iterator when it's handed back.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/exactly_one_err.rs","byte_start":138846,"byte_end":138927,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/exactly_one_err.rs","byte_start":138928,"byte_end":138931,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This is very similar to PutBackN except this iterator only supports 0-2 elements and does not","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/exactly_one_err.rs","byte_start":138932,"byte_end":139029,"line_start":11,"line_end":11,"column_start":1,"column_end":98}},{"value":"/ use a `Vec`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/exactly_one_err.rs","byte_start":139030,"byte_end":139046,"line_start":12,"line_end":12,"column_start":1,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":640},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":140945,"byte_end":140958,"line_start":21,"line_end":21,"column_start":5,"column_end":18},"name":"FirstMismatch","qualname":"::diff::Diff::FirstMismatch","value":"Diff::FirstMismatch(usize, PutBack<I>, PutBack<J>)","parent":{"krate":0,"index":637},"children":[],"decl_id":null,"docs":" The index of the first non-matching element along with both iterator's remaining elements\n starting with the first mis-match.\n","sig":null,"attributes":[{"value":"/ The index of the first non-matching element along with both iterator's remaining elements","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":140804,"byte_end":140897,"line_start":19,"line_end":19,"column_start":5,"column_end":98}},{"value":"/ starting with the first mis-match.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":140902,"byte_end":140940,"line_start":20,"line_end":20,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":645},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":141091,"byte_end":141098,"line_start":23,"line_end":23,"column_start":5,"column_end":12},"name":"Shorter","qualname":"::diff::Diff::Shorter","value":"Diff::Shorter(usize, PutBack<I>)","parent":{"krate":0,"index":637},"children":[],"decl_id":null,"docs":" The total number of elements that were in `J` along with the remaining elements of `I`.\n","sig":null,"attributes":[{"value":"/ The total number of elements that were in `J` along with the remaining elements of `I`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":140995,"byte_end":141086,"line_start":22,"line_end":22,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":649},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":141219,"byte_end":141225,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Longer","qualname":"::diff::Diff::Longer","value":"Diff::Longer(usize, PutBack<J>)","parent":{"krate":0,"index":637},"children":[],"decl_id":null,"docs":" The total number of elements that were in `I` along with the remaining elements of `J`.\n","sig":null,"attributes":[{"value":"/ The total number of elements that were in `I` along with the remaining elements of `J`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":141123,"byte_end":141214,"line_start":24,"line_end":24,"column_start":5,"column_end":96}}]},{"kind":"Enum","id":{"krate":0,"index":637},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":140742,"byte_end":140746,"line_start":15,"line_end":15,"column_start":10,"column_end":14},"name":"Diff","qualname":"::diff::Diff","value":"pub enum Diff<I, J> where I: Iterator, J: Iterator {\n\n    /// The index of the first non-matching element along with both iterator's remaining elements\n    /// starting with the first mis-match.\n    FirstMismatch(usize, PutBack<I>, PutBack<J>),\n\n    /// The total number of elements that were in `J` along with the remaining elements of `I`.\n    Shorter(usize, PutBack<I>),\n\n    /// The total number of elements that were in `I` along with the remaining elements of `J`.\n    Longer(usize, PutBack<J>),\n}","parent":null,"children":[{"krate":0,"index":640},{"krate":0,"index":645},{"krate":0,"index":649}],"decl_id":null,"docs":" A type returned by the [`diff_with`](./fn.diff_with.html) function.","sig":null,"attributes":[{"value":"/ A type returned by the [`diff_with`](./fn.diff_with.html) function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":140544,"byte_end":140615,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":140616,"byte_end":140619,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ `Diff` represents the way in which the elements yielded by the iterator `I` differ to some","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":140620,"byte_end":140714,"line_start":13,"line_end":13,"column_start":1,"column_end":95}},{"value":"/ iterator `J`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":140715,"byte_end":140732,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":653},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":141974,"byte_end":141983,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"diff_with","qualname":"::diff::diff_with","value":"pub fn diff_with<I, J, F>(I, J, F) -> Option<Diff<I::IntoIter, J::IntoIter>>\nwhere I: IntoIterator, J: IntoIterator, F: Fn(&I::Item, &J::Item) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compares every element yielded by both `i` and `j` with the given function in lock-step and\n returns a `Diff` which describes how `j` differs from `i`.","sig":null,"attributes":[{"value":"/ Compares every element yielded by both `i` and `j` with the given function in lock-step and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":141249,"byte_end":141344,"line_start":28,"line_end":28,"column_start":1,"column_end":96}},{"value":"/ returns a `Diff` which describes how `j` differs from `i`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":141345,"byte_end":141407,"line_start":29,"line_end":29,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":141408,"byte_end":141411,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ If the number of elements yielded by `j` is less than the number of elements yielded by `i`,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":141412,"byte_end":141508,"line_start":31,"line_end":31,"column_start":1,"column_end":97}},{"value":"/ the number of `j` elements yielded will be returned along with `i`'s remaining elements as","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":141509,"byte_end":141603,"line_start":32,"line_end":32,"column_start":1,"column_end":95}},{"value":"/ `Diff::Shorter`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":141604,"byte_end":141624,"line_start":33,"line_end":33,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":141625,"byte_end":141628,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ If the two elements of a step differ, the index of those elements along with the remaining","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":141629,"byte_end":141723,"line_start":35,"line_end":35,"column_start":1,"column_end":95}},{"value":"/ elements of both `i` and `j` are returned as `Diff::FirstMismatch`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":141724,"byte_end":141795,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":141796,"byte_end":141799,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ If `i` becomes exhausted before `j` becomes exhausted, the number of elements in `i` along with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":141800,"byte_end":141899,"line_start":38,"line_end":38,"column_start":1,"column_end":100}},{"value":"/ the remaining `j` elements will be returned as `Diff::Longer`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/diff.rs","byte_start":141900,"byte_end":141966,"line_start":39,"line_end":39,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":661},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":143103,"byte_end":143113,"line_start":10,"line_end":10,"column_start":12,"column_end":22},"name":"FormatWith","qualname":"::format::FormatWith","value":"FormatWith {  }","parent":null,"children":[{"krate":0,"index":665},{"krate":0,"index":666}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements lazily, separated by `sep`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":142839,"byte_end":142899,"line_start":4,"line_end":4,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":142900,"byte_end":142903,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ The format value can only be formatted once, after that the iterator is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":142904,"byte_end":142979,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/ exhausted.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":142980,"byte_end":142994,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":142995,"byte_end":142998,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.format_with()`](../trait.Itertools.html#method.format_with) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":142999,"byte_end":143091,"line_start":9,"line_end":9,"column_start":1,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":1989},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":143536,"byte_end":143542,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Format","qualname":"::format::Format","value":"Format {  }","parent":null,"children":[{"krate":0,"index":1992},{"krate":0,"index":1993}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements lazily, separated by `sep`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":143261,"byte_end":143321,"line_start":16,"line_end":16,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":143322,"byte_end":143325,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The format value can only be formatted once, after that the iterator is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":143326,"byte_end":143401,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ exhausted.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":143402,"byte_end":143416,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":143417,"byte_end":143420,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ See [`.format()`](../trait.Itertools.html#method.format)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":143421,"byte_end":143481,"line_start":21,"line_end":21,"column_start":1,"column_end":61}},{"value":"/ for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":143482,"byte_end":143507,"line_start":22,"line_end":22,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":700},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":146819,"byte_end":146822,"line_start":6,"line_end":6,"column_start":10,"column_end":13},"name":"Key","qualname":"::groupbylazy::KeyFunction::Key","value":"type Key;","parent":{"krate":0,"index":698},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":750},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":156288,"byte_end":156295,"line_start":289,"line_end":289,"column_start":12,"column_end":19},"name":"GroupBy","qualname":"::groupbylazy::GroupBy","value":"GroupBy {  }","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":755}],"decl_id":null,"docs":" `GroupBy` is the storage for the lazy grouping operation.","sig":null,"attributes":[{"value":"/ `GroupBy` is the storage for the lazy grouping operation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":155587,"byte_end":155648,"line_start":275,"line_end":275,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":155649,"byte_end":155652,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ If the groups are consumed in their original order, or if each","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":155653,"byte_end":155719,"line_start":277,"line_end":277,"column_start":1,"column_end":67}},{"value":"/ group is dropped without keeping it around, then `GroupBy` uses","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":155720,"byte_end":155787,"line_start":278,"line_end":278,"column_start":1,"column_end":68}},{"value":"/ no allocations. It needs allocations only if several group iterators","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":155788,"byte_end":155860,"line_start":279,"line_end":279,"column_start":1,"column_end":73}},{"value":"/ are alive at the same time.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":155861,"byte_end":155892,"line_start":280,"line_end":280,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":155893,"byte_end":155896,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ This type implements `IntoIterator` (it is **not** an iterator","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":155897,"byte_end":155963,"line_start":282,"line_end":282,"column_start":1,"column_end":67}},{"value":"/ itself), because the group iterators need to borrow from this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":155964,"byte_end":156029,"line_start":283,"line_end":283,"column_start":1,"column_end":66}},{"value":"/ value. It should be stored in a local variable or temporary and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":156030,"byte_end":156097,"line_start":284,"line_end":284,"column_start":1,"column_end":68}},{"value":"/ iterated.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":156098,"byte_end":156111,"line_start":285,"line_end":285,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":156112,"byte_end":156115,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ See [`.group_by()`](../trait.Itertools.html#method.group_by) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":156116,"byte_end":156202,"line_start":287,"line_end":287,"column_start":1,"column_end":87}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":156203,"byte_end":156276,"line_start":288,"line_end":288,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":774},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":158162,"byte_end":158168,"line_start":359,"line_end":359,"column_start":12,"column_end":18},"name":"Groups","qualname":"::groupbylazy::Groups","value":"Groups {  }","parent":null,"children":[{"krate":0,"index":779}],"decl_id":null,"docs":" An iterator that yields the Group iterators.","sig":null,"attributes":[{"value":"/ An iterator that yields the Group iterators.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":157840,"byte_end":157888,"line_start":352,"line_end":352,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":157889,"byte_end":157892,"line_start":353,"line_end":353,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `(K, Group)`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":157893,"byte_end":157935,"line_start":354,"line_end":354,"column_start":1,"column_end":43}},{"value":"/ the group's key `K` and the group's iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":157936,"byte_end":157985,"line_start":355,"line_end":355,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":157986,"byte_end":157989,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ See [`.group_by()`](../trait.Itertools.html#method.group_by) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":157990,"byte_end":158076,"line_start":357,"line_end":357,"column_start":1,"column_end":87}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":158077,"byte_end":158150,"line_start":358,"line_end":358,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":788},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":159036,"byte_end":159041,"line_start":393,"line_end":393,"column_start":12,"column_end":17},"name":"Group","qualname":"::groupbylazy::Group","value":"Group {  }","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795}],"decl_id":null,"docs":" An iterator for the elements in a single group.","sig":null,"attributes":[{"value":"/ An iterator for the elements in a single group.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":158929,"byte_end":158980,"line_start":390,"line_end":390,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":158981,"byte_end":158984,"line_start":391,"line_end":391,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":158985,"byte_end":159024,"line_start":392,"line_end":392,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":811},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":160976,"byte_end":160986,"line_start":465,"line_end":465,"column_start":12,"column_end":22},"name":"IntoChunks","qualname":"::groupbylazy::IntoChunks","value":"IntoChunks {  }","parent":null,"children":[{"krate":0,"index":813},{"krate":0,"index":814}],"decl_id":null,"docs":" `ChunkLazy` is the storage for a lazy chunking operation.","sig":null,"attributes":[{"value":"/ `ChunkLazy` is the storage for a lazy chunking operation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":160313,"byte_end":160374,"line_start":451,"line_end":451,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":160375,"byte_end":160378,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ `IntoChunks` behaves just like `GroupBy`: it is iterable, and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":160379,"byte_end":160444,"line_start":453,"line_end":453,"column_start":1,"column_end":66}},{"value":"/ it only buffers if several chunk iterators are alive at the same time.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":160445,"byte_end":160519,"line_start":454,"line_end":454,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":160520,"byte_end":160523,"line_start":455,"line_end":455,"column_start":1,"column_end":4}},{"value":"/ This type implements `IntoIterator` (it is **not** an iterator","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":160524,"byte_end":160590,"line_start":456,"line_end":456,"column_start":1,"column_end":67}},{"value":"/ itself), because the chunk iterators need to borrow from this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":160591,"byte_end":160656,"line_start":457,"line_end":457,"column_start":1,"column_end":66}},{"value":"/ value. It should be stored in a local variable or temporary and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":160657,"byte_end":160724,"line_start":458,"line_end":458,"column_start":1,"column_end":68}},{"value":"/ iterated.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":160725,"byte_end":160738,"line_start":459,"line_end":459,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":160739,"byte_end":160742,"line_start":460,"line_end":460,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Chunk`, each chunk's iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":160743,"byte_end":160803,"line_start":461,"line_end":461,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":160804,"byte_end":160807,"line_start":462,"line_end":462,"column_start":1,"column_end":4}},{"value":"/ See [`.chunks()`](../trait.Itertools.html#method.chunks) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":160808,"byte_end":160890,"line_start":463,"line_end":463,"column_start":1,"column_end":83}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":160891,"byte_end":160964,"line_start":464,"line_end":464,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":825},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":162109,"byte_end":162115,"line_start":510,"line_end":510,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::groupbylazy::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":828}],"decl_id":null,"docs":" An iterator that yields the Chunk iterators.","sig":null,"attributes":[{"value":"/ An iterator that yields the Chunk iterators.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":161846,"byte_end":161894,"line_start":504,"line_end":504,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":161895,"byte_end":161898,"line_start":505,"line_end":505,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Chunk`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":161899,"byte_end":161936,"line_start":506,"line_end":506,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":161937,"byte_end":161940,"line_start":507,"line_end":507,"column_start":1,"column_end":4}},{"value":"/ See [`.chunks()`](../trait.Itertools.html#method.chunks) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":161941,"byte_end":162023,"line_start":508,"line_end":508,"column_start":1,"column_end":83}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":162024,"byte_end":162097,"line_start":509,"line_end":509,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":835},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":162833,"byte_end":162838,"line_start":541,"line_end":541,"column_start":12,"column_end":17},"name":"Chunk","qualname":"::groupbylazy::Chunk","value":"Chunk {  }","parent":null,"children":[{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840}],"decl_id":null,"docs":" An iterator for the elements in a single chunk.","sig":null,"attributes":[{"value":"/ An iterator for the elements in a single chunk.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":162726,"byte_end":162777,"line_start":538,"line_end":538,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":162778,"byte_end":162781,"line_start":539,"line_end":539,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":162782,"byte_end":162821,"line_start":540,"line_end":540,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2042},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/intersperse.rs","byte_start":163882,"byte_end":163893,"line_start":15,"line_end":15,"column_start":12,"column_end":23},"name":"Intersperse","qualname":"::intersperse::Intersperse","value":"Intersperse {  }","parent":null,"children":[{"krate":0,"index":2044},{"krate":0,"index":2045},{"krate":0,"index":2046}],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor to insert a particular value","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/intersperse.rs","byte_start":163503,"byte_end":163555,"line_start":5,"line_end":5,"column_start":1,"column_end":53}},{"value":"/ between each element of the adapted iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/intersperse.rs","byte_start":163556,"byte_end":163605,"line_start":6,"line_end":6,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/intersperse.rs","byte_start":163606,"byte_end":163609,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/intersperse.rs","byte_start":163610,"byte_end":163648,"line_start":8,"line_end":8,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/intersperse.rs","byte_start":163649,"byte_end":163652,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/intersperse.rs","byte_start":163653,"byte_end":163682,"line_start":10,"line_end":10,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/intersperse.rs","byte_start":163683,"byte_end":163686,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ See [`.intersperse()`](../trait.Itertools.html#method.intersperse) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/intersperse.rs","byte_start":163687,"byte_end":163779,"line_start":12,"line_end":12,"column_start":1,"column_end":93}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/intersperse.rs","byte_start":163780,"byte_end":163853,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":885},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":168563,"byte_end":168569,"line_start":115,"line_end":115,"column_start":10,"column_end":16},"name":"KMerge","qualname":"::kmerge_impl::KMerge","value":"KMergeBy<I, KMergeByLt>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators in ascending order.\n If all base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges an abitrary number of base iterators in ascending order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":168184,"byte_end":168276,"line_start":108,"line_end":108,"column_start":1,"column_end":93}},{"value":"/ If all base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":168277,"byte_end":168348,"line_start":109,"line_end":109,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":168349,"byte_end":168352,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":168353,"byte_end":168392,"line_start":111,"line_end":111,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":168393,"byte_end":168396,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ See [`.kmerge()`](../trait.Itertools.html#method.kmerge) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":168397,"byte_end":168479,"line_start":113,"line_end":113,"column_start":1,"column_end":83}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":168480,"byte_end":168553,"line_start":114,"line_end":114,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":887},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":168611,"byte_end":168626,"line_start":117,"line_end":117,"column_start":11,"column_end":26},"name":"KMergePredicate","qualname":"::kmerge_impl::KMergePredicate","value":"KMergePredicate<T>","parent":null,"children":[{"krate":0,"index":889}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":168639,"byte_end":168650,"line_start":118,"line_end":118,"column_start":8,"column_end":19},"name":"kmerge_pred","qualname":"::kmerge_impl::KMergePredicate::kmerge_pred","value":"pub fn kmerge_pred(&mut Self, &T, &T) -> bool","parent":{"krate":0,"index":887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2060},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":168716,"byte_end":168726,"line_start":122,"line_end":122,"column_start":12,"column_end":22},"name":"KMergeByLt","qualname":"::kmerge_impl::KMergeByLt","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":897},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169322,"byte_end":169328,"line_start":148,"line_end":148,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::kmerge_impl::kmerge","value":"pub fn kmerge<I>(I) -> KMerge<<I::Item as IntoIterator>::IntoIter> where\nI: IntoIterator, I::Item: IntoIterator,\n<<I as IntoIterator>::Item as IntoIterator>::Item: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators using\n the ordering function.","sig":null,"attributes":[{"value":"/ Create an iterator that merges elements of the contained iterators using","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169003,"byte_end":169079,"line_start":136,"line_end":136,"column_start":1,"column_end":77}},{"value":"/ the ordering function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169080,"byte_end":169106,"line_start":137,"line_end":137,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169107,"byte_end":169110,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ Equivalent to `iterable.into_iter().kmerge()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169111,"byte_end":169161,"line_start":139,"line_end":139,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169162,"byte_end":169165,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169166,"byte_end":169173,"line_start":141,"line_end":141,"column_start":1,"column_end":8}},{"value":"/ use itertools::kmerge;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169174,"byte_end":169200,"line_start":142,"line_end":142,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169201,"byte_end":169204,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ for elt in kmerge(vec![vec![0, 2, 4], vec![1, 3, 5], vec![6, 7]]) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169205,"byte_end":169276,"line_start":144,"line_end":144,"column_start":1,"column_end":72}},{"value":"/     /* loop body */","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169277,"byte_end":169300,"line_start":145,"line_end":145,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169301,"byte_end":169306,"line_start":146,"line_end":146,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169307,"byte_end":169314,"line_start":147,"line_end":147,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":899},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169903,"byte_end":169911,"line_start":164,"line_end":164,"column_start":12,"column_end":20},"name":"KMergeBy","qualname":"::kmerge_impl::KMergeBy","value":"KMergeBy {  }","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":903}],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators\n according to an ordering function.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges an abitrary number of base iterators","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169565,"byte_end":169637,"line_start":156,"line_end":156,"column_start":1,"column_end":73}},{"value":"/ according to an ordering function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169638,"byte_end":169676,"line_start":157,"line_end":157,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169677,"byte_end":169680,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169681,"byte_end":169720,"line_start":159,"line_end":159,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169721,"byte_end":169724,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ See [`.kmerge_by()`](../trait.Itertools.html#method.kmerge_by) for more","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169725,"byte_end":169800,"line_start":161,"line_end":161,"column_start":1,"column_end":76}},{"value":"/ information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169801,"byte_end":169817,"line_start":162,"line_end":162,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":169818,"byte_end":169891,"line_start":163,"line_end":163,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":907},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":170290,"byte_end":170299,"line_start":181,"line_end":181,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::kmerge_impl::kmerge_by","value":"pub fn kmerge_by<I, F>(I, F)\n-> KMergeBy<<I::Item as IntoIterator>::IntoIter, F> where I: IntoIterator,\nI::Item: IntoIterator,\nF: KMergePredicate<<<I as IntoIterator>::Item as IntoIterator>::Item>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators.","sig":null,"attributes":[{"value":"/ Create an iterator that merges elements of the contained iterators.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":170144,"byte_end":170215,"line_start":178,"line_end":178,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":170216,"byte_end":170219,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ Equivalent to `iterable.into_iter().kmerge_by(less_than)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":170220,"byte_end":170282,"line_start":180,"line_end":180,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":945},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/merge_join.rs","byte_start":173517,"byte_end":173530,"line_start":11,"line_end":11,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::merge_join::merge_join_by","value":"pub fn merge_join_by<I, J, F>(I, J, F)\n-> MergeJoinBy<I::IntoIter, J::IntoIter, F> where I: IntoIterator,\nJ: IntoIterator, F: FnMut(&I::Item, &J::Item) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/merge_join.rs","byte_start":173310,"byte_end":173411,"line_start":8,"line_end":8,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/merge_join.rs","byte_start":173412,"byte_end":173415,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ See [`.merge_join_by()`](trait.Itertools.html#method.merge_join_by) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/merge_join.rs","byte_start":173416,"byte_end":173509,"line_start":10,"line_end":10,"column_start":1,"column_end":94}}]},{"kind":"Struct","id":{"krate":0,"index":949},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/merge_join.rs","byte_start":174156,"byte_end":174167,"line_start":28,"line_end":28,"column_start":12,"column_end":23},"name":"MergeJoinBy","qualname":"::merge_join::MergeJoinBy","value":"MergeJoinBy {  }","parent":null,"children":[{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955}],"decl_id":null,"docs":" An iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merge-joins items from the two base iterators in ascending order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/merge_join.rs","byte_start":173875,"byte_end":173969,"line_start":24,"line_end":24,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/merge_join.rs","byte_start":173970,"byte_end":173973,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ See [`.merge_join_by()`](../trait.Itertools.html#method.merge_join_by) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/merge_join.rs","byte_start":173974,"byte_end":174070,"line_start":26,"line_end":26,"column_start":1,"column_end":97}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/merge_join.rs","byte_start":174071,"byte_end":174144,"line_start":27,"line_end":27,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2079},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176176,"byte_end":176186,"line_start":7,"line_end":7,"column_start":5,"column_end":15},"name":"NoElements","qualname":"::minmax::MinMaxResult::NoElements","value":"MinMaxResult::NoElements","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Empty iterator\n","sig":null,"attributes":[{"value":"/ Empty iterator","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176153,"byte_end":176171,"line_start":6,"line_end":6,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2081},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176268,"byte_end":176278,"line_start":10,"line_end":10,"column_start":5,"column_end":15},"name":"OneElement","qualname":"::minmax::MinMaxResult::OneElement","value":"MinMaxResult::OneElement(T)","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Iterator with one element, so the minimum and maximum are the same\n","sig":null,"attributes":[{"value":"/ Iterator with one element, so the minimum and maximum are the same","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176193,"byte_end":176263,"line_start":9,"line_end":9,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2084},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176391,"byte_end":176397,"line_start":14,"line_end":14,"column_start":5,"column_end":11},"name":"MinMax","qualname":"::minmax::MinMaxResult::MinMax","value":"MinMaxResult::MinMax(T, T)","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" More than one element in the iterator, the first element is not larger\n than the second\n","sig":null,"attributes":[{"value":"/ More than one element in the iterator, the first element is not larger","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176288,"byte_end":176362,"line_start":12,"line_end":12,"column_start":5,"column_end":79}},{"value":"/ than the second","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176367,"byte_end":176386,"line_start":13,"line_end":13,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":2077},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176131,"byte_end":176143,"line_start":5,"line_end":5,"column_start":10,"column_end":22},"name":"MinMaxResult","qualname":"::minmax::MinMaxResult","value":"pub enum MinMaxResult<T> {\n\n    /// Empty iterator\n    NoElements,\n\n    /// Iterator with one element, so the minimum and maximum are the same\n    OneElement(T),\n\n    /// More than one element in the iterator, the first element is not larger\n    /// than the second\n    MinMax(T, T),\n}","parent":null,"children":[{"krate":0,"index":2079},{"krate":0,"index":2081},{"krate":0,"index":2084}],"decl_id":null,"docs":" `MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\n more detail.\n","sig":null,"attributes":[{"value":"/ `MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":175982,"byte_end":176063,"line_start":2,"line_end":2,"column_start":1,"column_end":82}},{"value":"/ more detail.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176064,"byte_end":176080,"line_start":3,"line_end":3,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":177215,"byte_end":177226,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"into_option","qualname":"<MinMaxResult<T>>::into_option","value":"pub fn into_option(Self) -> Option<(T, T)>","parent":null,"children":[],"decl_id":null,"docs":" `into_option` creates an `Option` of type `(T, T)`. The returned `Option`\n has variant `None` if and only if the `MinMaxResult` has variant\n `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`.\n If the `MinMaxResult` has variant `OneElement(x)`, performing this\n operation will make one clone of `x`.","sig":null,"attributes":[{"value":"/ `into_option` creates an `Option` of type `(T, T)`. The returned `Option`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176444,"byte_end":176521,"line_start":18,"line_end":18,"column_start":5,"column_end":82}},{"value":"/ has variant `None` if and only if the `MinMaxResult` has variant","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176526,"byte_end":176594,"line_start":19,"line_end":19,"column_start":5,"column_end":73}},{"value":"/ `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176599,"byte_end":176669,"line_start":20,"line_end":20,"column_start":5,"column_end":75}},{"value":"/ If the `MinMaxResult` has variant `OneElement(x)`, performing this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176674,"byte_end":176744,"line_start":21,"line_end":21,"column_start":5,"column_end":75}},{"value":"/ operation will make one clone of `x`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176749,"byte_end":176790,"line_start":22,"line_end":22,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176795,"byte_end":176798,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176803,"byte_end":176817,"line_start":24,"line_end":24,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176822,"byte_end":176825,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176830,"byte_end":176837,"line_start":26,"line_end":26,"column_start":5,"column_end":12}},{"value":"/ use itertools::MinMaxResult::{self, NoElements, OneElement, MinMax};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176842,"byte_end":176914,"line_start":27,"line_end":27,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176919,"byte_end":176922,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ let r: MinMaxResult<i32> = NoElements;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176927,"byte_end":176969,"line_start":29,"line_end":29,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(r.into_option(), None);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176974,"byte_end":177012,"line_start":30,"line_end":30,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":177017,"byte_end":177020,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ let r = OneElement(1);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":177025,"byte_end":177051,"line_start":32,"line_end":32,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(r.into_option(), Some((1, 1)));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":177056,"byte_end":177102,"line_start":33,"line_end":33,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":177107,"byte_end":177110,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ let r = MinMax(1, 2);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":177115,"byte_end":177140,"line_start":35,"line_end":35,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(r.into_option(), Some((1, 2)));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":177145,"byte_end":177191,"line_start":36,"line_end":36,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":177196,"byte_end":177203,"line_start":37,"line_end":37,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2102},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":180026,"byte_end":180035,"line_start":10,"line_end":10,"column_start":12,"column_end":21},"name":"MultiPeek","qualname":"::multipeek_impl::MultiPeek","value":"MultiPeek {  }","parent":null,"children":[{"krate":0,"index":2104},{"krate":0,"index":2105},{"krate":0,"index":2106}],"decl_id":null,"docs":" See [`multipeek()`](../fn.multipeek.html) for more information.\n","sig":null,"attributes":[{"value":"/ See [`multipeek()`](../fn.multipeek.html) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":179923,"byte_end":179990,"line_start":8,"line_end":8,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":981},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":180261,"byte_end":180270,"line_start":20,"line_end":20,"column_start":8,"column_end":17},"name":"multipeek","qualname":"::multipeek_impl::multipeek","value":"pub fn multipeek<I>(I) -> MultiPeek<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that allows the user to peek at multiple `.next()`\n values without advancing the base iterator.\n","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows the user to peek at multiple `.next()`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":180131,"byte_end":180205,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ values without advancing the base iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":180206,"byte_end":180253,"line_start":19,"line_end":19,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":985},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":180552,"byte_end":180562,"line_start":34,"line_end":34,"column_start":12,"column_end":22},"name":"reset_peek","qualname":"<MultiPeek<I>>::reset_peek","value":"pub fn reset_peek(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the peeking “cursor”\n","sig":null,"attributes":[{"value":"/ Reset the peeking “cursor”","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":180506,"byte_end":180540,"line_start":33,"line_end":33,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":180826,"byte_end":180830,"line_start":43,"line_end":43,"column_start":12,"column_end":16},"name":"peek","qualname":"<MultiPeek<I>>::peek","value":"pub fn peek(&mut Self) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Works exactly like `.next()` with the only difference that it doesn't\n advance itself. `.peek()` can be called multiple times, to peek\n further ahead.\n","sig":null,"attributes":[{"value":"/ Works exactly like `.next()` with the only difference that it doesn't","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":180646,"byte_end":180719,"line_start":40,"line_end":40,"column_start":5,"column_end":78}},{"value":"/ advance itself. `.peek()` can be called multiple times, to peek","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":180724,"byte_end":180791,"line_start":41,"line_end":41,"column_start":5,"column_end":72}},{"value":"/ further ahead.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":180796,"byte_end":180814,"line_start":42,"line_end":42,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":2113},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/pad_tail.rs","byte_start":182629,"byte_end":182637,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"PadUsing","qualname":"::pad_tail::PadUsing","value":"PadUsing {  }","parent":null,"children":[{"krate":0,"index":2116},{"krate":0,"index":2117},{"krate":0,"index":2118},{"krate":0,"index":2119}],"decl_id":null,"docs":" An iterator adaptor that pads a sequence to a minimum length by filling\n missing elements using a closure.","sig":null,"attributes":[{"value":"/ An iterator adaptor that pads a sequence to a minimum length by filling","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/pad_tail.rs","byte_start":182276,"byte_end":182351,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/ missing elements using a closure.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/pad_tail.rs","byte_start":182352,"byte_end":182389,"line_start":5,"line_end":5,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/pad_tail.rs","byte_start":182390,"byte_end":182393,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/pad_tail.rs","byte_start":182394,"byte_end":182433,"line_start":7,"line_end":7,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/pad_tail.rs","byte_start":182434,"byte_end":182437,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.pad_using()`](../trait.Itertools.html#method.pad_using) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/pad_tail.rs","byte_start":182438,"byte_end":182526,"line_start":9,"line_end":9,"column_start":1,"column_end":89}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/pad_tail.rs","byte_start":182544,"byte_end":182617,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":1023},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":184835,"byte_end":184846,"line_start":15,"line_end":15,"column_start":11,"column_end":22},"name":"PeekingNext","qualname":"::peeking_take_while::PeekingNext","value":"PeekingNext: Iterator","parent":null,"children":[{"krate":0,"index":1024}],"decl_id":null,"docs":" An iterator that allows peeking at an element before deciding to accept it.","sig":null,"attributes":[{"value":"/ An iterator that allows peeking at an element before deciding to accept it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":184429,"byte_end":184508,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":184509,"byte_end":184512,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.peeking_take_while()`](trait.Itertools.html#method.peeking_take_while)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":184513,"byte_end":184594,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"/ for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":184595,"byte_end":184620,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":184621,"byte_end":184624,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This is implemented by peeking adaptors like peekable and put back,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":184625,"byte_end":184696,"line_start":12,"line_end":12,"column_start":1,"column_end":72}},{"value":"/ but also by a few iterators that can be peeked natively, like the slice’s","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":184697,"byte_end":184776,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/ by reference iterator (`std::slice::Iter`).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":184777,"byte_end":184824,"line_start":14,"line_end":14,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":185030,"byte_end":185042,"line_start":19,"line_end":19,"column_start":8,"column_end":20},"name":"peeking_next","qualname":"::peeking_take_while::PeekingNext::peeking_next","value":"pub fn peeking_next<F>(&mut Self, F) -> Option<Self::Item> where\nF: FnOnce(&Self::Item) -> bool","parent":{"krate":0,"index":1023},"children":[],"decl_id":null,"docs":" Pass a reference to the next iterator element to the closure `accept`;\n if `accept` returns true, return it as the next element,\n else None.\n","sig":null,"attributes":[{"value":"/ Pass a reference to the next iterator element to the closure `accept`;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":184864,"byte_end":184938,"line_start":16,"line_end":16,"column_start":5,"column_end":79}},{"value":"/ if `accept` returns true, return it as the next element,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":184943,"byte_end":185003,"line_start":17,"line_end":17,"column_start":5,"column_end":65}},{"value":"/ else None.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":185008,"byte_end":185022,"line_start":18,"line_end":18,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1038},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":186561,"byte_end":186577,"line_start":80,"line_end":80,"column_start":12,"column_end":28},"name":"PeekingTakeWhile","qualname":"::peeking_take_while::PeekingTakeWhile","value":"PeekingTakeWhile {  }","parent":null,"children":[{"krate":0,"index":1042},{"krate":0,"index":1043}],"decl_id":null,"docs":" An iterator adaptor that takes items while a closure returns `true`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that takes items while a closure returns `true`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":186288,"byte_end":186360,"line_start":75,"line_end":75,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":186361,"byte_end":186364,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ See [`.peeking_take_while()`](../trait.Itertools.html#method.peeking_take_while)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":186365,"byte_end":186449,"line_start":77,"line_end":77,"column_start":1,"column_end":85}},{"value":"/ for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":186450,"byte_end":186475,"line_start":78,"line_end":78,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":186476,"byte_end":186549,"line_start":79,"line_end":79,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1059},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/permutations.rs","byte_start":189124,"byte_end":189136,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"Permutations","qualname":"::permutations::Permutations","value":"Permutations {  }","parent":null,"children":[{"krate":0,"index":1061},{"krate":0,"index":1062}],"decl_id":null,"docs":" An iterator adaptor that iterates through all the `k`-permutations of the\n elements from an iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that iterates through all the `k`-permutations of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/permutations.rs","byte_start":188827,"byte_end":188904,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ elements from an iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/permutations.rs","byte_start":188905,"byte_end":188935,"line_start":7,"line_end":7,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/permutations.rs","byte_start":188936,"byte_end":188939,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.permutations()`](../trait.Itertools.html#method.permutations) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/permutations.rs","byte_start":188940,"byte_end":189016,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/permutations.rs","byte_start":189017,"byte_end":189038,"line_start":10,"line_end":10,"column_start":1,"column_end":22}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/permutations.rs","byte_start":189039,"byte_end":189112,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2192},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":197054,"byte_end":197068,"line_start":9,"line_end":9,"column_start":12,"column_end":26},"name":"ProcessResults","qualname":"::process_results_impl::ProcessResults","value":"ProcessResults {  }","parent":null,"children":[{"krate":0,"index":2196},{"krate":0,"index":2197}],"decl_id":null,"docs":" An iterator that produces only the `T` values as long as the\n inner iterator produces `Ok(T)`.","sig":null,"attributes":[{"value":"/ An iterator that produces only the `T` values as long as the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":196746,"byte_end":196810,"line_start":2,"line_end":2,"column_start":1,"column_end":65}},{"value":"/ inner iterator produces `Ok(T)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":196811,"byte_end":196847,"line_start":3,"line_end":3,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":196848,"byte_end":196851,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Used by [`process_results`](../fn.process_results.html), see its docs","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":196852,"byte_end":196925,"line_start":5,"line_end":5,"column_start":1,"column_end":74}},{"value":"/ for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":196926,"byte_end":196951,"line_start":6,"line_end":6,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":196952,"byte_end":197025,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1103},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198973,"byte_end":198988,"line_start":71,"line_end":71,"column_start":8,"column_end":23},"name":"process_results","qualname":"::process_results_impl::process_results","value":"pub fn process_results<I, F, T, E, R>(I, F) -> Result<R, E> where\nI: IntoIterator<Item = Result<T, E>>,\nF: FnOnce(ProcessResults<, I::IntoIter, E>) -> R","parent":null,"children":[],"decl_id":null,"docs":" “Lift” a function of the values of an iterator so that it can process\n an iterator of `Result` values instead.","sig":null,"attributes":[{"value":"/ “Lift” a function of the values of an iterator so that it can process","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":197640,"byte_end":197717,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"/ an iterator of `Result` values instead.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":197718,"byte_end":197761,"line_start":37,"line_end":37,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":197762,"byte_end":197765,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ `iterable` is an iterator or iterable with `Result<T, E>` elements, where","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":197766,"byte_end":197843,"line_start":39,"line_end":39,"column_start":1,"column_end":78}},{"value":"/ `T` is the value type and `E` the error type.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":197844,"byte_end":197893,"line_start":40,"line_end":40,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":197894,"byte_end":197897,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ `processor` is a closure that receives an adapted version of the iterable","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":197898,"byte_end":197975,"line_start":42,"line_end":42,"column_start":1,"column_end":78}},{"value":"/ as the only argument — the adapted iterator produces elements of type `T`,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":197976,"byte_end":198056,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ as long as the original iterator produces `Ok` values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198057,"byte_end":198115,"line_start":44,"line_end":44,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198116,"byte_end":198119,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ If the original iterable produces an error at any point, the adapted","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198120,"byte_end":198192,"line_start":46,"line_end":46,"column_start":1,"column_end":73}},{"value":"/ iterator ends and the `process_results` function will return the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198193,"byte_end":198261,"line_start":47,"line_end":47,"column_start":1,"column_end":69}},{"value":"/ error iself.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198262,"byte_end":198278,"line_start":48,"line_end":48,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198279,"byte_end":198282,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Otherwise, the return value from the closure is returned wrapped","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198283,"byte_end":198351,"line_start":50,"line_end":50,"column_start":1,"column_end":69}},{"value":"/ inside `Ok`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198352,"byte_end":198368,"line_start":51,"line_end":51,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198369,"byte_end":198372,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198373,"byte_end":198386,"line_start":53,"line_end":53,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198387,"byte_end":198390,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198391,"byte_end":198398,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use itertools::process_results;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198399,"byte_end":198434,"line_start":56,"line_end":56,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198435,"byte_end":198438,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ type R = Result<i32, &'static str>;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198439,"byte_end":198478,"line_start":58,"line_end":58,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198479,"byte_end":198482,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ let first_values: Vec<R> = vec![Ok(1), Ok(0), Ok(3)];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198483,"byte_end":198540,"line_start":60,"line_end":60,"column_start":1,"column_end":58}},{"value":"/ let second_values: Vec<R> = vec![Ok(2), Ok(1), Err(\"overflow\")];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198541,"byte_end":198609,"line_start":61,"line_end":61,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198610,"byte_end":198613,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ // “Lift” the iterator .max() method to work on the values in Results using process_results","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198614,"byte_end":198713,"line_start":63,"line_end":63,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198714,"byte_end":198717,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ let first_max = process_results(first_values, |iter| iter.max().unwrap_or(0));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198718,"byte_end":198800,"line_start":65,"line_end":65,"column_start":1,"column_end":83}},{"value":"/ let second_max = process_results(second_values, |iter| iter.max().unwrap_or(0));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198801,"byte_end":198885,"line_start":66,"line_end":66,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198886,"byte_end":198889,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(first_max, Ok(3));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198890,"byte_end":198923,"line_start":68,"line_end":68,"column_start":1,"column_end":34}},{"value":"/ assert!(second_max.is_err());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198924,"byte_end":198957,"line_start":69,"line_end":69,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":198958,"byte_end":198965,"line_start":70,"line_end":70,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2203},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":199512,"byte_end":199520,"line_start":8,"line_end":8,"column_start":12,"column_end":20},"name":"PutBackN","qualname":"::put_back_n_impl::PutBackN","value":"PutBackN {  }","parent":null,"children":[{"krate":0,"index":2205},{"krate":0,"index":2206}],"decl_id":null,"docs":" An iterator adaptor that allows putting multiple\n items in front of the iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows putting multiple","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":199344,"byte_end":199396,"line_start":3,"line_end":3,"column_start":1,"column_end":53}},{"value":"/ items in front of the iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":199397,"byte_end":199432,"line_start":4,"line_end":4,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":199433,"byte_end":199436,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":199437,"byte_end":199476,"line_start":6,"line_end":6,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":1112},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":199723,"byte_end":199733,"line_start":17,"line_end":17,"column_start":8,"column_end":18},"name":"put_back_n","qualname":"::put_back_n_impl::put_back_n","value":"pub fn put_back_n<I>(I) -> PutBackN<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back multiple values to the front\n of the iteration.","sig":null,"attributes":[{"value":"/ Create an iterator where you can put back multiple values to the front","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":199575,"byte_end":199649,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ of the iteration.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":199650,"byte_end":199671,"line_start":14,"line_end":14,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":199672,"byte_end":199675,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":199676,"byte_end":199715,"line_start":16,"line_end":16,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":200316,"byte_end":200324,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBackN<I>>::put_back","value":"pub fn put_back(&mut Self, I::Item)","parent":null,"children":[],"decl_id":null,"docs":" Puts x in front of the iterator.\n The values are yielded in order of the most recently put back\n values first.","sig":null,"attributes":[{"value":"/ Puts x in front of the iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":199924,"byte_end":199960,"line_start":27,"line_end":27,"column_start":5,"column_end":41}},{"value":"/ The values are yielded in order of the most recently put back","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":199965,"byte_end":200030,"line_start":28,"line_end":28,"column_start":5,"column_end":70}},{"value":"/ values first.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":200035,"byte_end":200052,"line_start":29,"line_end":29,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":200057,"byte_end":200060,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":200065,"byte_end":200076,"line_start":31,"line_end":31,"column_start":5,"column_end":16}},{"value":"/ use itertools::put_back_n;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":200081,"byte_end":200111,"line_start":32,"line_end":32,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":200116,"byte_end":200119,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ let mut it = put_back_n(1..5);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":200124,"byte_end":200158,"line_start":34,"line_end":34,"column_start":5,"column_end":39}},{"value":"/ it.next();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":200163,"byte_end":200177,"line_start":35,"line_end":35,"column_start":5,"column_end":19}},{"value":"/ it.put_back(1);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":200182,"byte_end":200201,"line_start":36,"line_end":36,"column_start":5,"column_end":24}},{"value":"/ it.put_back(0);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":200206,"byte_end":200225,"line_start":37,"line_end":37,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":200230,"byte_end":200233,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ assert!(itertools::equal(it, 0..5));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":200238,"byte_end":200278,"line_start":39,"line_end":39,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":200283,"byte_end":200290,"line_start":40,"line_end":40,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":200295,"byte_end":200304,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2213},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":200955,"byte_end":200961,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"RcIter","qualname":"::rciter_impl::RcIter","value":"RcIter { rciter }","parent":null,"children":[{"krate":0,"index":2215}],"decl_id":null,"docs":" A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.\n","sig":null,"attributes":[{"value":"/ A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":200853,"byte_end":200926,"line_start":6,"line_end":6,"column_start":1,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":2215},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201003,"byte_end":201009,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"name":"rciter","qualname":"::rciter_impl::RcIter::rciter","value":"std::rc::Rc<std::cell::RefCell<I>>","parent":{"krate":0,"index":2213},"children":[],"decl_id":null,"docs":" The boxed iterator.\n","sig":null,"attributes":[{"value":"/ The boxed iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":200971,"byte_end":200994,"line_start":9,"line_end":9,"column_start":5,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":1126},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":202278,"byte_end":202284,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"rciter","qualname":"::rciter_impl::rciter","value":"pub fn rciter<I>(I) -> RcIter<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator inside a `Rc<RefCell<_>>` wrapper.","sig":null,"attributes":[{"value":"/ Return an iterator inside a `Rc<RefCell<_>>` wrapper.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201030,"byte_end":201087,"line_start":13,"line_end":13,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201088,"byte_end":201091,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The returned `RcIter` can be cloned, and each clone will refer back to the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201092,"byte_end":201170,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ same original iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201171,"byte_end":201198,"line_start":16,"line_end":16,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201199,"byte_end":201202,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ `RcIter` allows doing interesting things like using `.zip()` on an iterator with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201203,"byte_end":201287,"line_start":18,"line_end":18,"column_start":1,"column_end":85}},{"value":"/ itself, at the cost of runtime borrow checking which may have a performance","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201288,"byte_end":201367,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ penalty.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201368,"byte_end":201380,"line_start":20,"line_end":20,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201381,"byte_end":201384,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201385,"byte_end":201427,"line_start":22,"line_end":22,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201428,"byte_end":201431,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201432,"byte_end":201439,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use itertools::rciter;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201440,"byte_end":201466,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"/ use itertools::zip;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201467,"byte_end":201490,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201491,"byte_end":201494,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ // In this example a range iterator is created and we iterate it using","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201495,"byte_end":201569,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/ // three separate handles (two of them given to zip).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201570,"byte_end":201627,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/ // We also use the IntoIterator implementation for `&RcIter`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201628,"byte_end":201693,"line_start":30,"line_end":30,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201694,"byte_end":201697,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let mut iter = rciter(0..9);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201698,"byte_end":201730,"line_start":32,"line_end":32,"column_start":1,"column_end":33}},{"value":"/ let mut z = zip(&iter, &iter);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201731,"byte_end":201765,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201766,"byte_end":201769,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(z.next(), Some((0, 1)));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201770,"byte_end":201809,"line_start":35,"line_end":35,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(z.next(), Some((2, 3)));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201810,"byte_end":201849,"line_start":36,"line_end":36,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(z.next(), Some((4, 5)));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201850,"byte_end":201889,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(iter.next(), Some(6));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201890,"byte_end":201927,"line_start":38,"line_end":38,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(z.next(), Some((7, 8)));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201928,"byte_end":201967,"line_start":39,"line_end":39,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(z.next(), None);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":201968,"byte_end":201999,"line_start":40,"line_end":40,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":202000,"byte_end":202007,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":202008,"byte_end":202011,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ **Panics** in iterator methods if a borrow error is encountered in the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":202012,"byte_end":202086,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ iterator methods. It can only happen if the `RcIter` is reentered in","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":202087,"byte_end":202159,"line_start":44,"line_end":44,"column_start":1,"column_end":73}},{"value":"/ `.next()`, i.e. if it somehow participates in an “iterator knot”","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":202160,"byte_end":202232,"line_start":45,"line_end":45,"column_start":1,"column_end":69}},{"value":"/ where it is an adaptor of itself.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":202233,"byte_end":202270,"line_start":46,"line_end":46,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":2219},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/repeatn.rs","byte_start":203791,"byte_end":203798,"line_start":7,"line_end":7,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::repeatn::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":2221},{"krate":0,"index":2222}],"decl_id":null,"docs":" An iterator that produces *n* repetitions of an element.","sig":null,"attributes":[{"value":"/ An iterator that produces *n* repetitions of an element.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/repeatn.rs","byte_start":203566,"byte_end":203626,"line_start":2,"line_end":2,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/repeatn.rs","byte_start":203627,"byte_end":203630,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ See [`repeat_n()`](../fn.repeat_n.html) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/repeatn.rs","byte_start":203631,"byte_end":203696,"line_start":4,"line_end":4,"column_start":1,"column_end":66}},{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/repeatn.rs","byte_start":203697,"byte_end":203762,"line_start":5,"line_end":5,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":1147},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/repeatn.rs","byte_start":203915,"byte_end":203923,"line_start":13,"line_end":13,"column_start":8,"column_end":16},"name":"repeat_n","qualname":"::repeatn::repeat_n","value":"pub fn repeat_n<A>(A, usize) -> RepeatN<A> where A: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that produces `n` repetitions of `element`.\n","sig":null,"attributes":[{"value":"/ Create an iterator that produces `n` repetitions of `element`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/repeatn.rs","byte_start":203841,"byte_end":203907,"line_start":12,"line_end":12,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1176},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":207621,"byte_end":207631,"line_start":10,"line_end":10,"column_start":12,"column_end":22},"name":"RepeatCall","qualname":"::sources::RepeatCall","value":"RepeatCall {  }","parent":null,"children":[{"krate":0,"index":1178}],"decl_id":null,"docs":" See [`repeat_call`](../fn.repeat_call.html) for more information.\n","sig":null,"attributes":[{"value":"/ See [`repeat_call`](../fn.repeat_call.html) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":207475,"byte_end":207544,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"deprecated(note = \"Use std repeat_with() instead\", since = \"0.8\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":207545,"byte_end":207609,"line_start":9,"line_end":9,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":1181},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208388,"byte_end":208399,"line_start":42,"line_end":42,"column_start":8,"column_end":19},"name":"repeat_call","qualname":"::sources::repeat_call","value":"pub fn repeat_call<F, A>(F) -> RepeatCall<F> where F: FnMut() -> A","parent":null,"children":[],"decl_id":null,"docs":" An iterator source that produces elements indefinitely by calling\n a given closure.","sig":null,"attributes":[{"value":"/ An iterator source that produces elements indefinitely by calling","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":207729,"byte_end":207798,"line_start":19,"line_end":19,"column_start":1,"column_end":70}},{"value":"/ a given closure.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":207799,"byte_end":207819,"line_start":20,"line_end":20,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":207820,"byte_end":207823,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is the return type of the closure.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":207824,"byte_end":207884,"line_start":22,"line_end":22,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":207885,"byte_end":207888,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":207889,"byte_end":207896,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use itertools::repeat_call;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":207897,"byte_end":207928,"line_start":25,"line_end":25,"column_start":1,"column_end":32}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":207929,"byte_end":207958,"line_start":26,"line_end":26,"column_start":1,"column_end":30}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":207959,"byte_end":207996,"line_start":27,"line_end":27,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":207997,"byte_end":208000,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let mut heap = BinaryHeap::from(vec![2, 5, 3, 7, 8]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208001,"byte_end":208058,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208059,"byte_end":208062,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ // extract each element in sorted order","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208063,"byte_end":208106,"line_start":31,"line_end":31,"column_start":1,"column_end":44}},{"value":"/ for element in repeat_call(|| heap.pop()).while_some() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208107,"byte_end":208167,"line_start":32,"line_end":32,"column_start":1,"column_end":61}},{"value":"/     print!(\"{}\", element);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208168,"byte_end":208198,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208199,"byte_end":208204,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208205,"byte_end":208208,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208209,"byte_end":208237,"line_start":36,"line_end":36,"column_start":1,"column_end":29}},{"value":"/     repeat_call(|| 1).take(5),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208238,"byte_end":208272,"line_start":37,"line_end":37,"column_start":1,"column_end":35}},{"value":"/     vec![1, 1, 1, 1, 1]","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208273,"byte_end":208300,"line_start":38,"line_end":38,"column_start":1,"column_end":28}},{"value":"/ );","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208301,"byte_end":208307,"line_start":39,"line_end":39,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208308,"byte_end":208315,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"deprecated(note = \"Use std repeat_with() instead\", since = \"0.8\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208316,"byte_end":208380,"line_start":41,"line_end":41,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":1190},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":210006,"byte_end":210012,"line_start":100,"line_end":100,"column_start":8,"column_end":14},"name":"unfold","qualname":"::sources::unfold","value":"pub fn unfold<A, St, F>(St, F) -> Unfold<St, F> where F: FnMut(&mut St) ->\nOption<A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unfold source with the specified closure as the \"iterator\n function\" and an initial state to eventually pass to the closure","sig":null,"attributes":[{"value":"/ Creates a new unfold source with the specified closure as the \"iterator","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208764,"byte_end":208839,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ function\" and an initial state to eventually pass to the closure","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208840,"byte_end":208908,"line_start":64,"line_end":64,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208909,"byte_end":208912,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ `unfold` is a general iterator builder: it has a mutable state value,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208913,"byte_end":208986,"line_start":66,"line_end":66,"column_start":1,"column_end":74}},{"value":"/ and a closure with access to the state that produces the next value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208987,"byte_end":209059,"line_start":67,"line_end":67,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209060,"byte_end":209063,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ This more or less equivalent to a regular struct with an `Iterator`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209064,"byte_end":209135,"line_start":69,"line_end":69,"column_start":1,"column_end":72}},{"value":"/ implementation, and is useful for one-off iterators.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209136,"byte_end":209192,"line_start":70,"line_end":70,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209193,"byte_end":209196,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209197,"byte_end":209204,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/ // an iterator that yields sequential Fibonacci numbers,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209205,"byte_end":209265,"line_start":73,"line_end":73,"column_start":1,"column_end":61}},{"value":"/ // and stops at the maximum representable value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209266,"byte_end":209318,"line_start":74,"line_end":74,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209319,"byte_end":209322,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ use itertools::unfold;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209323,"byte_end":209349,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209350,"byte_end":209353,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ let (mut x1, mut x2) = (1u32, 1u32);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209354,"byte_end":209394,"line_start":78,"line_end":78,"column_start":1,"column_end":41}},{"value":"/ let mut fibonacci = unfold((), move |_| {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209395,"byte_end":209440,"line_start":79,"line_end":79,"column_start":1,"column_end":46}},{"value":"/     // Attempt to get the next Fibonacci number","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209441,"byte_end":209492,"line_start":80,"line_end":80,"column_start":1,"column_end":52}},{"value":"/     let next = x1.saturating_add(x2);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209493,"byte_end":209534,"line_start":81,"line_end":81,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209535,"byte_end":209538,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/     // Shift left: ret <- x1 <- x2 <- next","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209539,"byte_end":209585,"line_start":83,"line_end":83,"column_start":1,"column_end":47}},{"value":"/     let ret = x1;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209586,"byte_end":209607,"line_start":84,"line_end":84,"column_start":1,"column_end":22}},{"value":"/     x1 = x2;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209608,"byte_end":209624,"line_start":85,"line_end":85,"column_start":1,"column_end":17}},{"value":"/     x2 = next;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209625,"byte_end":209643,"line_start":86,"line_end":86,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209644,"byte_end":209647,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/     // If addition has saturated at the maximum, we are finished","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209648,"byte_end":209716,"line_start":88,"line_end":88,"column_start":1,"column_end":69}},{"value":"/     if ret == x1 && ret > 1 {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209717,"byte_end":209750,"line_start":89,"line_end":89,"column_start":1,"column_end":34}},{"value":"/         return None;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209751,"byte_end":209775,"line_start":90,"line_end":90,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209776,"byte_end":209785,"line_start":91,"line_end":91,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209786,"byte_end":209789,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/     Some(ret)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209790,"byte_end":209807,"line_start":93,"line_end":93,"column_start":1,"column_end":18}},{"value":"/ });","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209808,"byte_end":209815,"line_start":94,"line_end":94,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209816,"byte_end":209819,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(fibonacci.by_ref().take(8),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209820,"byte_end":209875,"line_start":96,"line_end":96,"column_start":1,"column_end":56}},{"value":"/                         vec![1, 1, 2, 3, 5, 8, 13, 21]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209876,"byte_end":209936,"line_start":97,"line_end":97,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(fibonacci.last(), Some(2_971_215_073))","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209937,"byte_end":209990,"line_start":98,"line_end":98,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":209991,"byte_end":209998,"line_start":99,"line_end":99,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2228},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":210438,"byte_end":210444,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"Unfold","qualname":"::sources::Unfold","value":"Unfold { state }","parent":null,"children":[{"krate":0,"index":2231},{"krate":0,"index":2232}],"decl_id":null,"docs":" See [`unfold`](../fn.unfold.html) for more information.\n","sig":null,"attributes":[{"value":"/ See [`unfold`](../fn.unfold.html) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":210284,"byte_end":210343,"line_start":115,"line_end":115,"column_start":1,"column_end":60}},{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":210361,"byte_end":210426,"line_start":117,"line_end":117,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2232},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":210552,"byte_end":210557,"line_start":121,"line_end":121,"column_start":9,"column_end":14},"name":"state","qualname":"::sources::Unfold::state","value":"St","parent":{"krate":0,"index":2228},"children":[],"decl_id":null,"docs":" Internal state that will be passed to the closure on the next iteration\n","sig":null,"attributes":[{"value":"/ Internal state that will be passed to the closure on the next iteration","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":210468,"byte_end":210543,"line_start":120,"line_end":120,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":2237},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":211217,"byte_end":211224,"line_start":148,"line_end":148,"column_start":12,"column_end":19},"name":"Iterate","qualname":"::sources::Iterate","value":"Iterate {  }","parent":null,"children":[{"krate":0,"index":2240},{"krate":0,"index":2241}],"decl_id":null,"docs":" An iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[{"value":"/ An iterator that infinitely applies function to value and yields results.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":210907,"byte_end":210984,"line_start":141,"line_end":141,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":210985,"byte_end":210988,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iterate()`] function. See its documentation for more.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":210989,"byte_end":211080,"line_start":143,"line_end":143,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":211081,"byte_end":211084,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ [`iterate()`]: ../fn.iterate.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":211085,"byte_end":211122,"line_start":145,"line_end":145,"column_start":1,"column_end":38}},{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":211140,"byte_end":211205,"line_start":147,"line_end":147,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":1213},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":211981,"byte_end":211988,"line_start":183,"line_end":183,"column_start":8,"column_end":15},"name":"iterate","qualname":"::sources::iterate","value":"pub fn iterate<St, F>(St, F) -> Iterate<St, F> where F: FnMut(&St) -> St","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[{"value":"/ Creates a new iterator that infinitely applies function to value and yields results.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":211749,"byte_end":211837,"line_start":176,"line_end":176,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":211838,"byte_end":211841,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":211842,"byte_end":211849,"line_start":178,"line_end":178,"column_start":1,"column_end":8}},{"value":"/ use itertools::iterate;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":211850,"byte_end":211877,"line_start":179,"line_end":179,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":211878,"byte_end":211881,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(iterate(1, |&i| i * 3).take(5), vec![1, 3, 9, 27, 81]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":211882,"byte_end":211965,"line_start":181,"line_end":181,"column_start":1,"column_end":84}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":211966,"byte_end":211973,"line_start":182,"line_end":182,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2257},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tee.rs","byte_start":212709,"byte_end":212712,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"Tee","qualname":"::tee::Tee","value":"Tee {  }","parent":null,"children":[{"krate":0,"index":2259},{"krate":0,"index":2260}],"decl_id":null,"docs":" One half of an iterator pair where both return the same elements.","sig":null,"attributes":[{"value":"/ One half of an iterator pair where both return the same elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tee.rs","byte_start":212456,"byte_end":212525,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tee.rs","byte_start":212526,"byte_end":212529,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ See [`.tee()`](../trait.Itertools.html#method.tee) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tee.rs","byte_start":212530,"byte_end":212606,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tee.rs","byte_start":212607,"byte_end":212680,"line_start":19,"line_end":19,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2264},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":214558,"byte_end":214569,"line_start":10,"line_end":10,"column_start":12,"column_end":23},"name":"TupleBuffer","qualname":"::tuple_impl::TupleBuffer","value":"TupleBuffer {  }","parent":null,"children":[{"krate":0,"index":2266},{"krate":0,"index":2267}],"decl_id":null,"docs":" An iterator over a incomplete tuple.","sig":null,"attributes":[{"value":"/ An iterator over a incomplete tuple.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":214350,"byte_end":214390,"line_start":5,"line_end":5,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":214391,"byte_end":214394,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ See [`.tuples()`](../trait.Itertools.html#method.tuples) and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":214395,"byte_end":214459,"line_start":7,"line_end":7,"column_start":1,"column_end":65}},{"value":"/ [`Tuples::into_buffer()`](struct.Tuples.html#method.into_buffer).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":214460,"byte_end":214529,"line_start":8,"line_end":8,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":1243},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":215795,"byte_end":215801,"line_start":65,"line_end":65,"column_start":12,"column_end":18},"name":"Tuples","qualname":"::tuple_impl::Tuples","value":"Tuples {  }","parent":null,"children":[{"krate":0,"index":1246},{"krate":0,"index":1247}],"decl_id":null,"docs":" An iterator that groups the items in tuples of a specific size.","sig":null,"attributes":[{"value":"/ An iterator that groups the items in tuples of a specific size.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":215555,"byte_end":215622,"line_start":61,"line_end":61,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":215623,"byte_end":215626,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ See [`.tuples()`](../trait.Itertools.html#method.tuples) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":215627,"byte_end":215709,"line_start":63,"line_end":63,"column_start":1,"column_end":83}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":215710,"byte_end":215783,"line_start":64,"line_end":64,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1259},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":216840,"byte_end":216851,"line_start":109,"line_end":109,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Tuples<I, T>>::into_buffer","value":"pub fn into_buffer(Self) -> TupleBuffer<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a buffer with the produced items that was not enough to be grouped in a tuple.","sig":null,"attributes":[{"value":"/ Return a buffer with the produced items that was not enough to be grouped in a tuple.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":216471,"byte_end":216560,"line_start":99,"line_end":99,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":216565,"byte_end":216568,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":216573,"byte_end":216580,"line_start":101,"line_end":101,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":216585,"byte_end":216614,"line_start":102,"line_end":102,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":216619,"byte_end":216622,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ let mut iter = (0..5).tuples();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":216627,"byte_end":216662,"line_start":104,"line_end":104,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Some((0, 1, 2)), iter.next());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":216667,"byte_end":216712,"line_start":105,"line_end":105,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(None, iter.next());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":216717,"byte_end":216751,"line_start":106,"line_end":106,"column_start":5,"column_end":39}},{"value":"/ itertools::assert_equal(vec![3, 4], iter.into_buffer());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":216756,"byte_end":216816,"line_start":107,"line_end":107,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":216821,"byte_end":216828,"line_start":108,"line_end":108,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2271},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":217215,"byte_end":217227,"line_start":121,"line_end":121,"column_start":12,"column_end":24},"name":"TupleWindows","qualname":"::tuple_impl::TupleWindows","value":"TupleWindows {  }","parent":null,"children":[{"krate":0,"index":2274},{"krate":0,"index":2275}],"decl_id":null,"docs":" An iterator over all contiguous windows that produces tuples of a specific size.","sig":null,"attributes":[{"value":"/ An iterator over all contiguous windows that produces tuples of a specific size.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":216923,"byte_end":217007,"line_start":115,"line_end":115,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":217008,"byte_end":217011,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ See [`.tuple_windows()`](../trait.Itertools.html#method.tuple_windows) for more","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":217012,"byte_end":217095,"line_start":117,"line_end":117,"column_start":1,"column_end":84}},{"value":"/ information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":217096,"byte_end":217112,"line_start":118,"line_end":118,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":217113,"byte_end":217186,"line_start":119,"line_end":119,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":1269},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":218524,"byte_end":218536,"line_start":174,"line_end":174,"column_start":11,"column_end":23},"name":"TupleCollect","qualname":"::tuple_impl::TupleCollect","value":"TupleCollect: Sized","parent":null,"children":[{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1274},{"krate":0,"index":1276},{"krate":0,"index":1277}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1270},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":218555,"byte_end":218559,"line_start":175,"line_end":175,"column_start":10,"column_end":14},"name":"Item","qualname":"::tuple_impl::TupleCollect::Item","value":"type Item;","parent":{"krate":0,"index":1269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1271},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":218570,"byte_end":218576,"line_start":176,"line_end":176,"column_start":10,"column_end":16},"name":"Buffer","qualname":"::tuple_impl::TupleCollect::Buffer","value":"type Buffer: Default + AsRef<[Option<Self::Item>]> + AsMut<[Option<Self::Item>]>;","parent":{"krate":0,"index":1269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":218655,"byte_end":218672,"line_start":178,"line_end":178,"column_start":8,"column_end":25},"name":"collect_from_iter","qualname":"::tuple_impl::TupleCollect::collect_from_iter","value":"pub fn collect_from_iter<I>(I, &mut Self::Buffer) -> Option<Self> where\nI: IntoIterator<Item = Self::Item>","parent":{"krate":0,"index":1269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":218783,"byte_end":218807,"line_start":181,"line_end":181,"column_start":8,"column_end":32},"name":"collect_from_iter_no_buf","qualname":"::tuple_impl::TupleCollect::collect_from_iter_no_buf","value":"pub fn collect_from_iter_no_buf<I>(I) -> Option<Self> where\nI: IntoIterator<Item = Self::Item>","parent":{"krate":0,"index":1269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":218894,"byte_end":218903,"line_start":184,"line_end":184,"column_start":8,"column_end":17},"name":"num_items","qualname":"::tuple_impl::TupleCollect::num_items","value":"pub fn num_items() -> usize","parent":{"krate":0,"index":1269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1277},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":218924,"byte_end":218939,"line_start":186,"line_end":186,"column_start":8,"column_end":23},"name":"left_shift_push","qualname":"::tuple_impl::TupleCollect::left_shift_push","value":"pub fn left_shift_push(&mut Self, Self::Item)","parent":{"krate":0,"index":1269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2328},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/unique_impl.rs","byte_start":221666,"byte_end":221674,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"UniqueBy","qualname":"::unique_impl::UniqueBy","value":"UniqueBy {  }","parent":null,"children":[{"krate":0,"index":2332},{"krate":0,"index":2333},{"krate":0,"index":2334}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter out duplicate elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/unique_impl.rs","byte_start":221416,"byte_end":221473,"line_start":7,"line_end":7,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/unique_impl.rs","byte_start":221474,"byte_end":221477,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.unique_by()`](../trait.Itertools.html#method.unique) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/unique_impl.rs","byte_start":221478,"byte_end":221563,"line_start":9,"line_end":9,"column_start":1,"column_end":86}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/unique_impl.rs","byte_start":221581,"byte_end":221654,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2341},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/unique_impl.rs","byte_start":224296,"byte_end":224302,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"name":"Unique","qualname":"::unique_impl::Unique","value":"Unique {  }","parent":null,"children":[{"krate":0,"index":2343}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter out duplicate elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/unique_impl.rs","byte_start":224049,"byte_end":224106,"line_start":107,"line_end":107,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/unique_impl.rs","byte_start":224107,"byte_end":224110,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ See [`.unique()`](../trait.Itertools.html#method.unique) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/unique_impl.rs","byte_start":224111,"byte_end":224193,"line_start":109,"line_end":109,"column_start":1,"column_end":83}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/unique_impl.rs","byte_start":224211,"byte_end":224284,"line_start":111,"line_end":111,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1320},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225103,"byte_end":225115,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"WithPosition","qualname":"::with_position::WithPosition","value":"WithPosition {  }","parent":null,"children":[{"krate":0,"index":1322},{"krate":0,"index":1323}],"decl_id":null,"docs":" An iterator adaptor that wraps each element in an [`Position`](../enum.Position.html).","sig":null,"attributes":[{"value":"/ An iterator adaptor that wraps each element in an [`Position`](../enum.Position.html).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":224772,"byte_end":224862,"line_start":3,"line_end":3,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":224863,"byte_end":224866,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Position<I::Item>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":224867,"byte_end":224916,"line_start":5,"line_end":5,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":224917,"byte_end":224920,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ See [`.with_position()`](../trait.Itertools.html#method.with_position) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":224921,"byte_end":225017,"line_start":7,"line_end":7,"column_start":1,"column_end":97}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225018,"byte_end":225091,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2350},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225732,"byte_end":225737,"line_start":33,"line_end":33,"column_start":5,"column_end":10},"name":"First","qualname":"::with_position::Position::First","value":"Position::First(T)","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" This is the first element.\n","sig":null,"attributes":[{"value":"/ This is the first element.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225697,"byte_end":225727,"line_start":32,"line_end":32,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2353},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225802,"byte_end":225808,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Middle","qualname":"::with_position::Position::Middle","value":"Position::Middle(T)","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" This is neither the first nor the last element.\n","sig":null,"attributes":[{"value":"/ This is neither the first nor the last element.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225746,"byte_end":225797,"line_start":34,"line_end":34,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2356},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225851,"byte_end":225855,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Last","qualname":"::with_position::Position::Last","value":"Position::Last(T)","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" This is the last element.\n","sig":null,"attributes":[{"value":"/ This is the last element.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225817,"byte_end":225846,"line_start":36,"line_end":36,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2359},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225898,"byte_end":225902,"line_start":39,"line_end":39,"column_start":5,"column_end":9},"name":"Only","qualname":"::with_position::Position::Only","value":"Position::Only(T)","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" This is the only element.\n","sig":null,"attributes":[{"value":"/ This is the only element.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225864,"byte_end":225893,"line_start":38,"line_end":38,"column_start":5,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":2348},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225679,"byte_end":225687,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"Position","qualname":"::with_position::Position","value":"pub enum Position<T> {\n\n    /// This is the first element.\n    First(T),\n\n    /// This is neither the first nor the last element.\n    Middle(T),\n\n    /// This is the last element.\n    Last(T),\n\n    /// This is the only element.\n    Only(T),\n}","parent":null,"children":[{"krate":0,"index":2350},{"krate":0,"index":2353},{"krate":0,"index":2356},{"krate":0,"index":2359}],"decl_id":null,"docs":" A value yielded by `WithPosition`.\n Indicates the position of this element in the iterator results.","sig":null,"attributes":[{"value":"/ A value yielded by `WithPosition`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225424,"byte_end":225462,"line_start":26,"line_end":26,"column_start":1,"column_end":39}},{"value":"/ Indicates the position of this element in the iterator results.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225463,"byte_end":225530,"line_start":27,"line_end":27,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225531,"byte_end":225534,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ See [`.with_position()`](trait.Itertools.html#method.with_position) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225535,"byte_end":225628,"line_start":29,"line_end":29,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225975,"byte_end":225985,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Position<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the inner value.\n","sig":null,"attributes":[{"value":"/ Return the inner value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225936,"byte_end":225963,"line_start":43,"line_end":43,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":2376},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":227791,"byte_end":227796,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::zip_eq_impl::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":2379},{"krate":0,"index":2380}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"/ An iterator which iterates two other iterators simultaneously","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":227529,"byte_end":227594,"line_start":3,"line_end":3,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":227595,"byte_end":227598,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ See [`.zip_eq()`](../trait.Itertools.html#method.zip_eq) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":227599,"byte_end":227681,"line_start":5,"line_end":5,"column_start":1,"column_end":83}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":227706,"byte_end":227779,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1338},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":228171,"byte_end":228177,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::zip_eq_impl::zip_eq","value":"pub fn zip_eq<I, J>(I, J) -> ZipEq<I::IntoIter, J::IntoIter> where\nI: IntoIterator, J: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[{"value":"/ Iterate `i` and `j` in lock step.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":227828,"byte_end":227865,"line_start":13,"line_end":13,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":227866,"byte_end":227869,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ **Panics** if the iterators are not of the same length.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":227870,"byte_end":227929,"line_start":15,"line_end":15,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":227930,"byte_end":227933,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.zip_eq(j)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":227934,"byte_end":227986,"line_start":17,"line_end":17,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":227987,"byte_end":227990,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":227991,"byte_end":227998,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use itertools::zip_eq;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":227999,"byte_end":228025,"line_start":20,"line_end":20,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":228026,"byte_end":228029,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let data = [1, 2, 3, 4, 5];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":228030,"byte_end":228061,"line_start":22,"line_end":22,"column_start":1,"column_end":32}},{"value":"/ for (a, b) in zip_eq(&data[..data.len() - 1], &data[1..]) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":228062,"byte_end":228125,"line_start":23,"line_end":23,"column_start":1,"column_end":64}},{"value":"/     /* loop body */","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":228126,"byte_end":228149,"line_start":24,"line_end":24,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":228150,"byte_end":228155,"line_start":25,"line_end":25,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":228156,"byte_end":228163,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2389},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_longest.rs","byte_start":229602,"byte_end":229612,"line_start":17,"line_end":17,"column_start":12,"column_end":22},"name":"ZipLongest","qualname":"::zip_longest::ZipLongest","value":"ZipLongest {  }","parent":null,"children":[{"krate":0,"index":2392},{"krate":0,"index":2393}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"/ An iterator which iterates two other iterators simultaneously","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_longest.rs","byte_start":229296,"byte_end":229361,"line_start":10,"line_end":10,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_longest.rs","byte_start":229362,"byte_end":229365,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_longest.rs","byte_start":229366,"byte_end":229395,"line_start":12,"line_end":12,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_longest.rs","byte_start":229396,"byte_end":229399,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ See [`.zip_longest()`](../trait.Itertools.html#method.zip_longest) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_longest.rs","byte_start":229400,"byte_end":229492,"line_start":14,"line_end":14,"column_start":1,"column_end":93}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_longest.rs","byte_start":229517,"byte_end":229590,"line_start":16,"line_end":16,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2402},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":231636,"byte_end":231639,"line_start":6,"line_end":6,"column_start":12,"column_end":15},"name":"Zip","qualname":"::ziptuple::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":2404}],"decl_id":null,"docs":" See [`multizip`](../fn.multizip.html) for more information.\n","sig":null,"attributes":[{"value":"/ See [`multizip`](../fn.multizip.html) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":231463,"byte_end":231526,"line_start":3,"line_end":3,"column_start":1,"column_end":64}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":231551,"byte_end":231624,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1376},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232803,"byte_end":232811,"line_start":41,"line_end":41,"column_start":8,"column_end":16},"name":"multizip","qualname":"::ziptuple::multizip","value":"pub fn multizip<T, U>(U) -> Zip<T> where Zip<T>: From<U>, Zip<T>: Iterator","parent":null,"children":[],"decl_id":null,"docs":" An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","sig":null,"attributes":[{"value":"/ An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":231658,"byte_end":231750,"line_start":10,"line_end":10,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":231751,"byte_end":231754,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The iterator `Zip<(I, J, ..., M)>` is formed from a tuple of iterators (or values that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":231755,"byte_end":231845,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/ implement `IntoIterator`) and yields elements","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":231846,"byte_end":231895,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"/ until any of the subiterators yields `None`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":231896,"byte_end":231944,"line_start":14,"line_end":14,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":231945,"byte_end":231948,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ The iterator element type is a tuple like like `(A, B, ..., E)` where `A` to `E` are the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":231949,"byte_end":232041,"line_start":16,"line_end":16,"column_start":1,"column_end":93}},{"value":"/ element types of the subiterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232042,"byte_end":232079,"line_start":17,"line_end":17,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232080,"byte_end":232083,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ **Note:** The result of this macro is a value of a named type (`Zip<(I, J,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232084,"byte_end":232162,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ ..)>` of each component iterator `I, J, ...`) if each component iterator is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232163,"byte_end":232242,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ nameable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232243,"byte_end":232256,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232257,"byte_end":232260,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Prefer [`izip!()`] over `multizip` for the performance benefits of using the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232261,"byte_end":232341,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ standard library `.zip()`. Prefer `multizip` if a nameable type is needed.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232342,"byte_end":232420,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232421,"byte_end":232424,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ [`izip!()`]: macro.izip.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232425,"byte_end":232457,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232458,"byte_end":232461,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232462,"byte_end":232469,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/ use itertools::multizip;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232470,"byte_end":232498,"line_start":29,"line_end":29,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232499,"byte_end":232502,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ // iterate over three sequences side-by-side","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232503,"byte_end":232551,"line_start":31,"line_end":31,"column_start":1,"column_end":49}},{"value":"/ let mut results = [0, 0, 0, 0];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232552,"byte_end":232587,"line_start":32,"line_end":32,"column_start":1,"column_end":36}},{"value":"/ let inputs = [3, 7, 9, 6];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232588,"byte_end":232618,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232619,"byte_end":232622,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ for (r, index, input) in multizip((&mut results, 0..10, &inputs)) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232623,"byte_end":232694,"line_start":35,"line_end":35,"column_start":1,"column_end":72}},{"value":"/     *r = index * 10 + input;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232695,"byte_end":232727,"line_start":36,"line_end":36,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232728,"byte_end":232733,"line_start":37,"line_end":37,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232734,"byte_end":232737,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(results, [0 + 3, 10 + 7, 29, 36]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232738,"byte_end":232787,"line_start":39,"line_end":39,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/ziptuple.rs","byte_start":232788,"byte_end":232795,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":1382},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9817,"byte_end":9826,"line_start":344,"line_end":344,"column_start":11,"column_end":20},"name":"Itertools","qualname":"::Itertools","value":"Itertools: Iterator","parent":null,"children":[{"krate":0,"index":1383},{"krate":0,"index":1385},{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1390},{"krate":0,"index":1392},{"krate":0,"index":1395},{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1401},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1407},{"krate":0,"index":1412},{"krate":0,"index":1414},{"krate":0,"index":1417},{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1423},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1435},{"krate":0,"index":1437},{"krate":0,"index":1439},{"krate":0,"index":1441},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1451},{"krate":0,"index":1453},{"krate":0,"index":1455},{"krate":0,"index":1457},{"krate":0,"index":1459},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":1473},{"krate":0,"index":1475},{"krate":0,"index":1480},{"krate":0,"index":1484},{"krate":0,"index":1487},{"krate":0,"index":1499},{"krate":0,"index":1502},{"krate":0,"index":1505},{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1511},{"krate":0,"index":1514},{"krate":0,"index":1521},{"krate":0,"index":1524},{"krate":0,"index":1527},{"krate":0,"index":1531},{"krate":0,"index":1535}],"decl_id":null,"docs":" An [`Iterator`] blanket implementation that provides extra adaptors and\n methods.","sig":null,"attributes":[{"value":"/ An [`Iterator`] blanket implementation that provides extra adaptors and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9126,"byte_end":9201,"line_start":329,"line_end":329,"column_start":1,"column_end":76}},{"value":"/ methods.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9202,"byte_end":9214,"line_start":330,"line_end":330,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9215,"byte_end":9218,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ This trait defines a number of methods. They are divided into two groups:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9219,"byte_end":9296,"line_start":332,"line_end":332,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9297,"byte_end":9300,"line_start":333,"line_end":333,"column_start":1,"column_end":4}},{"value":"/ * *Adaptors* take an iterator and parameter as input, and return","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9301,"byte_end":9369,"line_start":334,"line_end":334,"column_start":1,"column_end":69}},{"value":"/ a new iterator value. These are listed first in the trait. An example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9370,"byte_end":9443,"line_start":335,"line_end":335,"column_start":1,"column_end":74}},{"value":"/ of an adaptor is [`.interleave()`](#method.interleave)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9444,"byte_end":9502,"line_start":336,"line_end":336,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9503,"byte_end":9506,"line_start":337,"line_end":337,"column_start":1,"column_end":4}},{"value":"/ * *Regular methods* are those that don't return iterators and instead","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9507,"byte_end":9580,"line_start":338,"line_end":338,"column_start":1,"column_end":74}},{"value":"/ return a regular value of some other kind.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9581,"byte_end":9627,"line_start":339,"line_end":339,"column_start":1,"column_end":47}},{"value":"/ [`.next_tuple()`](#method.next_tuple) is an example and the first regular","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9628,"byte_end":9705,"line_start":340,"line_end":340,"column_start":1,"column_end":78}},{"value":"/ method in the list.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9706,"byte_end":9729,"line_start":341,"line_end":341,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9730,"byte_end":9733,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ [`Iterator`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9734,"byte_end":9806,"line_start":343,"line_end":343,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1383},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10225,"byte_end":10235,"line_start":359,"line_end":359,"column_start":8,"column_end":18},"name":"interleave","qualname":"::Itertools::interleave","value":"pub fn interleave<J>(Self, J) -> Interleave<Self, J::IntoIter> where\nJ: IntoIterator<Item = Self::Item>, Self: Sized","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until both have run out.","sig":null,"attributes":[{"value":"/ Alternate elements from two iterators until both have run out.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9861,"byte_end":9927,"line_start":347,"line_end":347,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9932,"byte_end":9935,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9940,"byte_end":9982,"line_start":349,"line_end":349,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9987,"byte_end":9990,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9995,"byte_end":10024,"line_start":351,"line_end":351,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10029,"byte_end":10032,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10037,"byte_end":10044,"line_start":353,"line_end":353,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10049,"byte_end":10078,"line_start":354,"line_end":354,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10083,"byte_end":10086,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ let it = (1..7).interleave(vec![-1, -2]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10091,"byte_end":10136,"line_start":356,"line_end":356,"column_start":5,"column_end":50}},{"value":"/ itertools::assert_equal(it, vec![1, -1, 2, -2, 3, 4, 5, 6]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10141,"byte_end":10205,"line_start":357,"line_end":357,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10210,"byte_end":10217,"line_start":358,"line_end":358,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1385},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10758,"byte_end":10777,"line_start":377,"line_end":377,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::Itertools::interleave_shortest","value":"pub fn interleave_shortest<J>(Self, J)\n-> InterleaveShortest<Self, J::IntoIter> where J: IntoIterator<Item =\nSelf::Item>, Self: Sized","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until at least one of them has run\n out.","sig":null,"attributes":[{"value":"/ Alternate elements from two iterators until at least one of them has run","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10413,"byte_end":10489,"line_start":366,"line_end":366,"column_start":5,"column_end":81}},{"value":"/ out.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10494,"byte_end":10502,"line_start":367,"line_end":367,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10507,"byte_end":10510,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10515,"byte_end":10557,"line_start":369,"line_end":369,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10562,"byte_end":10565,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10570,"byte_end":10577,"line_start":371,"line_end":371,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10582,"byte_end":10611,"line_start":372,"line_end":372,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10616,"byte_end":10619,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ let it = (1..7).interleave_shortest(vec![-1, -2]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10624,"byte_end":10678,"line_start":374,"line_end":374,"column_start":5,"column_end":59}},{"value":"/ itertools::assert_equal(it, vec![1, -1, 2, -2, 3]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10683,"byte_end":10738,"line_start":375,"line_end":375,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10743,"byte_end":10750,"line_start":376,"line_end":376,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1387},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11356,"byte_end":11367,"line_start":396,"line_end":396,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::Itertools::intersperse","value":"pub fn intersperse(Self, Self::Item) -> Intersperse<Self> where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor to insert a particular value","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":10994,"byte_end":11046,"line_start":384,"line_end":384,"column_start":5,"column_end":57}},{"value":"/ between each element of the adapted iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11051,"byte_end":11100,"line_start":385,"line_end":385,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11105,"byte_end":11108,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11113,"byte_end":11155,"line_start":387,"line_end":387,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11160,"byte_end":11163,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11168,"byte_end":11197,"line_start":389,"line_end":389,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11202,"byte_end":11205,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11210,"byte_end":11217,"line_start":391,"line_end":391,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11222,"byte_end":11251,"line_start":392,"line_end":392,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11256,"byte_end":11259,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal((0..3).intersperse(8), vec![0, 8, 1, 8, 2]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11264,"byte_end":11336,"line_start":394,"line_end":394,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11341,"byte_end":11348,"line_start":395,"line_end":395,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12610,"byte_end":12621,"line_start":430,"line_end":430,"column_start":8,"column_end":19},"name":"zip_longest","qualname":"::Itertools::zip_longest","value":"pub fn zip_longest<J>(Self, J) -> ZipLongest<Self, J::IntoIter> where\nJ: IntoIterator, Self: Sized","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of two optional elements.","sig":null,"attributes":[{"value":"/ Create an iterator which iterates over both this and the specified","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11540,"byte_end":11610,"line_start":403,"line_end":403,"column_start":5,"column_end":75}},{"value":"/ iterator simultaneously, yielding pairs of two optional elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11615,"byte_end":11684,"line_start":404,"line_end":404,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11689,"byte_end":11692,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11697,"byte_end":11726,"line_start":406,"line_end":406,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11731,"byte_end":11734,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ As long as neither input iterator is exhausted yet, it yields two values","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11739,"byte_end":11815,"line_start":408,"line_end":408,"column_start":5,"column_end":81}},{"value":"/ via `EitherOrBoth::Both`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11820,"byte_end":11849,"line_start":409,"line_end":409,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11854,"byte_end":11857,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ When the parameter iterator is exhausted, it only yields a value from the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11862,"byte_end":11939,"line_start":411,"line_end":411,"column_start":5,"column_end":82}},{"value":"/ `self` iterator via `EitherOrBoth::Left`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11944,"byte_end":11989,"line_start":412,"line_end":412,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":11994,"byte_end":11997,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ When the `self` iterator is exhausted, it only yields a value from the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12002,"byte_end":12076,"line_start":414,"line_end":414,"column_start":5,"column_end":79}},{"value":"/ parameter iterator via `EitherOrBoth::Right`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12081,"byte_end":12130,"line_start":415,"line_end":415,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12135,"byte_end":12138,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ When both iterators return `None`, all further invocations of `.next()`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12143,"byte_end":12218,"line_start":417,"line_end":417,"column_start":5,"column_end":80}},{"value":"/ will return `None`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12223,"byte_end":12246,"line_start":418,"line_end":418,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12251,"byte_end":12254,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12259,"byte_end":12287,"line_start":420,"line_end":420,"column_start":5,"column_end":33}},{"value":"/ [`EitherOrBoth<Self::Item, J::Item>`](enum.EitherOrBoth.html).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12292,"byte_end":12358,"line_start":421,"line_end":421,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12363,"byte_end":12366,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12371,"byte_end":12382,"line_start":423,"line_end":423,"column_start":5,"column_end":16}},{"value":"/ use itertools::EitherOrBoth::{Both, Right};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12387,"byte_end":12434,"line_start":424,"line_end":424,"column_start":5,"column_end":52}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12439,"byte_end":12468,"line_start":425,"line_end":425,"column_start":5,"column_end":34}},{"value":"/ let it = (0..1).zip_longest(1..3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12473,"byte_end":12511,"line_start":426,"line_end":426,"column_start":5,"column_end":43}},{"value":"/ itertools::assert_equal(it, vec![Both(0, 1), Right(2)]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12516,"byte_end":12576,"line_start":427,"line_end":427,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12581,"byte_end":12588,"line_start":428,"line_end":428,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12593,"byte_end":12602,"line_start":429,"line_end":429,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13059,"byte_end":13065,"line_start":443,"line_end":443,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::Itertools::zip_eq","value":"pub fn zip_eq<J>(Self, J) -> ZipEq<Self, J::IntoIter> where J: IntoIterator,\nSelf: Sized","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of elements.","sig":null,"attributes":[{"value":"/ Create an iterator which iterates over both this and the specified","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12806,"byte_end":12876,"line_start":437,"line_end":437,"column_start":5,"column_end":75}},{"value":"/ iterator simultaneously, yielding pairs of elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12881,"byte_end":12937,"line_start":438,"line_end":438,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12942,"byte_end":12945,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the iterators reach an end and they are not of equal","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":12950,"byte_end":13020,"line_start":440,"line_end":440,"column_start":5,"column_end":75}},{"value":"/ lengths.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13025,"byte_end":13037,"line_start":441,"line_end":441,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13042,"byte_end":13051,"line_start":442,"line_end":442,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13981,"byte_end":13989,"line_start":473,"line_end":473,"column_start":8,"column_end":16},"name":"batching","qualname":"::Itertools::batching","value":"pub fn batching<B, F>(Self, F) -> Batching<Self, F> where F: FnMut(&mut Self)\n-> Option<B>, Self: Sized","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure receives a reference to the\n iterator and may pick off as many elements as it likes, to produce the\n next iterator element.","sig":null,"attributes":[{"value":"/ A “meta iterator adaptor”. Its closure receives a reference to the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13215,"byte_end":13289,"line_start":450,"line_end":450,"column_start":5,"column_end":75}},{"value":"/ iterator and may pick off as many elements as it likes, to produce the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13294,"byte_end":13368,"line_start":451,"line_end":451,"column_start":5,"column_end":79}},{"value":"/ next iterator element.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13373,"byte_end":13399,"line_start":452,"line_end":452,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13404,"byte_end":13407,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `B`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13412,"byte_end":13445,"line_start":454,"line_end":454,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13450,"byte_end":13453,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13458,"byte_end":13465,"line_start":456,"line_end":456,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13470,"byte_end":13499,"line_start":457,"line_end":457,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13504,"byte_end":13507,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ // An adaptor that gathers elements in pairs","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13512,"byte_end":13560,"line_start":459,"line_end":459,"column_start":5,"column_end":53}},{"value":"/ let pit = (0..4).batching(|it| {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13565,"byte_end":13601,"line_start":460,"line_end":460,"column_start":5,"column_end":41}},{"value":"/            match it.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13606,"byte_end":13638,"line_start":461,"line_end":461,"column_start":5,"column_end":37}},{"value":"/                None => None,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13643,"byte_end":13675,"line_start":462,"line_end":462,"column_start":5,"column_end":37}},{"value":"/                Some(x) => match it.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13680,"byte_end":13727,"line_start":463,"line_end":463,"column_start":5,"column_end":52}},{"value":"/                    None => None,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13732,"byte_end":13768,"line_start":464,"line_end":464,"column_start":5,"column_end":41}},{"value":"/                    Some(y) => Some((x, y)),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13773,"byte_end":13820,"line_start":465,"line_end":465,"column_start":5,"column_end":52}},{"value":"/                }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13825,"byte_end":13845,"line_start":466,"line_end":466,"column_start":5,"column_end":25}},{"value":"/            }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13850,"byte_end":13866,"line_start":467,"line_end":467,"column_start":5,"column_end":21}},{"value":"/        });","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13871,"byte_end":13885,"line_start":468,"line_end":468,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13890,"byte_end":13893,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(pit, vec![(0, 1), (2, 3)]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13898,"byte_end":13953,"line_start":470,"line_end":470,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13958,"byte_end":13965,"line_start":471,"line_end":471,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":13970,"byte_end":13973,"line_start":472,"line_end":472,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1395},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15620,"byte_end":15628,"line_start":514,"line_end":514,"column_start":8,"column_end":16},"name":"group_by","qualname":"::Itertools::group_by","value":"pub fn group_by<K, F>(Self, F) -> GroupBy<K, Self, F> where Self: Sized,\nF: FnMut(&Self::Item) -> K, K: PartialEq","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an *iterable* that can group iterator elements.\n Consecutive elements that map to the same key (“runs”), are assigned\n to the same group.","sig":null,"attributes":[{"value":"/ Return an *iterable* that can group iterator elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":14156,"byte_end":14214,"line_start":480,"line_end":480,"column_start":5,"column_end":63}},{"value":"/ Consecutive elements that map to the same key (“runs”), are assigned","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":14219,"byte_end":14295,"line_start":481,"line_end":481,"column_start":5,"column_end":77}},{"value":"/ to the same group.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":14300,"byte_end":14322,"line_start":482,"line_end":482,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":14327,"byte_end":14330,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ `GroupBy` is the storage for the lazy grouping operation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":14335,"byte_end":14396,"line_start":484,"line_end":484,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":14401,"byte_end":14404,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ If the groups are consumed in order, or if each group's iterator is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":14409,"byte_end":14480,"line_start":486,"line_end":486,"column_start":5,"column_end":76}},{"value":"/ dropped without keeping it around, then `GroupBy` uses no","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":14485,"byte_end":14546,"line_start":487,"line_end":487,"column_start":5,"column_end":66}},{"value":"/ allocations.  It needs allocations only if several group iterators","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":14551,"byte_end":14621,"line_start":488,"line_end":488,"column_start":5,"column_end":75}},{"value":"/ are alive at the same time.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":14626,"byte_end":14657,"line_start":489,"line_end":489,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":14662,"byte_end":14665,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ This type implements `IntoIterator` (it is **not** an iterator","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":14670,"byte_end":14736,"line_start":491,"line_end":491,"column_start":5,"column_end":71}},{"value":"/ itself), because the group iterators need to borrow from this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":14741,"byte_end":14806,"line_start":492,"line_end":492,"column_start":5,"column_end":70}},{"value":"/ value. It should be stored in a local variable or temporary and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":14811,"byte_end":14878,"line_start":493,"line_end":493,"column_start":5,"column_end":72}},{"value":"/ iterated.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":14883,"byte_end":14896,"line_start":494,"line_end":494,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":14901,"byte_end":14904,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(K, Group)`: the group's key and the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":14909,"byte_end":14975,"line_start":496,"line_end":496,"column_start":5,"column_end":71}},{"value":"/ group iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":14980,"byte_end":14999,"line_start":497,"line_end":497,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15004,"byte_end":15007,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15012,"byte_end":15019,"line_start":499,"line_end":499,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15024,"byte_end":15053,"line_start":500,"line_end":500,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15058,"byte_end":15061,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ // group data into runs of larger than zero or not.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15066,"byte_end":15121,"line_start":502,"line_end":502,"column_start":5,"column_end":60}},{"value":"/ let data = vec![1, 3, -2, -2, 1, 0, 1, 2];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15126,"byte_end":15172,"line_start":503,"line_end":503,"column_start":5,"column_end":51}},{"value":"/ // groups:     |---->|------>|--------->|","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15177,"byte_end":15222,"line_start":504,"line_end":504,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15227,"byte_end":15230,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ // Note: The `&` is significant here, `GroupBy` is iterable","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15235,"byte_end":15298,"line_start":506,"line_end":506,"column_start":5,"column_end":68}},{"value":"/ // only by reference. You can also call `.into_iter()` explicitly.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15303,"byte_end":15373,"line_start":507,"line_end":507,"column_start":5,"column_end":75}},{"value":"/ for (key, group) in &data.into_iter().group_by(|elt| *elt >= 0) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15378,"byte_end":15447,"line_start":508,"line_end":508,"column_start":5,"column_end":74}},{"value":"/     // Check that the sum of each group is +/- 4.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15452,"byte_end":15505,"line_start":509,"line_end":509,"column_start":5,"column_end":58}},{"value":"/     assert_eq!(4, group.sum::<i32>().abs());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15510,"byte_end":15558,"line_start":510,"line_end":510,"column_start":5,"column_end":53}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15563,"byte_end":15568,"line_start":511,"line_end":511,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15573,"byte_end":15580,"line_start":512,"line_end":512,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15585,"byte_end":15612,"line_start":513,"line_end":513,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16907,"byte_end":16913,"line_start":550,"line_end":550,"column_start":8,"column_end":14},"name":"chunks","qualname":"::Itertools::chunks","value":"pub fn chunks(Self, usize) -> IntoChunks<Self> where Self: Sized","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an *iterable* that can chunk the iterator.","sig":null,"attributes":[{"value":"/ Return an *iterable* that can chunk the iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15822,"byte_end":15875,"line_start":522,"line_end":522,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15880,"byte_end":15883,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ Yield subiterators (chunks) that each yield a fixed number elements,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15888,"byte_end":15960,"line_start":524,"line_end":524,"column_start":5,"column_end":77}},{"value":"/ determined by `size`. The last chunk will be shorter if there aren't","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":15965,"byte_end":16037,"line_start":525,"line_end":525,"column_start":5,"column_end":77}},{"value":"/ enough elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16042,"byte_end":16062,"line_start":526,"line_end":526,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16067,"byte_end":16070,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ `IntoChunks` is based on `GroupBy`: it is iterable (implements","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16075,"byte_end":16141,"line_start":528,"line_end":528,"column_start":5,"column_end":71}},{"value":"/ `IntoIterator`, **not** `Iterator`), and it only buffers if several","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16146,"byte_end":16217,"line_start":529,"line_end":529,"column_start":5,"column_end":76}},{"value":"/ chunk iterators are alive at the same time.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16222,"byte_end":16269,"line_start":530,"line_end":530,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16274,"byte_end":16277,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Chunk`, each chunk's iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16282,"byte_end":16342,"line_start":532,"line_end":532,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16347,"byte_end":16350,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `size` is 0.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16355,"byte_end":16385,"line_start":534,"line_end":534,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16390,"byte_end":16393,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16398,"byte_end":16405,"line_start":536,"line_end":536,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16410,"byte_end":16439,"line_start":537,"line_end":537,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16444,"byte_end":16447,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 1, 2, -2, 6, 0, 3, 1];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16452,"byte_end":16497,"line_start":539,"line_end":539,"column_start":5,"column_end":50}},{"value":"/ //chunk size=3 |------->|-------->|--->|","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16502,"byte_end":16546,"line_start":540,"line_end":540,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16551,"byte_end":16554,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ // Note: The `&` is significant here, `IntoChunks` is iterable","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16559,"byte_end":16625,"line_start":542,"line_end":542,"column_start":5,"column_end":71}},{"value":"/ // only by reference. You can also call `.into_iter()` explicitly.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16630,"byte_end":16700,"line_start":543,"line_end":543,"column_start":5,"column_end":75}},{"value":"/ for chunk in &data.into_iter().chunks(3) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16705,"byte_end":16751,"line_start":544,"line_end":544,"column_start":5,"column_end":51}},{"value":"/     // Check that the sum of each chunk is 4.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16756,"byte_end":16805,"line_start":545,"line_end":545,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(4, chunk.sum());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16810,"byte_end":16845,"line_start":546,"line_end":546,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16850,"byte_end":16855,"line_start":547,"line_end":547,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16860,"byte_end":16867,"line_start":548,"line_end":548,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":16872,"byte_end":16899,"line_start":549,"line_end":549,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18269,"byte_end":18282,"line_start":588,"line_end":588,"column_start":8,"column_end":21},"name":"tuple_windows","qualname":"::Itertools::tuple_windows","value":"pub fn tuple_windows<T>(Self) -> TupleWindows<Self, T> where Self: Sized +\nIterator<Item = T::Item>, T: tuple_impl::TupleCollect, T::Item: Clone","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator over all contiguous windows producing tuples of\n a specific size (up to 4).","sig":null,"attributes":[{"value":"/ Return an iterator over all contiguous windows producing tuples of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17069,"byte_end":17139,"line_start":557,"line_end":557,"column_start":5,"column_end":75}},{"value":"/ a specific size (up to 4).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17144,"byte_end":17174,"line_start":558,"line_end":558,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17179,"byte_end":17182,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ `tuple_windows` clones the iterator elements so that they can be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17187,"byte_end":17255,"line_start":560,"line_end":560,"column_start":5,"column_end":73}},{"value":"/ part of successive windows, this makes it most suited for iterators","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17260,"byte_end":17331,"line_start":561,"line_end":561,"column_start":5,"column_end":76}},{"value":"/ of references and other values that are cheap to copy.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17336,"byte_end":17394,"line_start":562,"line_end":562,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17399,"byte_end":17402,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17407,"byte_end":17414,"line_start":564,"line_end":564,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17419,"byte_end":17448,"line_start":565,"line_end":565,"column_start":5,"column_end":34}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17453,"byte_end":17480,"line_start":566,"line_end":566,"column_start":5,"column_end":32}},{"value":"/ for (a, b) in (1..5).tuple_windows() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17485,"byte_end":17527,"line_start":567,"line_end":567,"column_start":5,"column_end":47}},{"value":"/     v.push((a, b));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17532,"byte_end":17555,"line_start":568,"line_end":568,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17560,"byte_end":17565,"line_start":569,"line_end":569,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (2, 3), (3, 4)]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17570,"byte_end":17618,"line_start":570,"line_end":570,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17623,"byte_end":17626,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..5).tuple_windows();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17631,"byte_end":17671,"line_start":572,"line_end":572,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17676,"byte_end":17719,"line_start":573,"line_end":573,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((2, 3, 4)), it.next());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17724,"byte_end":17767,"line_start":574,"line_end":574,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17772,"byte_end":17804,"line_start":575,"line_end":575,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17809,"byte_end":17812,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17817,"byte_end":17849,"line_start":577,"line_end":577,"column_start":5,"column_end":37}},{"value":"/ let it = (1..5).tuple_windows::<(_, _, _)>();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17854,"byte_end":17903,"line_start":578,"line_end":578,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (2, 3, 4)]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17908,"byte_end":17968,"line_start":579,"line_end":579,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17973,"byte_end":17976,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ // you can also specify the complete type","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":17981,"byte_end":18026,"line_start":581,"line_end":581,"column_start":5,"column_end":50}},{"value":"/ use itertools::TupleWindows;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18031,"byte_end":18063,"line_start":582,"line_end":582,"column_start":5,"column_end":37}},{"value":"/ use std::ops::Range;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18068,"byte_end":18092,"line_start":583,"line_end":583,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18097,"byte_end":18100,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ let it: TupleWindows<Range<u32>, (u32, u32, u32)> = (1..5).tuple_windows();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18105,"byte_end":18184,"line_start":585,"line_end":585,"column_start":5,"column_end":84}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (2, 3, 4)]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18189,"byte_end":18249,"line_start":586,"line_end":586,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18254,"byte_end":18261,"line_start":587,"line_end":587,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19591,"byte_end":19597,"line_start":627,"line_end":627,"column_start":8,"column_end":14},"name":"tuples","qualname":"::Itertools::tuples","value":"pub fn tuples<T>(Self) -> Tuples<Self, T> where Self: Sized + Iterator<Item =\nT::Item>, T: tuple_impl::TupleCollect","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator that groups the items in tuples of a specific size\n (up to 4).","sig":null,"attributes":[{"value":"/ Return an iterator that groups the items in tuples of a specific size","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18500,"byte_end":18573,"line_start":596,"line_end":596,"column_start":5,"column_end":78}},{"value":"/ (up to 4).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18578,"byte_end":18592,"line_start":597,"line_end":597,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18597,"byte_end":18600,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ See also the method [`.next_tuple()`](#method.next_tuple).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18605,"byte_end":18667,"line_start":599,"line_end":599,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18672,"byte_end":18675,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18680,"byte_end":18687,"line_start":601,"line_end":601,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18692,"byte_end":18721,"line_start":602,"line_end":602,"column_start":5,"column_end":34}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18726,"byte_end":18753,"line_start":603,"line_end":603,"column_start":5,"column_end":32}},{"value":"/ for (a, b) in (1..5).tuples() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18758,"byte_end":18793,"line_start":604,"line_end":604,"column_start":5,"column_end":40}},{"value":"/     v.push((a, b));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18798,"byte_end":18821,"line_start":605,"line_end":605,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18826,"byte_end":18831,"line_start":606,"line_end":606,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (3, 4)]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18836,"byte_end":18876,"line_start":607,"line_end":607,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18881,"byte_end":18884,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..7).tuples();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18889,"byte_end":18922,"line_start":609,"line_end":609,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18927,"byte_end":18970,"line_start":610,"line_end":610,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((4, 5, 6)), it.next());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":18975,"byte_end":19018,"line_start":611,"line_end":611,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19023,"byte_end":19055,"line_start":612,"line_end":612,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19060,"byte_end":19063,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19068,"byte_end":19100,"line_start":614,"line_end":614,"column_start":5,"column_end":37}},{"value":"/ let it = (1..7).tuples::<(_, _, _)>();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19105,"byte_end":19147,"line_start":615,"line_end":615,"column_start":5,"column_end":47}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (4, 5, 6)]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19152,"byte_end":19212,"line_start":616,"line_end":616,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19217,"byte_end":19220,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ // you can also specify the complete type","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19225,"byte_end":19270,"line_start":618,"line_end":618,"column_start":5,"column_end":50}},{"value":"/ use itertools::Tuples;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19275,"byte_end":19301,"line_start":619,"line_end":619,"column_start":5,"column_end":31}},{"value":"/ use std::ops::Range;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19306,"byte_end":19330,"line_start":620,"line_end":620,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19335,"byte_end":19338,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ let it: Tuples<Range<u32>, (u32, u32, u32)> = (1..7).tuples();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19343,"byte_end":19409,"line_start":622,"line_end":622,"column_start":5,"column_end":71}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (4, 5, 6)]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19414,"byte_end":19474,"line_start":623,"line_end":623,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19479,"byte_end":19486,"line_start":624,"line_end":624,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19491,"byte_end":19494,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ See also [`Tuples::into_buffer`](structs/struct.Tuples.html#method.into_buffer).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19499,"byte_end":19583,"line_start":626,"line_end":626,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20406,"byte_end":20409,"line_start":652,"line_end":652,"column_start":8,"column_end":11},"name":"tee","qualname":"::Itertools::tee","value":"pub fn tee(Self) -> (Tee<Self>, Tee<Self>) where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Split into an iterator pair that both yield all elements from\n the original iterator.","sig":null,"attributes":[{"value":"/ Split into an iterator pair that both yield all elements from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19772,"byte_end":19837,"line_start":634,"line_end":634,"column_start":5,"column_end":70}},{"value":"/ the original iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19842,"byte_end":19868,"line_start":635,"line_end":635,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19873,"byte_end":19876,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ **Note:** If the iterator is clonable, prefer using that instead","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19881,"byte_end":19949,"line_start":637,"line_end":637,"column_start":5,"column_end":73}},{"value":"/ of using this method. It is likely to be more efficient.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":19954,"byte_end":20014,"line_start":638,"line_end":638,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20019,"byte_end":20022,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20027,"byte_end":20069,"line_start":640,"line_end":640,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20074,"byte_end":20077,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20082,"byte_end":20089,"line_start":642,"line_end":642,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20094,"byte_end":20123,"line_start":643,"line_end":643,"column_start":5,"column_end":34}},{"value":"/ let xs = vec![0, 1, 2, 3];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20128,"byte_end":20158,"line_start":644,"line_end":644,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20163,"byte_end":20166,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ let (mut t1, t2) = xs.into_iter().tee();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20171,"byte_end":20215,"line_start":646,"line_end":646,"column_start":5,"column_end":49}},{"value":"/ itertools::assert_equal(t1.next(), Some(0));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20220,"byte_end":20268,"line_start":647,"line_end":647,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(t2, 0..4);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20273,"byte_end":20311,"line_start":648,"line_end":648,"column_start":5,"column_end":43}},{"value":"/ itertools::assert_equal(t1, 1..4);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20316,"byte_end":20354,"line_start":649,"line_end":649,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20359,"byte_end":20366,"line_start":650,"line_end":650,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20371,"byte_end":20398,"line_start":651,"line_end":651,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21138,"byte_end":21142,"line_start":677,"line_end":677,"column_start":8,"column_end":12},"name":"step","qualname":"::Itertools::step","value":"pub fn step(Self, usize) -> Step<Self> where Self: Sized","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that steps `n` elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that steps `n` elements in the base iterator","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20541,"byte_end":20616,"line_start":659,"line_end":659,"column_start":5,"column_end":80}},{"value":"/ for each iteration.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20621,"byte_end":20644,"line_start":660,"line_end":660,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20649,"byte_end":20652,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ The iterator steps by yielding the next element from the base iterator,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20657,"byte_end":20732,"line_start":662,"line_end":662,"column_start":5,"column_end":80}},{"value":"/ then skipping forward `n - 1` elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20737,"byte_end":20780,"line_start":663,"line_end":663,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20785,"byte_end":20788,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20793,"byte_end":20835,"line_start":665,"line_end":665,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20840,"byte_end":20843,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the step is 0.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20848,"byte_end":20880,"line_start":667,"line_end":667,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20885,"byte_end":20888,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20893,"byte_end":20900,"line_start":669,"line_end":669,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20905,"byte_end":20934,"line_start":670,"line_end":670,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20939,"byte_end":20942,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ let it = (0..8).step(3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20947,"byte_end":20975,"line_start":672,"line_end":672,"column_start":5,"column_end":33}},{"value":"/ itertools::assert_equal(it, vec![0, 3, 6]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":20980,"byte_end":21027,"line_start":673,"line_end":673,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21032,"byte_end":21039,"line_start":674,"line_end":674,"column_start":5,"column_end":12}},{"value":"deprecated(note = \"Use std .step_by() instead\", since = \"0.8\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21044,"byte_end":21105,"line_start":675,"line_end":675,"column_start":5,"column_end":66}},{"value":"allow(deprecated)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21110,"byte_end":21130,"line_start":676,"line_end":676,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1405},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21450,"byte_end":21458,"line_start":690,"line_end":690,"column_start":8,"column_end":16},"name":"map_into","qualname":"::Itertools::map_into","value":"pub fn map_into<R>(Self) -> MapInto<Self, R> where Self: Sized,\nSelf::Item: Into<R>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Convert each item of the iterator using the `Into` trait.","sig":null,"attributes":[{"value":"/ Convert each item of the iterator using the `Into` trait.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21248,"byte_end":21309,"line_start":683,"line_end":683,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21314,"byte_end":21317,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21322,"byte_end":21333,"line_start":685,"line_end":685,"column_start":5,"column_end":16}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21338,"byte_end":21367,"line_start":686,"line_end":686,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21372,"byte_end":21375,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ (1i32..42i32).map_into::<f64>().collect_vec();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21380,"byte_end":21430,"line_start":688,"line_end":688,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21435,"byte_end":21442,"line_start":689,"line_end":689,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1407},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":22011,"byte_end":22022,"line_start":708,"line_end":708,"column_start":8,"column_end":19},"name":"map_results","qualname":"::Itertools::map_results","value":"pub fn map_results<F, T, U, E>(Self, F) -> MapResults<Self, F> where\nSelf: Iterator<Item = Result<T, E>> + Sized, F: FnMut(T) -> U","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies the provided closure\n to every `Result::Ok` value. `Result::Err` values are\n unchanged.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that applies the provided closure","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21600,"byte_end":21664,"line_start":697,"line_end":697,"column_start":5,"column_end":69}},{"value":"/ to every `Result::Ok` value. `Result::Err` values are","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21669,"byte_end":21726,"line_start":698,"line_end":698,"column_start":5,"column_end":62}},{"value":"/ unchanged.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21731,"byte_end":21745,"line_start":699,"line_end":699,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21750,"byte_end":21753,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21758,"byte_end":21765,"line_start":701,"line_end":701,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21770,"byte_end":21799,"line_start":702,"line_end":702,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21804,"byte_end":21807,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ let input = vec![Ok(41), Err(false), Ok(11)];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21812,"byte_end":21861,"line_start":704,"line_end":704,"column_start":5,"column_end":54}},{"value":"/ let it = input.into_iter().map_results(|i| i + 1);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21866,"byte_end":21920,"line_start":705,"line_end":705,"column_start":5,"column_end":59}},{"value":"/ itertools::assert_equal(it, vec![Ok(42), Err(false), Ok(12)]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21925,"byte_end":21991,"line_start":706,"line_end":706,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":21996,"byte_end":22003,"line_start":707,"line_end":707,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":22685,"byte_end":22690,"line_start":729,"line_end":729,"column_start":8,"column_end":13},"name":"merge","qualname":"::Itertools::merge","value":"pub fn merge<J>(Self, J) -> Merge<Self, J::IntoIter> where Self: Sized,\nSelf::Item: PartialOrd, J: IntoIterator<Item = Self::Item>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in\n ascending order.  If both base iterators are sorted (ascending), the\n result is sorted.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that merges the two base iterators in","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":22217,"byte_end":22285,"line_start":715,"line_end":715,"column_start":5,"column_end":73}},{"value":"/ ascending order.  If both base iterators are sorted (ascending), the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":22290,"byte_end":22362,"line_start":716,"line_end":716,"column_start":5,"column_end":77}},{"value":"/ result is sorted.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":22367,"byte_end":22388,"line_start":717,"line_end":717,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":22393,"byte_end":22396,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":22401,"byte_end":22443,"line_start":719,"line_end":719,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":22448,"byte_end":22451,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":22456,"byte_end":22463,"line_start":721,"line_end":721,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":22468,"byte_end":22497,"line_start":722,"line_end":722,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":22502,"byte_end":22505,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ let a = (0..11).step(3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":22510,"byte_end":22538,"line_start":724,"line_end":724,"column_start":5,"column_end":33}},{"value":"/ let b = (0..11).step(5);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":22543,"byte_end":22571,"line_start":725,"line_end":725,"column_start":5,"column_end":33}},{"value":"/ let it = a.merge(b);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":22576,"byte_end":22600,"line_start":726,"line_end":726,"column_start":5,"column_end":29}},{"value":"/ itertools::assert_equal(it, vec![0, 0, 3, 5, 6, 9, 10]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":22605,"byte_end":22665,"line_start":727,"line_end":727,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":22670,"byte_end":22677,"line_start":728,"line_end":728,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23467,"byte_end":23475,"line_start":753,"line_end":753,"column_start":8,"column_end":16},"name":"merge_by","qualname":"::Itertools::merge_by","value":"pub fn merge_by<J, F>(Self, J, F) -> MergeBy<Self, J::IntoIter, F> where\nSelf: Sized, J: IntoIterator<Item = Self::Item>,\nF: FnMut(&Self::Item, &Self::Item) -> bool","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in order.\n This is much like `.merge()` but allows for a custom ordering.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that merges the two base iterators in order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":22896,"byte_end":22971,"line_start":737,"line_end":737,"column_start":5,"column_end":80}},{"value":"/ This is much like `.merge()` but allows for a custom ordering.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":22976,"byte_end":23042,"line_start":738,"line_end":738,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23047,"byte_end":23050,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ This can be especially useful for sequences of tuples.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23055,"byte_end":23113,"line_start":740,"line_end":740,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23118,"byte_end":23121,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23126,"byte_end":23168,"line_start":742,"line_end":742,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23173,"byte_end":23176,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23181,"byte_end":23188,"line_start":744,"line_end":744,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23193,"byte_end":23222,"line_start":745,"line_end":745,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23227,"byte_end":23230,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ let a = (0..).zip(\"bc\".chars());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23235,"byte_end":23271,"line_start":747,"line_end":747,"column_start":5,"column_end":41}},{"value":"/ let b = (0..).zip(\"ad\".chars());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23276,"byte_end":23312,"line_start":748,"line_end":748,"column_start":5,"column_end":41}},{"value":"/ let it = a.merge_by(b, |x, y| x.1 <= y.1);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23317,"byte_end":23363,"line_start":749,"line_end":749,"column_start":5,"column_end":51}},{"value":"/ itertools::assert_equal(it, vec![(0, 'a'), (0, 'b'), (1, 'c'), (1, 'd')]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23368,"byte_end":23446,"line_start":750,"line_end":750,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23451,"byte_end":23458,"line_start":751,"line_end":751,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1417},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25065,"byte_end":25078,"line_start":793,"line_end":793,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::Itertools::merge_join_by","value":"pub fn merge_join_by<J, F>(Self, J, F) -> MergeJoinBy<Self, J::IntoIter, F>\nwhere J: IntoIterator, F: FnMut(&Self::Item, &J::Item) -> std::cmp::Ordering,\nSelf: Sized","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Create an iterator that merges items from both this and the specified\n iterator in ascending order.","sig":null,"attributes":[{"value":"/ Create an iterator that merges items from both this and the specified","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23761,"byte_end":23834,"line_start":761,"line_end":761,"column_start":5,"column_end":78}},{"value":"/ iterator in ascending order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23839,"byte_end":23871,"line_start":762,"line_end":762,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23876,"byte_end":23879,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ It chooses whether to pair elements based on the `Ordering` returned by the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23884,"byte_end":23963,"line_start":764,"line_end":764,"column_start":5,"column_end":84}},{"value":"/ specified compare function. At any point, inspecting the tip of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":23968,"byte_end":24039,"line_start":765,"line_end":765,"column_start":5,"column_end":76}},{"value":"/ iterators `I` and `J` as items `i` of type `I::Item` and `j` of type","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24044,"byte_end":24116,"line_start":766,"line_end":766,"column_start":5,"column_end":77}},{"value":"/ `J::Item` respectively, the resulting iterator will:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24121,"byte_end":24177,"line_start":767,"line_end":767,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24182,"byte_end":24185,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ - Emit `EitherOrBoth::Left(i)` when `i < j`,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24190,"byte_end":24238,"line_start":769,"line_end":769,"column_start":5,"column_end":53}},{"value":"/   and remove `i` from its source iterator","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24243,"byte_end":24288,"line_start":770,"line_end":770,"column_start":5,"column_end":50}},{"value":"/ - Emit `EitherOrBoth::Right(j)` when `i > j`,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24293,"byte_end":24342,"line_start":771,"line_end":771,"column_start":5,"column_end":54}},{"value":"/   and remove `j` from its source iterator","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24347,"byte_end":24392,"line_start":772,"line_end":772,"column_start":5,"column_end":50}},{"value":"/ - Emit `EitherOrBoth::Both(i, j)` when  `i == j`,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24397,"byte_end":24450,"line_start":773,"line_end":773,"column_start":5,"column_end":58}},{"value":"/   and remove both `i` and `j` from their respective source iterators","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24455,"byte_end":24527,"line_start":774,"line_end":774,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24532,"byte_end":24535,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24540,"byte_end":24547,"line_start":776,"line_end":776,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24552,"byte_end":24581,"line_start":777,"line_end":777,"column_start":5,"column_end":34}},{"value":"/ use itertools::EitherOrBoth::{Left, Right, Both};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24586,"byte_end":24639,"line_start":778,"line_end":778,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24644,"byte_end":24647,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ let ki = (0..10).step(3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24652,"byte_end":24681,"line_start":780,"line_end":780,"column_start":5,"column_end":34}},{"value":"/ let ku = (0..10).step(5);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24686,"byte_end":24715,"line_start":781,"line_end":781,"column_start":5,"column_end":34}},{"value":"/ let ki_ku = ki.merge_join_by(ku, |i, j| i.cmp(j)).map(|either| {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24720,"byte_end":24788,"line_start":782,"line_end":782,"column_start":5,"column_end":73}},{"value":"/     match either {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24793,"byte_end":24815,"line_start":783,"line_end":783,"column_start":5,"column_end":27}},{"value":"/         Left(_) => \"Ki\",","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24820,"byte_end":24848,"line_start":784,"line_end":784,"column_start":5,"column_end":33}},{"value":"/         Right(_) => \"Ku\",","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24853,"byte_end":24882,"line_start":785,"line_end":785,"column_start":5,"column_end":34}},{"value":"/         Both(_, _) => \"KiKu\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24887,"byte_end":24919,"line_start":786,"line_end":786,"column_start":5,"column_end":37}},{"value":"/     }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24924,"byte_end":24933,"line_start":787,"line_end":787,"column_start":5,"column_end":14}},{"value":"/ });","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24938,"byte_end":24945,"line_start":788,"line_end":788,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24950,"byte_end":24953,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(ki_ku, vec![\"KiKu\", \"Ki\", \"Ku\", \"Ki\", \"Ki\"]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":24958,"byte_end":25031,"line_start":790,"line_end":790,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25036,"byte_end":25043,"line_start":791,"line_end":791,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25048,"byte_end":25057,"line_start":792,"line_end":792,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1420},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25912,"byte_end":25918,"line_start":819,"line_end":819,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::Itertools::kmerge","value":"pub fn kmerge(Self) -> KMerge<<Self::Item as IntoIterator>::IntoIter> where\nSelf: Sized, Self::Item: IntoIterator,\n<Self::Item as IntoIterator>::Item: PartialOrd","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens an iterator of iterators by\n merging them in ascending order.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that flattens an iterator of iterators by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25336,"byte_end":25408,"line_start":802,"line_end":802,"column_start":5,"column_end":77}},{"value":"/ merging them in ascending order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25413,"byte_end":25449,"line_start":803,"line_end":803,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25454,"byte_end":25457,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ If all base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25462,"byte_end":25533,"line_start":805,"line_end":805,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25538,"byte_end":25541,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25546,"byte_end":25588,"line_start":807,"line_end":807,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25593,"byte_end":25596,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25601,"byte_end":25608,"line_start":809,"line_end":809,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25613,"byte_end":25642,"line_start":810,"line_end":810,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25647,"byte_end":25650,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ let a = (0..6).step(3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25655,"byte_end":25682,"line_start":812,"line_end":812,"column_start":5,"column_end":32}},{"value":"/ let b = (1..6).step(3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25687,"byte_end":25714,"line_start":813,"line_end":813,"column_start":5,"column_end":32}},{"value":"/ let c = (2..6).step(3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25719,"byte_end":25746,"line_start":814,"line_end":814,"column_start":5,"column_end":32}},{"value":"/ let it = vec![a, b, c].into_iter().kmerge();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25751,"byte_end":25799,"line_start":815,"line_end":815,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(it, vec![0, 1, 2, 3, 4, 5]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25804,"byte_end":25860,"line_start":816,"line_end":816,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25865,"byte_end":25872,"line_start":817,"line_end":817,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":25877,"byte_end":25904,"line_start":818,"line_end":818,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1421},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26923,"byte_end":26932,"line_start":848,"line_end":848,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::Itertools::kmerge_by","value":"pub fn kmerge_by<F>(Self, F)\n-> KMergeBy<<Self::Item as IntoIterator>::IntoIter, F> where Self: Sized,\nSelf::Item: IntoIterator,\nF: FnMut(&<Self::Item as IntoIterator>::Item,\n         &<Self::Item as IntoIterator>::Item) -> bool","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens an iterator of iterators by\n merging them according to the given closure.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that flattens an iterator of iterators by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26142,"byte_end":26214,"line_start":827,"line_end":827,"column_start":5,"column_end":77}},{"value":"/ merging them according to the given closure.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26219,"byte_end":26267,"line_start":828,"line_end":828,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26272,"byte_end":26275,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ The closure `first` is called with two elements *a*, *b* and should","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26280,"byte_end":26351,"line_start":830,"line_end":830,"column_start":5,"column_end":76}},{"value":"/ return `true` if *a* is ordered before *b*.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26356,"byte_end":26403,"line_start":831,"line_end":831,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26408,"byte_end":26411,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ If all base iterators are sorted according to `first`, the result is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26416,"byte_end":26488,"line_start":833,"line_end":833,"column_start":5,"column_end":77}},{"value":"/ sorted.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26493,"byte_end":26504,"line_start":834,"line_end":834,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26509,"byte_end":26512,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26517,"byte_end":26559,"line_start":836,"line_end":836,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26564,"byte_end":26567,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26572,"byte_end":26579,"line_start":838,"line_end":838,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26584,"byte_end":26613,"line_start":839,"line_end":839,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26618,"byte_end":26621,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ let a = vec![-1f64, 2., 3., -5., 6., -7.];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26626,"byte_end":26672,"line_start":841,"line_end":841,"column_start":5,"column_end":51}},{"value":"/ let b = vec![0., 2., -4.];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26677,"byte_end":26707,"line_start":842,"line_end":842,"column_start":5,"column_end":35}},{"value":"/ let mut it = vec![a, b].into_iter().kmerge_by(|a, b| a.abs() < b.abs());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26712,"byte_end":26788,"line_start":843,"line_end":843,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(it.next(), Some(0.));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26793,"byte_end":26829,"line_start":844,"line_end":844,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(it.last(), Some(-7.));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26834,"byte_end":26871,"line_start":845,"line_end":845,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26876,"byte_end":26883,"line_start":846,"line_end":846,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":26888,"byte_end":26915,"line_start":847,"line_end":847,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1423},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":27684,"byte_end":27701,"line_start":869,"line_end":869,"column_start":8,"column_end":25},"name":"cartesian_product","qualname":"::Itertools::cartesian_product","value":"pub fn cartesian_product<J>(Self, J) -> Product<Self, J::IntoIter> where\nSelf: Sized, Self::Item: Clone, J: IntoIterator, J::IntoIter: Clone","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `self` and `J`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":27258,"byte_end":27332,"line_start":858,"line_end":858,"column_start":5,"column_end":79}},{"value":"/ the element sets of two iterators `self` and `J`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":27337,"byte_end":27390,"line_start":859,"line_end":859,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":27395,"byte_end":27398,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(Self::Item, J::Item)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":27403,"byte_end":27456,"line_start":861,"line_end":861,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":27461,"byte_end":27464,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":27469,"byte_end":27476,"line_start":863,"line_end":863,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":27481,"byte_end":27510,"line_start":864,"line_end":864,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":27515,"byte_end":27518,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ let it = (0..2).cartesian_product(\"αβ\".chars());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":27523,"byte_end":27577,"line_start":866,"line_end":866,"column_start":5,"column_end":57}},{"value":"/ itertools::assert_equal(it, vec![(0, 'α'), (0, 'β'), (1, 'α'), (1, 'β')]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":27582,"byte_end":27664,"line_start":867,"line_end":867,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":27669,"byte_end":27676,"line_start":868,"line_end":868,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1425},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":29156,"byte_end":29179,"line_start":904,"line_end":904,"column_start":8,"column_end":31},"name":"multi_cartesian_product","qualname":"::Itertools::multi_cartesian_product","value":"pub fn multi_cartesian_product(Self)\n-> MultiProduct<<Self::Item as IntoIterator>::IntoIter> where Self: Iterator +\nSized, Self::Item: IntoIterator,\n<Self::Item as IntoIterator>::IntoIter: Clone,\n<Self::Item as IntoIterator>::Item: Clone","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the cartesian product of\n all subiterators returned by meta-iterator `self`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":27953,"byte_end":28027,"line_start":878,"line_end":878,"column_start":5,"column_end":79}},{"value":"/ all subiterators returned by meta-iterator `self`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28032,"byte_end":28086,"line_start":879,"line_end":879,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28091,"byte_end":28094,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ All provided iterators must yield the same `Item` type. To generate","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28099,"byte_end":28170,"line_start":881,"line_end":881,"column_start":5,"column_end":76}},{"value":"/ the product of iterators yielding multiple types, use the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28175,"byte_end":28236,"line_start":882,"line_end":882,"column_start":5,"column_end":66}},{"value":"/ [`iproduct`](macro.iproduct.html) macro instead.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28241,"byte_end":28293,"line_start":883,"line_end":883,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28298,"byte_end":28301,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28306,"byte_end":28309,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ The iterator element type is `Vec<T>`, where `T` is the iterator element","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28314,"byte_end":28390,"line_start":886,"line_end":886,"column_start":5,"column_end":81}},{"value":"/ of the subiterators.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28395,"byte_end":28419,"line_start":887,"line_end":887,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28424,"byte_end":28427,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28432,"byte_end":28439,"line_start":889,"line_end":889,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28444,"byte_end":28473,"line_start":890,"line_end":890,"column_start":5,"column_end":34}},{"value":"/ let mut multi_prod = (0..3).map(|i| (i * 2)..(i * 2 + 2))","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28478,"byte_end":28539,"line_start":891,"line_end":891,"column_start":5,"column_end":66}},{"value":"/     .multi_cartesian_product();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28544,"byte_end":28579,"line_start":892,"line_end":892,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![0, 2, 4]));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28584,"byte_end":28639,"line_start":893,"line_end":893,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![0, 2, 5]));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28644,"byte_end":28699,"line_start":894,"line_end":894,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![0, 3, 4]));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28704,"byte_end":28759,"line_start":895,"line_end":895,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![0, 3, 5]));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28764,"byte_end":28819,"line_start":896,"line_end":896,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![1, 2, 4]));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28824,"byte_end":28879,"line_start":897,"line_end":897,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![1, 2, 5]));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28884,"byte_end":28939,"line_start":898,"line_end":898,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![1, 3, 4]));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":28944,"byte_end":28999,"line_start":899,"line_end":899,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![1, 3, 5]));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":29004,"byte_end":29059,"line_start":900,"line_end":900,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), None);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":29064,"byte_end":29104,"line_start":901,"line_end":901,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":29109,"byte_end":29116,"line_start":902,"line_end":902,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":29121,"byte_end":29148,"line_start":903,"line_end":903,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1426},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30672,"byte_end":30680,"line_start":941,"line_end":941,"column_start":8,"column_end":16},"name":"coalesce","qualname":"::Itertools::coalesce","value":"pub fn coalesce<F>(Self, F) -> Coalesce<Self, F> where Self: Sized,\nF: FnMut(Self::Item, Self::Item) ->\nResult<Self::Item, (Self::Item, Self::Item)>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that uses the passed-in closure to\n optionally merge together consecutive elements.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that uses the passed-in closure to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":29502,"byte_end":29567,"line_start":913,"line_end":913,"column_start":5,"column_end":70}},{"value":"/ optionally merge together consecutive elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":29572,"byte_end":29623,"line_start":914,"line_end":914,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":29628,"byte_end":29631,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ The closure `f` is passed two elements, `previous` and `current` and may","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":29636,"byte_end":29712,"line_start":916,"line_end":916,"column_start":5,"column_end":81}},{"value":"/ return either (1) `Ok(combined)` to merge the two values or","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":29717,"byte_end":29780,"line_start":917,"line_end":917,"column_start":5,"column_end":68}},{"value":"/ (2) `Err((previous', current'))` to indicate they can't be merged.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":29785,"byte_end":29855,"line_start":918,"line_end":918,"column_start":5,"column_end":75}},{"value":"/ In (2), the value `previous'` is emitted by the iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":29860,"byte_end":29921,"line_start":919,"line_end":919,"column_start":5,"column_end":66}},{"value":"/ Either (1) `combined` or (2) `current'` becomes the previous value","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":29926,"byte_end":29996,"line_start":920,"line_end":920,"column_start":5,"column_end":75}},{"value":"/ when coalesce continues with the next pair of elements to merge. The","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30001,"byte_end":30073,"line_start":921,"line_end":921,"column_start":5,"column_end":77}},{"value":"/ value that remains at the end is also emitted by the iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30078,"byte_end":30144,"line_start":922,"line_end":922,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30149,"byte_end":30152,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30157,"byte_end":30199,"line_start":924,"line_end":924,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30204,"byte_end":30207,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30212,"byte_end":30241,"line_start":926,"line_end":926,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30246,"byte_end":30249,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30254,"byte_end":30261,"line_start":928,"line_end":928,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30266,"byte_end":30295,"line_start":929,"line_end":929,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30300,"byte_end":30303,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ // sum same-sign runs together","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30308,"byte_end":30342,"line_start":931,"line_end":931,"column_start":5,"column_end":39}},{"value":"/ let data = vec![-1., -2., -3., 3., 1., 0., -1.];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30347,"byte_end":30399,"line_start":932,"line_end":932,"column_start":5,"column_end":57}},{"value":"/ itertools::assert_equal(data.into_iter().coalesce(|x, y|","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30404,"byte_end":30464,"line_start":933,"line_end":933,"column_start":5,"column_end":65}},{"value":"/         if (x >= 0.) == (y >= 0.) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30469,"byte_end":30508,"line_start":934,"line_end":934,"column_start":5,"column_end":44}},{"value":"/             Ok(x + y)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30513,"byte_end":30538,"line_start":935,"line_end":935,"column_start":5,"column_end":30}},{"value":"/         } else {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30543,"byte_end":30563,"line_start":936,"line_end":936,"column_start":5,"column_end":25}},{"value":"/             Err((x, y))","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30568,"byte_end":30595,"line_start":937,"line_end":937,"column_start":5,"column_end":32}},{"value":"/         }),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30600,"byte_end":30615,"line_start":938,"line_end":938,"column_start":5,"column_end":20}},{"value":"/         vec![-6., 4., -1.]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30620,"byte_end":30652,"line_start":939,"line_end":939,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30657,"byte_end":30664,"line_start":940,"line_end":940,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1428},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31394,"byte_end":31399,"line_start":963,"line_end":963,"column_start":8,"column_end":13},"name":"dedup","qualname":"::Itertools::dedup","value":"pub fn dedup(Self) -> Dedup<Self> where Self: Sized, Self::Item: PartialEq","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[{"value":"/ Remove duplicates from sections of consecutive identical elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30915,"byte_end":30985,"line_start":949,"line_end":949,"column_start":5,"column_end":75}},{"value":"/ If the iterator is sorted, all elements will be unique.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":30990,"byte_end":31049,"line_start":950,"line_end":950,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31054,"byte_end":31057,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31062,"byte_end":31104,"line_start":952,"line_end":952,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31109,"byte_end":31112,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31117,"byte_end":31146,"line_start":954,"line_end":954,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31151,"byte_end":31154,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31159,"byte_end":31166,"line_start":956,"line_end":956,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31171,"byte_end":31200,"line_start":957,"line_end":957,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31205,"byte_end":31208,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1., 1., 2., 3., 3., 2., 2.];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31213,"byte_end":31261,"line_start":959,"line_end":959,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(data.into_iter().dedup(),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31266,"byte_end":31319,"line_start":960,"line_end":960,"column_start":5,"column_end":58}},{"value":"/                         vec![1., 2., 3., 2.]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31324,"byte_end":31374,"line_start":961,"line_end":961,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31379,"byte_end":31386,"line_start":962,"line_end":962,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1429},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32142,"byte_end":32150,"line_start":985,"line_end":985,"column_start":8,"column_end":16},"name":"dedup_by","qualname":"::Itertools::dedup_by","value":"pub fn dedup_by<Cmp>(Self, Cmp) -> DedupBy<Self, Cmp> where Self: Sized,\nCmp: FnMut(&Self::Item, &Self::Item) -> bool","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements,\n determining equality using a comparison function.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[{"value":"/ Remove duplicates from sections of consecutive identical elements,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31532,"byte_end":31602,"line_start":970,"line_end":970,"column_start":5,"column_end":75}},{"value":"/ determining equality using a comparison function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31607,"byte_end":31660,"line_start":971,"line_end":971,"column_start":5,"column_end":58}},{"value":"/ If the iterator is sorted, all elements will be unique.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31665,"byte_end":31724,"line_start":972,"line_end":972,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31729,"byte_end":31732,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31737,"byte_end":31779,"line_start":974,"line_end":974,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31784,"byte_end":31787,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31792,"byte_end":31821,"line_start":976,"line_end":976,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31826,"byte_end":31829,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31834,"byte_end":31841,"line_start":978,"line_end":978,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31846,"byte_end":31875,"line_start":979,"line_end":979,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31880,"byte_end":31883,"line_start":980,"line_end":980,"column_start":5,"column_end":8}},{"value":"/ let data = vec![(0, 1.), (1, 1.), (0, 2.), (0, 3.), (1, 3.), (1, 2.), (2, 2.)];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31888,"byte_end":31971,"line_start":981,"line_end":981,"column_start":5,"column_end":88}},{"value":"/ itertools::assert_equal(data.into_iter().dedup_by(|x, y| x.1==y.1),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":31976,"byte_end":32047,"line_start":982,"line_end":982,"column_start":5,"column_end":76}},{"value":"/                         vec![(0, 1.), (0, 2.), (0, 3.), (1, 2.)]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32052,"byte_end":32122,"line_start":983,"line_end":983,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32127,"byte_end":32134,"line_start":984,"line_end":984,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1431},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32892,"byte_end":32898,"line_start":1007,"line_end":1007,"column_start":8,"column_end":14},"name":"unique","qualname":"::Itertools::unique","value":"pub fn unique(Self) -> Unique<Self> where Self: Sized, Self::Item: Clone +\nEq + Hash","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters out elements that have\n already been produced once during the iteration. Duplicates\n are detected using hash and equality.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters out elements that have","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32334,"byte_end":32400,"line_start":992,"line_end":992,"column_start":5,"column_end":71}},{"value":"/ already been produced once during the iteration. Duplicates","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32405,"byte_end":32468,"line_start":993,"line_end":993,"column_start":5,"column_end":68}},{"value":"/ are detected using hash and equality.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32473,"byte_end":32514,"line_start":994,"line_end":994,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32519,"byte_end":32522,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ Clones of visited elements are stored in a hash set in the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32527,"byte_end":32589,"line_start":996,"line_end":996,"column_start":5,"column_end":67}},{"value":"/ iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32594,"byte_end":32607,"line_start":997,"line_end":997,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32612,"byte_end":32615,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32620,"byte_end":32627,"line_start":999,"line_end":999,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32632,"byte_end":32661,"line_start":1000,"line_end":1000,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32666,"byte_end":32669,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ let data = vec![10, 20, 30, 20, 40, 10, 50];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32674,"byte_end":32722,"line_start":1002,"line_end":1002,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(data.into_iter().unique(),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32727,"byte_end":32781,"line_start":1003,"line_end":1003,"column_start":5,"column_end":59}},{"value":"/                         vec![10, 20, 30, 40, 50]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32786,"byte_end":32840,"line_start":1004,"line_end":1004,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32845,"byte_end":32852,"line_start":1005,"line_end":1005,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":32857,"byte_end":32884,"line_start":1006,"line_end":1006,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1432},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33655,"byte_end":33664,"line_start":1029,"line_end":1029,"column_start":8,"column_end":17},"name":"unique_by","qualname":"::Itertools::unique_by","value":"pub fn unique_by<V, F>(Self, F) -> UniqueBy<Self, V, F> where Self: Sized,\nV: Eq + Hash, F: FnMut(&Self::Item) -> V","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters out elements that have\n already been produced once during the iteration.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters out elements that have","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33043,"byte_end":33109,"line_start":1014,"line_end":1014,"column_start":5,"column_end":71}},{"value":"/ already been produced once during the iteration.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33114,"byte_end":33166,"line_start":1015,"line_end":1015,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33171,"byte_end":33174,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ Duplicates are detected by comparing the key they map to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33179,"byte_end":33239,"line_start":1017,"line_end":1017,"column_start":5,"column_end":65}},{"value":"/ with the keying function `f` by hash and equality.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33244,"byte_end":33298,"line_start":1018,"line_end":1018,"column_start":5,"column_end":59}},{"value":"/ The keys are stored in a hash set in the iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33303,"byte_end":33357,"line_start":1019,"line_end":1019,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33362,"byte_end":33365,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33370,"byte_end":33377,"line_start":1021,"line_end":1021,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33382,"byte_end":33411,"line_start":1022,"line_end":1022,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33416,"byte_end":33419,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ let data = vec![\"a\", \"bb\", \"aa\", \"c\", \"ccc\"];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33424,"byte_end":33473,"line_start":1024,"line_end":1024,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(data.into_iter().unique_by(|s| s.len()),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33478,"byte_end":33546,"line_start":1025,"line_end":1025,"column_start":5,"column_end":73}},{"value":"/                         vec![\"a\", \"bb\", \"ccc\"]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33551,"byte_end":33603,"line_start":1026,"line_end":1026,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33608,"byte_end":33615,"line_start":1027,"line_end":1027,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33620,"byte_end":33647,"line_start":1028,"line_end":1028,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1435},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":34401,"byte_end":34419,"line_start":1049,"line_end":1049,"column_start":8,"column_end":26},"name":"peeking_take_while","qualname":"::Itertools::peeking_take_while","value":"pub fn peeking_take_while<F>(&mut Self, F) -> PeekingTakeWhile<, Self, F>\nwhere Self: Sized + PeekingNext, F: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from this iterator and\n takes items while the closure `accept` returns `true`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that borrows from this iterator and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33860,"byte_end":33926,"line_start":1037,"line_end":1037,"column_start":5,"column_end":71}},{"value":"/ takes items while the closure `accept` returns `true`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33931,"byte_end":33989,"line_start":1038,"line_end":1038,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":33994,"byte_end":33997,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ This adaptor can only be used on iterators that implement `PeekingNext`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":34002,"byte_end":34077,"line_start":1040,"line_end":1040,"column_start":5,"column_end":80}},{"value":"/ like `.peekable()`, `put_back` and a few other collection iterators.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":34082,"byte_end":34154,"line_start":1041,"line_end":1041,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":34159,"byte_end":34162,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ The last and rejected element (first `false`) is still available when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":34167,"byte_end":34240,"line_start":1043,"line_end":1043,"column_start":5,"column_end":78}},{"value":"/ `peeking_take_while` is done.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":34245,"byte_end":34278,"line_start":1044,"line_end":1044,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":34283,"byte_end":34286,"line_start":1045,"line_end":1045,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":34291,"byte_end":34294,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ See also [`.take_while_ref()`](#method.take_while_ref)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":34299,"byte_end":34357,"line_start":1047,"line_end":1047,"column_start":5,"column_end":63}},{"value":"/ which is a similar adaptor.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":34362,"byte_end":34393,"line_start":1048,"line_end":1048,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1437},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35365,"byte_end":35379,"line_start":1074,"line_end":1074,"column_start":8,"column_end":22},"name":"take_while_ref","qualname":"::Itertools::take_while_ref","value":"pub fn take_while_ref<F>(&mut Self, F) -> TakeWhileRef<, Self, F> where\nSelf: Clone, F: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate `accept` returns `true`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that borrows from a `Clone`-able iterator","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":34638,"byte_end":34710,"line_start":1056,"line_end":1056,"column_start":5,"column_end":77}},{"value":"/ to only pick off elements while the predicate `accept` returns `true`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":34715,"byte_end":34789,"line_start":1057,"line_end":1057,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":34794,"byte_end":34797,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ It uses the `Clone` trait to restore the original iterator so that the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":34802,"byte_end":34876,"line_start":1059,"line_end":1059,"column_start":5,"column_end":79}},{"value":"/ last and rejected element (first `false`) is still available when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":34881,"byte_end":34950,"line_start":1060,"line_end":1060,"column_start":5,"column_end":74}},{"value":"/ `take_while_ref` is done.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":34955,"byte_end":34984,"line_start":1061,"line_end":1061,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":34989,"byte_end":34992,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":34997,"byte_end":35004,"line_start":1063,"line_end":1063,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35009,"byte_end":35038,"line_start":1064,"line_end":1064,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35043,"byte_end":35046,"line_start":1065,"line_end":1065,"column_start":5,"column_end":8}},{"value":"/ let mut hexadecimals = \"0123456789abcdef\".chars();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35051,"byte_end":35105,"line_start":1066,"line_end":1066,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35110,"byte_end":35113,"line_start":1067,"line_end":1067,"column_start":5,"column_end":8}},{"value":"/ let decimals = hexadecimals.take_while_ref(|c| c.is_numeric())","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35118,"byte_end":35184,"line_start":1068,"line_end":1068,"column_start":5,"column_end":71}},{"value":"/                            .collect::<String>();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35189,"byte_end":35241,"line_start":1069,"line_end":1069,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(decimals, \"0123456789\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35246,"byte_end":35285,"line_start":1070,"line_end":1070,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(hexadecimals.next(), Some('a'));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35290,"byte_end":35337,"line_start":1071,"line_end":1071,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35342,"byte_end":35345,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35350,"byte_end":35357,"line_start":1073,"line_end":1073,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1439},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36045,"byte_end":36055,"line_start":1095,"line_end":1095,"column_start":8,"column_end":18},"name":"while_some","qualname":"::Itertools::while_some","value":"pub fn while_some<A>(Self) -> WhileSome<Self> where Self: Sized +\nIterator<Item = Option<A>>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters `Option<A>` iterator elements","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35565,"byte_end":35638,"line_start":1081,"line_end":1081,"column_start":5,"column_end":78}},{"value":"/ and produces `A`. Stops on the first `None` encountered.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35643,"byte_end":35703,"line_start":1082,"line_end":1082,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35708,"byte_end":35711,"line_start":1083,"line_end":1083,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `A`, the unwrapped element.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35716,"byte_end":35772,"line_start":1084,"line_end":1084,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35777,"byte_end":35780,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35785,"byte_end":35792,"line_start":1086,"line_end":1086,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35797,"byte_end":35826,"line_start":1087,"line_end":1087,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35831,"byte_end":35834,"line_start":1088,"line_end":1088,"column_start":5,"column_end":8}},{"value":"/ // List all hexadecimal digits","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35839,"byte_end":35873,"line_start":1089,"line_end":1089,"column_start":5,"column_end":39}},{"value":"/ itertools::assert_equal(","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35878,"byte_end":35906,"line_start":1090,"line_end":1090,"column_start":5,"column_end":33}},{"value":"/     (0..).map(|i| std::char::from_digit(i, 16)).while_some(),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35911,"byte_end":35976,"line_start":1091,"line_end":1091,"column_start":5,"column_end":70}},{"value":"/     \"0123456789abcdef\".chars());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":35981,"byte_end":36017,"line_start":1092,"line_end":1092,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36022,"byte_end":36025,"line_start":1093,"line_end":1093,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36030,"byte_end":36037,"line_start":1094,"line_end":1094,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1441},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":37486,"byte_end":37504,"line_start":1134,"line_end":1134,"column_start":8,"column_end":26},"name":"tuple_combinations","qualname":"::Itertools::tuple_combinations","value":"pub fn tuple_combinations<T>(Self) -> TupleCombinations<Self, T> where\nSelf: Sized + Clone, Self::Item: Clone, T: adaptors::HasCombination<Self>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the combinations of the\n elements from an iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the combinations of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36191,"byte_end":36264,"line_start":1101,"line_end":1101,"column_start":5,"column_end":78}},{"value":"/ elements from an iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36269,"byte_end":36299,"line_start":1102,"line_end":1102,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36304,"byte_end":36307,"line_start":1103,"line_end":1103,"column_start":5,"column_end":8}},{"value":"/ Iterator element can be any homogeneous tuple of type `Self::Item` with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36312,"byte_end":36387,"line_start":1104,"line_end":1104,"column_start":5,"column_end":80}},{"value":"/ size up to 4.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36392,"byte_end":36409,"line_start":1105,"line_end":1105,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36414,"byte_end":36417,"line_start":1106,"line_end":1106,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36422,"byte_end":36429,"line_start":1107,"line_end":1107,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36434,"byte_end":36463,"line_start":1108,"line_end":1108,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36468,"byte_end":36471,"line_start":1109,"line_end":1109,"column_start":5,"column_end":8}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36476,"byte_end":36503,"line_start":1110,"line_end":1110,"column_start":5,"column_end":32}},{"value":"/ for (a, b) in (1..5).tuple_combinations() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36508,"byte_end":36555,"line_start":1111,"line_end":1111,"column_start":5,"column_end":52}},{"value":"/     v.push((a, b));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36560,"byte_end":36583,"line_start":1112,"line_end":1112,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36588,"byte_end":36593,"line_start":1113,"line_end":1113,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36598,"byte_end":36670,"line_start":1114,"line_end":1114,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36675,"byte_end":36678,"line_start":1115,"line_end":1115,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..5).tuple_combinations();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36683,"byte_end":36728,"line_start":1116,"line_end":1116,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36733,"byte_end":36776,"line_start":1117,"line_end":1117,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((1, 2, 4)), it.next());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36781,"byte_end":36824,"line_start":1118,"line_end":1118,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((1, 3, 4)), it.next());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36829,"byte_end":36872,"line_start":1119,"line_end":1119,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((2, 3, 4)), it.next());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36877,"byte_end":36920,"line_start":1120,"line_end":1120,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36925,"byte_end":36957,"line_start":1121,"line_end":1121,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36962,"byte_end":36965,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":36970,"byte_end":37002,"line_start":1123,"line_end":1123,"column_start":5,"column_end":37}},{"value":"/ let it = (1..5).tuple_combinations::<(_, _, _)>();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":37007,"byte_end":37061,"line_start":1124,"line_end":1124,"column_start":5,"column_end":59}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":37066,"byte_end":37148,"line_start":1125,"line_end":1125,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":37153,"byte_end":37156,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ // you can also specify the complete type","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":37161,"byte_end":37206,"line_start":1127,"line_end":1127,"column_start":5,"column_end":50}},{"value":"/ use itertools::TupleCombinations;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":37211,"byte_end":37248,"line_start":1128,"line_end":1128,"column_start":5,"column_end":42}},{"value":"/ use std::ops::Range;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":37253,"byte_end":37277,"line_start":1129,"line_end":1129,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":37282,"byte_end":37285,"line_start":1130,"line_end":1130,"column_start":5,"column_end":8}},{"value":"/ let it: TupleCombinations<Range<u32>, (u32, u32, u32)> = (1..5).tuple_combinations();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":37290,"byte_end":37379,"line_start":1131,"line_end":1131,"column_start":5,"column_end":94}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":37384,"byte_end":37466,"line_start":1132,"line_end":1132,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":37471,"byte_end":37478,"line_start":1133,"line_end":1133,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1443},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38713,"byte_end":38725,"line_start":1172,"line_end":1172,"column_start":8,"column_end":20},"name":"combinations","qualname":"::Itertools::combinations","value":"pub fn combinations(Self, usize) -> Combinations<Self> where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the `k`-length combinations of\n the elements from an iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the `k`-length combinations of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":37721,"byte_end":37801,"line_start":1142,"line_end":1142,"column_start":5,"column_end":85}},{"value":"/ the elements from an iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":37806,"byte_end":37840,"line_start":1143,"line_end":1143,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":37845,"byte_end":37848,"line_start":1144,"line_end":1144,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Vec<Self::Item>`. The iterator produces a new Vec per iteration,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":37853,"byte_end":37947,"line_start":1145,"line_end":1145,"column_start":5,"column_end":99}},{"value":"/ and clones the iterator elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":37952,"byte_end":37989,"line_start":1146,"line_end":1146,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":37994,"byte_end":37997,"line_start":1147,"line_end":1147,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38002,"byte_end":38009,"line_start":1148,"line_end":1148,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38014,"byte_end":38043,"line_start":1149,"line_end":1149,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38048,"byte_end":38051,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ let it = (1..5).combinations(3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38056,"byte_end":38092,"line_start":1151,"line_end":1151,"column_start":5,"column_end":41}},{"value":"/ itertools::assert_equal(it, vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38097,"byte_end":38134,"line_start":1152,"line_end":1152,"column_start":5,"column_end":42}},{"value":"/     vec![1, 2, 3],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38139,"byte_end":38161,"line_start":1153,"line_end":1153,"column_start":5,"column_end":27}},{"value":"/     vec![1, 2, 4],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38166,"byte_end":38188,"line_start":1154,"line_end":1154,"column_start":5,"column_end":27}},{"value":"/     vec![1, 3, 4],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38193,"byte_end":38215,"line_start":1155,"line_end":1155,"column_start":5,"column_end":27}},{"value":"/     vec![2, 3, 4],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38220,"byte_end":38242,"line_start":1156,"line_end":1156,"column_start":5,"column_end":27}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38247,"byte_end":38254,"line_start":1157,"line_end":1157,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38259,"byte_end":38266,"line_start":1158,"line_end":1158,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38271,"byte_end":38274,"line_start":1159,"line_end":1159,"column_start":5,"column_end":8}},{"value":"/ Note: Combinations does not take into account the equality of the iterated values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38279,"byte_end":38365,"line_start":1160,"line_end":1160,"column_start":5,"column_end":91}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38370,"byte_end":38377,"line_start":1161,"line_end":1161,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38382,"byte_end":38411,"line_start":1162,"line_end":1162,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38416,"byte_end":38419,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ let it = vec![1, 2, 2].into_iter().combinations(2);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38424,"byte_end":38479,"line_start":1164,"line_end":1164,"column_start":5,"column_end":60}},{"value":"/ itertools::assert_equal(it, vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38484,"byte_end":38521,"line_start":1165,"line_end":1165,"column_start":5,"column_end":42}},{"value":"/     vec![1, 2], // Note: these are the same","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38526,"byte_end":38573,"line_start":1166,"line_end":1166,"column_start":5,"column_end":52}},{"value":"/     vec![1, 2], // Note: these are the same","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38578,"byte_end":38625,"line_start":1167,"line_end":1167,"column_start":5,"column_end":52}},{"value":"/     vec![2, 2],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38630,"byte_end":38649,"line_start":1168,"line_end":1168,"column_start":5,"column_end":24}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38654,"byte_end":38661,"line_start":1169,"line_end":1169,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38666,"byte_end":38673,"line_start":1170,"line_end":1170,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38678,"byte_end":38705,"line_start":1171,"line_end":1171,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1444},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39532,"byte_end":39561,"line_start":1199,"line_end":1199,"column_start":8,"column_end":37},"name":"combinations_with_replacement","qualname":"::Itertools::combinations_with_replacement","value":"pub fn combinations_with_replacement(Self, usize)\n-> CombinationsWithReplacement<Self> where Self: Sized, Self::Item: Clone","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator that iterates over the `k`-length combinations of\n the elements from an iterator, with replacement.","sig":null,"attributes":[{"value":"/ Return an iterator that iterates over the `k`-length combinations of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38884,"byte_end":38956,"line_start":1179,"line_end":1179,"column_start":5,"column_end":77}},{"value":"/ the elements from an iterator, with replacement.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":38961,"byte_end":39013,"line_start":1180,"line_end":1180,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39018,"byte_end":39021,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Vec<Self::Item>`. The iterator produces a new Vec per iteration,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39026,"byte_end":39120,"line_start":1182,"line_end":1182,"column_start":5,"column_end":99}},{"value":"/ and clones the iterator elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39125,"byte_end":39162,"line_start":1183,"line_end":1183,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39167,"byte_end":39170,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39175,"byte_end":39182,"line_start":1185,"line_end":1185,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39187,"byte_end":39216,"line_start":1186,"line_end":1186,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39221,"byte_end":39224,"line_start":1187,"line_end":1187,"column_start":5,"column_end":8}},{"value":"/ let it = (1..4).combinations_with_replacement(2);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39229,"byte_end":39282,"line_start":1188,"line_end":1188,"column_start":5,"column_end":58}},{"value":"/ itertools::assert_equal(it, vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39287,"byte_end":39324,"line_start":1189,"line_end":1189,"column_start":5,"column_end":42}},{"value":"/     vec![1, 1],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39329,"byte_end":39348,"line_start":1190,"line_end":1190,"column_start":5,"column_end":24}},{"value":"/     vec![1, 2],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39353,"byte_end":39372,"line_start":1191,"line_end":1191,"column_start":5,"column_end":24}},{"value":"/     vec![1, 3],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39377,"byte_end":39396,"line_start":1192,"line_end":1192,"column_start":5,"column_end":24}},{"value":"/     vec![2, 2],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39401,"byte_end":39420,"line_start":1193,"line_end":1193,"column_start":5,"column_end":24}},{"value":"/     vec![2, 3],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39425,"byte_end":39444,"line_start":1194,"line_end":1194,"column_start":5,"column_end":24}},{"value":"/     vec![3, 3],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39449,"byte_end":39468,"line_start":1195,"line_end":1195,"column_start":5,"column_end":24}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39473,"byte_end":39480,"line_start":1196,"line_end":1196,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39485,"byte_end":39492,"line_start":1197,"line_end":1197,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39497,"byte_end":39524,"line_start":1198,"line_end":1198,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1445},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41074,"byte_end":41086,"line_start":1245,"line_end":1245,"column_start":8,"column_end":20},"name":"permutations","qualname":"::Itertools::permutations","value":"pub fn permutations(Self, usize) -> Permutations<Self> where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over all k-permutations of the\n elements from an iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over all k-permutations of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39768,"byte_end":39843,"line_start":1207,"line_end":1207,"column_start":5,"column_end":80}},{"value":"/ elements from an iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39848,"byte_end":39878,"line_start":1208,"line_end":1208,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39883,"byte_end":39886,"line_start":1209,"line_end":1209,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Vec<Self::Item>` with length `k`. The iterator","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39891,"byte_end":39967,"line_start":1210,"line_end":1210,"column_start":5,"column_end":81}},{"value":"/ produces a new Vec per iteration, and clones the iterator elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":39972,"byte_end":40043,"line_start":1211,"line_end":1211,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40048,"byte_end":40051,"line_start":1212,"line_end":1212,"column_start":5,"column_end":8}},{"value":"/ If `k` is greater than the length of the input iterator, the resultant","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40056,"byte_end":40130,"line_start":1213,"line_end":1213,"column_start":5,"column_end":79}},{"value":"/ iterator adaptor will be empty.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40135,"byte_end":40170,"line_start":1214,"line_end":1214,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40175,"byte_end":40178,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40183,"byte_end":40190,"line_start":1216,"line_end":1216,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40195,"byte_end":40224,"line_start":1217,"line_end":1217,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40229,"byte_end":40232,"line_start":1218,"line_end":1218,"column_start":5,"column_end":8}},{"value":"/ let perms = (5..8).permutations(2);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40237,"byte_end":40276,"line_start":1219,"line_end":1219,"column_start":5,"column_end":44}},{"value":"/ itertools::assert_equal(perms, vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40281,"byte_end":40321,"line_start":1220,"line_end":1220,"column_start":5,"column_end":45}},{"value":"/     vec![5, 6],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40326,"byte_end":40345,"line_start":1221,"line_end":1221,"column_start":5,"column_end":24}},{"value":"/     vec![5, 7],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40350,"byte_end":40369,"line_start":1222,"line_end":1222,"column_start":5,"column_end":24}},{"value":"/     vec![6, 5],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40374,"byte_end":40393,"line_start":1223,"line_end":1223,"column_start":5,"column_end":24}},{"value":"/     vec![6, 7],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40398,"byte_end":40417,"line_start":1224,"line_end":1224,"column_start":5,"column_end":24}},{"value":"/     vec![7, 5],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40422,"byte_end":40441,"line_start":1225,"line_end":1225,"column_start":5,"column_end":24}},{"value":"/     vec![7, 6],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40446,"byte_end":40465,"line_start":1226,"line_end":1226,"column_start":5,"column_end":24}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40470,"byte_end":40477,"line_start":1227,"line_end":1227,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40482,"byte_end":40489,"line_start":1228,"line_end":1228,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40494,"byte_end":40497,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ Note: Permutations does not take into account the equality of the iterated values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40502,"byte_end":40588,"line_start":1230,"line_end":1230,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40593,"byte_end":40596,"line_start":1231,"line_end":1231,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40601,"byte_end":40608,"line_start":1232,"line_end":1232,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40613,"byte_end":40642,"line_start":1233,"line_end":1233,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40647,"byte_end":40650,"line_start":1234,"line_end":1234,"column_start":5,"column_end":8}},{"value":"/ let it = vec![2, 2].into_iter().permutations(2);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40655,"byte_end":40707,"line_start":1235,"line_end":1235,"column_start":5,"column_end":57}},{"value":"/ itertools::assert_equal(it, vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40712,"byte_end":40749,"line_start":1236,"line_end":1236,"column_start":5,"column_end":42}},{"value":"/     vec![2, 2], // Note: these are the same","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40754,"byte_end":40801,"line_start":1237,"line_end":1237,"column_start":5,"column_end":52}},{"value":"/     vec![2, 2], // Note: these are the same","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40806,"byte_end":40853,"line_start":1238,"line_end":1238,"column_start":5,"column_end":52}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40858,"byte_end":40865,"line_start":1239,"line_end":1239,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40870,"byte_end":40877,"line_start":1240,"line_end":1240,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40882,"byte_end":40885,"line_start":1241,"line_end":1241,"column_start":5,"column_end":8}},{"value":"/ Note: The source iterator is collected lazily, and will not be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40890,"byte_end":40956,"line_start":1242,"line_end":1242,"column_start":5,"column_end":71}},{"value":"/ re-iterated if the permutations adaptor is completed and re-iterated.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":40961,"byte_end":41034,"line_start":1243,"line_end":1243,"column_start":5,"column_end":78}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41039,"byte_end":41066,"line_start":1244,"line_end":1244,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1446},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41916,"byte_end":41925,"line_start":1269,"line_end":1269,"column_start":8,"column_end":17},"name":"pad_using","qualname":"::Itertools::pad_using","value":"pub fn pad_using<F>(Self, usize, F) -> PadUsing<Self, F> where Self: Sized,\nF: FnMut(usize) -> Self::Item","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that pads the sequence to a minimum length of\n `min` by filling missing elements using a closure `f`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that pads the sequence to a minimum length of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41245,"byte_end":41321,"line_start":1252,"line_end":1252,"column_start":5,"column_end":81}},{"value":"/ `min` by filling missing elements using a closure `f`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41326,"byte_end":41384,"line_start":1253,"line_end":1253,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41389,"byte_end":41392,"line_start":1254,"line_end":1254,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41397,"byte_end":41439,"line_start":1255,"line_end":1255,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41444,"byte_end":41447,"line_start":1256,"line_end":1256,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41452,"byte_end":41459,"line_start":1257,"line_end":1257,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41464,"byte_end":41493,"line_start":1258,"line_end":1258,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41498,"byte_end":41501,"line_start":1259,"line_end":1259,"column_start":5,"column_end":8}},{"value":"/ let it = (0..5).pad_using(10, |i| 2*i);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41506,"byte_end":41549,"line_start":1260,"line_end":1260,"column_start":5,"column_end":48}},{"value":"/ itertools::assert_equal(it, vec![0, 1, 2, 3, 4, 10, 12, 14, 16, 18]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41554,"byte_end":41627,"line_start":1261,"line_end":1261,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41632,"byte_end":41635,"line_start":1262,"line_end":1262,"column_start":5,"column_end":8}},{"value":"/ let it = (0..10).pad_using(5, |i| 2*i);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41640,"byte_end":41683,"line_start":1263,"line_end":1263,"column_start":5,"column_end":48}},{"value":"/ itertools::assert_equal(it, vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41688,"byte_end":41756,"line_start":1264,"line_end":1264,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41761,"byte_end":41764,"line_start":1265,"line_end":1265,"column_start":5,"column_end":8}},{"value":"/ let it = (0..5).pad_using(10, |i| 2*i).rev();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41769,"byte_end":41818,"line_start":1266,"line_end":1266,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(it, vec![18, 16, 14, 12, 10, 4, 3, 2, 1, 0]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41823,"byte_end":41896,"line_start":1267,"line_end":1267,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":41901,"byte_end":41908,"line_start":1268,"line_end":1268,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1448},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42850,"byte_end":42863,"line_start":1295,"line_end":1295,"column_start":8,"column_end":21},"name":"with_position","qualname":"::Itertools::with_position","value":"pub fn with_position(Self) -> WithPosition<Self> where Self: Sized","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that wraps each element in a `Position` to\n ease special-case handling of the first or last elements.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that wraps each element in a `Position` to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42104,"byte_end":42177,"line_start":1276,"line_end":1276,"column_start":5,"column_end":78}},{"value":"/ ease special-case handling of the first or last elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42182,"byte_end":42243,"line_start":1277,"line_end":1277,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42248,"byte_end":42251,"line_start":1278,"line_end":1278,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42256,"byte_end":42284,"line_start":1279,"line_end":1279,"column_start":5,"column_end":33}},{"value":"/ [`Position<Self::Item>`](enum.Position.html)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42289,"byte_end":42337,"line_start":1280,"line_end":1280,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42342,"byte_end":42345,"line_start":1281,"line_end":1281,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42350,"byte_end":42357,"line_start":1282,"line_end":1282,"column_start":5,"column_end":12}},{"value":"/ use itertools::{Itertools, Position};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42362,"byte_end":42403,"line_start":1283,"line_end":1283,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42408,"byte_end":42411,"line_start":1284,"line_end":1284,"column_start":5,"column_end":8}},{"value":"/ let it = (0..4).with_position();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42416,"byte_end":42452,"line_start":1285,"line_end":1285,"column_start":5,"column_end":41}},{"value":"/ itertools::assert_equal(it,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42457,"byte_end":42488,"line_start":1286,"line_end":1286,"column_start":5,"column_end":36}},{"value":"/                         vec![Position::First(0),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42493,"byte_end":42545,"line_start":1287,"line_end":1287,"column_start":5,"column_end":57}},{"value":"/                              Position::Middle(1),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42550,"byte_end":42603,"line_start":1288,"line_end":1288,"column_start":5,"column_end":58}},{"value":"/                              Position::Middle(2),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42608,"byte_end":42661,"line_start":1289,"line_end":1289,"column_start":5,"column_end":58}},{"value":"/                              Position::Last(3)]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42666,"byte_end":42719,"line_start":1290,"line_end":1290,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42724,"byte_end":42727,"line_start":1291,"line_end":1291,"column_start":5,"column_end":8}},{"value":"/ let it = (0..1).with_position();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42732,"byte_end":42768,"line_start":1292,"line_end":1292,"column_start":5,"column_end":41}},{"value":"/ itertools::assert_equal(it, vec![Position::Only(0)]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42773,"byte_end":42830,"line_start":1293,"line_end":1293,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42835,"byte_end":42842,"line_start":1294,"line_end":1294,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1449},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43542,"byte_end":43551,"line_start":1314,"line_end":1314,"column_start":8,"column_end":17},"name":"positions","qualname":"::Itertools::positions","value":"pub fn positions<P>(Self, P) -> Positions<Self, P> where Self: Sized,\nP: FnMut(Self::Item) -> bool","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that yields the indices of all elements\n satisfying a predicate, counted from the start of the iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that yields the indices of all elements","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":42979,"byte_end":43049,"line_start":1301,"line_end":1301,"column_start":5,"column_end":75}},{"value":"/ satisfying a predicate, counted from the start of the iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43054,"byte_end":43121,"line_start":1302,"line_end":1302,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43126,"byte_end":43129,"line_start":1303,"line_end":1303,"column_start":5,"column_end":8}},{"value":"/ Equivalent to `iter.enumerate().filter(|(_, v)| predicate(v)).map(|(i, _)| i)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43134,"byte_end":43217,"line_start":1304,"line_end":1304,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43222,"byte_end":43225,"line_start":1305,"line_end":1305,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43230,"byte_end":43237,"line_start":1306,"line_end":1306,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43242,"byte_end":43271,"line_start":1307,"line_end":1307,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43276,"byte_end":43279,"line_start":1308,"line_end":1308,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 2, 3, 3, 4, 6, 7, 9];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43284,"byte_end":43328,"line_start":1309,"line_end":1309,"column_start":5,"column_end":49}},{"value":"/ itertools::assert_equal(data.iter().positions(|v| v % 2 == 0), vec![1, 4, 5]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43333,"byte_end":43415,"line_start":1310,"line_end":1310,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43420,"byte_end":43423,"line_start":1311,"line_end":1311,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(data.iter().positions(|v| v % 2 == 1).rev(), vec![7, 6, 3, 2, 0]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43428,"byte_end":43522,"line_start":1312,"line_end":1312,"column_start":5,"column_end":99}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43527,"byte_end":43534,"line_start":1313,"line_end":1313,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1451},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":44104,"byte_end":44110,"line_start":1331,"line_end":1331,"column_start":8,"column_end":14},"name":"update","qualname":"::Itertools::update","value":"pub fn update<F>(Self, F) -> Update<Self, F> where Self: Sized,\nF: FnMut(&mut Self::Item) -> ()","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies a mutating function\n to each element before yielding it.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that applies a mutating function","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43730,"byte_end":43793,"line_start":1321,"line_end":1321,"column_start":5,"column_end":68}},{"value":"/ to each element before yielding it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43798,"byte_end":43837,"line_start":1322,"line_end":1322,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43842,"byte_end":43845,"line_start":1323,"line_end":1323,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43850,"byte_end":43857,"line_start":1324,"line_end":1324,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43862,"byte_end":43891,"line_start":1325,"line_end":1325,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43896,"byte_end":43899,"line_start":1326,"line_end":1326,"column_start":5,"column_end":8}},{"value":"/ let input = vec![vec![1], vec![3, 2, 1]];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43904,"byte_end":43949,"line_start":1327,"line_end":1327,"column_start":5,"column_end":50}},{"value":"/ let it = input.into_iter().update(|mut v| v.push(0));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":43954,"byte_end":44011,"line_start":1328,"line_end":1328,"column_start":5,"column_end":62}},{"value":"/ itertools::assert_equal(it, vec![vec![1, 0], vec![3, 2, 1, 0]]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":44016,"byte_end":44084,"line_start":1329,"line_end":1329,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":44089,"byte_end":44096,"line_start":1330,"line_end":1330,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1453},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":44735,"byte_end":44745,"line_start":1352,"line_end":1352,"column_start":8,"column_end":18},"name":"next_tuple","qualname":"::Itertools::next_tuple","value":"pub fn next_tuple<T>(&mut Self) -> Option<T> where Self: Sized + Iterator<Item\n= T::Item>, T: tuple_impl::TupleCollect","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Advances the iterator and returns the next items grouped in a tuple of\n a specific size (up to 4).","sig":null,"attributes":[{"value":"/ Advances the iterator and returns the next items grouped in a tuple of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":44303,"byte_end":44377,"line_start":1339,"line_end":1339,"column_start":5,"column_end":79}},{"value":"/ a specific size (up to 4).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":44382,"byte_end":44412,"line_start":1340,"line_end":1340,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":44417,"byte_end":44420,"line_start":1341,"line_end":1341,"column_start":5,"column_end":8}},{"value":"/ If there are enough elements to be grouped in a tuple, then the tuple is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":44425,"byte_end":44501,"line_start":1342,"line_end":1342,"column_start":5,"column_end":81}},{"value":"/ returned inside `Some`, otherwise `None` is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":44506,"byte_end":44563,"line_start":1343,"line_end":1343,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":44568,"byte_end":44571,"line_start":1344,"line_end":1344,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":44576,"byte_end":44583,"line_start":1345,"line_end":1345,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":44588,"byte_end":44617,"line_start":1346,"line_end":1346,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":44622,"byte_end":44625,"line_start":1347,"line_end":1347,"column_start":5,"column_end":8}},{"value":"/ let mut iter = 1..5;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":44630,"byte_end":44654,"line_start":1348,"line_end":1348,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":44659,"byte_end":44662,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some((1, 2)), iter.next_tuple());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":44667,"byte_end":44715,"line_start":1350,"line_end":1350,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":44720,"byte_end":44727,"line_start":1351,"line_end":1351,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1455},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45487,"byte_end":45500,"line_start":1377,"line_end":1377,"column_start":8,"column_end":21},"name":"collect_tuple","qualname":"::Itertools::collect_tuple","value":"pub fn collect_tuple<T>(Self) -> Option<T> where Self: Sized + Iterator<Item =\nT::Item>, T: tuple_impl::TupleCollect","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Collects all items from the iterator into a tuple of a specific size\n (up to 4).","sig":null,"attributes":[{"value":"/ Collects all items from the iterator into a tuple of a specific size","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":44928,"byte_end":45000,"line_start":1359,"line_end":1359,"column_start":5,"column_end":77}},{"value":"/ (up to 4).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45005,"byte_end":45019,"line_start":1360,"line_end":1360,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45024,"byte_end":45027,"line_start":1361,"line_end":1361,"column_start":5,"column_end":8}},{"value":"/ If the number of elements inside the iterator is **exactly** equal to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45032,"byte_end":45105,"line_start":1362,"line_end":1362,"column_start":5,"column_end":78}},{"value":"/ the tuple size, then the tuple is returned inside `Some`, otherwise","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45110,"byte_end":45181,"line_start":1363,"line_end":1363,"column_start":5,"column_end":76}},{"value":"/ `None` is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45186,"byte_end":45209,"line_start":1364,"line_end":1364,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45214,"byte_end":45217,"line_start":1365,"line_end":1365,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45222,"byte_end":45229,"line_start":1366,"line_end":1366,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45234,"byte_end":45263,"line_start":1367,"line_end":1367,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45268,"byte_end":45271,"line_start":1368,"line_end":1368,"column_start":5,"column_end":8}},{"value":"/ let iter = 1..3;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45276,"byte_end":45296,"line_start":1369,"line_end":1369,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45301,"byte_end":45304,"line_start":1370,"line_end":1370,"column_start":5,"column_end":8}},{"value":"/ if let Some((x, y)) = iter.collect_tuple() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45309,"byte_end":45357,"line_start":1371,"line_end":1371,"column_start":5,"column_end":53}},{"value":"/     assert_eq!((x, y), (1, 2))","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45362,"byte_end":45396,"line_start":1372,"line_end":1372,"column_start":5,"column_end":39}},{"value":"/ } else {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45401,"byte_end":45413,"line_start":1373,"line_end":1373,"column_start":5,"column_end":17}},{"value":"/     panic!(\"Expected two elements\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45418,"byte_end":45457,"line_start":1374,"line_end":1374,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45462,"byte_end":45467,"line_start":1375,"line_end":1375,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45472,"byte_end":45479,"line_start":1376,"line_end":1376,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1457},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46181,"byte_end":46194,"line_start":1401,"line_end":1401,"column_start":8,"column_end":21},"name":"find_position","qualname":"::Itertools::find_position","value":"pub fn find_position<P>(&mut Self, P) -> Option<(usize, Self::Item)> where\nP: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Find the position and value of the first element satisfying a predicate.","sig":null,"attributes":[{"value":"/ Find the position and value of the first element satisfying a predicate.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45833,"byte_end":45909,"line_start":1391,"line_end":1391,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45914,"byte_end":45917,"line_start":1392,"line_end":1392,"column_start":5,"column_end":8}},{"value":"/ The iterator is not advanced past the first element found.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45922,"byte_end":45984,"line_start":1393,"line_end":1393,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45989,"byte_end":45992,"line_start":1394,"line_end":1394,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":45997,"byte_end":46004,"line_start":1395,"line_end":1395,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46009,"byte_end":46038,"line_start":1396,"line_end":1396,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46043,"byte_end":46046,"line_start":1397,"line_end":1397,"column_start":5,"column_end":8}},{"value":"/ let text = \"Hα\";","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46051,"byte_end":46072,"line_start":1398,"line_end":1398,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(text.chars().find_position(|ch| ch.is_lowercase()), Some((1, 'α')));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46077,"byte_end":46161,"line_start":1399,"line_end":1399,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46166,"byte_end":46173,"line_start":1400,"line_end":1400,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1459},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47043,"byte_end":47052,"line_start":1430,"line_end":1430,"column_start":8,"column_end":17},"name":"all_equal","qualname":"::Itertools::all_equal","value":"pub fn all_equal(&mut Self) -> bool where Self: Sized, Self::Item: PartialEq","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Check whether all elements compare equal.","sig":null,"attributes":[{"value":"/ Check whether all elements compare equal.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46504,"byte_end":46549,"line_start":1414,"line_end":1414,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46554,"byte_end":46557,"line_start":1415,"line_end":1415,"column_start":5,"column_end":8}},{"value":"/ Empty iterators are considered to have equal elements:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46562,"byte_end":46620,"line_start":1416,"line_end":1416,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46625,"byte_end":46628,"line_start":1417,"line_end":1417,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46633,"byte_end":46640,"line_start":1418,"line_end":1418,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46645,"byte_end":46674,"line_start":1419,"line_end":1419,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46679,"byte_end":46682,"line_start":1420,"line_end":1420,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46687,"byte_end":46740,"line_start":1421,"line_end":1421,"column_start":5,"column_end":58}},{"value":"/ assert!(!data.iter().all_equal());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46745,"byte_end":46783,"line_start":1422,"line_end":1422,"column_start":5,"column_end":43}},{"value":"/ assert!(data[0..3].iter().all_equal());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46788,"byte_end":46831,"line_start":1423,"line_end":1423,"column_start":5,"column_end":48}},{"value":"/ assert!(data[3..5].iter().all_equal());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46836,"byte_end":46879,"line_start":1424,"line_end":1424,"column_start":5,"column_end":48}},{"value":"/ assert!(data[5..8].iter().all_equal());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46884,"byte_end":46927,"line_start":1425,"line_end":1425,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46932,"byte_end":46935,"line_start":1426,"line_end":1426,"column_start":5,"column_end":8}},{"value":"/ let data : Option<usize> = None;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46940,"byte_end":46976,"line_start":1427,"line_end":1427,"column_start":5,"column_end":41}},{"value":"/ assert!(data.into_iter().all_equal());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":46981,"byte_end":47023,"line_start":1428,"line_end":1428,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47028,"byte_end":47035,"line_start":1429,"line_end":1429,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1461},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47830,"byte_end":47838,"line_start":1455,"line_end":1455,"column_start":8,"column_end":16},"name":"dropping","qualname":"::Itertools::dropping","value":"pub fn dropping(Self, usize) -> Self where Self: Sized","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Consume the first `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[{"value":"/ Consume the first `n` elements from the iterator eagerly,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47262,"byte_end":47323,"line_start":1440,"line_end":1440,"column_start":5,"column_end":66}},{"value":"/ and return the same iterator again.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47328,"byte_end":47367,"line_start":1441,"line_end":1441,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47372,"byte_end":47375,"line_start":1442,"line_end":1442,"column_start":5,"column_end":8}},{"value":"/ It works similarly to *.skip(* `n` *)* except it is eager and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47380,"byte_end":47445,"line_start":1443,"line_end":1443,"column_start":5,"column_end":70}},{"value":"/ preserves the iterator type.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47450,"byte_end":47482,"line_start":1444,"line_end":1444,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47487,"byte_end":47490,"line_start":1445,"line_end":1445,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47495,"byte_end":47502,"line_start":1446,"line_end":1446,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47507,"byte_end":47536,"line_start":1447,"line_end":1447,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47541,"byte_end":47544,"line_start":1448,"line_end":1448,"column_start":5,"column_end":8}},{"value":"/ let mut iter = \"αβγ\".chars().dropping(2);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47549,"byte_end":47597,"line_start":1449,"line_end":1449,"column_start":5,"column_end":50}},{"value":"/ itertools::assert_equal(iter, \"γ\".chars());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47602,"byte_end":47650,"line_start":1450,"line_end":1450,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47655,"byte_end":47662,"line_start":1451,"line_end":1451,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47667,"byte_end":47670,"line_start":1452,"line_end":1452,"column_start":5,"column_end":8}},{"value":"/ *Fusing notes: if the iterator is exhausted by dropping,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47675,"byte_end":47735,"line_start":1453,"line_end":1453,"column_start":5,"column_end":65}},{"value":"/ the result of calling `.next()` again depends on the iterator implementation.*","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47740,"byte_end":47822,"line_start":1454,"line_end":1454,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1462},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48531,"byte_end":48544,"line_start":1479,"line_end":1479,"column_start":8,"column_end":21},"name":"dropping_back","qualname":"::Itertools::dropping_back","value":"pub fn dropping_back(Self, usize) -> Self where Self: Sized,\nSelf: DoubleEndedIterator","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Consume the last `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[{"value":"/ Consume the last `n` elements from the iterator eagerly,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":47981,"byte_end":48041,"line_start":1464,"line_end":1464,"column_start":5,"column_end":65}},{"value":"/ and return the same iterator again.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48046,"byte_end":48085,"line_start":1465,"line_end":1465,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48090,"byte_end":48093,"line_start":1466,"line_end":1466,"column_start":5,"column_end":8}},{"value":"/ This is only possible on double ended iterators. `n` may be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48098,"byte_end":48161,"line_start":1467,"line_end":1467,"column_start":5,"column_end":68}},{"value":"/ larger than the number of elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48166,"byte_end":48205,"line_start":1468,"line_end":1468,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48210,"byte_end":48213,"line_start":1469,"line_end":1469,"column_start":5,"column_end":8}},{"value":"/ Note: This method is eager, dropping the back elements immediately and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48218,"byte_end":48292,"line_start":1470,"line_end":1470,"column_start":5,"column_end":79}},{"value":"/ preserves the iterator type.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48297,"byte_end":48329,"line_start":1471,"line_end":1471,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48334,"byte_end":48337,"line_start":1472,"line_end":1472,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48342,"byte_end":48349,"line_start":1473,"line_end":1473,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48354,"byte_end":48383,"line_start":1474,"line_end":1474,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48388,"byte_end":48391,"line_start":1475,"line_end":1475,"column_start":5,"column_end":8}},{"value":"/ let init = vec![0, 3, 6, 9].into_iter().dropping_back(1);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48396,"byte_end":48457,"line_start":1476,"line_end":1476,"column_start":5,"column_end":66}},{"value":"/ itertools::assert_equal(init, vec![0, 3, 6]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48462,"byte_end":48511,"line_start":1477,"line_end":1477,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48516,"byte_end":48523,"line_start":1478,"line_end":1478,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1463},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49330,"byte_end":49337,"line_start":1507,"line_end":1507,"column_start":8,"column_end":15},"name":"foreach","qualname":"::Itertools::foreach","value":"pub fn foreach<F>(Self, F) where F: FnMut(Self::Item) -> (), Self: Sized","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Run the closure `f` eagerly on each element of the iterator.","sig":null,"attributes":[{"value":"/ Run the closure `f` eagerly on each element of the iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48741,"byte_end":48805,"line_start":1489,"line_end":1489,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48810,"byte_end":48813,"line_start":1490,"line_end":1490,"column_start":5,"column_end":8}},{"value":"/ Consumes the iterator until its end.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48818,"byte_end":48858,"line_start":1491,"line_end":1491,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48863,"byte_end":48866,"line_start":1492,"line_end":1492,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48871,"byte_end":48878,"line_start":1493,"line_end":1493,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48883,"byte_end":48916,"line_start":1494,"line_end":1494,"column_start":5,"column_end":38}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48921,"byte_end":48950,"line_start":1495,"line_end":1495,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48955,"byte_end":48958,"line_start":1496,"line_end":1496,"column_start":5,"column_end":8}},{"value":"/ let (tx, rx) = channel();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48963,"byte_end":48992,"line_start":1497,"line_end":1497,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":48997,"byte_end":49000,"line_start":1498,"line_end":1498,"column_start":5,"column_end":8}},{"value":"/ // use .foreach() to apply a function to each value -- sending it","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49005,"byte_end":49074,"line_start":1499,"line_end":1499,"column_start":5,"column_end":74}},{"value":"/ (0..5).map(|x| x * 2 + 1).foreach(|x| { tx.send(x).unwrap(); } );","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49079,"byte_end":49148,"line_start":1500,"line_end":1500,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49153,"byte_end":49156,"line_start":1501,"line_end":1501,"column_start":5,"column_end":8}},{"value":"/ drop(tx);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49161,"byte_end":49174,"line_start":1502,"line_end":1502,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49179,"byte_end":49182,"line_start":1503,"line_end":1503,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(rx.iter(), vec![1, 3, 5, 7, 9]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49187,"byte_end":49247,"line_start":1504,"line_end":1504,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49252,"byte_end":49259,"line_start":1505,"line_end":1505,"column_start":5,"column_end":12}},{"value":"deprecated(note = \"Use .for_each() instead\", since = \"0.8\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49264,"byte_end":49322,"line_start":1506,"line_end":1506,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1465},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49968,"byte_end":49974,"line_start":1527,"line_end":1527,"column_start":8,"column_end":14},"name":"concat","qualname":"::Itertools::concat","value":"pub fn concat(Self) -> Self::Item where Self: Sized,\nSelf::Item: Extend<<<Self as Iterator>::Item as IntoIterator>::Item> +\nIntoIterator + Default","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using `Extend`.","sig":null,"attributes":[{"value":"/ Combine all an iterator's elements into one element by using `Extend`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49458,"byte_end":49532,"line_start":1514,"line_end":1514,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49537,"byte_end":49540,"line_start":1515,"line_end":1515,"column_start":5,"column_end":8}},{"value":"/ This combinator will extend the first item with each of the rest of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49545,"byte_end":49620,"line_start":1516,"line_end":1516,"column_start":5,"column_end":80}},{"value":"/ items of the iterator. If the iterator is empty, the default value of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49625,"byte_end":49698,"line_start":1517,"line_end":1517,"column_start":5,"column_end":78}},{"value":"/ `I::Item` is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49703,"byte_end":49729,"line_start":1518,"line_end":1518,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49734,"byte_end":49737,"line_start":1519,"line_end":1519,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49742,"byte_end":49753,"line_start":1520,"line_end":1520,"column_start":5,"column_end":16}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49758,"byte_end":49787,"line_start":1521,"line_end":1521,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49792,"byte_end":49795,"line_start":1522,"line_end":1522,"column_start":5,"column_end":8}},{"value":"/ let input = vec![vec![1], vec![2, 3], vec![4, 5, 6]];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49800,"byte_end":49857,"line_start":1523,"line_end":1523,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(input.into_iter().concat(),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49862,"byte_end":49904,"line_start":1524,"line_end":1524,"column_start":5,"column_end":47}},{"value":"/            vec![1, 2, 3, 4, 5, 6]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49909,"byte_end":49948,"line_start":1525,"line_end":1525,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":49953,"byte_end":49960,"line_start":1526,"line_end":1526,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1466},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50302,"byte_end":50313,"line_start":1537,"line_end":1537,"column_start":8,"column_end":19},"name":"collect_vec","qualname":"::Itertools::collect_vec","value":"pub fn collect_vec(Self) -> Vec<Self::Item> where Self: Sized","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" `.collect_vec()` is simply a type specialization of `.collect()`,\n for convenience.\n","sig":null,"attributes":[{"value":"/ `.collect_vec()` is simply a type specialization of `.collect()`,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50168,"byte_end":50237,"line_start":1534,"line_end":1534,"column_start":5,"column_end":74}},{"value":"/ for convenience.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50242,"byte_end":50262,"line_start":1535,"line_end":1535,"column_start":5,"column_end":25}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50267,"byte_end":50294,"line_start":1536,"line_end":1536,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1467},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50930,"byte_end":50938,"line_start":1559,"line_end":1559,"column_start":8,"column_end":16},"name":"set_from","qualname":"::Itertools::set_from","value":"pub fn set_from<'a, A: 'a, J>(&mut Self, J) -> usize where Self: Iterator<Item\n= &'a mut A>, J: IntoIterator<Item = A>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Assign to each reference in `self` from the `from` iterator,\n stopping at the shortest of the two iterators.","sig":null,"attributes":[{"value":"/ Assign to each reference in `self` from the `from` iterator,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50405,"byte_end":50469,"line_start":1543,"line_end":1543,"column_start":5,"column_end":69}},{"value":"/ stopping at the shortest of the two iterators.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50474,"byte_end":50524,"line_start":1544,"line_end":1544,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50529,"byte_end":50532,"line_start":1545,"line_end":1545,"column_start":5,"column_end":8}},{"value":"/ The `from` iterator is queried for its next element before the `self`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50537,"byte_end":50610,"line_start":1546,"line_end":1546,"column_start":5,"column_end":78}},{"value":"/ iterator, and if either is exhausted the method is done.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50615,"byte_end":50675,"line_start":1547,"line_end":1547,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50680,"byte_end":50683,"line_start":1548,"line_end":1548,"column_start":5,"column_end":8}},{"value":"/ Return the number of elements written.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50688,"byte_end":50730,"line_start":1549,"line_end":1549,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50735,"byte_end":50738,"line_start":1550,"line_end":1550,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50743,"byte_end":50750,"line_start":1551,"line_end":1551,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50755,"byte_end":50784,"line_start":1552,"line_end":1552,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50789,"byte_end":50792,"line_start":1553,"line_end":1553,"column_start":5,"column_end":8}},{"value":"/ let mut xs = [0; 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50797,"byte_end":50821,"line_start":1554,"line_end":1554,"column_start":5,"column_end":29}},{"value":"/ xs.iter_mut().set_from(1..);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50826,"byte_end":50858,"line_start":1555,"line_end":1555,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(xs, [1, 2, 3, 4]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50863,"byte_end":50896,"line_start":1556,"line_end":1556,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50901,"byte_end":50908,"line_start":1557,"line_end":1557,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":50913,"byte_end":50922,"line_start":1558,"line_end":1558,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1471},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":51682,"byte_end":51686,"line_start":1585,"line_end":1585,"column_start":8,"column_end":12},"name":"join","qualname":"::Itertools::join","value":"pub fn join(&mut Self, &str) -> String where Self::Item: std::fmt::Display","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, separated by `sep`.","sig":null,"attributes":[{"value":"/ Combine all iterator elements into one String, separated by `sep`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":51306,"byte_end":51376,"line_start":1574,"line_end":1574,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":51381,"byte_end":51384,"line_start":1575,"line_end":1575,"column_start":5,"column_end":8}},{"value":"/ Use the `Display` implementation of each element.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":51389,"byte_end":51442,"line_start":1576,"line_end":1576,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":51447,"byte_end":51450,"line_start":1577,"line_end":1577,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":51455,"byte_end":51462,"line_start":1578,"line_end":1578,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":51467,"byte_end":51496,"line_start":1579,"line_end":1579,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":51501,"byte_end":51504,"line_start":1580,"line_end":1580,"column_start":5,"column_end":8}},{"value":"/ assert_eq!([\"a\", \"b\", \"c\"].iter().join(\", \"), \"a, b, c\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":51509,"byte_end":51570,"line_start":1581,"line_end":1581,"column_start":5,"column_end":66}},{"value":"/ assert_eq!([1, 2, 3].iter().join(\", \"), \"1, 2, 3\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":51575,"byte_end":51630,"line_start":1582,"line_end":1582,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":51635,"byte_end":51642,"line_start":1583,"line_end":1583,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":51647,"byte_end":51674,"line_start":1584,"line_end":1584,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1472},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":52814,"byte_end":52820,"line_start":1619,"line_end":1619,"column_start":8,"column_end":14},"name":"format","qualname":"::Itertools::format","value":"pub fn format(Self, &str) -> Format<, Self> where Self: Sized","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements, separated by `sep`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":52326,"byte_end":52379,"line_start":1604,"line_end":1604,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":52384,"byte_end":52387,"line_start":1605,"line_end":1605,"column_start":5,"column_end":8}},{"value":"/ All elements are formatted (any formatting trait)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":52392,"byte_end":52445,"line_start":1606,"line_end":1606,"column_start":5,"column_end":58}},{"value":"/ with `sep` inserted between each element.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":52450,"byte_end":52495,"line_start":1607,"line_end":1607,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":52500,"byte_end":52503,"line_start":1608,"line_end":1608,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the formatter helper is formatted more than once.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":52508,"byte_end":52575,"line_start":1609,"line_end":1609,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":52580,"byte_end":52583,"line_start":1610,"line_end":1610,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":52588,"byte_end":52595,"line_start":1611,"line_end":1611,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":52600,"byte_end":52629,"line_start":1612,"line_end":1612,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":52634,"byte_end":52637,"line_start":1613,"line_end":1613,"column_start":5,"column_end":8}},{"value":"/ let data = [1.1, 2.71828, -3.];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":52642,"byte_end":52677,"line_start":1614,"line_end":1614,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":52682,"byte_end":52697,"line_start":1615,"line_end":1615,"column_start":5,"column_end":20}},{"value":"/     format!(\"{:.2}\", data.iter().format(\", \")),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":52702,"byte_end":52753,"line_start":1616,"line_end":1616,"column_start":5,"column_end":56}},{"value":"/            \"1.10, 2.72, -3.00\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":52758,"byte_end":52794,"line_start":1617,"line_end":1617,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":52799,"byte_end":52806,"line_start":1618,"line_end":1618,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1473},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":54298,"byte_end":54309,"line_start":1657,"line_end":1657,"column_start":8,"column_end":19},"name":"format_with","qualname":"::Itertools::format_with","value":"pub fn format_with<F>(Self, &str, F) -> FormatWith<, Self, F> where\nSelf: Sized, F: FnMut(Self::Item, &mut FnMut(&fmt::Display) -> fmt::Result) ->\nfmt::Result","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements, separated by `sep`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":52944,"byte_end":52997,"line_start":1625,"line_end":1625,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53002,"byte_end":53005,"line_start":1626,"line_end":1626,"column_start":5,"column_end":8}},{"value":"/ This is a customizable version of `.format()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53010,"byte_end":53060,"line_start":1627,"line_end":1627,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53065,"byte_end":53068,"line_start":1628,"line_end":1628,"column_start":5,"column_end":8}},{"value":"/ The supplied closure `format` is called once per iterator element,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53073,"byte_end":53143,"line_start":1629,"line_end":1629,"column_start":5,"column_end":75}},{"value":"/ with two arguments: the element and a callback that takes a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53148,"byte_end":53211,"line_start":1630,"line_end":1630,"column_start":5,"column_end":68}},{"value":"/ `&Display` value, i.e. any reference to type that implements `Display`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53216,"byte_end":53291,"line_start":1631,"line_end":1631,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53296,"byte_end":53299,"line_start":1632,"line_end":1632,"column_start":5,"column_end":8}},{"value":"/ Using `&format_args!(...)` is the most versatile way to apply custom","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53304,"byte_end":53376,"line_start":1633,"line_end":1633,"column_start":5,"column_end":77}},{"value":"/ element formatting. The callback can be called multiple times if needed.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53381,"byte_end":53457,"line_start":1634,"line_end":1634,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53462,"byte_end":53465,"line_start":1635,"line_end":1635,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the formatter helper is formatted more than once.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53470,"byte_end":53537,"line_start":1636,"line_end":1636,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53542,"byte_end":53545,"line_start":1637,"line_end":1637,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53550,"byte_end":53557,"line_start":1638,"line_end":1638,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53562,"byte_end":53591,"line_start":1639,"line_end":1639,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53596,"byte_end":53599,"line_start":1640,"line_end":1640,"column_start":5,"column_end":8}},{"value":"/ let data = [1.1, 2.71828, -3.];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53604,"byte_end":53639,"line_start":1641,"line_end":1641,"column_start":5,"column_end":40}},{"value":"/ let data_formatter = data.iter().format_with(\", \", |elt, f| f(&format_args!(\"{:.2}\", elt)));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53644,"byte_end":53740,"line_start":1642,"line_end":1642,"column_start":5,"column_end":101}},{"value":"/ assert_eq!(format!(\"{}\", data_formatter),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53745,"byte_end":53790,"line_start":1643,"line_end":1643,"column_start":5,"column_end":50}},{"value":"/            \"1.10, 2.72, -3.00\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53795,"byte_end":53831,"line_start":1644,"line_end":1644,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53836,"byte_end":53839,"line_start":1645,"line_end":1645,"column_start":5,"column_end":8}},{"value":"/ // .format_with() is recursively composable","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53844,"byte_end":53891,"line_start":1646,"line_end":1646,"column_start":5,"column_end":52}},{"value":"/ let matrix = [[1., 2., 3.],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53896,"byte_end":53927,"line_start":1647,"line_end":1647,"column_start":5,"column_end":36}},{"value":"/               [4., 5., 6.]];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53932,"byte_end":53964,"line_start":1648,"line_end":1648,"column_start":5,"column_end":37}},{"value":"/ let matrix_formatter = matrix.iter().format_with(\"\\n\", |row, f| {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":53969,"byte_end":54038,"line_start":1649,"line_end":1649,"column_start":5,"column_end":74}},{"value":"/                                 f(&row.iter().format_with(\", \", |elt, g| g(&elt)))","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":54043,"byte_end":54129,"line_start":1650,"line_end":1650,"column_start":5,"column_end":91}},{"value":"/                              });","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":54134,"byte_end":54170,"line_start":1651,"line_end":1651,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(format!(\"{}\", matrix_formatter),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":54175,"byte_end":54222,"line_start":1652,"line_end":1652,"column_start":5,"column_end":52}},{"value":"/            \"1, 2, 3\\n4, 5, 6\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":54227,"byte_end":54262,"line_start":1653,"line_end":1653,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":54267,"byte_end":54270,"line_start":1654,"line_end":1654,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":54275,"byte_end":54278,"line_start":1655,"line_end":1655,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":54283,"byte_end":54290,"line_start":1656,"line_end":1656,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1475},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56031,"byte_end":56043,"line_start":1706,"line_end":1706,"column_start":8,"column_end":20},"name":"fold_results","qualname":"::Itertools::fold_results","value":"pub fn fold_results<A, E, B, F>(&mut Self, B, F) -> Result<B, E> where\nSelf: Iterator<Item = Result<A, E>>, F: FnMut(B, A) -> B","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Fold `Result` values from an iterator.","sig":null,"attributes":[{"value":"/ Fold `Result` values from an iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":54547,"byte_end":54589,"line_start":1664,"line_end":1664,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":54594,"byte_end":54597,"line_start":1665,"line_end":1665,"column_start":5,"column_end":8}},{"value":"/ Only `Ok` values are folded. If no error is encountered, the folded","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":54602,"byte_end":54673,"line_start":1666,"line_end":1666,"column_start":5,"column_end":76}},{"value":"/ value is returned inside `Ok`. Otherwise, the operation terminates","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":54678,"byte_end":54748,"line_start":1667,"line_end":1667,"column_start":5,"column_end":75}},{"value":"/ and returns the first `Err` value it encounters. No iterator elements are","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":54753,"byte_end":54830,"line_start":1668,"line_end":1668,"column_start":5,"column_end":82}},{"value":"/ consumed after the first error.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":54835,"byte_end":54870,"line_start":1669,"line_end":1669,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":54875,"byte_end":54878,"line_start":1670,"line_end":1670,"column_start":5,"column_end":8}},{"value":"/ The first accumulator value is the `start` parameter.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":54883,"byte_end":54940,"line_start":1671,"line_end":1671,"column_start":5,"column_end":62}},{"value":"/ Each iteration passes the accumulator value and the next value inside `Ok`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":54945,"byte_end":55023,"line_start":1672,"line_end":1672,"column_start":5,"column_end":83}},{"value":"/ to the fold function `f` and its return value becomes the new accumulator value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55028,"byte_end":55112,"line_start":1673,"line_end":1673,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55117,"byte_end":55120,"line_start":1674,"line_end":1674,"column_start":5,"column_end":8}},{"value":"/ For example the sequence *Ok(1), Ok(2), Ok(3)* will result in a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55125,"byte_end":55192,"line_start":1675,"line_end":1675,"column_start":5,"column_end":72}},{"value":"/ computation like this:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55197,"byte_end":55223,"line_start":1676,"line_end":1676,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55228,"byte_end":55231,"line_start":1677,"line_end":1677,"column_start":5,"column_end":8}},{"value":"/ ```ignore","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55236,"byte_end":55249,"line_start":1678,"line_end":1678,"column_start":5,"column_end":18}},{"value":"/ let mut accum = start;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55254,"byte_end":55280,"line_start":1679,"line_end":1679,"column_start":5,"column_end":31}},{"value":"/ accum = f(accum, 1);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55285,"byte_end":55309,"line_start":1680,"line_end":1680,"column_start":5,"column_end":29}},{"value":"/ accum = f(accum, 2);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55314,"byte_end":55338,"line_start":1681,"line_end":1681,"column_start":5,"column_end":29}},{"value":"/ accum = f(accum, 3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55343,"byte_end":55367,"line_start":1682,"line_end":1682,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55372,"byte_end":55379,"line_start":1683,"line_end":1683,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55384,"byte_end":55387,"line_start":1684,"line_end":1684,"column_start":5,"column_end":8}},{"value":"/ With a `start` value of 0 and an addition as folding function,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55392,"byte_end":55458,"line_start":1685,"line_end":1685,"column_start":5,"column_end":71}},{"value":"/ this effectively results in *((0 + 1) + 2) + 3*","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55463,"byte_end":55514,"line_start":1686,"line_end":1686,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55519,"byte_end":55522,"line_start":1687,"line_end":1687,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55527,"byte_end":55534,"line_start":1688,"line_end":1688,"column_start":5,"column_end":12}},{"value":"/ use std::ops::Add;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55539,"byte_end":55561,"line_start":1689,"line_end":1689,"column_start":5,"column_end":27}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55566,"byte_end":55595,"line_start":1690,"line_end":1690,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55600,"byte_end":55603,"line_start":1691,"line_end":1691,"column_start":5,"column_end":8}},{"value":"/ let values = [1, 2, -2, -1, 2, 1];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55608,"byte_end":55646,"line_start":1692,"line_end":1692,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55651,"byte_end":55666,"line_start":1693,"line_end":1693,"column_start":5,"column_end":20}},{"value":"/     values.iter()","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55671,"byte_end":55692,"line_start":1694,"line_end":1694,"column_start":5,"column_end":26}},{"value":"/           .map(Ok::<_, ()>)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55697,"byte_end":55728,"line_start":1695,"line_end":1695,"column_start":5,"column_end":36}},{"value":"/           .fold_results(0, Add::add),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55733,"byte_end":55774,"line_start":1696,"line_end":1696,"column_start":5,"column_end":46}},{"value":"/     Ok(3)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55779,"byte_end":55792,"line_start":1697,"line_end":1697,"column_start":5,"column_end":18}},{"value":"/ );","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55797,"byte_end":55803,"line_start":1698,"line_end":1698,"column_start":5,"column_end":11}},{"value":"/ assert!(","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55808,"byte_end":55820,"line_start":1699,"line_end":1699,"column_start":5,"column_end":17}},{"value":"/     values.iter()","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55825,"byte_end":55846,"line_start":1700,"line_end":1700,"column_start":5,"column_end":26}},{"value":"/           .map(|&x| if x >= 0 { Ok(x) } else { Err(\"Negative number\") })","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55851,"byte_end":55927,"line_start":1701,"line_end":1701,"column_start":5,"column_end":81}},{"value":"/           .fold_results(0, Add::add)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55932,"byte_end":55972,"line_start":1702,"line_end":1702,"column_start":5,"column_end":45}},{"value":"/           .is_err()","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":55977,"byte_end":56000,"line_start":1703,"line_end":1703,"column_start":5,"column_end":28}},{"value":"/ );","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56005,"byte_end":56011,"line_start":1704,"line_end":1704,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56016,"byte_end":56023,"line_start":1705,"line_end":1705,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":57200,"byte_end":57212,"line_start":1738,"line_end":1738,"column_start":8,"column_end":20},"name":"fold_options","qualname":"::Itertools::fold_options","value":"pub fn fold_options<A, B, F>(&mut Self, B, F) -> Option<B> where\nSelf: Iterator<Item = Option<A>>, F: FnMut(B, A) -> B","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Fold `Option` values from an iterator.","sig":null,"attributes":[{"value":"/ Fold `Option` values from an iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56388,"byte_end":56430,"line_start":1719,"line_end":1719,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56435,"byte_end":56438,"line_start":1720,"line_end":1720,"column_start":5,"column_end":8}},{"value":"/ Only `Some` values are folded. If no `None` is encountered, the folded","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56443,"byte_end":56517,"line_start":1721,"line_end":1721,"column_start":5,"column_end":79}},{"value":"/ value is returned inside `Some`. Otherwise, the operation terminates","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56522,"byte_end":56594,"line_start":1722,"line_end":1722,"column_start":5,"column_end":77}},{"value":"/ and returns `None`. No iterator elements are consumed after the `None`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56599,"byte_end":56674,"line_start":1723,"line_end":1723,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56679,"byte_end":56682,"line_start":1724,"line_end":1724,"column_start":5,"column_end":8}},{"value":"/ This is the `Option` equivalent to `fold_results`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56687,"byte_end":56741,"line_start":1725,"line_end":1725,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56746,"byte_end":56749,"line_start":1726,"line_end":1726,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56754,"byte_end":56761,"line_start":1727,"line_end":1727,"column_start":5,"column_end":12}},{"value":"/ use std::ops::Add;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56766,"byte_end":56788,"line_start":1728,"line_end":1728,"column_start":5,"column_end":27}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56793,"byte_end":56822,"line_start":1729,"line_end":1729,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56827,"byte_end":56830,"line_start":1730,"line_end":1730,"column_start":5,"column_end":8}},{"value":"/ let mut values = vec![Some(1), Some(2), Some(-2)].into_iter();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56835,"byte_end":56901,"line_start":1731,"line_end":1731,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(values.fold_options(5, Add::add), Some(5 + 1 + 2 - 2));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56906,"byte_end":56976,"line_start":1732,"line_end":1732,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56981,"byte_end":56984,"line_start":1733,"line_end":1733,"column_start":5,"column_end":8}},{"value":"/ let mut more_values = vec![Some(2), None, Some(0)].into_iter();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":56989,"byte_end":57056,"line_start":1734,"line_end":1734,"column_start":5,"column_end":72}},{"value":"/ assert!(more_values.fold_options(0, Add::add).is_none());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":57061,"byte_end":57122,"line_start":1735,"line_end":1735,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(more_values.next().unwrap(), Some(0));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":57127,"byte_end":57180,"line_start":1736,"line_end":1736,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":57185,"byte_end":57192,"line_start":1737,"line_end":1737,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58012,"byte_end":58017,"line_start":1763,"line_end":1763,"column_start":8,"column_end":13},"name":"fold1","qualname":"::Itertools::fold1","value":"pub fn fold1<F>(Self, F) -> Option<Self::Item> where\nF: FnMut(Self::Item, Self::Item) -> Self::Item, Self: Sized","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Accumulator of the elements in the iterator.","sig":null,"attributes":[{"value":"/ Accumulator of the elements in the iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":57548,"byte_end":57596,"line_start":1751,"line_end":1751,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":57601,"byte_end":57604,"line_start":1752,"line_end":1752,"column_start":5,"column_end":8}},{"value":"/ Like `.fold()`, without a base case. If the iterator is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":57609,"byte_end":57668,"line_start":1753,"line_end":1753,"column_start":5,"column_end":64}},{"value":"/ empty, return `None`. With just one element, return it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":57673,"byte_end":57732,"line_start":1754,"line_end":1754,"column_start":5,"column_end":64}},{"value":"/ Otherwise elements are accumulated in sequence using the closure `f`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":57737,"byte_end":57810,"line_start":1755,"line_end":1755,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":57815,"byte_end":57818,"line_start":1756,"line_end":1756,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":57823,"byte_end":57830,"line_start":1757,"line_end":1757,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":57835,"byte_end":57864,"line_start":1758,"line_end":1758,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":57869,"byte_end":57872,"line_start":1759,"line_end":1759,"column_start":5,"column_end":8}},{"value":"/ assert_eq!((0..10).fold1(|x, y| x + y).unwrap_or(0), 45);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":57877,"byte_end":57938,"line_start":1760,"line_end":1760,"column_start":5,"column_end":66}},{"value":"/ assert_eq!((0..0).fold1(|x, y| x * y), None);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":57943,"byte_end":57992,"line_start":1761,"line_end":1761,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":57997,"byte_end":58004,"line_start":1762,"line_end":1762,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":60005,"byte_end":60015,"line_start":1818,"line_end":1818,"column_start":8,"column_end":18},"name":"tree_fold1","qualname":"::Itertools::tree_fold1","value":"pub fn tree_fold1<F>(Self, F) -> Option<Self::Item> where\nF: FnMut(Self::Item, Self::Item) -> Self::Item, Self: Sized","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Accumulate the elements in the iterator in a tree-like manner.","sig":null,"attributes":[{"value":"/ Accumulate the elements in the iterator in a tree-like manner.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58215,"byte_end":58281,"line_start":1770,"line_end":1770,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58286,"byte_end":58289,"line_start":1771,"line_end":1771,"column_start":5,"column_end":8}},{"value":"/ You can think of it as, while there's more than one item, repeatedly","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58294,"byte_end":58366,"line_start":1772,"line_end":1772,"column_start":5,"column_end":77}},{"value":"/ combining adjacent items.  It does so in bottom-up-merge-sort order,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58371,"byte_end":58443,"line_start":1773,"line_end":1773,"column_start":5,"column_end":77}},{"value":"/ however, so that it needs only logarithmic stack space.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58448,"byte_end":58507,"line_start":1774,"line_end":1774,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58512,"byte_end":58515,"line_start":1775,"line_end":1775,"column_start":5,"column_end":8}},{"value":"/ This produces a call tree like the following (where the calls under","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58520,"byte_end":58591,"line_start":1776,"line_end":1776,"column_start":5,"column_end":76}},{"value":"/ an item are done after reading that item):","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58596,"byte_end":58642,"line_start":1777,"line_end":1777,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58647,"byte_end":58650,"line_start":1778,"line_end":1778,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58655,"byte_end":58666,"line_start":1779,"line_end":1779,"column_start":5,"column_end":16}},{"value":"/ 1 2 3 4 5 6 7","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58671,"byte_end":58688,"line_start":1780,"line_end":1780,"column_start":5,"column_end":22}},{"value":"/ │ │ │ │ │ │ │","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58693,"byte_end":58724,"line_start":1781,"line_end":1781,"column_start":5,"column_end":22}},{"value":"/ └─f └─f └─f │","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58729,"byte_end":58760,"line_start":1782,"line_end":1782,"column_start":5,"column_end":22}},{"value":"/   │   │   │ │","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58765,"byte_end":58790,"line_start":1783,"line_end":1783,"column_start":5,"column_end":22}},{"value":"/   └───f   └─f","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58795,"byte_end":58824,"line_start":1784,"line_end":1784,"column_start":5,"column_end":22}},{"value":"/       │     │","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58829,"byte_end":58850,"line_start":1785,"line_end":1785,"column_start":5,"column_end":22}},{"value":"/       └─────f","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58855,"byte_end":58884,"line_start":1786,"line_end":1786,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58889,"byte_end":58896,"line_start":1787,"line_end":1787,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58901,"byte_end":58904,"line_start":1788,"line_end":1788,"column_start":5,"column_end":8}},{"value":"/ Which, for non-associative functions, will typically produce a different","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58909,"byte_end":58985,"line_start":1789,"line_end":1789,"column_start":5,"column_end":81}},{"value":"/ result than the linear call tree used by `fold1`:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":58990,"byte_end":59043,"line_start":1790,"line_end":1790,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59048,"byte_end":59051,"line_start":1791,"line_end":1791,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59056,"byte_end":59067,"line_start":1792,"line_end":1792,"column_start":5,"column_end":16}},{"value":"/ 1 2 3 4 5 6 7","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59072,"byte_end":59089,"line_start":1793,"line_end":1793,"column_start":5,"column_end":22}},{"value":"/ │ │ │ │ │ │ │","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59094,"byte_end":59125,"line_start":1794,"line_end":1794,"column_start":5,"column_end":22}},{"value":"/ └─f─f─f─f─f─f","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59130,"byte_end":59161,"line_start":1795,"line_end":1795,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59166,"byte_end":59173,"line_start":1796,"line_end":1796,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59178,"byte_end":59181,"line_start":1797,"line_end":1797,"column_start":5,"column_end":8}},{"value":"/ If `f` is associative, prefer the normal `fold1` instead.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59186,"byte_end":59247,"line_start":1798,"line_end":1798,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59252,"byte_end":59255,"line_start":1799,"line_end":1799,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59260,"byte_end":59267,"line_start":1800,"line_end":1800,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59272,"byte_end":59301,"line_start":1801,"line_end":1801,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59306,"byte_end":59309,"line_start":1802,"line_end":1802,"column_start":5,"column_end":8}},{"value":"/ // The same tree as above","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59314,"byte_end":59343,"line_start":1803,"line_end":1803,"column_start":5,"column_end":34}},{"value":"/ let num_strings = (1..8).map(|x| x.to_string());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59348,"byte_end":59400,"line_start":1804,"line_end":1804,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(num_strings.tree_fold1(|x, y| format!(\"f({}, {})\", x, y)),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59405,"byte_end":59478,"line_start":1805,"line_end":1805,"column_start":5,"column_end":78}},{"value":"/     Some(String::from(\"f(f(f(1, 2), f(3, 4)), f(f(5, 6), 7))\")));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59483,"byte_end":59552,"line_start":1806,"line_end":1806,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59557,"byte_end":59560,"line_start":1807,"line_end":1807,"column_start":5,"column_end":8}},{"value":"/ // Like fold1, an empty iterator produces None","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59565,"byte_end":59615,"line_start":1808,"line_end":1808,"column_start":5,"column_end":55}},{"value":"/ assert_eq!((0..0).tree_fold1(|x, y| x * y), None);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59620,"byte_end":59674,"line_start":1809,"line_end":1809,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59679,"byte_end":59682,"line_start":1810,"line_end":1810,"column_start":5,"column_end":8}},{"value":"/ // tree_fold1 matches fold1 for associative operations...","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59687,"byte_end":59748,"line_start":1811,"line_end":1811,"column_start":5,"column_end":66}},{"value":"/ assert_eq!((0..10).tree_fold1(|x, y| x + y),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59753,"byte_end":59801,"line_start":1812,"line_end":1812,"column_start":5,"column_end":53}},{"value":"/     (0..10).fold1(|x, y| x + y));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59806,"byte_end":59843,"line_start":1813,"line_end":1813,"column_start":5,"column_end":42}},{"value":"/ // ...but not for non-associative ones","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59848,"byte_end":59890,"line_start":1814,"line_end":1814,"column_start":5,"column_end":47}},{"value":"/ assert_ne!((0..10).tree_fold1(|x, y| x - y),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59895,"byte_end":59943,"line_start":1815,"line_end":1815,"column_start":5,"column_end":53}},{"value":"/     (0..10).fold1(|x, y| x - y));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59948,"byte_end":59985,"line_start":1816,"line_end":1816,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":59990,"byte_end":59997,"line_start":1817,"line_end":1817,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1499},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":63574,"byte_end":63584,"line_start":1917,"line_end":1917,"column_start":8,"column_end":18},"name":"fold_while","qualname":"::Itertools::fold_while","value":"pub fn fold_while<B, F>(&mut Self, B, F) -> FoldWhile<B> where Self: Sized,\nF: FnMut(B, Self::Item) -> FoldWhile<B>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" An iterator method that applies a function, producing a single, final value.","sig":null,"attributes":[{"value":"/ An iterator method that applies a function, producing a single, final value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62195,"byte_end":62275,"line_start":1877,"line_end":1877,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62280,"byte_end":62283,"line_start":1878,"line_end":1878,"column_start":5,"column_end":8}},{"value":"/ `fold_while()` is basically equivalent to `fold()` but with additional support for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62288,"byte_end":62374,"line_start":1879,"line_end":1879,"column_start":5,"column_end":91}},{"value":"/ early exit via short-circuiting.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62379,"byte_end":62415,"line_start":1880,"line_end":1880,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62420,"byte_end":62423,"line_start":1881,"line_end":1881,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62428,"byte_end":62435,"line_start":1882,"line_end":1882,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62440,"byte_end":62469,"line_start":1883,"line_end":1883,"column_start":5,"column_end":34}},{"value":"/ use itertools::FoldWhile::{Continue, Done};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62474,"byte_end":62521,"line_start":1884,"line_end":1884,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62526,"byte_end":62529,"line_start":1885,"line_end":1885,"column_start":5,"column_end":8}},{"value":"/ let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62534,"byte_end":62584,"line_start":1886,"line_end":1886,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62589,"byte_end":62592,"line_start":1887,"line_end":1887,"column_start":5,"column_end":8}},{"value":"/ let mut result = 0;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62597,"byte_end":62620,"line_start":1888,"line_end":1888,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62625,"byte_end":62628,"line_start":1889,"line_end":1889,"column_start":5,"column_end":8}},{"value":"/ // for loop:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62633,"byte_end":62649,"line_start":1890,"line_end":1890,"column_start":5,"column_end":21}},{"value":"/ for i in &numbers {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62654,"byte_end":62677,"line_start":1891,"line_end":1891,"column_start":5,"column_end":28}},{"value":"/     if *i > 5 {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62682,"byte_end":62701,"line_start":1892,"line_end":1892,"column_start":5,"column_end":24}},{"value":"/         break;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62706,"byte_end":62724,"line_start":1893,"line_end":1893,"column_start":5,"column_end":23}},{"value":"/     }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62729,"byte_end":62738,"line_start":1894,"line_end":1894,"column_start":5,"column_end":14}},{"value":"/     result = result + i;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62743,"byte_end":62771,"line_start":1895,"line_end":1895,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62776,"byte_end":62781,"line_start":1896,"line_end":1896,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62786,"byte_end":62789,"line_start":1897,"line_end":1897,"column_start":5,"column_end":8}},{"value":"/ // fold:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62794,"byte_end":62806,"line_start":1898,"line_end":1898,"column_start":5,"column_end":17}},{"value":"/ let result2 = numbers.iter().fold(0, |acc, x| {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62811,"byte_end":62862,"line_start":1899,"line_end":1899,"column_start":5,"column_end":56}},{"value":"/     if *x > 5 { acc } else { acc + x }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62867,"byte_end":62909,"line_start":1900,"line_end":1900,"column_start":5,"column_end":47}},{"value":"/ });","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62914,"byte_end":62921,"line_start":1901,"line_end":1901,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62926,"byte_end":62929,"line_start":1902,"line_end":1902,"column_start":5,"column_end":8}},{"value":"/ // fold_while:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62934,"byte_end":62952,"line_start":1903,"line_end":1903,"column_start":5,"column_end":23}},{"value":"/ let result3 = numbers.iter().fold_while(0, |acc, x| {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":62957,"byte_end":63014,"line_start":1904,"line_end":1904,"column_start":5,"column_end":62}},{"value":"/     if *x > 5 { Done(acc) } else { Continue(acc + x) }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":63019,"byte_end":63077,"line_start":1905,"line_end":1905,"column_start":5,"column_end":63}},{"value":"/ }).into_inner();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":63082,"byte_end":63102,"line_start":1906,"line_end":1906,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":63107,"byte_end":63110,"line_start":1907,"line_end":1907,"column_start":5,"column_end":8}},{"value":"/ // they're the same","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":63115,"byte_end":63138,"line_start":1908,"line_end":1908,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(result, result2);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":63143,"byte_end":63175,"line_start":1909,"line_end":1909,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(result2, result3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":63180,"byte_end":63213,"line_start":1910,"line_end":1910,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":63218,"byte_end":63225,"line_start":1911,"line_end":1911,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":63230,"byte_end":63233,"line_start":1912,"line_end":1912,"column_start":5,"column_end":8}},{"value":"/ The big difference between the computations of `result2` and `result3` is that while","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":63238,"byte_end":63326,"line_start":1913,"line_end":1913,"column_start":5,"column_end":93}},{"value":"/ `fold()` called the provided closure for every item of the callee iterator,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":63331,"byte_end":63410,"line_start":1914,"line_end":1914,"column_start":5,"column_end":84}},{"value":"/ `fold_while()` actually stopped iterating as soon as it encountered `Fold::Done(_)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":63415,"byte_end":63503,"line_start":1915,"line_end":1915,"column_start":5,"column_end":93}},{"value":"deprecated(note = \"Use .try_fold() instead\", since = \"0.8\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":63508,"byte_end":63566,"line_start":1916,"line_end":1916,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64651,"byte_end":64655,"line_start":1952,"line_end":1952,"column_start":8,"column_end":12},"name":"sum1","qualname":"::Itertools::sum1","value":"pub fn sum1<S>(Self) -> Option<S> where Self: Sized,\nS: std::iter::Sum<Self::Item>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Iterate over the entire iterator and add all the elements.","sig":null,"attributes":[{"value":"/ Iterate over the entire iterator and add all the elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64009,"byte_end":64071,"line_start":1931,"line_end":1931,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64076,"byte_end":64079,"line_start":1932,"line_end":1932,"column_start":5,"column_end":8}},{"value":"/ An empty iterator returns `None`, otherwise `Some(sum)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64084,"byte_end":64144,"line_start":1933,"line_end":1933,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64149,"byte_end":64152,"line_start":1934,"line_end":1934,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64157,"byte_end":64169,"line_start":1935,"line_end":1935,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64174,"byte_end":64177,"line_start":1936,"line_end":1936,"column_start":5,"column_end":8}},{"value":"/ When calling `sum1()` and a primitive integer type is being returned, this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64182,"byte_end":64260,"line_start":1937,"line_end":1937,"column_start":5,"column_end":83}},{"value":"/ method will panic if the computation overflows and debug assertions are","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64265,"byte_end":64340,"line_start":1938,"line_end":1938,"column_start":5,"column_end":80}},{"value":"/ enabled.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64345,"byte_end":64357,"line_start":1939,"line_end":1939,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64362,"byte_end":64365,"line_start":1940,"line_end":1940,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64370,"byte_end":64384,"line_start":1941,"line_end":1941,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64389,"byte_end":64392,"line_start":1942,"line_end":1942,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64397,"byte_end":64404,"line_start":1943,"line_end":1943,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64409,"byte_end":64438,"line_start":1944,"line_end":1944,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64443,"byte_end":64446,"line_start":1945,"line_end":1945,"column_start":5,"column_end":8}},{"value":"/ let empty_sum = (1..1).sum1::<i32>();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64451,"byte_end":64492,"line_start":1946,"line_end":1946,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(empty_sum, None);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64497,"byte_end":64529,"line_start":1947,"line_end":1947,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64534,"byte_end":64537,"line_start":1948,"line_end":1948,"column_start":5,"column_end":8}},{"value":"/ let nonempty_sum = (1..11).sum1::<i32>();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64542,"byte_end":64587,"line_start":1949,"line_end":1949,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(nonempty_sum, Some(55));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64592,"byte_end":64631,"line_start":1950,"line_end":1950,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64636,"byte_end":64643,"line_start":1951,"line_end":1951,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1505},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65518,"byte_end":65526,"line_start":1980,"line_end":1980,"column_start":8,"column_end":16},"name":"product1","qualname":"::Itertools::product1","value":"pub fn product1<P>(Self) -> Option<P> where Self: Sized,\nP: std::iter::Product<Self::Item>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Iterate over the entire iterator and multiply all the elements.","sig":null,"attributes":[{"value":"/ Iterate over the entire iterator and multiply all the elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64847,"byte_end":64914,"line_start":1960,"line_end":1960,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64919,"byte_end":64922,"line_start":1961,"line_end":1961,"column_start":5,"column_end":8}},{"value":"/ An empty iterator returns `None`, otherwise `Some(product)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64927,"byte_end":64991,"line_start":1962,"line_end":1962,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":64996,"byte_end":64999,"line_start":1963,"line_end":1963,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65004,"byte_end":65016,"line_start":1964,"line_end":1964,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65021,"byte_end":65024,"line_start":1965,"line_end":1965,"column_start":5,"column_end":8}},{"value":"/ When calling `product1()` and a primitive integer type is being returned,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65029,"byte_end":65106,"line_start":1966,"line_end":1966,"column_start":5,"column_end":82}},{"value":"/ method will panic if the computation overflows and debug assertions are","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65111,"byte_end":65186,"line_start":1967,"line_end":1967,"column_start":5,"column_end":80}},{"value":"/ enabled.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65191,"byte_end":65203,"line_start":1968,"line_end":1968,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65208,"byte_end":65211,"line_start":1969,"line_end":1969,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65216,"byte_end":65230,"line_start":1970,"line_end":1970,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65235,"byte_end":65242,"line_start":1971,"line_end":1971,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65247,"byte_end":65276,"line_start":1972,"line_end":1972,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65281,"byte_end":65284,"line_start":1973,"line_end":1973,"column_start":5,"column_end":8}},{"value":"/ let empty_product = (1..1).product1::<i32>();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65289,"byte_end":65338,"line_start":1974,"line_end":1974,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(empty_product, None);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65343,"byte_end":65379,"line_start":1975,"line_end":1975,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65384,"byte_end":65387,"line_start":1976,"line_end":1976,"column_start":5,"column_end":8}},{"value":"/ let nonempty_product = (1..11).product1::<i32>();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65392,"byte_end":65445,"line_start":1977,"line_end":1977,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(nonempty_product, Some(3628800));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65450,"byte_end":65498,"line_start":1978,"line_end":1978,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65503,"byte_end":65510,"line_start":1979,"line_end":1979,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66417,"byte_end":66423,"line_start":2007,"line_end":2007,"column_start":8,"column_end":14},"name":"sorted","qualname":"::Itertools::sorted","value":"pub fn sorted(Self) -> VecIntoIter<Self::Item> where Self: Sized,\nSelf::Item: Ord","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65727,"byte_end":65797,"line_start":1989,"line_end":1989,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65802,"byte_end":65805,"line_start":1990,"line_end":1990,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65810,"byte_end":65867,"line_start":1991,"line_end":1991,"column_start":5,"column_end":62}},{"value":"/ `slice::sort()` method and returns the result as a new","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65872,"byte_end":65930,"line_start":1992,"line_end":1992,"column_start":5,"column_end":63}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65935,"byte_end":65971,"line_start":1993,"line_end":1993,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65976,"byte_end":65979,"line_start":1994,"line_end":1994,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":65984,"byte_end":66055,"line_start":1995,"line_end":1995,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66060,"byte_end":66109,"line_start":1996,"line_end":1996,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66114,"byte_end":66117,"line_start":1997,"line_end":1997,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66122,"byte_end":66129,"line_start":1998,"line_end":1998,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66134,"byte_end":66163,"line_start":1999,"line_end":1999,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66168,"byte_end":66171,"line_start":2000,"line_end":2000,"column_start":5,"column_end":8}},{"value":"/ // sort the letters of the text in ascending order","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66176,"byte_end":66230,"line_start":2001,"line_end":2001,"column_start":5,"column_end":59}},{"value":"/ let text = \"bdacfe\";","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66235,"byte_end":66259,"line_start":2002,"line_end":2002,"column_start":5,"column_end":29}},{"value":"/ itertools::assert_equal(text.chars().sorted(),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66264,"byte_end":66314,"line_start":2003,"line_end":2003,"column_start":5,"column_end":55}},{"value":"/                         \"abcdef\".chars());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66319,"byte_end":66365,"line_start":2004,"line_end":2004,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66370,"byte_end":66377,"line_start":2005,"line_end":2005,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66382,"byte_end":66409,"line_start":2006,"line_end":2006,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1509},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67645,"byte_end":67654,"line_start":2042,"line_end":2042,"column_start":8,"column_end":17},"name":"sorted_by","qualname":"::Itertools::sorted_by","value":"pub fn sorted_by<F>(Self, F) -> VecIntoIter<Self::Item> where Self: Sized,\nF: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66712,"byte_end":66782,"line_start":2018,"line_end":2018,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66787,"byte_end":66790,"line_start":2019,"line_end":2019,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66795,"byte_end":66852,"line_start":2020,"line_end":2020,"column_start":5,"column_end":62}},{"value":"/ `slice::sort_by()` method and returns the result as a new","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66857,"byte_end":66918,"line_start":2021,"line_end":2021,"column_start":5,"column_end":66}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66923,"byte_end":66959,"line_start":2022,"line_end":2022,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66964,"byte_end":66967,"line_start":2023,"line_end":2023,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":66972,"byte_end":67043,"line_start":2024,"line_end":2024,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67048,"byte_end":67097,"line_start":2025,"line_end":2025,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67102,"byte_end":67105,"line_start":2026,"line_end":2026,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67110,"byte_end":67117,"line_start":2027,"line_end":2027,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67122,"byte_end":67151,"line_start":2028,"line_end":2028,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67156,"byte_end":67159,"line_start":2029,"line_end":2029,"column_start":5,"column_end":8}},{"value":"/ // sort people in descending order by age","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67164,"byte_end":67209,"line_start":2030,"line_end":2030,"column_start":5,"column_end":50}},{"value":"/ let people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67214,"byte_end":67292,"line_start":2031,"line_end":2031,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67297,"byte_end":67300,"line_start":2032,"line_end":2032,"column_start":5,"column_end":8}},{"value":"/ let oldest_people_first = people","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67305,"byte_end":67341,"line_start":2033,"line_end":2033,"column_start":5,"column_end":41}},{"value":"/     .into_iter()","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67346,"byte_end":67366,"line_start":2034,"line_end":2034,"column_start":5,"column_end":25}},{"value":"/     .sorted_by(|a, b| Ord::cmp(&b.1, &a.1))","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67371,"byte_end":67418,"line_start":2035,"line_end":2035,"column_start":5,"column_end":52}},{"value":"/     .map(|(person, _age)| person);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67423,"byte_end":67461,"line_start":2036,"line_end":2036,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67466,"byte_end":67469,"line_start":2037,"line_end":2037,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(oldest_people_first,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67474,"byte_end":67522,"line_start":2038,"line_end":2038,"column_start":5,"column_end":53}},{"value":"/                         vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67527,"byte_end":67593,"line_start":2039,"line_end":2039,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67598,"byte_end":67605,"line_start":2040,"line_end":2040,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67610,"byte_end":67637,"line_start":2041,"line_end":2041,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1511},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68815,"byte_end":68828,"line_start":2075,"line_end":2075,"column_start":8,"column_end":21},"name":"sorted_by_key","qualname":"::Itertools::sorted_by_key","value":"pub fn sorted_by_key<K, F>(Self, F) -> VecIntoIter<Self::Item> where\nSelf: Sized, K: Ord, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67893,"byte_end":67963,"line_start":2051,"line_end":2051,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67968,"byte_end":67971,"line_start":2052,"line_end":2052,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":67976,"byte_end":68033,"line_start":2053,"line_end":2053,"column_start":5,"column_end":62}},{"value":"/ `slice::sort_by_key()` method and returns the result as a new","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68038,"byte_end":68103,"line_start":2054,"line_end":2054,"column_start":5,"column_end":70}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68108,"byte_end":68144,"line_start":2055,"line_end":2055,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68149,"byte_end":68152,"line_start":2056,"line_end":2056,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68157,"byte_end":68228,"line_start":2057,"line_end":2057,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68233,"byte_end":68282,"line_start":2058,"line_end":2058,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68287,"byte_end":68290,"line_start":2059,"line_end":2059,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68295,"byte_end":68302,"line_start":2060,"line_end":2060,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68307,"byte_end":68336,"line_start":2061,"line_end":2061,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68341,"byte_end":68344,"line_start":2062,"line_end":2062,"column_start":5,"column_end":8}},{"value":"/ // sort people in descending order by age","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68349,"byte_end":68394,"line_start":2063,"line_end":2063,"column_start":5,"column_end":50}},{"value":"/ let people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68399,"byte_end":68477,"line_start":2064,"line_end":2064,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68482,"byte_end":68485,"line_start":2065,"line_end":2065,"column_start":5,"column_end":8}},{"value":"/ let oldest_people_first = people","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68490,"byte_end":68526,"line_start":2066,"line_end":2066,"column_start":5,"column_end":41}},{"value":"/     .into_iter()","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68531,"byte_end":68551,"line_start":2067,"line_end":2067,"column_start":5,"column_end":25}},{"value":"/     .sorted_by_key(|x| -x.1)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68556,"byte_end":68588,"line_start":2068,"line_end":2068,"column_start":5,"column_end":37}},{"value":"/     .map(|(person, _age)| person);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68593,"byte_end":68631,"line_start":2069,"line_end":2069,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68636,"byte_end":68639,"line_start":2070,"line_end":2070,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(oldest_people_first,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68644,"byte_end":68692,"line_start":2071,"line_end":2071,"column_start":5,"column_end":53}},{"value":"/                         vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68697,"byte_end":68763,"line_start":2072,"line_end":2072,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68768,"byte_end":68775,"line_start":2073,"line_end":2073,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":68780,"byte_end":68807,"line_start":2074,"line_end":2074,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1514},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69781,"byte_end":69794,"line_start":2106,"line_end":2106,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::Itertools::partition_map","value":"pub fn partition_map<A, B, F, L, R>(Self, F) -> (A, B) where Self: Sized,\nF: FnMut(Self::Item) -> Either<L, R>, A: Default + Extend<L>, B: Default +\nExtend<R>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Collect all iterator elements into one of two\n partitions. Unlike `Iterator::partition`, each partition may\n have a distinct type.","sig":null,"attributes":[{"value":"/ Collect all iterator elements into one of two","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69072,"byte_end":69121,"line_start":2085,"line_end":2085,"column_start":5,"column_end":54}},{"value":"/ partitions. Unlike `Iterator::partition`, each partition may","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69126,"byte_end":69190,"line_start":2086,"line_end":2086,"column_start":5,"column_end":69}},{"value":"/ have a distinct type.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69195,"byte_end":69220,"line_start":2087,"line_end":2087,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69225,"byte_end":69228,"line_start":2088,"line_end":2088,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69233,"byte_end":69240,"line_start":2089,"line_end":2089,"column_start":5,"column_end":12}},{"value":"/ use itertools::{Itertools, Either};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69245,"byte_end":69284,"line_start":2090,"line_end":2090,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69289,"byte_end":69292,"line_start":2091,"line_end":2091,"column_start":5,"column_end":8}},{"value":"/ let successes_and_failures = vec![Ok(1), Err(false), Err(true), Ok(2)];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69297,"byte_end":69372,"line_start":2092,"line_end":2092,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69377,"byte_end":69380,"line_start":2093,"line_end":2093,"column_start":5,"column_end":8}},{"value":"/ let (successes, failures): (Vec<_>, Vec<_>) = successes_and_failures","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69385,"byte_end":69457,"line_start":2094,"line_end":2094,"column_start":5,"column_end":77}},{"value":"/     .into_iter()","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69462,"byte_end":69482,"line_start":2095,"line_end":2095,"column_start":5,"column_end":25}},{"value":"/     .partition_map(|r| {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69487,"byte_end":69515,"line_start":2096,"line_end":2096,"column_start":5,"column_end":33}},{"value":"/         match r {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69520,"byte_end":69541,"line_start":2097,"line_end":2097,"column_start":5,"column_end":26}},{"value":"/             Ok(v) => Either::Left(v),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69546,"byte_end":69587,"line_start":2098,"line_end":2098,"column_start":5,"column_end":46}},{"value":"/             Err(v) => Either::Right(v),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69592,"byte_end":69635,"line_start":2099,"line_end":2099,"column_start":5,"column_end":48}},{"value":"/         }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69640,"byte_end":69653,"line_start":2100,"line_end":2100,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69658,"byte_end":69669,"line_start":2101,"line_end":2101,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69674,"byte_end":69677,"line_start":2102,"line_end":2102,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(successes, [1, 2]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69682,"byte_end":69716,"line_start":2103,"line_end":2103,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(failures, [false, true]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69721,"byte_end":69761,"line_start":2104,"line_end":2104,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":69766,"byte_end":69773,"line_start":2105,"line_end":2105,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1521},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":70878,"byte_end":70892,"line_start":2138,"line_end":2138,"column_start":8,"column_end":22},"name":"into_group_map","qualname":"::Itertools::into_group_map","value":"pub fn into_group_map<K, V>(Self) -> HashMap<K, Vec<V>> where\nSelf: Iterator<Item = (K, V)> + Sized, K: Hash + Eq","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return a `HashMap` of keys mapped to `Vec`s of values. Keys and values\n are taken from `(Key, Value)` tuple pairs yielded by the input iterator.","sig":null,"attributes":[{"value":"/ Return a `HashMap` of keys mapped to `Vec`s of values. Keys and values","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":70286,"byte_end":70360,"line_start":2123,"line_end":2123,"column_start":5,"column_end":79}},{"value":"/ are taken from `(Key, Value)` tuple pairs yielded by the input iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":70365,"byte_end":70441,"line_start":2124,"line_end":2124,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":70446,"byte_end":70449,"line_start":2125,"line_end":2125,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":70454,"byte_end":70461,"line_start":2126,"line_end":2126,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":70466,"byte_end":70495,"line_start":2127,"line_end":2127,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":70500,"byte_end":70503,"line_start":2128,"line_end":2128,"column_start":5,"column_end":8}},{"value":"/ let data = vec![(0, 10), (2, 12), (3, 13), (0, 20), (3, 33), (2, 42)];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":70508,"byte_end":70582,"line_start":2129,"line_end":2129,"column_start":5,"column_end":79}},{"value":"/ let lookup = data.into_iter().into_group_map();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":70587,"byte_end":70638,"line_start":2130,"line_end":2130,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":70643,"byte_end":70646,"line_start":2131,"line_end":2131,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(lookup[&0], vec![10, 20]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":70651,"byte_end":70692,"line_start":2132,"line_end":2132,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(lookup.get(&1), None);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":70697,"byte_end":70734,"line_start":2133,"line_end":2133,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(lookup[&2], vec![12, 42]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":70739,"byte_end":70780,"line_start":2134,"line_end":2134,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(lookup[&3], vec![13, 33]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":70785,"byte_end":70826,"line_start":2135,"line_end":2135,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":70831,"byte_end":70838,"line_start":2136,"line_end":2136,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":70843,"byte_end":70870,"line_start":2137,"line_end":2137,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72355,"byte_end":72361,"line_start":2180,"line_end":2180,"column_start":8,"column_end":14},"name":"minmax","qualname":"::Itertools::minmax","value":"pub fn minmax(Self) -> MinMaxResult<Self::Item> where Self: Sized,\nSelf::Item: PartialOrd","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return the minimum and maximum elements in the iterator.","sig":null,"attributes":[{"value":"/ Return the minimum and maximum elements in the iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71063,"byte_end":71123,"line_start":2145,"line_end":2145,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71128,"byte_end":71131,"line_start":2146,"line_end":2146,"column_start":5,"column_end":8}},{"value":"/ The return type `MinMaxResult` is an enum of three variants:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71136,"byte_end":71200,"line_start":2147,"line_end":2147,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71205,"byte_end":71208,"line_start":2148,"line_end":2148,"column_start":5,"column_end":8}},{"value":"/ - `NoElements` if the iterator is empty.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71213,"byte_end":71257,"line_start":2149,"line_end":2149,"column_start":5,"column_end":49}},{"value":"/ - `OneElement(x)` if the iterator has exactly one element.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71262,"byte_end":71324,"line_start":2150,"line_end":2150,"column_start":5,"column_end":67}},{"value":"/ - `MinMax(x, y)` is returned otherwise, where `x <= y`. Two","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71329,"byte_end":71392,"line_start":2151,"line_end":2151,"column_start":5,"column_end":68}},{"value":"/    values are equal if and only if there is more than one","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71397,"byte_end":71458,"line_start":2152,"line_end":2152,"column_start":5,"column_end":66}},{"value":"/    element in the iterator and all elements are equal.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71463,"byte_end":71521,"line_start":2153,"line_end":2153,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71526,"byte_end":71529,"line_start":2154,"line_end":2154,"column_start":5,"column_end":8}},{"value":"/ On an iterator of length `n`, `minmax` does `1.5 * n` comparisons,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71534,"byte_end":71604,"line_start":2155,"line_end":2155,"column_start":5,"column_end":75}},{"value":"/ and so is faster than calling `min` and `max` separately which does","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71609,"byte_end":71680,"line_start":2156,"line_end":2156,"column_start":5,"column_end":76}},{"value":"/ `2 * n` comparisons.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71685,"byte_end":71709,"line_start":2157,"line_end":2157,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71714,"byte_end":71717,"line_start":2158,"line_end":2158,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71722,"byte_end":71736,"line_start":2159,"line_end":2159,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71741,"byte_end":71744,"line_start":2160,"line_end":2160,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71749,"byte_end":71756,"line_start":2161,"line_end":2161,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71761,"byte_end":71790,"line_start":2162,"line_end":2162,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{NoElements, OneElement, MinMax};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71795,"byte_end":71861,"line_start":2163,"line_end":2163,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71866,"byte_end":71869,"line_start":2164,"line_end":2164,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71874,"byte_end":71899,"line_start":2165,"line_end":2165,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().minmax(), NoElements);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71904,"byte_end":71950,"line_start":2166,"line_end":2166,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71955,"byte_end":71958,"line_start":2167,"line_end":2167,"column_start":5,"column_end":8}},{"value":"/ let a = [1];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71963,"byte_end":71979,"line_start":2168,"line_end":2168,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.iter().minmax(), OneElement(&1));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":71984,"byte_end":72034,"line_start":2169,"line_end":2169,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72039,"byte_end":72042,"line_start":2170,"line_end":2170,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 4, 5];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72047,"byte_end":72075,"line_start":2171,"line_end":2171,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(a.iter().minmax(), MinMax(&1, &5));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72080,"byte_end":72130,"line_start":2172,"line_end":2172,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72135,"byte_end":72138,"line_start":2173,"line_end":2173,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 1, 1, 1];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72143,"byte_end":72168,"line_start":2174,"line_end":2174,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().minmax(), MinMax(&1, &1));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72173,"byte_end":72223,"line_start":2175,"line_end":2175,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72228,"byte_end":72235,"line_start":2176,"line_end":2176,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72240,"byte_end":72243,"line_start":2177,"line_end":2177,"column_start":5,"column_end":8}},{"value":"/ The elements can be floats but no particular result is guaranteed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72248,"byte_end":72317,"line_start":2178,"line_end":2178,"column_start":5,"column_end":74}},{"value":"/ if an element is NaN.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72322,"byte_end":72347,"line_start":2179,"line_end":2179,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1527},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":73057,"byte_end":73070,"line_start":2197,"line_end":2197,"column_start":8,"column_end":21},"name":"minmax_by_key","qualname":"::Itertools::minmax_by_key","value":"pub fn minmax_by_key<K, F>(Self, F) -> MinMaxResult<Self::Item> where\nSelf: Sized, K: PartialOrd, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified function.","sig":null,"attributes":[{"value":"/ Return the minimum and maximum element of an iterator, as determined by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72525,"byte_end":72600,"line_start":2186,"line_end":2186,"column_start":5,"column_end":80}},{"value":"/ the specified function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72605,"byte_end":72632,"line_start":2187,"line_end":2187,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72637,"byte_end":72640,"line_start":2188,"line_end":2188,"column_start":5,"column_end":8}},{"value":"/ The return value is a variant of `MinMaxResult` like for `minmax()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72645,"byte_end":72717,"line_start":2189,"line_end":2189,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72722,"byte_end":72725,"line_start":2190,"line_end":2190,"column_start":5,"column_end":8}},{"value":"/ For the minimum, the first minimal element is returned.  For the maximum,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72730,"byte_end":72807,"line_start":2191,"line_end":2191,"column_start":5,"column_end":82}},{"value":"/ the last maximal element wins.  This matches the behavior of the standard","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72812,"byte_end":72889,"line_start":2192,"line_end":2192,"column_start":5,"column_end":82}},{"value":"/ `Iterator::min()` and `Iterator::max()` methods.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72894,"byte_end":72946,"line_start":2193,"line_end":2193,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72951,"byte_end":72954,"line_start":2194,"line_end":2194,"column_start":5,"column_end":8}},{"value":"/ The keys can be floats but no particular result is guaranteed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":72959,"byte_end":73024,"line_start":2195,"line_end":2195,"column_start":5,"column_end":70}},{"value":"/ if a key is NaN.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":73029,"byte_end":73049,"line_start":2196,"line_end":2196,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1531},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":73708,"byte_end":73717,"line_start":2211,"line_end":2211,"column_start":8,"column_end":17},"name":"minmax_by","qualname":"::Itertools::minmax_by","value":"pub fn minmax_by<F>(Self, F) -> MinMaxResult<Self::Item> where Self: Sized,\nF: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified comparison function.","sig":null,"attributes":[{"value":"/ Return the minimum and maximum element of an iterator, as determined by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":73268,"byte_end":73343,"line_start":2203,"line_end":2203,"column_start":5,"column_end":80}},{"value":"/ the specified comparison function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":73348,"byte_end":73386,"line_start":2204,"line_end":2204,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":73391,"byte_end":73394,"line_start":2205,"line_end":2205,"column_start":5,"column_end":8}},{"value":"/ The return value is a variant of `MinMaxResult` like for `minmax()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":73399,"byte_end":73471,"line_start":2206,"line_end":2206,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":73476,"byte_end":73479,"line_start":2207,"line_end":2207,"column_start":5,"column_end":8}},{"value":"/ For the minimum, the first minimal element is returned.  For the maximum,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":73484,"byte_end":73561,"line_start":2208,"line_end":2208,"column_start":5,"column_end":82}},{"value":"/ the last maximal element wins.  This matches the behavior of the standard","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":73566,"byte_end":73643,"line_start":2209,"line_end":2209,"column_start":5,"column_end":82}},{"value":"/ `Iterator::min()` and `Iterator::max()` methods.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":73648,"byte_end":73700,"line_start":2210,"line_end":2210,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1535},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":74916,"byte_end":74927,"line_start":2238,"line_end":2238,"column_start":8,"column_end":19},"name":"exactly_one","qualname":"::Itertools::exactly_one","value":"pub fn exactly_one(Self) -> Result<Self::Item, ExactlyOneError<Self>> where\nSelf: Sized","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" If the iterator yields exactly one element, that element will be returned, otherwise\n an error will be returned containing an iterator that has the same output as the input\n iterator.","sig":null,"attributes":[{"value":"/ If the iterator yields exactly one element, that element will be returned, otherwise","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":73996,"byte_end":74084,"line_start":2221,"line_end":2221,"column_start":5,"column_end":93}},{"value":"/ an error will be returned containing an iterator that has the same output as the input","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":74089,"byte_end":74179,"line_start":2222,"line_end":2222,"column_start":5,"column_end":95}},{"value":"/ iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":74184,"byte_end":74197,"line_start":2223,"line_end":2223,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":74202,"byte_end":74205,"line_start":2224,"line_end":2224,"column_start":5,"column_end":8}},{"value":"/ This provides an additional layer of validation over just calling `Iterator::next()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":74210,"byte_end":74299,"line_start":2225,"line_end":2225,"column_start":5,"column_end":94}},{"value":"/ If your assumption that there should only be one element yielded is false this provides","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":74304,"byte_end":74395,"line_start":2226,"line_end":2226,"column_start":5,"column_end":96}},{"value":"/ the opportunity to detect and handle that, preventing errors at a distance.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":74400,"byte_end":74479,"line_start":2227,"line_end":2227,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":74484,"byte_end":74487,"line_start":2228,"line_end":2228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":74492,"byte_end":74506,"line_start":2229,"line_end":2229,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":74511,"byte_end":74518,"line_start":2230,"line_end":2230,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":74523,"byte_end":74552,"line_start":2231,"line_end":2231,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":74557,"byte_end":74560,"line_start":2232,"line_end":2232,"column_start":5,"column_end":8}},{"value":"/ assert_eq!((0..10).filter(|&x| x == 2).exactly_one().unwrap(), 2);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":74565,"byte_end":74635,"line_start":2233,"line_end":2233,"column_start":5,"column_end":75}},{"value":"/ assert!((0..10).filter(|&x| x > 1 && x < 4).exactly_one().unwrap_err().eq(2..4));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":74640,"byte_end":74725,"line_start":2234,"line_end":2234,"column_start":5,"column_end":90}},{"value":"/ assert!((0..10).filter(|&x| x > 1 && x < 5).exactly_one().unwrap_err().eq(2..5));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":74730,"byte_end":74815,"line_start":2235,"line_end":2235,"column_start":5,"column_end":90}},{"value":"/ assert!((0..10).filter(|&_| false).exactly_one().unwrap_err().eq(0..0));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":74820,"byte_end":74896,"line_start":2236,"line_end":2236,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":74901,"byte_end":74908,"line_start":2237,"line_end":2237,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":1538},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":75914,"byte_end":75919,"line_start":2271,"line_end":2271,"column_start":8,"column_end":13},"name":"equal","qualname":"::equal","value":"pub fn equal<I, J>(I, J) -> bool where I: IntoIterator, J: IntoIterator,\nI::Item: PartialEq<J::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if both iterables produce equal sequences\n (elements pairwise equal and sequences of the same length),\n `false` otherwise.","sig":null,"attributes":[{"value":"/ Return `true` if both iterables produce equal sequences","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":75517,"byte_end":75576,"line_start":2260,"line_end":2260,"column_start":1,"column_end":60}},{"value":"/ (elements pairwise equal and sequences of the same length),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":75577,"byte_end":75640,"line_start":2261,"line_end":2261,"column_start":1,"column_end":64}},{"value":"/ `false` otherwise.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":75641,"byte_end":75663,"line_start":2262,"line_end":2262,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":75664,"byte_end":75667,"line_start":2263,"line_end":2263,"column_start":1,"column_end":4}},{"value":"/ This is an `IntoIterator` enabled function that is similar to the standard","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":75668,"byte_end":75746,"line_start":2264,"line_end":2264,"column_start":1,"column_end":79}},{"value":"/ library method `Iterator::eq`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":75747,"byte_end":75781,"line_start":2265,"line_end":2265,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":75782,"byte_end":75785,"line_start":2266,"line_end":2266,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":75786,"byte_end":75793,"line_start":2267,"line_end":2267,"column_start":1,"column_end":8}},{"value":"/ assert!(itertools::equal(vec![1, 2, 3], 1..4));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":75794,"byte_end":75845,"line_start":2268,"line_end":2268,"column_start":1,"column_end":52}},{"value":"/ assert!(!itertools::equal(&[0, 0], &[0, 0, 0]));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":75846,"byte_end":75898,"line_start":2269,"line_end":2269,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":75899,"byte_end":75906,"line_start":2270,"line_end":2270,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1541},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":76739,"byte_end":76751,"line_start":2299,"line_end":2299,"column_start":8,"column_end":20},"name":"assert_equal","qualname":"::assert_equal","value":"pub fn assert_equal<I, J>(I, J) where I: IntoIterator, J: IntoIterator,\nI::Item: fmt::Debug + PartialEq<J::Item>, J::Item: fmt::Debug","parent":null,"children":[],"decl_id":null,"docs":" Assert that two iterables produce equal sequences, with the same\n semantics as *equal(a, b)*.","sig":null,"attributes":[{"value":"/ Assert that two iterables produce equal sequences, with the same","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":76357,"byte_end":76425,"line_start":2289,"line_end":2289,"column_start":1,"column_end":69}},{"value":"/ semantics as *equal(a, b)*.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":76426,"byte_end":76457,"line_start":2290,"line_end":2290,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":76458,"byte_end":76461,"line_start":2291,"line_end":2291,"column_start":1,"column_end":4}},{"value":"/ **Panics** on assertion failure with a message that shows the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":76462,"byte_end":76527,"line_start":2292,"line_end":2292,"column_start":1,"column_end":66}},{"value":"/ two iteration elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":76528,"byte_end":76555,"line_start":2293,"line_end":2293,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":76556,"byte_end":76559,"line_start":2294,"line_end":2294,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":76560,"byte_end":76573,"line_start":2295,"line_end":2295,"column_start":1,"column_end":14}},{"value":"/ assert_equal(\"exceed\".split('c'), \"excess\".split('c'));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":76574,"byte_end":76633,"line_start":2296,"line_end":2296,"column_start":1,"column_end":60}},{"value":"/ // ^PANIC: panicked at 'Failed assertion Some(\"eed\") == Some(\"ess\") for iteration 1',","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":76634,"byte_end":76723,"line_start":2297,"line_end":2297,"column_start":1,"column_end":90}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":76724,"byte_end":76731,"line_start":2298,"line_end":2298,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1544},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":77978,"byte_end":77987,"line_start":2341,"line_end":2341,"column_start":8,"column_end":17},"name":"partition","qualname":"::partition","value":"pub fn partition<'a, A: 'a, I, F>(I, F) -> usize where I: IntoIterator<Item =\n&'a mut A>, I::IntoIter: DoubleEndedIterator, F: FnMut(&A) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Partition a sequence using predicate `pred` so that elements\n that map to `true` are placed before elements which map to `false`.","sig":null,"attributes":[{"value":"/ Partition a sequence using predicate `pred` so that elements","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":77439,"byte_end":77503,"line_start":2324,"line_end":2324,"column_start":1,"column_end":65}},{"value":"/ that map to `true` are placed before elements which map to `false`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":77504,"byte_end":77575,"line_start":2325,"line_end":2325,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":77576,"byte_end":77579,"line_start":2326,"line_end":2326,"column_start":1,"column_end":4}},{"value":"/ The order within the partitions is arbitrary.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":77580,"byte_end":77629,"line_start":2327,"line_end":2327,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":77630,"byte_end":77633,"line_start":2328,"line_end":2328,"column_start":1,"column_end":4}},{"value":"/ Return the index of the split point.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":77634,"byte_end":77674,"line_start":2329,"line_end":2329,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":77675,"byte_end":77678,"line_start":2330,"line_end":2330,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":77679,"byte_end":77686,"line_start":2331,"line_end":2331,"column_start":1,"column_end":8}},{"value":"/ use itertools::partition;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":77687,"byte_end":77716,"line_start":2332,"line_end":2332,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":77717,"byte_end":77720,"line_start":2333,"line_end":2333,"column_start":1,"column_end":4}},{"value":"/ # // use repeated numbers to not promise any ordering","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":77721,"byte_end":77778,"line_start":2334,"line_end":2334,"column_start":1,"column_end":58}},{"value":"/ let mut data = [7, 1, 1, 7, 1, 1, 7];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":77779,"byte_end":77820,"line_start":2335,"line_end":2335,"column_start":1,"column_end":42}},{"value":"/ let split_index = partition(&mut data, |elt| *elt >= 3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":77821,"byte_end":77881,"line_start":2336,"line_end":2336,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":77882,"byte_end":77885,"line_start":2337,"line_end":2337,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(data, [7, 7, 7, 1, 1, 1, 1]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":77886,"byte_end":77930,"line_start":2338,"line_end":2338,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(split_index, 3);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":77931,"byte_end":77962,"line_start":2339,"line_end":2339,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":77963,"byte_end":77970,"line_start":2340,"line_end":2340,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2577},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":78923,"byte_end":78931,"line_start":2371,"line_end":2371,"column_start":5,"column_end":13},"name":"Continue","qualname":"::FoldWhile::Continue","value":"FoldWhile::Continue(T)","parent":{"krate":0,"index":2575},"children":[],"decl_id":null,"docs":" Continue folding with this value\n","sig":null,"attributes":[{"value":"/ Continue folding with this value","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":78882,"byte_end":78918,"line_start":2370,"line_end":2370,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2580},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":78992,"byte_end":78996,"line_start":2373,"line_end":2373,"column_start":5,"column_end":9},"name":"Done","qualname":"::FoldWhile::Done","value":"FoldWhile::Done(T)","parent":{"krate":0,"index":2575},"children":[],"decl_id":null,"docs":" Fold is complete and will return this value\n","sig":null,"attributes":[{"value":"/ Fold is complete and will return this value","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":78940,"byte_end":78987,"line_start":2372,"line_end":2372,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":2575},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":78863,"byte_end":78872,"line_start":2369,"line_end":2369,"column_start":10,"column_end":19},"name":"FoldWhile","qualname":"::FoldWhile","value":"pub enum FoldWhile<T> {\n\n    /// Continue folding with this value\n    Continue(T),\n\n    /// Fold is complete and will return this value\n    Done(T),\n}","parent":null,"children":[{"krate":0,"index":2577},{"krate":0,"index":2580}],"decl_id":null,"docs":" An enum used for controlling the execution of `.fold_while()`.","sig":null,"attributes":[{"value":"/ An enum used for controlling the execution of `.fold_while()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":78650,"byte_end":78716,"line_start":2365,"line_end":2365,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":78717,"byte_end":78720,"line_start":2366,"line_end":2366,"column_start":1,"column_end":4}},{"value":"/ See [`.fold_while()`](trait.Itertools.html#method.fold_while) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":78721,"byte_end":78808,"line_start":2367,"line_end":2367,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1551},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":79088,"byte_end":79098,"line_start":2378,"line_end":2378,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FoldWhile<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value in the continue or done.\n","sig":null,"attributes":[{"value":"/ Return the value in the continue or done.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":79031,"byte_end":79076,"line_start":2377,"line_end":2377,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1552},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":79291,"byte_end":79298,"line_start":2385,"line_end":2385,"column_start":12,"column_end":19},"name":"is_done","qualname":"<FoldWhile<T>>::is_done","value":"pub fn is_done(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if `self` is `Done`, false if it is `Continue`.\n","sig":null,"attributes":[{"value":"/ Return true if `self` is `Done`, false if it is `Continue`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":79216,"byte_end":79279,"line_start":2384,"line_end":2384,"column_start":5,"column_end":68}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/multi_product.rs","byte_start":114123,"byte_end":114135,"line_start":50,"line_end":50,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/multi_product.rs","byte_start":116241,"byte_end":116257,"line_start":117,"line_end":117,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/multi_product.rs","byte_start":116905,"byte_end":116917,"line_start":146,"line_end":146,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":81495,"byte_end":81505,"line_start":63,"line_end":63,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":82916,"byte_end":82934,"line_start":119,"line_end":119,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":85184,"byte_end":85191,"line_start":204,"line_end":204,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":85810,"byte_end":85817,"line_start":229,"line_end":229,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":87664,"byte_end":87671,"line_start":302,"line_end":302,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":90104,"byte_end":90112,"line_start":377,"line_end":377,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1640}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":90340,"byte_end":90348,"line_start":386,"line_end":386,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":91513,"byte_end":91517,"line_start":434,"line_end":434,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92136,"byte_end":92140,"line_start":462,"line_end":462,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92345,"byte_end":92353,"line_start":473,"line_end":473,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":93884,"byte_end":93891,"line_start":524,"line_end":524,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1655}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":94107,"byte_end":94108,"line_start":531,"line_end":531,"column_start":55,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":94584,"byte_end":94591,"line_start":551,"line_end":551,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":94865,"byte_end":94872,"line_start":563,"line_end":563,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":96000,"byte_end":96012,"line_start":607,"line_end":607,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":97246,"byte_end":97254,"line_start":649,"line_end":649,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":97423,"byte_end":97431,"line_start":658,"line_end":658,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1666}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":97818,"byte_end":97826,"line_start":678,"line_end":678,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":98796,"byte_end":98803,"line_start":711,"line_end":711,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":98935,"byte_end":98936,"line_start":717,"line_end":717,"column_start":55,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":99241,"byte_end":99248,"line_start":728,"line_end":728,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":99817,"byte_end":99824,"line_start":757,"line_end":757,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1671}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":99969,"byte_end":99976,"line_start":764,"line_end":764,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":101379,"byte_end":101391,"line_start":811,"line_end":811,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1672}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":101728,"byte_end":101740,"line_start":824,"line_end":824,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":102839,"byte_end":102848,"line_start":866,"line_end":866,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":104157,"byte_end":104174,"line_start":917,"line_end":917,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":104426,"byte_end":104443,"line_start":933,"line_end":933,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":104561,"byte_end":104578,"line_start":939,"line_end":939,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":369},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":107338,"byte_end":107345,"line_start":1031,"line_end":1031,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":107860,"byte_end":107867,"line_start":1054,"line_end":1054,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":108106,"byte_end":108113,"line_start":1065,"line_end":1065,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":108756,"byte_end":108766,"line_start":1091,"line_end":1091,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":110057,"byte_end":110066,"line_start":1142,"line_end":1142,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":110555,"byte_end":110564,"line_start":1164,"line_end":1164,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":111402,"byte_end":111408,"line_start":1196,"line_end":1196,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":112274,"byte_end":112280,"line_start":1232,"line_end":1232,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":112386,"byte_end":112392,"line_start":1238,"line_end":1238,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119275,"byte_end":119287,"line_start":16,"line_end":16,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":498},{"krate":0,"index":501},{"krate":0,"index":506},{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":123900,"byte_end":123912,"line_start":168,"line_end":168,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":124275,"byte_end":124287,"line_start":182,"line_end":182,"column_start":43,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/cons_tuples_impl.rs","byte_start":132278,"byte_end":132288,"line_start":52,"line_end":52,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations.rs","byte_start":133128,"byte_end":133140,"line_start":16,"line_end":16,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1967}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations.rs","byte_start":133803,"byte_end":133815,"line_start":47,"line_end":47,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations_with_replacement.rs","byte_start":135971,"byte_end":135998,"line_start":22,"line_end":22,"column_start":24,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1978}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations_with_replacement.rs","byte_start":136157,"byte_end":136184,"line_start":30,"line_end":30,"column_start":9,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations_with_replacement.rs","byte_start":136885,"byte_end":136912,"line_start":59,"line_end":59,"column_start":22,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/exactly_one_err.rs","byte_start":139202,"byte_end":139217,"line_start":22,"line_end":22,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/exactly_one_err.rs","byte_start":139447,"byte_end":139462,"line_start":32,"line_end":32,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/exactly_one_err.rs","byte_start":140084,"byte_end":140099,"line_start":58,"line_end":58,"column_start":31,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":144194,"byte_end":144204,"line_start":49,"line_end":49,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":144953,"byte_end":144959,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":146921,"byte_end":146922,"line_start":10,"line_end":10,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":707},{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":147227,"byte_end":147237,"line_start":29,"line_end":29,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":147433,"byte_end":147443,"line_start":40,"line_end":40,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":714},{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":148485,"byte_end":148495,"line_start":77,"line_end":77,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":155273,"byte_end":155283,"line_start":263,"line_end":263,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":749}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":157095,"byte_end":157102,"line_start":320,"line_end":320,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":764},{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":158309,"byte_end":158315,"line_start":366,"line_end":366,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":785},{"krate":0,"index":786}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":159225,"byte_end":159230,"line_start":402,"line_end":402,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":159401,"byte_end":159406,"line_start":411,"line_end":411,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":161238,"byte_end":161248,"line_start":475,"line_end":475,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":817},{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":162234,"byte_end":162240,"line_start":517,"line_end":517,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":832},{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":162999,"byte_end":163004,"line_start":550,"line_end":550,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":163163,"byte_end":163168,"line_start":559,"line_end":559,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/intersperse.rs","byte_start":164266,"byte_end":164277,"line_start":35,"line_end":35,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":166087,"byte_end":166095,"line_start":33,"line_end":33,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":872},{"krate":0,"index":874},{"krate":0,"index":875}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":166991,"byte_end":166999,"line_start":64,"line_end":64,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":168772,"byte_end":168782,"line_start":124,"line_end":124,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":168917,"byte_end":168918,"line_start":130,"line_end":130,"column_start":56,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":170018,"byte_end":170026,"line_start":171,"line_end":171,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2064}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":170882,"byte_end":170890,"line_start":195,"line_end":195,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":171104,"byte_end":171112,"line_start":205,"line_end":205,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lazy_buffer.rs","byte_start":171993,"byte_end":172003,"line_start":10,"line_end":10,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lazy_buffer.rs","byte_start":172939,"byte_end":172949,"line_start":57,"line_end":57,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":935},{"krate":0,"index":936}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/merge_join.rs","byte_start":174302,"byte_end":174313,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2076}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/merge_join.rs","byte_start":174538,"byte_end":174549,"line_start":43,"line_end":43,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176422,"byte_end":176434,"line_start":17,"line_end":17,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":180465,"byte_end":180474,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":985}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":180627,"byte_end":180636,"line_start":39,"line_end":39,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":181280,"byte_end":181289,"line_start":61,"line_end":61,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":991}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":181756,"byte_end":181765,"line_start":80,"line_end":80,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":997}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":182189,"byte_end":182198,"line_start":100,"line_end":100,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/pad_tail.rs","byte_start":183023,"byte_end":183031,"line_start":32,"line_end":32,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/pad_tail.rs","byte_start":183794,"byte_end":183802,"line_start":63,"line_end":63,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1015}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/pad_tail.rs","byte_start":184259,"byte_end":184267,"line_start":80,"line_end":80,"column_start":34,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":185163,"byte_end":185171,"line_start":23,"line_end":23,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":185491,"byte_end":185498,"line_start":38,"line_end":38,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":185915,"byte_end":185923,"line_start":57,"line_end":57,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1036}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":186878,"byte_end":186894,"line_start":97,"line_end":97,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/permutations.rs","byte_start":189672,"byte_end":189684,"line_start":47,"line_end":47,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2191}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/permutations.rs","byte_start":190550,"byte_end":190562,"line_start":88,"line_end":88,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1079},{"krate":0,"index":1081}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/permutations.rs","byte_start":193239,"byte_end":193251,"line_start":162,"line_end":162,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/permutations.rs","byte_start":194482,"byte_end":194495,"line_start":200,"line_end":200,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1086},{"krate":0,"index":1087}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":197166,"byte_end":197180,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":199906,"byte_end":199914,"line_start":26,"line_end":26,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1116}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":200416,"byte_end":200424,"line_start":47,"line_end":47,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":202440,"byte_end":202446,"line_start":53,"line_end":53,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":202581,"byte_end":202587,"line_start":60,"line_end":60,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":203146,"byte_end":203152,"line_start":79,"line_end":79,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1139}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/repeatn.rs","byte_start":204127,"byte_end":204134,"line_start":23,"line_end":23,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/repeatn.rs","byte_start":204524,"byte_end":204531,"line_start":43,"line_end":43,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/repeatn.rs","byte_start":204681,"byte_end":204688,"line_start":52,"line_end":52,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":207673,"byte_end":207683,"line_start":14,"line_end":14,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2226}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208522,"byte_end":208532,"line_start":48,"line_end":48,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":210201,"byte_end":210207,"line_start":109,"line_end":109,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2227}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":210594,"byte_end":210600,"line_start":124,"line_end":124,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":211289,"byte_end":211296,"line_start":153,"line_end":153,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2246}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":211399,"byte_end":211406,"line_start":159,"line_end":159,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1212}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tee.rs","byte_start":213120,"byte_end":213123,"line_start":37,"line_end":37,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tee.rs","byte_start":214220,"byte_end":214223,"line_start":75,"line_end":75,"column_start":31,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":214648,"byte_end":214659,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1234}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":214832,"byte_end":214843,"line_start":28,"line_end":28,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":215509,"byte_end":215520,"line_start":56,"line_end":56,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":216169,"byte_end":216175,"line_start":84,"line_end":84,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1254},{"krate":0,"index":1255}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":216387,"byte_end":216393,"line_start":95,"line_end":95,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1259}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":218000,"byte_end":218012,"line_start":153,"line_end":153,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1267},{"krate":0,"index":1268}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/unique_impl.rs","byte_start":221816,"byte_end":221824,"line_start":19,"line_end":19,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2340}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/unique_impl.rs","byte_start":222622,"byte_end":222630,"line_start":50,"line_end":50,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1301},{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1304}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/unique_impl.rs","byte_start":223347,"byte_end":223353,"line_start":79,"line_end":79,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/unique_impl.rs","byte_start":224380,"byte_end":224386,"line_start":116,"line_end":116,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2347}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225918,"byte_end":225926,"line_start":42,"line_end":42,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1328}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":226205,"byte_end":226217,"line_start":54,"line_end":54,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":227453,"byte_end":227465,"line_start":88,"line_end":88,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":228383,"byte_end":228388,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":228966,"byte_end":228971,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_longest.rs","byte_start":229893,"byte_end":229903,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1364},{"krate":0,"index":1365},{"krate":0,"index":1366}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_longest.rs","byte_start":230525,"byte_end":230535,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1370}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_longest.rs","byte_start":231356,"byte_end":231366,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":75492,"byte_end":75493,"line_start":2258,"line_end":2258,"column_start":31,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":79012,"byte_end":79021,"line_start":2376,"line_end":2376,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1551},{"krate":0,"index":1552}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":4473,"byte_end":4477,"line_start":160,"line_end":160,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":521}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/multi_product.rs","byte_start":114123,"byte_end":114135,"line_start":50,"line_end":50,"column_start":9,"column_end":21},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1553},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/multi_product.rs","byte_start":116241,"byte_end":116257,"line_start":117,"line_end":117,"column_start":9,"column_end":25},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/multi_product.rs","byte_start":116905,"byte_end":116917,"line_start":146,"line_end":146,"column_start":22,"column_end":34},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1553},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":81495,"byte_end":81505,"line_start":63,"line_end":63,"column_start":25,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1578},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":82916,"byte_end":82934,"line_start":119,"line_end":119,"column_start":25,"column_end":43},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1592},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":85184,"byte_end":85191,"line_start":204,"line_end":204,"column_start":9,"column_end":16},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":85810,"byte_end":85817,"line_start":229,"line_end":229,"column_start":22,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1606},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":87664,"byte_end":87671,"line_start":302,"line_end":302,"column_start":25,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1616},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":90104,"byte_end":90112,"line_start":377,"line_end":377,"column_start":27,"column_end":35},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1631},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":90340,"byte_end":90348,"line_start":386,"line_end":386,"column_start":28,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1631},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":91513,"byte_end":91517,"line_start":434,"line_end":434,"column_start":22,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1641},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92136,"byte_end":92140,"line_start":462,"line_end":462,"column_start":31,"column_end":35},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1641},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":92345,"byte_end":92353,"line_start":473,"line_end":473,"column_start":43,"column_end":51},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1651},"to":{"krate":0,"index":215}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":93884,"byte_end":93891,"line_start":524,"line_end":524,"column_start":30,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":227},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":94107,"byte_end":94108,"line_start":531,"line_end":531,"column_start":55,"column_end":56},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":241},"to":{"krate":0,"index":215}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":94584,"byte_end":94591,"line_start":551,"line_end":551,"column_start":25,"column_end":32},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":227},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":94865,"byte_end":94872,"line_start":563,"line_end":563,"column_start":28,"column_end":35},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":227},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":96000,"byte_end":96012,"line_start":607,"line_end":607,"column_start":9,"column_end":21},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":97246,"byte_end":97254,"line_start":649,"line_end":649,"column_start":36,"column_end":44},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":264},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":97423,"byte_end":97431,"line_start":658,"line_end":658,"column_start":27,"column_end":35},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":264},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":97818,"byte_end":97826,"line_start":678,"line_end":678,"column_start":25,"column_end":33},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":264},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":98796,"byte_end":98803,"line_start":711,"line_end":711,"column_start":42,"column_end":49},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1667},"to":{"krate":0,"index":290}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":98935,"byte_end":98936,"line_start":717,"line_end":717,"column_start":55,"column_end":56},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":298},"to":{"krate":0,"index":290}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":99241,"byte_end":99248,"line_start":728,"line_end":728,"column_start":39,"column_end":46},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":285},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":99817,"byte_end":99824,"line_start":757,"line_end":757,"column_start":30,"column_end":37},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":285},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":99969,"byte_end":99976,"line_start":764,"line_end":764,"column_start":28,"column_end":35},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":285},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":101379,"byte_end":101391,"line_start":811,"line_end":811,"column_start":31,"column_end":43},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":325},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":101728,"byte_end":101740,"line_start":824,"line_end":824,"column_start":29,"column_end":41},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":325},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":102839,"byte_end":102848,"line_start":866,"line_end":866,"column_start":25,"column_end":34},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1673},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":103718,"byte_end":103723,"line_start":900,"line_end":900,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":353}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":104157,"byte_end":104174,"line_start":917,"line_end":917,"column_start":25,"column_end":42},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1682},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":104426,"byte_end":104443,"line_start":933,"line_end":933,"column_start":21,"column_end":38},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1692},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":104561,"byte_end":104578,"line_start":939,"line_end":939,"column_start":32,"column_end":49},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1692},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":107338,"byte_end":107345,"line_start":1031,"line_end":1031,"column_start":25,"column_end":32},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":376},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":107860,"byte_end":107867,"line_start":1054,"line_end":1054,"column_start":36,"column_end":43},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":376},"to":{"krate":2,"index":5233}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":108106,"byte_end":108113,"line_start":1065,"line_end":1065,"column_start":34,"column_end":41},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":376},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":108756,"byte_end":108766,"line_start":1091,"line_end":1091,"column_start":34,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":403},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":110057,"byte_end":110066,"line_start":1142,"line_end":1142,"column_start":25,"column_end":34},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":431},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":110555,"byte_end":110564,"line_start":1164,"line_end":1164,"column_start":36,"column_end":45},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":431},"to":{"krate":2,"index":5233}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":111402,"byte_end":111408,"line_start":1196,"line_end":1196,"column_start":25,"column_end":31},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":450},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":112274,"byte_end":112280,"line_start":1232,"line_end":1232,"column_start":34,"column_end":40},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":450},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/adaptors/mod.rs","byte_start":112386,"byte_end":112392,"line_start":1238,"line_end":1238,"column_start":36,"column_end":42},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":450},"to":{"krate":2,"index":5233}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":119275,"byte_end":119287,"line_start":16,"line_end":16,"column_start":12,"column_end":24},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1773},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":123900,"byte_end":123912,"line_start":168,"line_end":168,"column_start":9,"column_end":21},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1773},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/either_or_both.rs","byte_start":124275,"byte_end":124287,"line_start":182,"line_end":182,"column_start":43,"column_end":55},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1773},"to":{"krate":2,"index":1960}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/cons_tuples_impl.rs","byte_start":132278,"byte_end":132288,"line_start":52,"line_end":52,"column_start":22,"column_end":32},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1959},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations.rs","byte_start":133128,"byte_end":133140,"line_start":16,"line_end":16,"column_start":24,"column_end":36},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":590},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations.rs","byte_start":133803,"byte_end":133815,"line_start":47,"line_end":47,"column_start":22,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":590},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations_with_replacement.rs","byte_start":135971,"byte_end":135998,"line_start":22,"line_end":22,"column_start":24,"column_end":51},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1968},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations_with_replacement.rs","byte_start":136157,"byte_end":136184,"line_start":30,"line_end":30,"column_start":9,"column_end":36},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1968},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/combinations_with_replacement.rs","byte_start":136885,"byte_end":136912,"line_start":59,"line_end":59,"column_start":22,"column_end":49},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1968},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/exactly_one_err.rs","byte_start":139202,"byte_end":139217,"line_start":22,"line_end":22,"column_start":9,"column_end":24},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1979},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/exactly_one_err.rs","byte_start":139447,"byte_end":139462,"line_start":32,"line_end":32,"column_start":22,"column_end":37},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1979},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/exactly_one_err.rs","byte_start":140084,"byte_end":140099,"line_start":58,"line_end":58,"column_start":31,"column_end":46},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1979},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":144194,"byte_end":144204,"line_start":49,"line_end":49,"column_start":33,"column_end":43},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":661},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/format.rs","byte_start":144953,"byte_end":144959,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1989},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":146921,"byte_end":146922,"line_start":10,"line_end":10,"column_start":46,"column_end":47},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":706},"to":{"krate":0,"index":698}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":147227,"byte_end":147237,"line_start":29,"line_end":29,"column_start":6,"column_end":16},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":147433,"byte_end":147443,"line_start":40,"line_end":40,"column_start":32,"column_end":42},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2036},"to":{"krate":0,"index":698}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":148485,"byte_end":148495,"line_start":77,"line_end":77,"column_start":15,"column_end":25},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":716},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":155273,"byte_end":155283,"line_start":263,"line_end":263,"column_start":15,"column_end":25},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":716},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":157095,"byte_end":157102,"line_start":320,"line_end":320,"column_start":15,"column_end":22},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":158309,"byte_end":158315,"line_start":366,"line_end":366,"column_start":32,"column_end":38},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":774},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":159225,"byte_end":159230,"line_start":402,"line_end":402,"column_start":28,"column_end":33},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":788},"to":{"krate":2,"index":2266}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":159401,"byte_end":159406,"line_start":411,"line_end":411,"column_start":32,"column_end":37},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":788},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":161238,"byte_end":161248,"line_start":475,"line_end":475,"column_start":9,"column_end":19},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":811},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":162234,"byte_end":162240,"line_start":517,"line_end":517,"column_start":26,"column_end":32},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":825},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":162999,"byte_end":163004,"line_start":550,"line_end":550,"column_start":22,"column_end":27},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":835},"to":{"krate":2,"index":2266}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/groupbylazy.rs","byte_start":163163,"byte_end":163168,"line_start":559,"line_end":559,"column_start":26,"column_end":31},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":835},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/intersperse.rs","byte_start":164266,"byte_end":164277,"line_start":35,"line_end":35,"column_start":22,"column_end":33},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2042},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":166087,"byte_end":166095,"line_start":33,"line_end":33,"column_start":9,"column_end":17},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2053},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":166991,"byte_end":166999,"line_start":64,"line_end":64,"column_start":19,"column_end":27},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2053},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":168772,"byte_end":168782,"line_start":124,"line_end":124,"column_start":44,"column_end":54},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2060},"to":{"krate":0,"index":887}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":168917,"byte_end":168918,"line_start":130,"line_end":130,"column_start":56,"column_end":57},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":895},"to":{"krate":0,"index":887}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":170018,"byte_end":170026,"line_start":171,"line_end":171,"column_start":27,"column_end":35},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":899},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":170882,"byte_end":170890,"line_start":195,"line_end":195,"column_start":22,"column_end":30},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":899},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/kmerge_impl.rs","byte_start":171104,"byte_end":171112,"line_start":205,"line_end":205,"column_start":25,"column_end":33},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":899},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lazy_buffer.rs","byte_start":171993,"byte_end":172003,"line_start":10,"line_end":10,"column_start":9,"column_end":19},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2065},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lazy_buffer.rs","byte_start":172939,"byte_end":172949,"line_start":57,"line_end":57,"column_start":25,"column_end":35},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2065},"to":{"krate":2,"index":2323}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/merge_join.rs","byte_start":174302,"byte_end":174313,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":949},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/merge_join.rs","byte_start":174538,"byte_end":174549,"line_start":43,"line_end":43,"column_start":28,"column_end":39},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":949},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/minmax.rs","byte_start":176422,"byte_end":176434,"line_start":17,"line_end":17,"column_start":16,"column_end":28},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2077},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":180465,"byte_end":180474,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":180627,"byte_end":180636,"line_start":39,"line_end":39,"column_start":19,"column_end":28},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":181280,"byte_end":181289,"line_start":61,"line_end":61,"column_start":25,"column_end":34},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2102},"to":{"krate":0,"index":1023}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":181756,"byte_end":181765,"line_start":80,"line_end":80,"column_start":22,"column_end":31},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2102},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/multipeek_impl.rs","byte_start":182189,"byte_end":182198,"line_start":100,"line_end":100,"column_start":31,"column_end":40},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":2102},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/pad_tail.rs","byte_start":183023,"byte_end":183031,"line_start":32,"line_end":32,"column_start":25,"column_end":33},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2113},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/pad_tail.rs","byte_start":183794,"byte_end":183802,"line_start":63,"line_end":63,"column_start":36,"column_end":44},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2113},"to":{"krate":2,"index":5233}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/pad_tail.rs","byte_start":184259,"byte_end":184267,"line_start":80,"line_end":80,"column_start":34,"column_end":42},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2113},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":184849,"byte_end":184857,"line_start":15,"line_end":15,"column_start":25,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":5304},"to":{"krate":0,"index":1023}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":185163,"byte_end":185171,"line_start":23,"line_end":23,"column_start":25,"column_end":33},"kind":{"Impl":{"id":89}},"from":{"krate":2,"index":31709},"to":{"krate":0,"index":1023}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":185491,"byte_end":185498,"line_start":38,"line_end":38,"column_start":25,"column_end":32},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1606},"to":{"krate":0,"index":1023}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":185915,"byte_end":185923,"line_start":57,"line_end":57,"column_start":25,"column_end":33},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2203},"to":{"krate":0,"index":1023}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/peeking_take_while.rs","byte_start":186878,"byte_end":186894,"line_start":97,"line_end":97,"column_start":29,"column_end":45},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1038},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/permutations.rs","byte_start":189672,"byte_end":189684,"line_start":47,"line_end":47,"column_start":24,"column_end":36},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1059},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/permutations.rs","byte_start":190550,"byte_end":190562,"line_start":88,"line_end":88,"column_start":22,"column_end":34},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1059},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/permutations.rs","byte_start":193239,"byte_end":193251,"line_start":162,"line_end":162,"column_start":9,"column_end":21},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1059},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/permutations.rs","byte_start":194482,"byte_end":194495,"line_start":200,"line_end":200,"column_start":6,"column_end":19},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/process_results_impl.rs","byte_start":197166,"byte_end":197180,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2192},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":199906,"byte_end":199914,"line_start":26,"line_end":26,"column_start":19,"column_end":27},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2203},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/put_back_n_impl.rs","byte_start":200416,"byte_end":200424,"line_start":47,"line_end":47,"column_start":32,"column_end":40},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2203},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":202440,"byte_end":202446,"line_start":53,"line_end":53,"column_start":19,"column_end":25},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2213},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":202581,"byte_end":202587,"line_start":60,"line_end":60,"column_start":25,"column_end":31},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2213},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/rciter_impl.rs","byte_start":203146,"byte_end":203152,"line_start":79,"line_end":79,"column_start":33,"column_end":39},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2213},"to":{"krate":2,"index":5233}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/repeatn.rs","byte_start":204127,"byte_end":204134,"line_start":23,"line_end":23,"column_start":22,"column_end":29},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2219},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/repeatn.rs","byte_start":204524,"byte_end":204531,"line_start":43,"line_end":43,"column_start":33,"column_end":40},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2219},"to":{"krate":2,"index":5233}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/repeatn.rs","byte_start":204681,"byte_end":204688,"line_start":52,"line_end":52,"column_start":31,"column_end":38},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2219},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":207673,"byte_end":207683,"line_start":14,"line_end":14,"column_start":24,"column_end":34},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1176},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":208522,"byte_end":208532,"line_start":48,"line_end":48,"column_start":25,"column_end":35},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1176},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":210201,"byte_end":210207,"line_start":109,"line_end":109,"column_start":28,"column_end":34},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2228},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":210594,"byte_end":210600,"line_start":124,"line_end":124,"column_start":29,"column_end":35},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2228},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":211289,"byte_end":211296,"line_start":153,"line_end":153,"column_start":28,"column_end":35},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2237},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/sources.rs","byte_start":211399,"byte_end":211406,"line_start":159,"line_end":159,"column_start":26,"column_end":33},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2237},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tee.rs","byte_start":213120,"byte_end":213123,"line_start":37,"line_end":37,"column_start":22,"column_end":25},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2257},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tee.rs","byte_start":214220,"byte_end":214223,"line_start":75,"line_end":75,"column_start":31,"column_end":34},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2257},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":214648,"byte_end":214659,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2264},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":214832,"byte_end":214843,"line_start":28,"line_end":28,"column_start":22,"column_end":33},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2264},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":215509,"byte_end":215520,"line_start":56,"line_end":56,"column_start":31,"column_end":42},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2264},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":216169,"byte_end":216175,"line_start":84,"line_end":84,"column_start":25,"column_end":31},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1243},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":216387,"byte_end":216393,"line_start":95,"line_end":95,"column_start":12,"column_end":18},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1243},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":218000,"byte_end":218012,"line_start":153,"line_end":153,"column_start":25,"column_end":37},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2271},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/tuple_impl.rs","byte_start":218538,"byte_end":218543,"line_start":174,"line_end":174,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":1269}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/unique_impl.rs","byte_start":221816,"byte_end":221824,"line_start":19,"line_end":19,"column_start":30,"column_end":38},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2328},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/unique_impl.rs","byte_start":222622,"byte_end":222630,"line_start":50,"line_end":50,"column_start":28,"column_end":36},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2328},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/unique_impl.rs","byte_start":223347,"byte_end":223353,"line_start":79,"line_end":79,"column_start":22,"column_end":28},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2341},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/unique_impl.rs","byte_start":224380,"byte_end":224386,"line_start":116,"line_end":116,"column_start":24,"column_end":30},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":2341},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":225918,"byte_end":225926,"line_start":42,"line_end":42,"column_start":9,"column_end":17},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":226205,"byte_end":226217,"line_start":54,"line_end":54,"column_start":32,"column_end":44},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1320},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/with_position.rs","byte_start":227453,"byte_end":227465,"line_start":88,"line_end":88,"column_start":31,"column_end":43},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1320},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":228383,"byte_end":228388,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_eq_impl.rs","byte_start":228966,"byte_end":228971,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_longest.rs","byte_start":229893,"byte_end":229903,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":2389},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_longest.rs","byte_start":230525,"byte_end":230535,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":2389},"to":{"krate":2,"index":5233}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/zip_longest.rs","byte_start":231356,"byte_end":231366,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":2389},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":9829,"byte_end":9837,"line_start":344,"line_end":344,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":5304},"to":{"krate":0,"index":1382}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":75492,"byte_end":75493,"line_start":2258,"line_end":2258,"column_start":31,"column_end":32},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1537},"to":{"krate":0,"index":1382}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.1/src/lib.rs","byte_start":79012,"byte_end":79021,"line_start":2376,"line_end":2376,"column_start":9,"column_end":18},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":2575},"to":{"krate":4294967295,"index":4294967295}}]}