{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5","program":"/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","stacker","/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=bee98eab835dfcb1","-C","extra-filename=-bee98eab835dfcb1","--out-dir","/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","-L","dependency=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","--extern","cfg_if=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libcfg_if-1411361de3f28afd.rmeta","--extern","libc=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/liblibc-4474a632f98a9a21.rmeta","--cap-lints","allow","-L","native=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/build/stacker-6b8b89857712dd33/out","-l","static=stacker","--error-format=json","--sysroot","/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libstacker-bee98eab835dfcb1.rmeta"},"prelude":{"crate_id":{"name":"stacker","disambiguator":[11270618004102534773,1134865246925311322]},"crate_root":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src","external_crates":[{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3710194649008989715,14559669089861450418]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9392975149979234998,17049149762166397483]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16512841426258775062,11665789721448774207]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10630307797325716480,16523273723520132349]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3264716338318844693,12681592148182797578]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[140397795414171834,1910274434865169512]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5557669672741662647,10322216614238315513]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14339503364484872598,13531520383629478599]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14161909693946419124,17554770295131960960]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9716880057120631437,4575334529379688610]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17190292700912465587,13293574150729131089]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[16973425767318922457,5762286362994384933]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[3049460603833016674,5895625007283919048]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[8971705811930800565,4802059752817986136]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[7414259369911982492,16117941559470048194]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","num":16,"id":{"name":"cfg_if","disambiguator":[13347268434212277074,12294355231220403985]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","num":17,"id":{"name":"libc","disambiguator":[9237417759301744298,10325578486291660160]}}],"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":0,"byte_end":14845,"line_start":1,"line_end":395,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":0,"byte_end":14845,"line_start":1,"line_end":395,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":22},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":52},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":45}],"decl_id":null,"docs":" A library to help grow the stack when it runs out of space.","sig":null,"attributes":[{"value":"/ A library to help grow the stack when it runs out of space.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":0,"byte_end":63,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":64,"byte_end":67,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This is an implementation of manually instrumented segmented stacks where","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":68,"byte_end":145,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ points in a program's control flow are annotated with \"maybe grow the stack","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":146,"byte_end":225,"line_start":4,"line_end":4,"column_start":1,"column_end":80}},{"value":"/ here\". Each point of annotation indicates how far away from the end of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":226,"byte_end":304,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"/ stack it's allowed to be, plus the amount of stack to allocate if it does","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":305,"byte_end":382,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ reach the end.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":383,"byte_end":401,"line_start":7,"line_end":7,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":402,"byte_end":405,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Once a program has reached the end of its stack, a temporary stack on the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":406,"byte_end":483,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ heap is allocated and is switched to for the duration of a closure.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":484,"byte_end":555,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":556,"byte_end":559,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":560,"byte_end":574,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":575,"byte_end":578,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":579,"byte_end":586,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ // Grow the stack if we are within the \"red zone\" of 32K, and if we allocate","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":587,"byte_end":667,"line_start":15,"line_end":15,"column_start":1,"column_end":81}},{"value":"/ // a new stack allocate 1MB of stack space.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":668,"byte_end":715,"line_start":16,"line_end":16,"column_start":1,"column_end":48}},{"value":"/ //","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":716,"byte_end":722,"line_start":17,"line_end":17,"column_start":1,"column_end":7}},{"value":"/ // If we're already in bounds, however, just run the provided closure on our","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":723,"byte_end":803,"line_start":18,"line_end":18,"column_start":1,"column_end":81}},{"value":"/ // own stack","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":804,"byte_end":820,"line_start":19,"line_end":19,"column_start":1,"column_end":17}},{"value":"/ stacker::maybe_grow(32 * 1024, 1024 * 1024, || {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":821,"byte_end":873,"line_start":20,"line_end":20,"column_start":1,"column_end":53}},{"value":"/     // guaranteed to have at least 32K of stack","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":874,"byte_end":925,"line_start":21,"line_end":21,"column_start":1,"column_end":52}},{"value":"/ });","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":926,"byte_end":933,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":934,"byte_end":941,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"allow(improper_ctypes)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":943,"byte_end":969,"line_start":25,"line_end":25,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":6},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":1611,"byte_end":1621,"line_start":45,"line_end":45,"column_start":8,"column_end":18},"name":"maybe_grow","qualname":"::maybe_grow","value":"pub fn maybe_grow<R, F: FnOnce() -> R>(usize, usize, F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Grows the call stack if necessary.","sig":null,"attributes":[{"value":"/ Grows the call stack if necessary.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":1084,"byte_end":1122,"line_start":35,"line_end":35,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":1123,"byte_end":1126,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ This function is intended to be called at manually instrumented points in a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":1127,"byte_end":1206,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ program where recursion is known to happen quite a bit. This function will","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":1207,"byte_end":1285,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ check to see if we're within `red_zone` bytes of the end of the stack, and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":1286,"byte_end":1364,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/ if so it will allocate a new stack of size `stack_size`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":1365,"byte_end":1425,"line_start":40,"line_end":40,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":1426,"byte_end":1429,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The closure `f` is guaranteed to run on a stack with at least `red_zone`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":1430,"byte_end":1506,"line_start":42,"line_end":42,"column_start":1,"column_end":77}},{"value":"/ bytes, and it will be run on the current stack if there's space available.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":1507,"byte_end":1585,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"inline(always)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":1586,"byte_end":1603,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":12},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":2423,"byte_end":2438,"line_start":72,"line_end":72,"column_start":8,"column_end":23},"name":"remaining_stack","qualname":"::remaining_stack","value":"pub fn remaining_stack() -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Queries the amount of remaining stack as interpreted by this library.","sig":null,"attributes":[{"value":"/ Queries the amount of remaining stack as interpreted by this library.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":2177,"byte_end":2250,"line_start":67,"line_end":67,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":2251,"byte_end":2254,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ This function will return the amount of stack space left which will be used","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":2255,"byte_end":2334,"line_start":69,"line_end":69,"column_start":1,"column_end":80}},{"value":"/ to determine whether a stack switch should be made or not.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":2335,"byte_end":2397,"line_start":70,"line_end":70,"column_start":1,"column_end":63}},{"value":"inline(always)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":2398,"byte_end":2415,"line_start":71,"line_end":71,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":14},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":2775,"byte_end":2779,"line_start":80,"line_end":80,"column_start":8,"column_end":12},"name":"grow","qualname":"::grow","value":"pub fn grow<R, F: FnOnce() -> R>(usize, F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Always creates a new stack for the passed closure to run on.\n The closure will still be on the same thread as the caller of `grow`.\n This will allocate a new stack with at least `stack_size` bytes.\n","sig":null,"attributes":[{"value":"/ Always creates a new stack for the passed closure to run on.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":2543,"byte_end":2607,"line_start":76,"line_end":76,"column_start":1,"column_end":65}},{"value":"/ The closure will still be on the same thread as the caller of `grow`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":2608,"byte_end":2681,"line_start":77,"line_end":77,"column_start":1,"column_end":74}},{"value":"/ This will allocate a new stack with at least `stack_size` bytes.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":2682,"byte_end":2750,"line_start":78,"line_end":78,"column_start":1,"column_end":69}},{"value":"inline(never)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":2751,"byte_end":2767,"line_start":79,"line_end":79,"column_start":1,"column_end":17}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":3986,"byte_end":3997,"line_start":128,"line_end":128,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.5/src/lib.rs","byte_start":3986,"byte_end":3997,"line_start":128,"line_end":128,"column_start":23,"column_end":34},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":33},"to":{"krate":2,"index":2266}}]}