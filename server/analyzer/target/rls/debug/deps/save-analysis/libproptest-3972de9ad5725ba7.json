{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4","program":"/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","proptest","--edition=2018","/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bit-set\"","--cfg","feature=\"break-dead-code\"","--cfg","feature=\"lazy_static\"","--cfg","feature=\"quick-error\"","--cfg","feature=\"regex-syntax\"","--cfg","feature=\"std\"","-C","metadata=3972de9ad5725ba7","-C","extra-filename=-3972de9ad5725ba7","--out-dir","/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","-L","dependency=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","--extern","bit_set=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libbit_set-3ee279ffc5bf3338.rmeta","--extern","bitflags=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libbitflags-dce2fd5d15faffa8.rmeta","--extern","byteorder=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libbyteorder-156fbd7e0147e2e5.rmeta","--extern","lazy_static=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/liblazy_static-8ca06278f5bc974b.rmeta","--extern","num_traits=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libnum_traits-4fea4bb61c2d333a.rmeta","--extern","quick_error=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libquick_error-172313cfccb13046.rmeta","--extern","rand=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/librand-af69b9310d2cf651.rmeta","--extern","rand_chacha=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/librand_chacha-909da925e46513f3.rmeta","--extern","rand_xorshift=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/librand_xorshift-d2f3d879ec3d4608.rmeta","--extern","regex_syntax=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libregex_syntax-2d99a4025952b20b.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libproptest-3972de9ad5725ba7.rmeta"},"prelude":{"crate_id":{"name":"proptest","disambiguator":[7888314708398998460,1674186781635847175]},"crate_root":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src","external_crates":[{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[9392975149979234998,17049149762166397483]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[16512841426258775062,11665789721448774207]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[10630307797325716480,16523273723520132349]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":4,"id":{"name":"std","disambiguator":[3710194649008989715,14559669089861450418]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3264716338318844693,12681592148182797578]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[140397795414171834,1910274434865169512]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5557669672741662647,10322216614238315513]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14339503364484872598,13531520383629478599]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14161909693946419124,17554770295131960960]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9716880057120631437,4575334529379688610]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17190292700912465587,13293574150729131089]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[16973425767318922457,5762286362994384933]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[3049460603833016674,5895625007283919048]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[8971705811930800565,4802059752817986136]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[7414259369911982492,16117941559470048194]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":16,"id":{"name":"bitflags","disambiguator":[622889312128496731,14058552020937752200]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":17,"id":{"name":"bit_set","disambiguator":[411299896075596528,14494213663561086723]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":18,"id":{"name":"bit_vec","disambiguator":[11714817005772177859,2350563430619341729]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":19,"id":{"name":"lazy_static","disambiguator":[8622471236171398951,7375813736511945278]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","num":20,"id":{"name":"quick_error","disambiguator":[3303871828495858037,18313164495320216514]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","num":21,"id":{"name":"rand","disambiguator":[15086897560799486387,2195993094552401120]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","num":22,"id":{"name":"rand_jitter","disambiguator":[9722969824998433621,12516819470701090958]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","num":23,"id":{"name":"rand_core","disambiguator":[5460231549421434409,15865894254418864318]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","num":24,"id":{"name":"libc","disambiguator":[9237417759301744298,10325578486291660160]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","num":25,"id":{"name":"rand_os","disambiguator":[15058647198650524279,1582290634601720534]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","num":26,"id":{"name":"rand_isaac","disambiguator":[6909012432282155752,6313861071166275964]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","num":27,"id":{"name":"rand_core","disambiguator":[12405013758789132769,3407458179584151645]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","num":28,"id":{"name":"rand_chacha","disambiguator":[9609897921705256742,12809745230773698349]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","num":29,"id":{"name":"rand_hc","disambiguator":[7303808825180323089,12701593348286893446]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","num":30,"id":{"name":"rand_pcg","disambiguator":[1377988497577294644,16382208805226870294]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","num":31,"id":{"name":"rand_xorshift","disambiguator":[15305277909717914666,1362979776396206868]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","num":32,"id":{"name":"byteorder","disambiguator":[7786802486158187971,17904586164133949077]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","num":33,"id":{"name":"regex_syntax","disambiguator":[11300356349072891021,9408724544888489490]}}],"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":345,"byte_end":2308,"line_start":10,"line_end":107,"column_start":1,"column_end":17}},"imports":[{"kind":"Use","ref_id":{"krate":5,"index":405},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":3282,"byte_end":3285,"line_start":35,"line_end":35,"column_start":40,"column_end":43},"alias_span":null,"name":"Cow","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":396},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":3330,"byte_end":3337,"line_start":36,"line_end":36,"column_start":44,"column_end":51},"alias_span":null,"name":"ToOwned","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":93},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":3376,"byte_end":3379,"line_start":37,"line_end":37,"column_start":38,"column_end":41},"alias_span":null,"name":"Box","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":5501},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":3423,"byte_end":3429,"line_start":38,"line_end":38,"column_start":43,"column_end":49},"alias_span":null,"name":"String","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":4061},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":3457,"byte_end":3463,"line_start":39,"line_end":39,"column_start":27,"column_end":33},"alias_span":null,"name":"string","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":4415},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":3500,"byte_end":3503,"line_start":40,"line_end":40,"column_start":36,"column_end":39},"alias_span":null,"name":"Arc","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":3524},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":3535,"byte_end":3537,"line_start":41,"line_end":41,"column_start":31,"column_end":33},"alias_span":null,"name":"Rc","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":4754},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":3572,"byte_end":3575,"line_start":42,"line_end":42,"column_start":34,"column_end":37},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":4712},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":3600,"byte_end":3603,"line_start":43,"line_end":43,"column_start":24,"column_end":27},"alias_span":null,"name":"vec","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":5},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":3600,"byte_end":3603,"line_start":43,"line_end":43,"column_start":24,"column_end":27},"alias_span":null,"name":"vec","value":"","parent":{"krate":0,"index":2268}},{"kind":"Use","ref_id":{"krate":5,"index":3002},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":3657,"byte_end":3665,"line_start":44,"line_end":44,"column_start":53,"column_end":61},"alias_span":null,"name":"VecDeque","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":2913},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":3720,"byte_end":3729,"line_start":45,"line_end":45,"column_start":54,"column_end":63},"alias_span":null,"name":"vec_deque","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":496},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":3787,"byte_end":3797,"line_start":46,"line_end":46,"column_start":57,"column_end":67},"alias_span":null,"name":"BinaryHeap","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":474},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":3856,"byte_end":3867,"line_start":47,"line_end":47,"column_start":58,"column_end":69},"alias_span":null,"name":"binary_heap","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":2575},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":3925,"byte_end":3935,"line_start":48,"line_end":48,"column_start":57,"column_end":67},"alias_span":null,"name":"LinkedList","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":2561},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":3994,"byte_end":4005,"line_start":49,"line_end":49,"column_start":58,"column_end":69},"alias_span":null,"name":"linked_list","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":5355},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":4061,"byte_end":4069,"line_start":50,"line_end":50,"column_start":55,"column_end":63},"alias_span":null,"name":"BTreeSet","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":905},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":4125,"byte_end":4133,"line_start":51,"line_end":51,"column_start":55,"column_end":63},"alias_span":null,"name":"BTreeMap","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":3329},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":4190,"byte_end":4199,"line_start":52,"line_end":52,"column_start":56,"column_end":65},"alias_span":null,"name":"btree_map","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":3331},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":4256,"byte_end":4265,"line_start":53,"line_end":53,"column_start":56,"column_end":65},"alias_span":null,"name":"btree_set","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":4,"index":6842},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":4359,"byte_end":4366,"line_start":58,"line_end":58,"column_start":48,"column_end":55},"alias_span":null,"name":"HashMap","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":4,"index":6868},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":4415,"byte_end":4422,"line_start":59,"line_end":59,"column_start":48,"column_end":55},"alias_span":null,"name":"HashSet","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":4,"index":1581},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":4557,"byte_end":4565,"line_start":65,"line_end":65,"column_start":29,"column_end":37},"alias_span":null,"name":"hash_map","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":4,"index":1583},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":4698,"byte_end":4706,"line_start":69,"line_end":69,"column_start":29,"column_end":37},"alias_span":null,"name":"hash_set","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":3349},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":4749,"byte_end":4752,"line_start":72,"line_end":72,"column_start":23,"column_end":26},"alias_span":null,"name":"fmt","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":1,"index":2931},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":4789,"byte_end":4793,"line_start":73,"line_end":73,"column_start":36,"column_end":40},"alias_span":null,"name":"Cell","value":"","parent":{"krate":0,"index":4}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":65108,"byte_end":65109,"line_start":45,"line_end":45,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"any_with, Arbitrary, StrategyFor, any, arbitrary_with, arbitrary","parent":{"krate":0,"index":38}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/mod.rs","byte_start":291449,"byte_end":291450,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Filter","parent":{"krate":0,"index":809}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/mod.rs","byte_start":291478,"byte_end":291479,"line_start":25,"line_end":25,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"FilterMap","parent":{"krate":0,"index":809}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/mod.rs","byte_start":291504,"byte_end":291505,"line_start":26,"line_end":26,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"IndFlattenMap, IndFlatten, Flatten","parent":{"krate":0,"index":809}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/mod.rs","byte_start":291527,"byte_end":291528,"line_start":27,"line_end":27,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":809}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/mod.rs","byte_start":291550,"byte_end":291551,"line_start":28,"line_end":28,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"LazyJust, Just, LazyJustFn","parent":{"krate":0,"index":809}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/mod.rs","byte_start":291573,"byte_end":291574,"line_start":29,"line_end":29,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":809}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/mod.rs","byte_start":291596,"byte_end":291597,"line_start":30,"line_end":30,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":809}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/mod.rs","byte_start":291618,"byte_end":291619,"line_start":31,"line_end":31,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"MapInto, Perturb, Map","parent":{"krate":0,"index":809}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/mod.rs","byte_start":291646,"byte_end":291647,"line_start":32,"line_end":32,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"Recursive","parent":{"krate":0,"index":809}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/mod.rs","byte_start":291672,"byte_end":291673,"line_start":33,"line_end":33,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"Shuffle, Shuffleable","parent":{"krate":0,"index":809}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/mod.rs","byte_start":291697,"byte_end":291698,"line_start":34,"line_end":34,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"ValueTree, Strategy, NewTree, BoxedStrategy, SBoxedStrategy","parent":{"krate":0,"index":809}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/mod.rs","byte_start":291722,"byte_end":291723,"line_start":35,"line_end":35,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"float_to_weight, W, LazyTupleUnion, TupleUnionValueTree, Union, WA, TupleUnion","parent":{"krate":0,"index":809}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/mod.rs","byte_start":425937,"byte_end":425938,"line_start":25,"line_end":25,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Config","parent":{"krate":0,"index":1526}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/mod.rs","byte_start":425962,"byte_end":425963,"line_start":26,"line_end":26,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"TestCaseError","parent":{"krate":0,"index":1526}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/mod.rs","byte_start":426000,"byte_end":426001,"line_start":27,"line_end":27,"column_start":36,"column_end":37},"alias_span":null,"name":"*","value":"FailurePersistence, FileFailurePersistence","parent":{"krate":0,"index":1526}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/mod.rs","byte_start":426025,"byte_end":426026,"line_start":28,"line_end":28,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Reason","parent":{"krate":0,"index":1526}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/mod.rs","byte_start":426056,"byte_end":426057,"line_start":29,"line_end":29,"column_start":29,"column_end":30},"alias_span":null,"name":"*","value":"ResultCache","parent":{"krate":0,"index":1526}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/mod.rs","byte_start":426078,"byte_end":426079,"line_start":30,"line_end":30,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"TestRng, Seed","parent":{"krate":0,"index":1526}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/mod.rs","byte_start":426103,"byte_end":426104,"line_start":31,"line_end":31,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"TestRunner","parent":{"krate":0,"index":1526}},{"kind":"Use","ref_id":{"krate":0,"index":1935},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":558660,"byte_end":558664,"line_start":38,"line_end":38,"column_start":25,"column_end":29},"alias_span":null,"name":"prob","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":8053},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":558666,"byte_end":558677,"line_start":38,"line_end":38,"column_start":31,"column_end":42},"alias_span":null,"name":"Probability","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":678},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567416,"byte_end":567426,"line_start":30,"line_end":30,"column_start":29,"column_end":39},"alias_span":null,"name":"size_range","value":"","parent":{"krate":0,"index":2060}},{"kind":"Use","ref_id":{"krate":0,"index":5243},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567428,"byte_end":567437,"line_start":30,"line_end":30,"column_start":41,"column_end":50},"alias_span":null,"name":"SizeRange","value":"","parent":{"krate":0,"index":2060}},{"kind":"Use","ref_id":{"krate":0,"index":8316},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":585549,"byte_end":585554,"line_start":84,"line_end":84,"column_start":32,"column_end":37},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":2130}},{"kind":"Use","ref_id":{"krate":0,"index":55},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600496,"byte_end":600499,"line_start":23,"line_end":23,"column_start":28,"column_end":31},"alias_span":null,"name":"any","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":0,"index":57},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600501,"byte_end":600509,"line_start":23,"line_end":23,"column_start":33,"column_end":41},"alias_span":null,"name":"any_with","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":0,"index":46},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600511,"byte_end":600520,"line_start":23,"line_end":23,"column_start":43,"column_end":52},"alias_span":null,"name":"Arbitrary","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":0,"index":6883},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600549,"byte_end":600562,"line_start":24,"line_end":24,"column_start":27,"column_end":40},"alias_span":null,"name":"BoxedStrategy","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":0,"index":6627},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600564,"byte_end":600568,"line_start":24,"line_end":24,"column_start":42,"column_end":46},"alias_span":null,"name":"Just","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":0,"index":6628},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600564,"byte_end":600568,"line_start":24,"line_end":24,"column_start":42,"column_end":46},"alias_span":null,"name":"Just","value":"","parent":{"krate":0,"index":2229}},{"kind":"Use","ref_id":{"krate":0,"index":6890},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600570,"byte_end":600584,"line_start":24,"line_end":24,"column_start":48,"column_end":62},"alias_span":null,"name":"SBoxedStrategy","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":0,"index":1288},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600586,"byte_end":600594,"line_start":24,"line_end":24,"column_start":64,"column_end":72},"alias_span":null,"name":"Strategy","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":0,"index":7562},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600625,"byte_end":600631,"line_start":25,"line_end":25,"column_start":29,"column_end":35},"alias_span":null,"name":"ProptestConfig","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":0,"index":7584},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600679,"byte_end":600692,"line_start":26,"line_end":26,"column_start":29,"column_end":42},"alias_span":null,"name":"TestCaseError","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":0,"index":29},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600715,"byte_end":600726,"line_start":28,"line_end":28,"column_start":5,"column_end":16},"alias_span":null,"name":"prop_assert","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":0,"index":30},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600728,"byte_end":600742,"line_start":28,"line_end":28,"column_start":18,"column_end":32},"alias_span":null,"name":"prop_assert_eq","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":0,"index":31},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600744,"byte_end":600758,"line_start":28,"line_end":28,"column_start":34,"column_end":48},"alias_span":null,"name":"prop_assert_ne","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":0,"index":26},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600760,"byte_end":600771,"line_start":28,"line_end":28,"column_start":50,"column_end":61},"alias_span":null,"name":"prop_assume","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":0,"index":28},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600773,"byte_end":600785,"line_start":28,"line_end":28,"column_start":63,"column_end":75},"alias_span":null,"name":"prop_compose","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":0,"index":27},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600791,"byte_end":600801,"line_start":29,"line_end":29,"column_start":5,"column_end":15},"alias_span":null,"name":"prop_oneof","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":0,"index":25},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600803,"byte_end":600811,"line_start":29,"line_end":29,"column_start":17,"column_end":25},"alias_span":null,"name":"proptest","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":21,"index":1076},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600832,"byte_end":600835,"line_start":32,"line_end":32,"column_start":16,"column_end":19},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":23,"index":123},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600837,"byte_end":600844,"line_start":32,"line_end":32,"column_start":21,"column_end":28},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":0,"index":38},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":601099,"byte_end":601108,"line_start":38,"line_end":38,"column_start":20,"column_end":29},"alias_span":null,"name":"arbitrary","value":"","parent":{"krate":0,"index":2245}},{"kind":"Use","ref_id":{"krate":0,"index":494},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":601129,"byte_end":601134,"line_start":39,"line_end":39,"column_start":20,"column_end":25},"alias_span":null,"name":"array","value":"","parent":{"krate":0,"index":2245}},{"kind":"Use","ref_id":{"krate":0,"index":503},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":601155,"byte_end":601159,"line_start":40,"line_end":40,"column_start":20,"column_end":24},"alias_span":null,"name":"bits","value":"","parent":{"krate":0,"index":2245}},{"kind":"Use","ref_id":{"krate":0,"index":592},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":601180,"byte_end":601184,"line_start":41,"line_end":41,"column_start":20,"column_end":24},"alias_span":null,"name":"bool","value":"","parent":{"krate":0,"index":2245}},{"kind":"Use","ref_id":{"krate":0,"index":613},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":601205,"byte_end":601209,"line_start":42,"line_end":42,"column_start":20,"column_end":24},"alias_span":null,"name":"char","value":"","parent":{"krate":0,"index":2245}},{"kind":"Use","ref_id":{"krate":0,"index":650},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":601230,"byte_end":601240,"line_start":43,"line_end":43,"column_start":20,"column_end":30},"alias_span":null,"name":"collection","value":"","parent":{"krate":0,"index":2245}},{"kind":"Use","ref_id":{"krate":0,"index":770},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":601261,"byte_end":601264,"line_start":44,"line_end":44,"column_start":20,"column_end":23},"alias_span":null,"name":"num","value":"","parent":{"krate":0,"index":2245}},{"kind":"Use","ref_id":{"krate":0,"index":1930},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":601285,"byte_end":601291,"line_start":45,"line_end":45,"column_start":20,"column_end":26},"alias_span":null,"name":"option","value":"","parent":{"krate":0,"index":2245}},{"kind":"Use","ref_id":{"krate":0,"index":1980},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":601312,"byte_end":601318,"line_start":46,"line_end":46,"column_start":20,"column_end":26},"alias_span":null,"name":"result","value":"","parent":{"krate":0,"index":2245}},{"kind":"Use","ref_id":{"krate":0,"index":2060},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":601339,"byte_end":601345,"line_start":47,"line_end":47,"column_start":20,"column_end":26},"alias_span":null,"name":"sample","value":"","parent":{"krate":0,"index":2245}},{"kind":"Use","ref_id":{"krate":0,"index":809},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":601366,"byte_end":601374,"line_start":48,"line_end":48,"column_start":20,"column_end":28},"alias_span":null,"name":"strategy","value":"","parent":{"krate":0,"index":2245}},{"kind":"Use","ref_id":{"krate":0,"index":2130},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":601423,"byte_end":601429,"line_start":50,"line_end":50,"column_start":20,"column_end":26},"alias_span":null,"name":"string","value":"","parent":{"krate":0,"index":2245}},{"kind":"Use","ref_id":{"krate":0,"index":1526},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":601450,"byte_end":601461,"line_start":51,"line_end":51,"column_start":20,"column_end":31},"alias_span":null,"name":"test_runner","value":"","parent":{"krate":0,"index":2245}},{"kind":"Use","ref_id":{"krate":0,"index":1923},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":601482,"byte_end":601487,"line_start":52,"line_end":52,"column_start":20,"column_end":25},"alias_span":null,"name":"tuple","value":"","parent":{"krate":0,"index":2245}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":345,"byte_end":2308,"line_start":10,"line_end":107,"column_start":1,"column_end":17},"name":"","qualname":"::","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":23},{"krate":0,"index":38},{"krate":0,"index":494},{"krate":0,"index":503},{"krate":0,"index":592},{"krate":0,"index":613},{"krate":0,"index":650},{"krate":0,"index":770},{"krate":0,"index":809},{"krate":0,"index":1526},{"krate":0,"index":1923},{"krate":0,"index":1930},{"krate":0,"index":1980},{"krate":0,"index":2060},{"krate":0,"index":2130},{"krate":0,"index":2222}],"decl_id":null,"docs":" # Proptest Reference Documentation","sig":null,"attributes":[{"value":"/ # Proptest Reference Documentation","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":345,"byte_end":383,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":384,"byte_end":387,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This is the reference documentation for the proptest API.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":388,"byte_end":449,"line_start":12,"line_end":12,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":450,"byte_end":453,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ For documentation on how to get started with proptest and general usage","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":454,"byte_end":529,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ advice, please refer to the [Proptest Book](https://altsysrq.github.io/proptest-book/intro.html).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":530,"byte_end":631,"line_start":15,"line_end":15,"column_start":1,"column_end":102}},{"value":"deny(missing_docs, bare_trait_objects)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":633,"byte_end":675,"line_start":17,"line_end":17,"column_start":1,"column_end":43}},{"value":"no_std","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":676,"byte_end":686,"line_start":18,"line_end":18,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"std_facade","qualname":"::std_facade","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","parent":null,"children":[{"krate":0,"index":2260},{"krate":0,"index":2261},{"krate":0,"index":2262},{"krate":0,"index":2263},{"krate":0,"index":2264},{"krate":0,"index":2265},{"krate":0,"index":2266},{"krate":0,"index":2267},{"krate":0,"index":2268},{"krate":0,"index":8372},{"krate":0,"index":2269},{"krate":0,"index":2270},{"krate":0,"index":2271},{"krate":0,"index":2272},{"krate":0,"index":2273},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":2276},{"krate":0,"index":2277},{"krate":0,"index":2278},{"krate":0,"index":2279},{"krate":0,"index":2280},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":2281},{"krate":0,"index":2282}],"decl_id":null,"docs":" This module provides #[cfg(..)]ed type aliases over features.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":1259,"byte_end":1271,"line_start":41,"line_end":41,"column_start":1,"column_end":13}},{"value":"/ This module provides #[cfg(..)]ed type aliases over features.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/std_facade.rs","byte_start":2666,"byte_end":2731,"line_start":10,"line_end":10,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":23},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sugar.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sugar","qualname":"::sugar","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sugar.rs","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":2283},{"krate":0,"index":2292},{"krate":0,"index":2289},{"krate":0,"index":33},{"krate":0,"index":2296},{"krate":0,"index":2301},{"krate":0,"index":2306},{"krate":0,"index":2313},{"krate":0,"index":2321},{"krate":0,"index":2330},{"krate":0,"index":2341},{"krate":0,"index":2352},{"krate":0,"index":2366},{"krate":0,"index":2379},{"krate":0,"index":2396},{"krate":0,"index":2411},{"krate":0,"index":2431},{"krate":0,"index":2448},{"krate":0,"index":2471},{"krate":0,"index":2490},{"krate":0,"index":2516},{"krate":0,"index":2537},{"krate":0,"index":2566},{"krate":0,"index":2589},{"krate":0,"index":37}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":2010,"byte_end":2022,"line_start":87,"line_end":87,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":2283},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sugar.rs","byte_start":46612,"byte_end":46626,"line_start":1056,"line_end":1056,"column_start":12,"column_end":26},"name":"NamedArguments","qualname":"::sugar::NamedArguments","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2287},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sugar.rs","byte_start":46648,"byte_end":46653,"line_start":1056,"line_end":1056,"column_start":48,"column_end":53},"name":"0","qualname":"::sugar::NamedArguments::0","value":"N","parent":{"krate":0,"index":2283},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2288},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sugar.rs","byte_start":46670,"byte_end":46675,"line_start":1056,"line_end":1056,"column_start":70,"column_end":75},"name":"1","qualname":"::sugar::NamedArguments::1","value":"V","parent":{"krate":0,"index":2283},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":37},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sugar.rs","byte_start":49184,"byte_end":49197,"line_start":1126,"line_end":1126,"column_start":8,"column_end":21},"name":"force_no_fork","qualname":"::sugar::force_no_fork","value":"pub fn force_no_fork(&mut crate::test_runner::Config)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sugar.rs","byte_start":49138,"byte_end":49161,"line_start":1124,"line_end":1124,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":38},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"arbitrary","qualname":"::arbitrary","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":66},{"krate":0,"index":89},{"krate":0,"index":94},{"krate":0,"index":100},{"krate":0,"index":119},{"krate":0,"index":134},{"krate":0,"index":139},{"krate":0,"index":238},{"krate":0,"index":365},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":488},{"krate":0,"index":491}],"decl_id":null,"docs":" Defines the `Arbitrary` trait and related free functions\n and type aliases.","sig":null,"attributes":[{"value":"/ Defines the `Arbitrary` trait and related free functions","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":64418,"byte_end":64478,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"/ and type aliases.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":64479,"byte_end":64500,"line_start":11,"line_end":11,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":64501,"byte_end":64504,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ See the [`Arbitrary`] trait for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":64505,"byte_end":64558,"line_start":13,"line_end":13,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":64559,"byte_end":64562,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`Arbitrary`]: trait.Arbitrary.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":64563,"byte_end":64602,"line_start":15,"line_end":15,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":46},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67981,"byte_end":67990,"line_start":45,"line_end":45,"column_start":11,"column_end":20},"name":"Arbitrary","qualname":"::arbitrary::traits::Arbitrary","value":"Arbitrary: Sized + fmt::Debug","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50}],"decl_id":null,"docs":" Arbitrary determines a canonical [`Strategy`] for the implementing type.","sig":null,"attributes":[{"value":"/ Arbitrary determines a canonical [`Strategy`] for the implementing type.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":66493,"byte_end":66569,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":66570,"byte_end":66573,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ It provides the method `arbitrary_with` which generates a `Strategy` for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":66574,"byte_end":66650,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"/ producing arbitrary values of the implementing type *(`Self`)*. In general,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":66651,"byte_end":66730,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ these strategies will produce the entire set of values possible for the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":66731,"byte_end":66806,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ type, up to some size limitation or constraints set by their parameters.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":66807,"byte_end":66883,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ When this is not desired, strategies to produce the desired values can be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":66884,"byte_end":66961,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ built by combining [`Strategy`]s as described in the crate documentation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":66962,"byte_end":67039,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67040,"byte_end":67043,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ This trait analogous to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67044,"byte_end":67071,"line_start":27,"line_end":27,"column_start":1,"column_end":28}},{"value":"/ [Haskell QuickCheck's implementation of `Arbitrary`][HaskellQC].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67072,"byte_end":67140,"line_start":28,"line_end":28,"column_start":1,"column_end":69}},{"value":"/ In this interpretation of `Arbitrary`, `Strategy` is the equivalent of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67141,"byte_end":67215,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"/ the `Gen` monad. Unlike in QuickCheck, `Arbitrary` is not a core component;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67216,"byte_end":67295,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"/ types do not need to implement `Arbitrary` unless one wants to use","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67296,"byte_end":67366,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ [`any`](fn.any.html) or other free functions in this module.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67367,"byte_end":67431,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67432,"byte_end":67435,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ `Arbitrary` currently only works for types which represent owned data as","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67436,"byte_end":67512,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ opposed to borrowed data. This is a fundamental restriction of `proptest`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67513,"byte_end":67590,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ which may be lifted in the future as the [generic associated types (GAT)]","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67591,"byte_end":67668,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/ feature of Rust is implemented and stabilized.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67669,"byte_end":67719,"line_start":37,"line_end":37,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67720,"byte_end":67723,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ [generic associated types (GAT)]: https://github.com/rust-lang/rust/issues/44265","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67724,"byte_end":67808,"line_start":39,"line_end":39,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67809,"byte_end":67812,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67813,"byte_end":67862,"line_start":41,"line_end":41,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67863,"byte_end":67866,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ [HaskellQC]:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67867,"byte_end":67883,"line_start":43,"line_end":43,"column_start":1,"column_end":17}},{"value":"/ https://hackage.haskell.org/package/QuickCheck/docs/Test-QuickCheck-Arbitrary.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67884,"byte_end":67970,"line_start":44,"line_end":44,"column_start":1,"column_end":87}}]},{"kind":"Type","id":{"krate":0,"index":47},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68422,"byte_end":68432,"line_start":54,"line_end":54,"column_start":10,"column_end":20},"name":"Parameters","qualname":"::arbitrary::traits::Arbitrary::Parameters","value":"type Parameters: Default;","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" The type of parameters that [`arbitrary_with`] accepts for configuration\n of the generated [`Strategy`]. Parameters must implement [`Default`].","sig":null,"attributes":[{"value":"/ The type of parameters that [`arbitrary_with`] accepts for configuration","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68017,"byte_end":68093,"line_start":46,"line_end":46,"column_start":5,"column_end":81}},{"value":"/ of the generated [`Strategy`]. Parameters must implement [`Default`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68098,"byte_end":68171,"line_start":47,"line_end":47,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68176,"byte_end":68179,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ [`arbitrary_with`]: trait.Arbitrary.html#tymethod.arbitrary_with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68184,"byte_end":68252,"line_start":49,"line_end":49,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68257,"byte_end":68260,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68265,"byte_end":68314,"line_start":51,"line_end":51,"column_start":5,"column_end":54}},{"value":"/ [`Default`]:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68319,"byte_end":68335,"line_start":52,"line_end":52,"column_start":5,"column_end":21}},{"value":"/     https://doc.rust-lang.org/nightly/std/default/trait.Default.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68340,"byte_end":68412,"line_start":53,"line_end":53,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69049,"byte_end":69058,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"arbitrary","qualname":"::arbitrary::traits::Arbitrary::arbitrary","value":"pub fn arbitrary() -> Self::Strategy","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Generates a [`Strategy`] for producing arbitrary values\n of type the implementing type (`Self`).","sig":null,"attributes":[{"value":"/ Generates a [`Strategy`] for producing arbitrary values","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68448,"byte_end":68507,"line_start":56,"line_end":56,"column_start":5,"column_end":64}},{"value":"/ of type the implementing type (`Self`).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68512,"byte_end":68555,"line_start":57,"line_end":57,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68560,"byte_end":68563,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Calling this for the type `X` is the equivalent of using","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68568,"byte_end":68628,"line_start":59,"line_end":59,"column_start":5,"column_end":65}},{"value":"/ [`X::arbitrary_with(Default::default())`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68633,"byte_end":68679,"line_start":60,"line_end":60,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68684,"byte_end":68687,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ This method is defined in the trait for optimization for the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68692,"byte_end":68756,"line_start":62,"line_end":62,"column_start":5,"column_end":69}},{"value":"/ default if you want to do that. It is a logic error to not","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68761,"byte_end":68823,"line_start":63,"line_end":63,"column_start":5,"column_end":67}},{"value":"/ preserve the semantics when overriding.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68828,"byte_end":68871,"line_start":64,"line_end":64,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68876,"byte_end":68879,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68884,"byte_end":68933,"line_start":66,"line_end":66,"column_start":5,"column_end":54}},{"value":"/ [`X::arbitrary_with(Default::default())`]:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68938,"byte_end":68984,"line_start":67,"line_end":67,"column_start":5,"column_end":51}},{"value":"/     trait.Arbitrary.html#tymethod.arbitrary_with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68989,"byte_end":69041,"line_start":68,"line_end":68,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69654,"byte_end":69668,"line_start":86,"line_end":86,"column_start":8,"column_end":22},"name":"arbitrary_with","qualname":"::arbitrary::traits::Arbitrary::arbitrary_with","value":"pub fn arbitrary_with(Self::Parameters) -> Self::Strategy","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Generates a [`Strategy`] for producing arbitrary values of type the\n implementing type (`Self`). The strategy is passed the arguments given\n in args.","sig":null,"attributes":[{"value":"/ Generates a [`Strategy`] for producing arbitrary values of type the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69141,"byte_end":69212,"line_start":73,"line_end":73,"column_start":5,"column_end":76}},{"value":"/ implementing type (`Self`). The strategy is passed the arguments given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69217,"byte_end":69291,"line_start":74,"line_end":74,"column_start":5,"column_end":79}},{"value":"/ in args.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69296,"byte_end":69308,"line_start":75,"line_end":75,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69313,"byte_end":69316,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ If you wish to use the [`default()`] arguments,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69321,"byte_end":69372,"line_start":77,"line_end":77,"column_start":5,"column_end":56}},{"value":"/ use [`arbitrary`] instead.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69377,"byte_end":69407,"line_start":78,"line_end":78,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69412,"byte_end":69415,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69420,"byte_end":69469,"line_start":80,"line_end":80,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69474,"byte_end":69477,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ [`arbitrary`]: trait.Arbitrary.html#method.arbitrary","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69482,"byte_end":69538,"line_start":82,"line_end":82,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69543,"byte_end":69546,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ [`default()`]:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69551,"byte_end":69569,"line_start":84,"line_end":84,"column_start":5,"column_end":23}},{"value":"/     https://doc.rust-lang.org/nightly/std/default/trait.Default.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69574,"byte_end":69646,"line_start":85,"line_end":85,"column_start":5,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":50},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69857,"byte_end":69865,"line_start":91,"line_end":91,"column_start":10,"column_end":18},"name":"Strategy","qualname":"::arbitrary::traits::Arbitrary::Strategy","value":"type Strategy: Strategy<Value = Self>;","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" The type of [`Strategy`] used to generate values of type `Self`.","sig":null,"attributes":[{"value":"/ The type of [`Strategy`] used to generate values of type `Self`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69717,"byte_end":69785,"line_start":88,"line_end":88,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69790,"byte_end":69793,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":69798,"byte_end":69847,"line_start":90,"line_end":90,"column_start":5,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":51},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":70606,"byte_end":70617,"line_start":107,"line_end":107,"column_start":10,"column_end":21},"name":"StrategyFor","qualname":"::arbitrary::traits::StrategyFor","value":"<A as Arbitrary>::Strategy","parent":null,"children":[],"decl_id":null,"docs":" `StrategyFor` allows you to mention the type of [`Strategy`] for the input\n type `A` without directly using associated types or without resorting to\n existential types. This way, if implementation of [`Arbitrary`] changes,\n your tests should not break. This can be especially beneficial when the\n type of `Strategy` that you are dealing with is very long in name\n (the case with generics).","sig":null,"attributes":[{"value":"/ `StrategyFor` allows you to mention the type of [`Strategy`] for the input","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":70094,"byte_end":70172,"line_start":98,"line_end":98,"column_start":1,"column_end":79}},{"value":"/ type `A` without directly using associated types or without resorting to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":70173,"byte_end":70249,"line_start":99,"line_end":99,"column_start":1,"column_end":77}},{"value":"/ existential types. This way, if implementation of [`Arbitrary`] changes,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":70250,"byte_end":70326,"line_start":100,"line_end":100,"column_start":1,"column_end":77}},{"value":"/ your tests should not break. This can be especially beneficial when the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":70327,"byte_end":70402,"line_start":101,"line_end":101,"column_start":1,"column_end":76}},{"value":"/ type of `Strategy` that you are dealing with is very long in name","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":70403,"byte_end":70472,"line_start":102,"line_end":102,"column_start":1,"column_end":70}},{"value":"/ (the case with generics).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":70473,"byte_end":70502,"line_start":103,"line_end":103,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":70503,"byte_end":70506,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ [`Arbitrary`]: trait.Arbitrary.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":70507,"byte_end":70546,"line_start":105,"line_end":105,"column_start":1,"column_end":40}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":70547,"byte_end":70596,"line_start":106,"line_end":106,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":53},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":71088,"byte_end":71097,"line_start":117,"line_end":117,"column_start":10,"column_end":19},"name":"ParamsFor","qualname":"::arbitrary::traits::ParamsFor","value":"<A as Arbitrary>::Parameters","parent":null,"children":[],"decl_id":null,"docs":" `ParamsFor` allows you to mention the type of [`Parameters`] for the input\n type `A` without directly using associated types or without resorting to\n existential types. This way, if implementation of [`Arbitrary`] changes,\n your tests should not break.","sig":null,"attributes":[{"value":"/ `ParamsFor` allows you to mention the type of [`Parameters`] for the input","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":70652,"byte_end":70730,"line_start":109,"line_end":109,"column_start":1,"column_end":79}},{"value":"/ type `A` without directly using associated types or without resorting to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":70731,"byte_end":70807,"line_start":110,"line_end":110,"column_start":1,"column_end":77}},{"value":"/ existential types. This way, if implementation of [`Arbitrary`] changes,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":70808,"byte_end":70884,"line_start":111,"line_end":111,"column_start":1,"column_end":77}},{"value":"/ your tests should not break.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":70885,"byte_end":70917,"line_start":112,"line_end":112,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":70918,"byte_end":70921,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ [`Parameters`]: trait.Arbitrary.html#associatedtype.Parameters","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":70922,"byte_end":70988,"line_start":114,"line_end":114,"column_start":1,"column_end":67}},{"value":"/ [`Arbitrary`]: trait.Arbitrary.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":70989,"byte_end":71028,"line_start":115,"line_end":115,"column_start":1,"column_end":40}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":71029,"byte_end":71078,"line_start":116,"line_end":116,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":55},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72592,"byte_end":72595,"line_start":159,"line_end":159,"column_start":8,"column_end":11},"name":"any","qualname":"::arbitrary::traits::any","value":"pub fn any<A: Arbitrary>() -> StrategyFor<A>","parent":null,"children":[],"decl_id":null,"docs":" Generates a [`Strategy`] producing [`Arbitrary`][trait Arbitrary] values of\n `A`. Unlike [`arbitrary`][fn arbitrary], it should be used for being\n explicit on what `A` is. For clarity, this may be a good idea.","sig":null,"attributes":[{"value":"/ Generates a [`Strategy`] producing [`Arbitrary`][trait Arbitrary] values of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":71338,"byte_end":71417,"line_start":123,"line_end":123,"column_start":1,"column_end":80}},{"value":"/ `A`. Unlike [`arbitrary`][fn arbitrary], it should be used for being","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":71418,"byte_end":71490,"line_start":124,"line_end":124,"column_start":1,"column_end":73}},{"value":"/ explicit on what `A` is. For clarity, this may be a good idea.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":71491,"byte_end":71557,"line_start":125,"line_end":125,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":71558,"byte_end":71561,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ Use this version instead of [`arbitrary`][fn arbitrary] if you want to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":71562,"byte_end":71639,"line_start":127,"line_end":127,"column_start":1,"column_end":78}},{"value":"/ clear which type you want to generate a `Strategy` for, or if you don't","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":71640,"byte_end":71715,"line_start":128,"line_end":128,"column_start":1,"column_end":76}},{"value":"/ have an anchoring type for type inference to work with.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":71716,"byte_end":71775,"line_start":129,"line_end":129,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":71776,"byte_end":71779,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ If you want to customize how the strategy is generated, use","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":71780,"byte_end":71843,"line_start":131,"line_end":131,"column_start":1,"column_end":64}},{"value":"/ [`any_with::<A>(args)`] where `args` are any arguments accepted by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":71844,"byte_end":71914,"line_start":132,"line_end":132,"column_start":1,"column_end":71}},{"value":"/ the `Arbitrary` impl in question.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":71915,"byte_end":71952,"line_start":133,"line_end":133,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":71953,"byte_end":71956,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":71957,"byte_end":71970,"line_start":135,"line_end":135,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":71971,"byte_end":71974,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ The function can be used as:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":71975,"byte_end":72007,"line_start":137,"line_end":137,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72008,"byte_end":72011,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72012,"byte_end":72023,"line_start":139,"line_end":139,"column_start":1,"column_end":12}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72024,"byte_end":72053,"line_start":140,"line_end":140,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72054,"byte_end":72057,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ proptest! {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72058,"byte_end":72073,"line_start":142,"line_end":142,"column_start":1,"column_end":16}},{"value":"/     fn reverse_reverse_is_identity(ref vec in any::<Vec<u32>>()) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72074,"byte_end":72144,"line_start":143,"line_end":143,"column_start":1,"column_end":71}},{"value":"/         let vec2 = vec.iter().cloned().rev().rev().collect::<Vec<u32>>();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72145,"byte_end":72222,"line_start":144,"line_end":144,"column_start":1,"column_end":78}},{"value":"/         prop_assert_eq!(vec, &vec2);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72223,"byte_end":72263,"line_start":145,"line_end":145,"column_start":1,"column_end":41}},{"value":"/     }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72264,"byte_end":72273,"line_start":146,"line_end":146,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72274,"byte_end":72279,"line_start":147,"line_end":147,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72280,"byte_end":72283,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72284,"byte_end":72299,"line_start":149,"line_end":149,"column_start":1,"column_end":16}},{"value":"/     reverse_reverse_is_identity();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72300,"byte_end":72338,"line_start":150,"line_end":150,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72339,"byte_end":72344,"line_start":151,"line_end":151,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72345,"byte_end":72352,"line_start":152,"line_end":152,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72353,"byte_end":72356,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ [`any_with::<A>(args)`]: fn.any_with.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72357,"byte_end":72402,"line_start":154,"line_end":154,"column_start":1,"column_end":46}},{"value":"/ [fn arbitrary]: fn.arbitrary.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72403,"byte_end":72440,"line_start":155,"line_end":155,"column_start":1,"column_end":38}},{"value":"/ [trait Arbitrary]: trait.Arbitrary.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72441,"byte_end":72484,"line_start":156,"line_end":156,"column_start":1,"column_end":44}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72485,"byte_end":72534,"line_start":157,"line_end":157,"column_start":1,"column_end":50}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72535,"byte_end":72584,"line_start":158,"line_end":158,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":57},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74037,"byte_end":74045,"line_start":203,"line_end":203,"column_start":8,"column_end":16},"name":"any_with","qualname":"::arbitrary::traits::any_with","value":"pub fn any_with<A: Arbitrary>(ParamsFor<A>) -> StrategyFor<A>","parent":null,"children":[],"decl_id":null,"docs":" Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the\n given configuration arguments passed in `args`. Unlike [`arbitrary_with`],\n it should be used for being explicit on what `A` is.\n For clarity, this may be a good idea.","sig":null,"attributes":[{"value":"/ Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72729,"byte_end":72804,"line_start":164,"line_end":164,"column_start":1,"column_end":76}},{"value":"/ given configuration arguments passed in `args`. Unlike [`arbitrary_with`],","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72805,"byte_end":72883,"line_start":165,"line_end":165,"column_start":1,"column_end":79}},{"value":"/ it should be used for being explicit on what `A` is.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72884,"byte_end":72940,"line_start":166,"line_end":166,"column_start":1,"column_end":57}},{"value":"/ For clarity, this may be a good idea.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72941,"byte_end":72982,"line_start":167,"line_end":167,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72983,"byte_end":72986,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Use this version instead of [`arbitrary_with`] if you want to be clear which","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":72987,"byte_end":73067,"line_start":169,"line_end":169,"column_start":1,"column_end":81}},{"value":"/ type you want to generate a `Strategy` for, or if you don't have an anchoring","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73068,"byte_end":73149,"line_start":170,"line_end":170,"column_start":1,"column_end":82}},{"value":"/ type for type inference to work with.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73150,"byte_end":73191,"line_start":171,"line_end":171,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73192,"byte_end":73195,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ If you don't want to specify any arguments and instead use the default","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73196,"byte_end":73270,"line_start":173,"line_end":173,"column_start":1,"column_end":75}},{"value":"/ behavior, you should use [`any::<A>()`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73271,"byte_end":73315,"line_start":174,"line_end":174,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73316,"byte_end":73319,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73320,"byte_end":73333,"line_start":176,"line_end":176,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73334,"byte_end":73337,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ The function can be used as:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73338,"byte_end":73370,"line_start":178,"line_end":178,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73371,"byte_end":73374,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73375,"byte_end":73386,"line_start":180,"line_end":180,"column_start":1,"column_end":12}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73387,"byte_end":73416,"line_start":181,"line_end":181,"column_start":1,"column_end":30}},{"value":"/ use proptest::collection::size_range;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73417,"byte_end":73458,"line_start":182,"line_end":182,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73459,"byte_end":73462,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ proptest! {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73463,"byte_end":73478,"line_start":184,"line_end":184,"column_start":1,"column_end":16}},{"value":"/     fn reverse_reverse_is_identity","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73479,"byte_end":73517,"line_start":185,"line_end":185,"column_start":1,"column_end":39}},{"value":"/         (ref vec in any_with::<Vec<u32>>(size_range(1000).lift()))","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73518,"byte_end":73588,"line_start":186,"line_end":186,"column_start":1,"column_end":71}},{"value":"/     {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73589,"byte_end":73598,"line_start":187,"line_end":187,"column_start":1,"column_end":10}},{"value":"/         let vec2 = vec.iter().cloned().rev().rev().collect::<Vec<u32>>();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73599,"byte_end":73676,"line_start":188,"line_end":188,"column_start":1,"column_end":78}},{"value":"/         prop_assert_eq!(vec, &vec2);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73677,"byte_end":73717,"line_start":189,"line_end":189,"column_start":1,"column_end":41}},{"value":"/     }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73718,"byte_end":73727,"line_start":190,"line_end":190,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73728,"byte_end":73733,"line_start":191,"line_end":191,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73734,"byte_end":73737,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73738,"byte_end":73753,"line_start":193,"line_end":193,"column_start":1,"column_end":16}},{"value":"/     reverse_reverse_is_identity();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73754,"byte_end":73792,"line_start":194,"line_end":194,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73793,"byte_end":73798,"line_start":195,"line_end":195,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73799,"byte_end":73806,"line_start":196,"line_end":196,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73807,"byte_end":73810,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ [`any::<A>()`]: fn.any.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73811,"byte_end":73842,"line_start":198,"line_end":198,"column_start":1,"column_end":32}},{"value":"/ [`arbitrary_with`]: fn.arbitrary_with.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73843,"byte_end":73889,"line_start":199,"line_end":199,"column_start":1,"column_end":47}},{"value":"/ [`Arbitrary`]: trait.Arbitrary.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73890,"byte_end":73929,"line_start":200,"line_end":200,"column_start":1,"column_end":40}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73930,"byte_end":73979,"line_start":201,"line_end":201,"column_start":1,"column_end":50}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":73980,"byte_end":74029,"line_start":202,"line_end":202,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":59},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75354,"byte_end":75363,"line_start":242,"line_end":242,"column_start":8,"column_end":17},"name":"arbitrary","qualname":"::arbitrary::traits::arbitrary","value":"pub fn arbitrary<A, S>() -> S where S: Strategy<Value = A>,\nA: Arbitrary<Strategy = S>","parent":null,"children":[],"decl_id":null,"docs":" Generates a [`Strategy`] producing [`Arbitrary`] values of `A`.\n Works better with type inference than [`any::<A>()`].","sig":null,"attributes":[{"value":"/ Generates a [`Strategy`] producing [`Arbitrary`] values of `A`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74206,"byte_end":74273,"line_start":208,"line_end":208,"column_start":1,"column_end":68}},{"value":"/ Works better with type inference than [`any::<A>()`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74274,"byte_end":74331,"line_start":209,"line_end":209,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74332,"byte_end":74335,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ With this version, you shouldn't need to specify any of the (many) type","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74336,"byte_end":74411,"line_start":211,"line_end":211,"column_start":1,"column_end":76}},{"value":"/ parameters explicitly. This can have a positive effect on type inference.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74412,"byte_end":74489,"line_start":212,"line_end":212,"column_start":1,"column_end":78}},{"value":"/ However, if you want specify `A`, you should use [`any::<A>()`] instead.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74490,"byte_end":74566,"line_start":213,"line_end":213,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74567,"byte_end":74570,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ For clarity, it is often a good idea to specify the type generated, and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74571,"byte_end":74646,"line_start":215,"line_end":215,"column_start":1,"column_end":76}},{"value":"/ so using [`any::<A>()`] can be a good idea.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74647,"byte_end":74694,"line_start":216,"line_end":216,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74695,"byte_end":74698,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ If you want to customize how the strategy is generated, use","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74699,"byte_end":74762,"line_start":218,"line_end":218,"column_start":1,"column_end":64}},{"value":"/ [`arbitrary_with(args)`] where `args` is of type","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74763,"byte_end":74815,"line_start":219,"line_end":219,"column_start":1,"column_end":53}},{"value":"/ `<A as Arbitrary>::Parameters`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74816,"byte_end":74851,"line_start":220,"line_end":220,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74852,"byte_end":74855,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74856,"byte_end":74869,"line_start":222,"line_end":222,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74870,"byte_end":74873,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ The function can be used as:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74874,"byte_end":74906,"line_start":224,"line_end":224,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74907,"byte_end":74910,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74911,"byte_end":74922,"line_start":226,"line_end":226,"column_start":1,"column_end":12}},{"value":"/ extern crate proptest;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74923,"byte_end":74949,"line_start":227,"line_end":227,"column_start":1,"column_end":27}},{"value":"/ use proptest::arbitrary::{arbitrary, StrategyFor};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":74950,"byte_end":75004,"line_start":228,"line_end":228,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75005,"byte_end":75008,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ fn gen_vec_usize() -> StrategyFor<Vec<usize>> {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75009,"byte_end":75060,"line_start":230,"line_end":230,"column_start":1,"column_end":52}},{"value":"/     arbitrary()","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75061,"byte_end":75080,"line_start":231,"line_end":231,"column_start":1,"column_end":20}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75081,"byte_end":75086,"line_start":232,"line_end":232,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75087,"byte_end":75090,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ # fn main() {}","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75091,"byte_end":75109,"line_start":234,"line_end":234,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75110,"byte_end":75117,"line_start":235,"line_end":235,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75118,"byte_end":75121,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ [`arbitrary_with(args)`]: fn.arbitrary_with.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75122,"byte_end":75174,"line_start":237,"line_end":237,"column_start":1,"column_end":53}},{"value":"/ [`any::<A>()`]: fn.any.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75175,"byte_end":75206,"line_start":238,"line_end":238,"column_start":1,"column_end":32}},{"value":"/ [`Arbitrary`]: trait.Arbitrary.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75207,"byte_end":75246,"line_start":239,"line_end":239,"column_start":1,"column_end":40}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75247,"byte_end":75296,"line_start":240,"line_end":240,"column_start":1,"column_end":50}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75297,"byte_end":75346,"line_start":241,"line_end":241,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":62},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76821,"byte_end":76835,"line_start":287,"line_end":287,"column_start":8,"column_end":22},"name":"arbitrary_with","qualname":"::arbitrary::traits::arbitrary_with","value":"pub fn arbitrary_with<A, S, P>(P) -> S where P: Default, S: Strategy<Value =\nA>, A: Arbitrary<Strategy = S, Parameters = S>","parent":null,"children":[],"decl_id":null,"docs":" Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the\n given configuration arguments passed in `args`.\n Works better with type inference than [`any_with::<A>(args)`].","sig":null,"attributes":[{"value":"/ Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75542,"byte_end":75617,"line_start":251,"line_end":251,"column_start":1,"column_end":76}},{"value":"/ given configuration arguments passed in `args`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75618,"byte_end":75669,"line_start":252,"line_end":252,"column_start":1,"column_end":52}},{"value":"/ Works better with type inference than [`any_with::<A>(args)`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75670,"byte_end":75736,"line_start":253,"line_end":253,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75737,"byte_end":75740,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ With this version, you shouldn't need to specify any of the (many) type","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75741,"byte_end":75816,"line_start":255,"line_end":255,"column_start":1,"column_end":76}},{"value":"/ parameters explicitly. This can have a positive effect on type inference.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75817,"byte_end":75894,"line_start":256,"line_end":256,"column_start":1,"column_end":78}},{"value":"/ However, if you want specify `A`, you should use","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75895,"byte_end":75947,"line_start":257,"line_end":257,"column_start":1,"column_end":53}},{"value":"/ [`any_with::<A>(args)`] instead.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75948,"byte_end":75984,"line_start":258,"line_end":258,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75985,"byte_end":75988,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ For clarity, it is often a good idea to specify the type generated, and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":75989,"byte_end":76064,"line_start":260,"line_end":260,"column_start":1,"column_end":76}},{"value":"/ so using [`any_with::<A>(args)`] can be a good idea.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76065,"byte_end":76121,"line_start":261,"line_end":261,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76122,"byte_end":76125,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ If you don't want to specify any arguments and instead use the default","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76126,"byte_end":76200,"line_start":263,"line_end":263,"column_start":1,"column_end":75}},{"value":"/ behavior, you should use [`arbitrary()`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76201,"byte_end":76246,"line_start":264,"line_end":264,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76247,"byte_end":76250,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76251,"byte_end":76264,"line_start":266,"line_end":266,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76265,"byte_end":76268,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ The function can be used as:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76269,"byte_end":76301,"line_start":268,"line_end":268,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76302,"byte_end":76305,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76306,"byte_end":76317,"line_start":270,"line_end":270,"column_start":1,"column_end":12}},{"value":"/ extern crate proptest;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76318,"byte_end":76344,"line_start":271,"line_end":271,"column_start":1,"column_end":27}},{"value":"/ use proptest::arbitrary::{arbitrary_with, StrategyFor};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76345,"byte_end":76404,"line_start":272,"line_end":272,"column_start":1,"column_end":60}},{"value":"/ use proptest::collection::size_range;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76405,"byte_end":76446,"line_start":273,"line_end":273,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76447,"byte_end":76450,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ fn gen_vec_10_u32() -> StrategyFor<Vec<u32>> {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76451,"byte_end":76501,"line_start":275,"line_end":275,"column_start":1,"column_end":51}},{"value":"/     arbitrary_with(size_range(10).lift())","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76502,"byte_end":76547,"line_start":276,"line_end":276,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76548,"byte_end":76553,"line_start":277,"line_end":277,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76554,"byte_end":76557,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ # fn main() {}","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76558,"byte_end":76576,"line_start":279,"line_end":279,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76577,"byte_end":76584,"line_start":280,"line_end":280,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76585,"byte_end":76588,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ [`any_with::<A>(args)`]: fn.any_with.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76589,"byte_end":76634,"line_start":282,"line_end":282,"column_start":1,"column_end":46}},{"value":"/ [`arbitrary()`]: fn.arbitrary.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76635,"byte_end":76673,"line_start":283,"line_end":283,"column_start":1,"column_end":39}},{"value":"/ [`Arbitrary`]: trait.Arbitrary.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76674,"byte_end":76713,"line_start":284,"line_end":284,"column_start":1,"column_end":40}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76714,"byte_end":76763,"line_start":285,"line_end":285,"column_start":1,"column_end":50}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":76764,"byte_end":76813,"line_start":286,"line_end":286,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":66},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"functor","qualname":"::arbitrary::functor","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":78}],"decl_id":null,"docs":" Provides higher order `Arbitrary` traits.\n This is mainly for use by `proptest_derive`.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":64868,"byte_end":64880,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/ Provides higher order `Arbitrary` traits.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":77421,"byte_end":77466,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"/ This is mainly for use by `proptest_derive`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":77467,"byte_end":77515,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":77516,"byte_end":77519,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ## Stability note","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":77520,"byte_end":77541,"line_start":13,"line_end":13,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":77542,"byte_end":77545,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This trait is mainly defined for `proptest_derive` to simplify the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":77546,"byte_end":77616,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/ mechanics of deriving recursive types. If you have custom containers","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":77617,"byte_end":77689,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ and want to support recursive for those, it is a good idea to implement","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":77690,"byte_end":77765,"line_start":17,"line_end":17,"column_start":1,"column_end":76}},{"value":"/ this trait.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":77766,"byte_end":77781,"line_start":18,"line_end":18,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":77782,"byte_end":77785,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ There are clearer and terser ways that work better with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":77786,"byte_end":77845,"line_start":20,"line_end":20,"column_start":1,"column_end":60}},{"value":"/ inference such as using `proptest::collection::vec(..)`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":77846,"byte_end":77905,"line_start":21,"line_end":21,"column_start":1,"column_end":60}},{"value":"/ to achieve the same result.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":77906,"byte_end":77937,"line_start":22,"line_end":22,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":77938,"byte_end":77941,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ For these reasons, the traits here are deliberatly","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":77942,"byte_end":77996,"line_start":24,"line_end":24,"column_start":1,"column_end":55}},{"value":"/ not exported in a convenient way.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":77997,"byte_end":78034,"line_start":25,"line_end":25,"column_start":1,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":71},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":78525,"byte_end":78536,"line_start":41,"line_end":41,"column_start":11,"column_end":22},"name":"ArbitraryF1","qualname":"::arbitrary::functor::ArbitraryF1","value":"ArbitraryF1<A: fmt::Debug>: fmt::Debug + Sized","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":76}],"decl_id":null,"docs":" `ArbitraryF1` lets you lift a [`Strategy`] to unary\n type constructors such as `Box`, `Vec`, and `Option`.","sig":null,"attributes":[{"value":"/ `ArbitraryF1` lets you lift a [`Strategy`] to unary","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":78114,"byte_end":78169,"line_start":31,"line_end":31,"column_start":1,"column_end":56}},{"value":"/ type constructors such as `Box`, `Vec`, and `Option`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":78170,"byte_end":78227,"line_start":32,"line_end":32,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":78228,"byte_end":78231,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ The trait corresponds to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":78232,"byte_end":78260,"line_start":34,"line_end":34,"column_start":1,"column_end":29}},{"value":"/ [Haskell QuickCheck's `Arbitrary1` type class][HaskellQC].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":78261,"byte_end":78323,"line_start":35,"line_end":35,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":78324,"byte_end":78327,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ [HaskellQC]:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":78328,"byte_end":78344,"line_start":37,"line_end":37,"column_start":1,"column_end":17}},{"value":"/ https://hackage.haskell.org/package/QuickCheck-2.10.1/docs/Test-QuickCheck-Arbitrary.html#t:Arbitrary1","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":78345,"byte_end":78451,"line_start":38,"line_end":38,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":78452,"byte_end":78455,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":78456,"byte_end":78514,"line_start":40,"line_end":40,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":73},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80323,"byte_end":80333,"line_start":77,"line_end":77,"column_start":10,"column_end":20},"name":"Parameters","qualname":"::arbitrary::functor::ArbitraryF1::Parameters","value":"type Parameters: Default;","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" The type of parameters that [`lift1_with`] accepts for\n configuration of the lifted and generated [`Strategy`]. Parameters\n must implement [`Default`].","sig":null,"attributes":[{"value":"/ The type of parameters that [`lift1_with`] accepts for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":79888,"byte_end":79946,"line_start":67,"line_end":67,"column_start":5,"column_end":63}},{"value":"/ configuration of the lifted and generated [`Strategy`]. Parameters","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":79951,"byte_end":80021,"line_start":68,"line_end":68,"column_start":5,"column_end":75}},{"value":"/ must implement [`Default`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80026,"byte_end":80057,"line_start":69,"line_end":69,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80062,"byte_end":80065,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ [`lift1_with`]:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80070,"byte_end":80089,"line_start":71,"line_end":71,"column_start":5,"column_end":24}},{"value":"/     trait.ArbitraryF1.html#tymethod.lift1_with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80094,"byte_end":80144,"line_start":72,"line_end":72,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80149,"byte_end":80152,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80157,"byte_end":80215,"line_start":74,"line_end":74,"column_start":5,"column_end":63}},{"value":"/ [`Default`]:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80220,"byte_end":80236,"line_start":75,"line_end":75,"column_start":5,"column_end":21}},{"value":"/     https://doc.rust-lang.org/nightly/std/default/trait.Default.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80241,"byte_end":80313,"line_start":76,"line_end":76,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":81059,"byte_end":81064,"line_start":94,"line_end":94,"column_start":8,"column_end":13},"name":"lift1","qualname":"::arbitrary::functor::ArbitraryF1::lift1","value":"pub fn lift1<AS>(AS) -> BoxedStrategy<Self> where AS: Strategy<Value = A> +\n'static","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" Lifts a given [`Strategy`] to a new [`Strategy`] for the (presumably)\n bigger type. This is useful for lifting a `Strategy` for `SomeType`\n to a container such as `Vec<SomeType>`.","sig":null,"attributes":[{"value":"/ Lifts a given [`Strategy`] to a new [`Strategy`] for the (presumably)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80349,"byte_end":80422,"line_start":79,"line_end":79,"column_start":5,"column_end":78}},{"value":"/ bigger type. This is useful for lifting a `Strategy` for `SomeType`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80427,"byte_end":80498,"line_start":80,"line_end":80,"column_start":5,"column_end":76}},{"value":"/ to a container such as `Vec<SomeType>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80503,"byte_end":80546,"line_start":81,"line_end":81,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80551,"byte_end":80554,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Calling this for the type `X` is the equivalent of using","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80559,"byte_end":80619,"line_start":83,"line_end":83,"column_start":5,"column_end":65}},{"value":"/ [`X::lift1_with(base, Default::default())`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80624,"byte_end":80672,"line_start":84,"line_end":84,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80677,"byte_end":80680,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ This method is defined in the trait for optimization for the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80685,"byte_end":80749,"line_start":86,"line_end":86,"column_start":5,"column_end":69}},{"value":"/ default if you want to do that. It is a logic error to not","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80754,"byte_end":80816,"line_start":87,"line_end":87,"column_start":5,"column_end":67}},{"value":"/ preserve the semantics when overriding.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80821,"byte_end":80864,"line_start":88,"line_end":88,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80869,"byte_end":80872,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80877,"byte_end":80935,"line_start":90,"line_end":90,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80940,"byte_end":80943,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ [`X::lift1_with(base, Default::default())`]:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":80948,"byte_end":80996,"line_start":92,"line_end":92,"column_start":5,"column_end":53}},{"value":"/     trait.ArbitraryF1.html#tymethod.lift1_with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":81001,"byte_end":81051,"line_start":93,"line_end":93,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":81850,"byte_end":81860,"line_start":115,"line_end":115,"column_start":8,"column_end":18},"name":"lift1_with","qualname":"::arbitrary::functor::ArbitraryF1::lift1_with","value":"pub fn lift1_with<AS>(AS, Self::Parameters) -> BoxedStrategy<Self> where\nAS: Strategy<Value = A> + 'static","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" Lifts a given [`Strategy`] to a new [`Strategy`] for the (presumably)\n bigger type. This is useful for lifting a `Strategy` for `SomeType`\n to a container such as `Vec` of `SomeType`. The composite strategy is\n passed the arguments given in `args`.","sig":null,"attributes":[{"value":"/ Lifts a given [`Strategy`] to a new [`Strategy`] for the (presumably)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":81232,"byte_end":81305,"line_start":101,"line_end":101,"column_start":5,"column_end":78}},{"value":"/ bigger type. This is useful for lifting a `Strategy` for `SomeType`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":81310,"byte_end":81381,"line_start":102,"line_end":102,"column_start":5,"column_end":76}},{"value":"/ to a container such as `Vec` of `SomeType`. The composite strategy is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":81386,"byte_end":81459,"line_start":103,"line_end":103,"column_start":5,"column_end":78}},{"value":"/ passed the arguments given in `args`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":81464,"byte_end":81505,"line_start":104,"line_end":104,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":81510,"byte_end":81513,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ If you wish to use the [`default()`] arguments,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":81518,"byte_end":81569,"line_start":106,"line_end":106,"column_start":5,"column_end":56}},{"value":"/ use [`lift1`] instead.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":81574,"byte_end":81600,"line_start":107,"line_end":107,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":81605,"byte_end":81608,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":81613,"byte_end":81671,"line_start":109,"line_end":109,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":81676,"byte_end":81679,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ [`lift1`]: trait.ArbitraryF1.html#method.lift1","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":81684,"byte_end":81734,"line_start":111,"line_end":111,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":81739,"byte_end":81742,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ [`default()`]:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":81747,"byte_end":81765,"line_start":113,"line_end":113,"column_start":5,"column_end":23}},{"value":"/     https://doc.rust-lang.org/nightly/std/default/trait.Default.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":81770,"byte_end":81842,"line_start":114,"line_end":114,"column_start":5,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":78},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82381,"byte_end":82392,"line_start":130,"line_end":130,"column_start":11,"column_end":22},"name":"ArbitraryF2","qualname":"::arbitrary::functor::ArbitraryF2","value":"ArbitraryF2<A: fmt::Debug, B: fmt::Debug>: fmt::Debug + Sized","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":85}],"decl_id":null,"docs":" `ArbitraryF2` lets you lift [`Strategy`] to binary\n type constructors such as `Result`, `HashMap`.","sig":null,"attributes":[{"value":"/ `ArbitraryF2` lets you lift [`Strategy`] to binary","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":81978,"byte_end":82032,"line_start":120,"line_end":120,"column_start":1,"column_end":55}},{"value":"/ type constructors such as `Result`, `HashMap`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82033,"byte_end":82083,"line_start":121,"line_end":121,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82084,"byte_end":82087,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ The trait corresponds to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82088,"byte_end":82116,"line_start":123,"line_end":123,"column_start":1,"column_end":29}},{"value":"/ [Haskell QuickCheck's `Arbitrary2` type class][HaskellQC].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82117,"byte_end":82179,"line_start":124,"line_end":124,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82180,"byte_end":82183,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ [HaskellQC]:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82184,"byte_end":82200,"line_start":126,"line_end":126,"column_start":1,"column_end":17}},{"value":"/ https://hackage.haskell.org/package/QuickCheck-2.10.1/docs/Test-QuickCheck-Arbitrary.html#t:Arbitrary2","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82201,"byte_end":82307,"line_start":127,"line_end":127,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82308,"byte_end":82311,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82312,"byte_end":82370,"line_start":129,"line_end":129,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":81},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82884,"byte_end":82894,"line_start":143,"line_end":143,"column_start":10,"column_end":20},"name":"Parameters","qualname":"::arbitrary::functor::ArbitraryF2::Parameters","value":"type Parameters: Default;","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":" The type of parameters that [`lift2_with`] accepts for\n configuration of the lifted and generated [`Strategy`]. Parameters\n must implement [`Default`].","sig":null,"attributes":[{"value":"/ The type of parameters that [`lift2_with`] accepts for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82453,"byte_end":82511,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ configuration of the lifted and generated [`Strategy`]. Parameters","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82516,"byte_end":82586,"line_start":134,"line_end":134,"column_start":5,"column_end":75}},{"value":"/ must implement [`Default`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82591,"byte_end":82622,"line_start":135,"line_end":135,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82627,"byte_end":82630,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ [`lift2_with`]: trait.ArbitraryF2.html#tymethod.lift2_with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82635,"byte_end":82697,"line_start":137,"line_end":137,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82702,"byte_end":82705,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82710,"byte_end":82768,"line_start":139,"line_end":139,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82773,"byte_end":82776,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ [`Default`]:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82781,"byte_end":82797,"line_start":141,"line_end":141,"column_start":5,"column_end":21}},{"value":"/     https://doc.rust-lang.org/nightly/std/default/trait.Default.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82802,"byte_end":82874,"line_start":142,"line_end":142,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":83643,"byte_end":83648,"line_start":160,"line_end":160,"column_start":8,"column_end":13},"name":"lift2","qualname":"::arbitrary::functor::ArbitraryF2::lift2","value":"pub fn lift2<AS, BS>(AS, BS) -> BoxedStrategy<Self> where AS: Strategy<Value =\nA> + 'static, BS: Strategy<Value = B> + 'static","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":" Lifts two given strategies to a new [`Strategy`] for the (presumably)\n bigger type. This is useful for lifting a `Strategy` for `Type1`\n and one for `Type2` to a container such as `HashMap<Type1, Type2>`.","sig":null,"attributes":[{"value":"/ Lifts two given strategies to a new [`Strategy`] for the (presumably)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82910,"byte_end":82983,"line_start":145,"line_end":145,"column_start":5,"column_end":78}},{"value":"/ bigger type. This is useful for lifting a `Strategy` for `Type1`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82988,"byte_end":83056,"line_start":146,"line_end":146,"column_start":5,"column_end":73}},{"value":"/ and one for `Type2` to a container such as `HashMap<Type1, Type2>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":83061,"byte_end":83132,"line_start":147,"line_end":147,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":83137,"byte_end":83140,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ Calling this for the type `X` is the equivalent of using","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":83145,"byte_end":83205,"line_start":149,"line_end":149,"column_start":5,"column_end":65}},{"value":"/ [`X::lift2_with(base, Default::default())`].","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":83210,"byte_end":83258,"line_start":150,"line_end":150,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":83263,"byte_end":83266,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ This method is defined in the trait for optimization for the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":83271,"byte_end":83335,"line_start":152,"line_end":152,"column_start":5,"column_end":69}},{"value":"/ default if you want to do that. It is a logic error to not","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":83340,"byte_end":83402,"line_start":153,"line_end":153,"column_start":5,"column_end":67}},{"value":"/ preserve the semantics when overriding.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":83407,"byte_end":83450,"line_start":154,"line_end":154,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":83455,"byte_end":83458,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":83463,"byte_end":83521,"line_start":156,"line_end":156,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":83526,"byte_end":83529,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ [`X::lift2_with(base, Default::default())`]:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":83534,"byte_end":83582,"line_start":158,"line_end":158,"column_start":5,"column_end":53}},{"value":"/     trait.Arbitrary.html#tymethod.lift2_with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":83587,"byte_end":83635,"line_start":159,"line_end":159,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":84514,"byte_end":84524,"line_start":182,"line_end":182,"column_start":8,"column_end":18},"name":"lift2_with","qualname":"::arbitrary::functor::ArbitraryF2::lift2_with","value":"pub fn lift2_with<AS, BS>(AS, BS, Self::Parameters) -> BoxedStrategy<Self>\nwhere AS: Strategy<Value = A> + 'static, BS: Strategy<Value = B> + 'static","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":" Lifts two given strategies to a new [`Strategy`] for the (presumably)\n bigger type. This is useful for lifting a `Strategy` for `Type1`\n and one for `Type2` to a container such as `HashMap<Type1, Type2>`.\n The composite strategy is passed the arguments given in `args`.","sig":null,"attributes":[{"value":"/ Lifts two given strategies to a new [`Strategy`] for the (presumably)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":83875,"byte_end":83948,"line_start":168,"line_end":168,"column_start":5,"column_end":78}},{"value":"/ bigger type. This is useful for lifting a `Strategy` for `Type1`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":83953,"byte_end":84021,"line_start":169,"line_end":169,"column_start":5,"column_end":73}},{"value":"/ and one for `Type2` to a container such as `HashMap<Type1, Type2>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":84026,"byte_end":84097,"line_start":170,"line_end":170,"column_start":5,"column_end":76}},{"value":"/ The composite strategy is passed the arguments given in `args`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":84102,"byte_end":84169,"line_start":171,"line_end":171,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":84174,"byte_end":84177,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ If you wish to use the [`default()`] arguments,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":84182,"byte_end":84233,"line_start":173,"line_end":173,"column_start":5,"column_end":56}},{"value":"/ use [`lift2`] instead.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":84238,"byte_end":84264,"line_start":174,"line_end":174,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":84269,"byte_end":84272,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":84277,"byte_end":84335,"line_start":176,"line_end":176,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":84340,"byte_end":84343,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ [`lift2`]: trait.ArbitraryF2.html#method.lift2","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":84348,"byte_end":84398,"line_start":178,"line_end":178,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":84403,"byte_end":84406,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ [`default()`]:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":84411,"byte_end":84429,"line_start":180,"line_end":180,"column_start":5,"column_end":23}},{"value":"/     https://doc.rust-lang.org/nightly/std/default/trait.Default.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":84434,"byte_end":84506,"line_start":181,"line_end":181,"column_start":5,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":488},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":65611,"byte_end":65618,"line_start":60,"line_end":60,"column_start":10,"column_end":17},"name":"SMapped","qualname":"::arbitrary::SMapped","value":"statics::Map<StrategyFor<I>, fn(: I) -> O>","parent":null,"children":[],"decl_id":null,"docs":" A static map from a strategy of `I` to `O`.","sig":null,"attributes":[{"value":"/ A static map from a strategy of `I` to `O`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":65423,"byte_end":65470,"line_start":54,"line_end":54,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":65471,"byte_end":65474,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ # Stability","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":65475,"byte_end":65490,"line_start":56,"line_end":56,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":65491,"byte_end":65494,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ This is provided to make documentation more readable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":65495,"byte_end":65552,"line_start":58,"line_end":58,"column_start":1,"column_end":58}},{"value":"/ Do not rely on it existing in your own code.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":65553,"byte_end":65601,"line_start":59,"line_end":59,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":491},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":65858,"byte_end":65864,"line_start":68,"line_end":68,"column_start":10,"column_end":16},"name":"Mapped","qualname":"::arbitrary::Mapped","value":"Map<StrategyFor<I>, fn(: I) -> O>","parent":null,"children":[],"decl_id":null,"docs":" A normal map from a strategy of `I` to `O`.","sig":null,"attributes":[{"value":"/ A normal map from a strategy of `I` to `O`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":65670,"byte_end":65717,"line_start":62,"line_end":62,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":65718,"byte_end":65721,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Stability","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":65722,"byte_end":65737,"line_start":64,"line_end":64,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":65738,"byte_end":65741,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ This is provided to make documentation more readable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":65742,"byte_end":65799,"line_start":66,"line_end":66,"column_start":1,"column_end":58}},{"value":"/ Do not rely on it existing in your own code.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":65800,"byte_end":65848,"line_start":67,"line_end":67,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":494},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"array","qualname":"::array","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":8732},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":4054},{"krate":0,"index":4066},{"krate":0,"index":4063},{"krate":0,"index":4059},{"krate":0,"index":498},{"krate":0,"index":4070},{"krate":0,"index":4080},{"krate":0,"index":4078},{"krate":0,"index":4075},{"krate":0,"index":4083},{"krate":0,"index":4086},{"krate":0,"index":4094},{"krate":0,"index":4102},{"krate":0,"index":4111},{"krate":0,"index":4114},{"krate":0,"index":4122},{"krate":0,"index":4130},{"krate":0,"index":4139},{"krate":0,"index":4142},{"krate":0,"index":4150},{"krate":0,"index":4158},{"krate":0,"index":4167},{"krate":0,"index":4170},{"krate":0,"index":4178},{"krate":0,"index":4186},{"krate":0,"index":4195},{"krate":0,"index":4198},{"krate":0,"index":4206},{"krate":0,"index":4214},{"krate":0,"index":4223},{"krate":0,"index":4226},{"krate":0,"index":4234},{"krate":0,"index":4242},{"krate":0,"index":4251},{"krate":0,"index":4254},{"krate":0,"index":4262},{"krate":0,"index":4270},{"krate":0,"index":4279},{"krate":0,"index":4282},{"krate":0,"index":4290},{"krate":0,"index":4298},{"krate":0,"index":4307},{"krate":0,"index":4310},{"krate":0,"index":4318},{"krate":0,"index":4326},{"krate":0,"index":4335},{"krate":0,"index":4338},{"krate":0,"index":4346},{"krate":0,"index":4354},{"krate":0,"index":4363},{"krate":0,"index":4366},{"krate":0,"index":4374},{"krate":0,"index":4382},{"krate":0,"index":4391},{"krate":0,"index":4394},{"krate":0,"index":4402},{"krate":0,"index":4410},{"krate":0,"index":4419},{"krate":0,"index":4422},{"krate":0,"index":4430},{"krate":0,"index":4438},{"krate":0,"index":4447},{"krate":0,"index":4450},{"krate":0,"index":4458},{"krate":0,"index":4466},{"krate":0,"index":4475},{"krate":0,"index":4478},{"krate":0,"index":4486},{"krate":0,"index":4494},{"krate":0,"index":4503},{"krate":0,"index":4506},{"krate":0,"index":4514},{"krate":0,"index":4522},{"krate":0,"index":4531},{"krate":0,"index":4534},{"krate":0,"index":4542},{"krate":0,"index":4550},{"krate":0,"index":4559},{"krate":0,"index":4562},{"krate":0,"index":4570},{"krate":0,"index":4578},{"krate":0,"index":4587},{"krate":0,"index":4590},{"krate":0,"index":4598},{"krate":0,"index":4606},{"krate":0,"index":4615},{"krate":0,"index":4618},{"krate":0,"index":4626},{"krate":0,"index":4634},{"krate":0,"index":4643},{"krate":0,"index":4646},{"krate":0,"index":4654},{"krate":0,"index":4662},{"krate":0,"index":4671},{"krate":0,"index":4674},{"krate":0,"index":4682},{"krate":0,"index":4690},{"krate":0,"index":4699},{"krate":0,"index":4702},{"krate":0,"index":4710},{"krate":0,"index":4718},{"krate":0,"index":4727},{"krate":0,"index":4730},{"krate":0,"index":4738},{"krate":0,"index":4746},{"krate":0,"index":4755},{"krate":0,"index":4758},{"krate":0,"index":4766},{"krate":0,"index":4774},{"krate":0,"index":4783},{"krate":0,"index":4786},{"krate":0,"index":4794},{"krate":0,"index":4802},{"krate":0,"index":4811},{"krate":0,"index":4814},{"krate":0,"index":4822},{"krate":0,"index":4830},{"krate":0,"index":4839},{"krate":0,"index":4842},{"krate":0,"index":4850},{"krate":0,"index":4858},{"krate":0,"index":4867},{"krate":0,"index":4870},{"krate":0,"index":4878},{"krate":0,"index":4886},{"krate":0,"index":4895},{"krate":0,"index":4898},{"krate":0,"index":4906},{"krate":0,"index":4914},{"krate":0,"index":4923},{"krate":0,"index":4926},{"krate":0,"index":4934},{"krate":0,"index":4942},{"krate":0,"index":4951},{"krate":0,"index":4954},{"krate":0,"index":4962},{"krate":0,"index":4970}],"decl_id":null,"docs":" Support for strategies producing fixed-length arrays.","sig":null,"attributes":[{"value":"/ Support for strategies producing fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":172556,"byte_end":172613,"line_start":10,"line_end":10,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":172614,"byte_end":172617,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ An array of strategies (but only length 1 to 32 for now) is itself a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":172618,"byte_end":172690,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"/ strategy which generates arrays of that size drawing elements from the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":172691,"byte_end":172765,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ corresponding input strategies.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":172766,"byte_end":172801,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":172802,"byte_end":172805,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ See also [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":172806,"byte_end":172881,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ easily making a strategy for an array drawn from one strategy.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":172882,"byte_end":172948,"line_start":17,"line_end":17,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":172949,"byte_end":172952,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ General implementations are available for sizes 1 through 32.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":172953,"byte_end":173018,"line_start":19,"line_end":19,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":4054},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173980,"byte_end":174000,"line_start":53,"line_end":53,"column_start":12,"column_end":32},"name":"UniformArrayStrategy","qualname":"::array::UniformArrayStrategy","value":"UniformArrayStrategy {  }","parent":null,"children":[{"krate":0,"index":4057},{"krate":0,"index":4058}],"decl_id":null,"docs":" A `Strategy` which generates fixed-size arrays containing values drawn from\n an inner strategy.","sig":null,"attributes":[{"value":"/ A `Strategy` which generates fixed-size arrays containing values drawn from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173104,"byte_end":173183,"line_start":26,"line_end":26,"column_start":1,"column_end":80}},{"value":"/ an inner strategy.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173184,"byte_end":173206,"line_start":27,"line_end":27,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173207,"byte_end":173210,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ `T` must be an array type of length 1 to 32 whose values are produced by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173211,"byte_end":173287,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ strategy `S`. Instances of this type are normally created by the various","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173288,"byte_end":173364,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ `uniformXX` functions in this module.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173365,"byte_end":173406,"line_start":31,"line_end":31,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173407,"byte_end":173410,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ This is mainly useful when the inner strategy is not `Copy`, precluding","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173411,"byte_end":173486,"line_start":33,"line_end":33,"column_start":1,"column_end":76}},{"value":"/ expressing the strategy as `[myStrategy; 32]`, for example.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173487,"byte_end":173550,"line_start":34,"line_end":34,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173551,"byte_end":173554,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173555,"byte_end":173569,"line_start":36,"line_end":36,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173570,"byte_end":173573,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173574,"byte_end":173581,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173582,"byte_end":173611,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173612,"byte_end":173615,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ proptest! {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173616,"byte_end":173631,"line_start":41,"line_end":41,"column_start":1,"column_end":16}},{"value":"/   #[test]","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173632,"byte_end":173645,"line_start":42,"line_end":42,"column_start":1,"column_end":14}},{"value":"/   fn test_something(a in prop::array::uniform32(1u32..)) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173646,"byte_end":173708,"line_start":43,"line_end":43,"column_start":1,"column_end":63}},{"value":"/     let unexpected = [0u32;32];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173709,"byte_end":173744,"line_start":44,"line_end":44,"column_start":1,"column_end":36}},{"value":"/     // `a` is also a [u32;32], so we can compare them directly","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173745,"byte_end":173811,"line_start":45,"line_end":45,"column_start":1,"column_end":67}},{"value":"/     assert_ne!(unexpected, a);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173812,"byte_end":173846,"line_start":46,"line_end":46,"column_start":1,"column_end":35}},{"value":"/   }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173847,"byte_end":173854,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173855,"byte_end":173860,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"/ # fn main() { }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173861,"byte_end":173880,"line_start":49,"line_end":49,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173881,"byte_end":173888,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":173889,"byte_end":173938,"line_start":51,"line_end":51,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174501,"byte_end":174504,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"new","qualname":"<UniformArrayStrategy<S, T>>::new","value":"pub fn new(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Directly create a `UniformArrayStrategy`.","sig":null,"attributes":[{"value":"/ Directly create a `UniformArrayStrategy`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174102,"byte_end":174147,"line_start":59,"line_end":59,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174152,"byte_end":174155,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ This is only intended for advanced use, since the only way to specify","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174160,"byte_end":174233,"line_start":61,"line_end":61,"column_start":5,"column_end":78}},{"value":"/ the array size is with the turbofish operator and explicitly naming the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174238,"byte_end":174313,"line_start":62,"line_end":62,"column_start":5,"column_end":80}},{"value":"/ type of the values in the array and the strategy itself.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174318,"byte_end":174378,"line_start":63,"line_end":63,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174383,"byte_end":174386,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ Prefer the `uniformXX` functions at module-level unless something","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174391,"byte_end":174460,"line_start":65,"line_end":65,"column_start":5,"column_end":74}},{"value":"/ precludes their use.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174465,"byte_end":174489,"line_start":66,"line_end":66,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":4070},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174728,"byte_end":174742,"line_start":77,"line_end":77,"column_start":12,"column_end":26},"name":"ArrayValueTree","qualname":"::array::ArrayValueTree","value":"ArrayValueTree {  }","parent":null,"children":[{"krate":0,"index":4072},{"krate":0,"index":4073},{"krate":0,"index":4074}],"decl_id":null,"docs":" A `ValueTree` operating over a fixed-size array.\n","sig":null,"attributes":[{"value":"/ A `ValueTree` operating over a fixed-size array.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174634,"byte_end":174686,"line_start":75,"line_end":75,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":4083},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":177628,"byte_end":177636,"line_start":169,"line_end":169,"column_start":16,"column_end":24},"name":"uniform1","qualname":"::array::uniform1","value":"pub fn uniform1<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4111},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":177670,"byte_end":177678,"line_start":171,"line_end":171,"column_start":16,"column_end":24},"name":"uniform2","qualname":"::array::uniform2","value":"pub fn uniform2<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4139},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":177715,"byte_end":177723,"line_start":173,"line_end":173,"column_start":16,"column_end":24},"name":"uniform3","qualname":"::array::uniform3","value":"pub fn uniform3<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4167},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":177763,"byte_end":177771,"line_start":175,"line_end":175,"column_start":16,"column_end":24},"name":"uniform4","qualname":"::array::uniform4","value":"pub fn uniform4<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4195},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":177814,"byte_end":177822,"line_start":177,"line_end":177,"column_start":16,"column_end":24},"name":"uniform5","qualname":"::array::uniform5","value":"pub fn uniform5<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4223},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":177868,"byte_end":177876,"line_start":179,"line_end":179,"column_start":16,"column_end":24},"name":"uniform6","qualname":"::array::uniform6","value":"pub fn uniform6<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4251},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":177925,"byte_end":177933,"line_start":181,"line_end":181,"column_start":16,"column_end":24},"name":"uniform7","qualname":"::array::uniform7","value":"pub fn uniform7<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4279},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":177985,"byte_end":177993,"line_start":183,"line_end":183,"column_start":16,"column_end":24},"name":"uniform8","qualname":"::array::uniform8","value":"pub fn uniform8<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4307},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":178048,"byte_end":178056,"line_start":185,"line_end":185,"column_start":16,"column_end":24},"name":"uniform9","qualname":"::array::uniform9","value":"pub fn uniform9<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4335},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":178115,"byte_end":178124,"line_start":187,"line_end":187,"column_start":17,"column_end":26},"name":"uniform10","qualname":"::array::uniform10","value":"pub fn uniform10<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4363},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":178186,"byte_end":178195,"line_start":189,"line_end":189,"column_start":17,"column_end":26},"name":"uniform11","qualname":"::array::uniform11","value":"pub fn uniform11<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4391},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":178261,"byte_end":178270,"line_start":191,"line_end":191,"column_start":17,"column_end":26},"name":"uniform12","qualname":"::array::uniform12","value":"pub fn uniform12<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4419},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":178340,"byte_end":178349,"line_start":193,"line_end":193,"column_start":17,"column_end":26},"name":"uniform13","qualname":"::array::uniform13","value":"pub fn uniform13<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4447},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":178423,"byte_end":178432,"line_start":195,"line_end":195,"column_start":17,"column_end":26},"name":"uniform14","qualname":"::array::uniform14","value":"pub fn uniform14<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4475},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":178510,"byte_end":178519,"line_start":197,"line_end":197,"column_start":17,"column_end":26},"name":"uniform15","qualname":"::array::uniform15","value":"pub fn uniform15<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4503},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":178601,"byte_end":178610,"line_start":199,"line_end":199,"column_start":17,"column_end":26},"name":"uniform16","qualname":"::array::uniform16","value":"pub fn uniform16<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4531},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":178696,"byte_end":178705,"line_start":201,"line_end":201,"column_start":17,"column_end":26},"name":"uniform17","qualname":"::array::uniform17","value":"pub fn uniform17<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4559},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":178795,"byte_end":178804,"line_start":203,"line_end":203,"column_start":17,"column_end":26},"name":"uniform18","qualname":"::array::uniform18","value":"pub fn uniform18<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4587},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":178898,"byte_end":178907,"line_start":205,"line_end":205,"column_start":17,"column_end":26},"name":"uniform19","qualname":"::array::uniform19","value":"pub fn uniform19<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4615},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":179018,"byte_end":179027,"line_start":208,"line_end":208,"column_start":17,"column_end":26},"name":"uniform20","qualname":"::array::uniform20","value":"pub fn uniform20<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4643},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":179142,"byte_end":179151,"line_start":211,"line_end":211,"column_start":17,"column_end":26},"name":"uniform21","qualname":"::array::uniform21","value":"pub fn uniform21<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4671},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":179270,"byte_end":179279,"line_start":214,"line_end":214,"column_start":17,"column_end":26},"name":"uniform22","qualname":"::array::uniform22","value":"pub fn uniform22<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4699},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":179402,"byte_end":179411,"line_start":217,"line_end":217,"column_start":17,"column_end":26},"name":"uniform23","qualname":"::array::uniform23","value":"pub fn uniform23<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4727},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":179538,"byte_end":179547,"line_start":220,"line_end":220,"column_start":17,"column_end":26},"name":"uniform24","qualname":"::array::uniform24","value":"pub fn uniform24<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4755},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":179678,"byte_end":179687,"line_start":223,"line_end":223,"column_start":17,"column_end":26},"name":"uniform25","qualname":"::array::uniform25","value":"pub fn uniform25<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4783},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":179822,"byte_end":179831,"line_start":226,"line_end":226,"column_start":17,"column_end":26},"name":"uniform26","qualname":"::array::uniform26","value":"pub fn uniform26<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4811},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":179970,"byte_end":179979,"line_start":229,"line_end":229,"column_start":17,"column_end":26},"name":"uniform27","qualname":"::array::uniform27","value":"pub fn uniform27<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4839},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":180122,"byte_end":180131,"line_start":232,"line_end":232,"column_start":17,"column_end":26},"name":"uniform28","qualname":"::array::uniform28","value":"pub fn uniform28<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4867},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":180278,"byte_end":180287,"line_start":235,"line_end":235,"column_start":17,"column_end":26},"name":"uniform29","qualname":"::array::uniform29","value":"pub fn uniform29<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4895},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":180438,"byte_end":180447,"line_start":238,"line_end":238,"column_start":17,"column_end":26},"name":"uniform30","qualname":"::array::uniform30","value":"pub fn uniform30<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4923},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":180602,"byte_end":180611,"line_start":241,"line_end":241,"column_start":17,"column_end":26},"name":"uniform31","qualname":"::array::uniform31","value":"pub fn uniform31<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4951},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":180770,"byte_end":180779,"line_start":244,"line_end":244,"column_start":17,"column_end":26},"name":"uniform32","qualname":"::array::uniform32","value":"pub fn uniform32<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174898,"byte_end":174952,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174961,"byte_end":174964,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174973,"byte_end":175041,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175050,"byte_end":175120,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175129,"byte_end":175155,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175164,"byte_end":175167,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175176,"byte_end":175246,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":175255,"byte_end":175273,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":503},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bits","qualname":"::bits","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":8738},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":4979},{"krate":0,"index":4986},{"krate":0,"index":4993},{"krate":0,"index":5000},{"krate":0,"index":5007},{"krate":0,"index":5014},{"krate":0,"index":5021},{"krate":0,"index":5028},{"krate":0,"index":5035},{"krate":0,"index":5042},{"krate":0,"index":526},{"krate":0,"index":533},{"krate":0,"index":5049},{"krate":0,"index":5059},{"krate":0,"index":5057},{"krate":0,"index":5054},{"krate":0,"index":541},{"krate":0,"index":545},{"krate":0,"index":5062},{"krate":0,"index":5070},{"krate":0,"index":5067},{"krate":0,"index":551},{"krate":0,"index":556},{"krate":0,"index":5073},{"krate":0,"index":5084},{"krate":0,"index":5082},{"krate":0,"index":5079},{"krate":0,"index":561},{"krate":0,"index":5087},{"krate":0,"index":5095},{"krate":0,"index":5103},{"krate":0,"index":5111},{"krate":0,"index":5119},{"krate":0,"index":5127},{"krate":0,"index":5135},{"krate":0,"index":5143},{"krate":0,"index":5151},{"krate":0,"index":5158},{"krate":0,"index":5165},{"krate":0,"index":5172},{"krate":0,"index":569},{"krate":0,"index":591}],"decl_id":null,"docs":" Strategies for working with bit sets.","sig":null,"attributes":[{"value":"/ Strategies for working with bit sets.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":182531,"byte_end":182572,"line_start":10,"line_end":10,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":182573,"byte_end":182576,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Besides `BitSet` itself, this also defines strategies for all the primitive","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":182577,"byte_end":182656,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ integer types. These strategies are appropriate for integers which are used","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":182657,"byte_end":182736,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ as bit flags, etc; e.g., where the most reasonable simplification of `64`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":182737,"byte_end":182814,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ is `0` (clearing one bit) and not `63` (clearing one bit but setting 6","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":182815,"byte_end":182889,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ others). For integers treated as numeric values, see the corresponding","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":182890,"byte_end":182964,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"/ modules of the `num` module instead.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":182965,"byte_end":183005,"line_start":17,"line_end":17,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":518},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":183447,"byte_end":183457,"line_start":34,"line_end":34,"column_start":11,"column_end":21},"name":"BitSetLike","qualname":"::bits::BitSetLike","value":"BitSetLike: Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524}],"decl_id":null,"docs":" Trait for types which can be handled with `BitSetStrategy`.\n","sig":null,"attributes":[{"value":"/ Trait for types which can be handled with `BitSetStrategy`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":183306,"byte_end":183369,"line_start":32,"line_end":32,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":183590,"byte_end":183600,"line_start":37,"line_end":37,"column_start":8,"column_end":18},"name":"new_bitset","qualname":"::bits::BitSetLike::new_bitset","value":"pub fn new_bitset(usize) -> Self","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":" Create a new value of `Self` with space for up to `max` bits, all\n initialised to zero.\n","sig":null,"attributes":[{"value":"/ Create a new value of `Self` with space for up to `max` bits, all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":183484,"byte_end":183553,"line_start":35,"line_end":35,"column_start":5,"column_end":74}},{"value":"/ initialised to zero.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":183558,"byte_end":183582,"line_start":36,"line_end":36,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":183695,"byte_end":183698,"line_start":39,"line_end":39,"column_start":8,"column_end":11},"name":"len","qualname":"::bits::BitSetLike::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":" Return an upper bound on the greatest bit set _plus one_.\n","sig":null,"attributes":[{"value":"/ Return an upper bound on the greatest bit set _plus one_.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":183626,"byte_end":183687,"line_start":38,"line_end":38,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":183766,"byte_end":183770,"line_start":41,"line_end":41,"column_start":8,"column_end":12},"name":"test","qualname":"::bits::BitSetLike::test","value":"pub fn test(&Self, usize) -> bool","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":" Test whether the given bit is set.\n","sig":null,"attributes":[{"value":"/ Test whether the given bit is set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":183720,"byte_end":183758,"line_start":40,"line_end":40,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":183832,"byte_end":183835,"line_start":43,"line_end":43,"column_start":8,"column_end":11},"name":"set","qualname":"::bits::BitSetLike::set","value":"pub fn set(&mut Self, usize)","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":" Set the given bit.\n","sig":null,"attributes":[{"value":"/ Set the given bit.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":183802,"byte_end":183824,"line_start":42,"line_end":42,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":183895,"byte_end":183900,"line_start":45,"line_end":45,"column_start":8,"column_end":13},"name":"clear","qualname":"::bits::BitSetLike::clear","value":"pub fn clear(&mut Self, usize)","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":" Clear the given bit.\n","sig":null,"attributes":[{"value":"/ Clear the given bit.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":183863,"byte_end":183887,"line_start":44,"line_end":44,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":184158,"byte_end":184163,"line_start":51,"line_end":51,"column_start":8,"column_end":13},"name":"count","qualname":"::bits::BitSetLike::count","value":"pub fn count(&Self) -> usize","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":" Return the number of bits set.","sig":null,"attributes":[{"value":"/ Return the number of bits set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":183928,"byte_end":183962,"line_start":46,"line_end":46,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":183967,"byte_end":183970,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ This has a default for backwards compatibility, which simply does a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":183975,"byte_end":184046,"line_start":48,"line_end":48,"column_start":5,"column_end":76}},{"value":"/ linear scan through the bits. Implementations are strongly encouraged","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":184051,"byte_end":184124,"line_start":49,"line_end":49,"column_start":5,"column_end":78}},{"value":"/ to override this.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":184129,"byte_end":184150,"line_start":50,"line_end":50,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":5049},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":186623,"byte_end":186637,"line_start":166,"line_end":166,"column_start":12,"column_end":26},"name":"BitSetStrategy","qualname":"::bits::BitSetStrategy","value":"BitSetStrategy {  }","parent":null,"children":[{"krate":0,"index":5051},{"krate":0,"index":5052},{"krate":0,"index":5053}],"decl_id":null,"docs":" Generates values as a set of bits between the two bounds.","sig":null,"attributes":[{"value":"/ Generates values as a set of bits between the two bounds.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":186335,"byte_end":186396,"line_start":160,"line_end":160,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":186397,"byte_end":186400,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ Values are generated by uniformly setting individual bits to 0","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":186401,"byte_end":186467,"line_start":162,"line_end":162,"column_start":1,"column_end":67}},{"value":"/ or 1 between the bounds. Shrinking iteratively clears bits.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":186468,"byte_end":186531,"line_start":163,"line_end":163,"column_start":1,"column_end":64}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":186532,"byte_end":186581,"line_start":164,"line_end":164,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":187022,"byte_end":187025,"line_start":178,"line_end":178,"column_start":12,"column_end":15},"name":"new","qualname":"<BitSetStrategy<T>>::new","value":"pub fn new(usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy which generates values where bits between `min`\n (inclusive) and `max` (exclusive) may be set.","sig":null,"attributes":[{"value":"/ Create a strategy which generates values where bits between `min`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":186755,"byte_end":186824,"line_start":173,"line_end":173,"column_start":5,"column_end":74}},{"value":"/ (inclusive) and `max` (exclusive) may be set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":186829,"byte_end":186878,"line_start":174,"line_end":174,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":186883,"byte_end":186886,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Due to the generics, the functions in the typed submodules are usually","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":186891,"byte_end":186965,"line_start":176,"line_end":176,"column_start":5,"column_end":79}},{"value":"/ preferable to calling this directly.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":186970,"byte_end":187010,"line_start":177,"line_end":177,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":187291,"byte_end":187297,"line_start":188,"line_end":188,"column_start":12,"column_end":18},"name":"masked","qualname":"<BitSetStrategy<T>>::masked","value":"pub fn masked(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy which generates values where any bits set (and only\n those bits) in `mask` may be set.\n","sig":null,"attributes":[{"value":"/ Create a strategy which generates values where any bits set (and only","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":187164,"byte_end":187237,"line_start":186,"line_end":186,"column_start":5,"column_end":78}},{"value":"/ those bits) in `mask` may be set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":187242,"byte_end":187279,"line_start":187,"line_end":187,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":5062},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188464,"byte_end":188485,"line_start":229,"line_end":229,"column_start":12,"column_end":33},"name":"SampledBitSetStrategy","qualname":"::bits::SampledBitSetStrategy","value":"SampledBitSetStrategy {  }","parent":null,"children":[{"krate":0,"index":5064},{"krate":0,"index":5065},{"krate":0,"index":5066}],"decl_id":null,"docs":" Generates bit sets with a particular number of bits set.","sig":null,"attributes":[{"value":"/ Generates bit sets with a particular number of bits set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188040,"byte_end":188100,"line_start":220,"line_end":220,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188101,"byte_end":188104,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ Specifically, this strategy is given both a size range and a bit range. To","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188105,"byte_end":188183,"line_start":222,"line_end":222,"column_start":1,"column_end":79}},{"value":"/ produce a new value, it selects a size, then uniformly selects that many","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188184,"byte_end":188260,"line_start":223,"line_end":223,"column_start":1,"column_end":77}},{"value":"/ bits from within the bit range.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188261,"byte_end":188296,"line_start":224,"line_end":224,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188297,"byte_end":188300,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ Shrinking happens as with [`BitSetStrategy`](struct.BitSetStrategy.html).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188301,"byte_end":188378,"line_start":226,"line_end":226,"column_start":1,"column_end":78}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188403,"byte_end":188452,"line_start":228,"line_end":228,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":189102,"byte_end":189105,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"new","qualname":"<SampledBitSetStrategy<T>>::new","value":"pub fn new<impl Into<SizeRange>: Into<SizeRange>,\n           impl Into<SizeRange>: Into<SizeRange>>(impl Into<SizeRange>,\n                                                  impl Into<SizeRange>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy which generates values where bits within the bounds\n given by `bits` may be set. The number of bits that are set is chosen\n to be in the range given by `size`.","sig":null,"attributes":[{"value":"/ Create a strategy which generates values where bits within the bounds","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188628,"byte_end":188701,"line_start":236,"line_end":236,"column_start":5,"column_end":78}},{"value":"/ given by `bits` may be set. The number of bits that are set is chosen","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188706,"byte_end":188779,"line_start":237,"line_end":237,"column_start":5,"column_end":78}},{"value":"/ to be in the range given by `size`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188784,"byte_end":188823,"line_start":238,"line_end":238,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188828,"byte_end":188831,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ Due to the generics, the functions in the typed submodules are usually","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188836,"byte_end":188910,"line_start":240,"line_end":240,"column_start":5,"column_end":79}},{"value":"/ preferable to calling this directly.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188915,"byte_end":188955,"line_start":241,"line_end":241,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188960,"byte_end":188963,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188968,"byte_end":188981,"line_start":243,"line_end":243,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188986,"byte_end":188989,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Panics if `size` includes a value that is greater than the number of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188994,"byte_end":189066,"line_start":245,"line_end":245,"column_start":5,"column_end":77}},{"value":"/ bits in `bits`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":189071,"byte_end":189090,"line_start":246,"line_end":246,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5073},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":190612,"byte_end":190627,"line_start":299,"line_end":299,"column_start":12,"column_end":27},"name":"BitSetValueTree","qualname":"::bits::BitSetValueTree","value":"BitSetValueTree {  }","parent":null,"children":[{"krate":0,"index":5075},{"krate":0,"index":5076},{"krate":0,"index":5077},{"krate":0,"index":5078}],"decl_id":null,"docs":" Value tree produced by `BitSetStrategy` and `SampledBitSetStrategy`.\n","sig":null,"attributes":[{"value":"/ Value tree produced by `BitSetStrategy` and `SampledBitSetStrategy`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":190498,"byte_end":190570,"line_start":297,"line_end":297,"column_start":1,"column_end":73}}]},{"kind":"Mod","id":{"krate":0,"index":5087},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":193075,"byte_end":193077,"line_start":386,"line_end":386,"column_start":10,"column_end":12},"name":"u8","qualname":"::bits::u8","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","parent":null,"children":[{"krate":0,"index":5088},{"krate":0,"index":5089},{"krate":0,"index":5090},{"krate":0,"index":5091},{"krate":0,"index":5092}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":191653,"byte_end":191675,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5095},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":193092,"byte_end":193095,"line_start":387,"line_end":387,"column_start":10,"column_end":13},"name":"u16","qualname":"::bits::u16","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","parent":null,"children":[{"krate":0,"index":5096},{"krate":0,"index":5097},{"krate":0,"index":5098},{"krate":0,"index":5099},{"krate":0,"index":5100}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":191653,"byte_end":191675,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5103},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":193111,"byte_end":193114,"line_start":388,"line_end":388,"column_start":10,"column_end":13},"name":"u32","qualname":"::bits::u32","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","parent":null,"children":[{"krate":0,"index":5104},{"krate":0,"index":5105},{"krate":0,"index":5106},{"krate":0,"index":5107},{"krate":0,"index":5108}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":191653,"byte_end":191675,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5111},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":193130,"byte_end":193133,"line_start":389,"line_end":389,"column_start":10,"column_end":13},"name":"u64","qualname":"::bits::u64","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","parent":null,"children":[{"krate":0,"index":5112},{"krate":0,"index":5113},{"krate":0,"index":5114},{"krate":0,"index":5115},{"krate":0,"index":5116}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":191653,"byte_end":191675,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5119},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":193149,"byte_end":193151,"line_start":390,"line_end":390,"column_start":10,"column_end":12},"name":"i8","qualname":"::bits::i8","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","parent":null,"children":[{"krate":0,"index":5120},{"krate":0,"index":5121},{"krate":0,"index":5122},{"krate":0,"index":5123},{"krate":0,"index":5124}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":191653,"byte_end":191675,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5127},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":193166,"byte_end":193169,"line_start":391,"line_end":391,"column_start":10,"column_end":13},"name":"i16","qualname":"::bits::i16","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","parent":null,"children":[{"krate":0,"index":5128},{"krate":0,"index":5129},{"krate":0,"index":5130},{"krate":0,"index":5131},{"krate":0,"index":5132}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":191653,"byte_end":191675,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5135},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":193185,"byte_end":193188,"line_start":392,"line_end":392,"column_start":10,"column_end":13},"name":"i32","qualname":"::bits::i32","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","parent":null,"children":[{"krate":0,"index":5136},{"krate":0,"index":5137},{"krate":0,"index":5138},{"krate":0,"index":5139},{"krate":0,"index":5140}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":191653,"byte_end":191675,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5143},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":193204,"byte_end":193207,"line_start":393,"line_end":393,"column_start":10,"column_end":13},"name":"i64","qualname":"::bits::i64","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","parent":null,"children":[{"krate":0,"index":5144},{"krate":0,"index":5145},{"krate":0,"index":5146},{"krate":0,"index":5147},{"krate":0,"index":5148}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":191653,"byte_end":191675,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5151},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":194480,"byte_end":194485,"line_start":430,"line_end":430,"column_start":14,"column_end":19},"name":"usize","qualname":"::bits::usize","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","parent":null,"children":[{"krate":0,"index":5152},{"krate":0,"index":5153},{"krate":0,"index":5154},{"krate":0,"index":5155}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":193280,"byte_end":193302,"line_start":397,"line_end":397,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5158},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":194508,"byte_end":194513,"line_start":431,"line_end":431,"column_start":14,"column_end":19},"name":"isize","qualname":"::bits::isize","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","parent":null,"children":[{"krate":0,"index":5159},{"krate":0,"index":5160},{"krate":0,"index":5161},{"krate":0,"index":5162}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":193280,"byte_end":193302,"line_start":397,"line_end":397,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5165},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":194564,"byte_end":194570,"line_start":433,"line_end":433,"column_start":14,"column_end":20},"name":"bitset","qualname":"::bits::bitset","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","parent":null,"children":[{"krate":0,"index":5166},{"krate":0,"index":5167},{"krate":0,"index":5168},{"krate":0,"index":5169}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":193280,"byte_end":193302,"line_start":397,"line_end":397,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5172},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":194594,"byte_end":194602,"line_start":434,"line_end":434,"column_start":14,"column_end":22},"name":"bool_vec","qualname":"::bits::bool_vec","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","parent":null,"children":[{"krate":0,"index":5173},{"krate":0,"index":5174},{"krate":0,"index":5175},{"krate":0,"index":5176}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":193280,"byte_end":193302,"line_start":397,"line_end":397,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":592},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bool","qualname":"::bool","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":5186},{"krate":0,"index":5192},{"krate":0,"index":5191},{"krate":0,"index":5189},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":601},{"krate":0,"index":5194},{"krate":0,"index":5200},{"krate":0,"index":5199},{"krate":0,"index":5197},{"krate":0,"index":602},{"krate":0,"index":5202},{"krate":0,"index":5208},{"krate":0,"index":5207},{"krate":0,"index":5205},{"krate":0,"index":5210},{"krate":0,"index":5223},{"krate":0,"index":5222},{"krate":0,"index":5220},{"krate":0,"index":5217},{"krate":0,"index":5218},{"krate":0,"index":606},{"krate":0,"index":608}],"decl_id":null,"docs":" Strategies for generating `bool` values.\n","sig":null,"attributes":[{"value":"/ Strategies for generating `bool` values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":201484,"byte_end":201528,"line_start":10,"line_end":10,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":5186},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":201675,"byte_end":201678,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"Any","qualname":"::bool::Any","value":"","parent":null,"children":[],"decl_id":null,"docs":" The type of the `ANY` constant.\n","sig":null,"attributes":[{"value":"/ The type of the `ANY` constant.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":201598,"byte_end":201633,"line_start":17,"line_end":17,"column_start":1,"column_end":36}}]},{"kind":"Const","id":{"krate":0,"index":596},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":201799,"byte_end":201802,"line_start":24,"line_end":24,"column_start":11,"column_end":14},"name":"ANY","qualname":"::bool::ANY","value":"Any","parent":null,"children":[],"decl_id":null,"docs":" Generates boolean values by picking `true` or `false` uniformly.","sig":null,"attributes":[{"value":"/ Generates boolean values by picking `true` or `false` uniformly.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":201685,"byte_end":201753,"line_start":21,"line_end":21,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":201754,"byte_end":201757,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Shrinks `true` to `false`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":201758,"byte_end":201788,"line_start":23,"line_end":23,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":601},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":202189,"byte_end":202197,"line_start":39,"line_end":39,"column_start":8,"column_end":16},"name":"weighted","qualname":"::bool::weighted","value":"pub fn weighted(f64) -> Weighted","parent":null,"children":[],"decl_id":null,"docs":" Generates boolean values by picking `true` with the given `probability`\n (1.0 = always true, 0.0 = always false).","sig":null,"attributes":[{"value":"/ Generates boolean values by picking `true` with the given `probability`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":202026,"byte_end":202101,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ (1.0 = always true, 0.0 = always false).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":202102,"byte_end":202146,"line_start":36,"line_end":36,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":202147,"byte_end":202150,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Shrinks `true` to `false`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":202151,"byte_end":202181,"line_start":38,"line_end":38,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":5194},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":202389,"byte_end":202397,"line_start":46,"line_end":46,"column_start":12,"column_end":20},"name":"Weighted","qualname":"::bool::Weighted","value":"","parent":null,"children":[],"decl_id":null,"docs":" The return type from `weighted()`.\n","sig":null,"attributes":[{"value":"/ The return type from `weighted()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":202259,"byte_end":202297,"line_start":43,"line_end":43,"column_start":1,"column_end":39}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":202298,"byte_end":202347,"line_start":44,"line_end":44,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":5202},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":202717,"byte_end":202730,"line_start":59,"line_end":59,"column_start":12,"column_end":25},"name":"BoolValueTree","qualname":"::bool::BoolValueTree","value":"BoolValueTree {  }","parent":null,"children":[{"krate":0,"index":5203},{"krate":0,"index":5204}],"decl_id":null,"docs":" The `ValueTree` to shrink booleans to false.\n","sig":null,"attributes":[{"value":"/ The `ValueTree` to shrink booleans to false.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":202627,"byte_end":202675,"line_start":57,"line_end":57,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":613},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"char","qualname":"::char","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","parent":null,"children":[{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":625},{"krate":0,"index":5225},{"krate":0,"index":5233},{"krate":0,"index":5230},{"krate":0,"index":630},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":5236},{"krate":0,"index":5241},{"krate":0,"index":5239},{"krate":0,"index":5238},{"krate":0,"index":638},{"krate":0,"index":643},{"krate":0,"index":645}],"decl_id":null,"docs":" Strategies for generating `char` values.","sig":null,"attributes":[{"value":"/ Strategies for generating `char` values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":205042,"byte_end":205086,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":205087,"byte_end":205090,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Unlike most strategies in Proptest, character generation is by default","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":205091,"byte_end":205165,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ biased to particular values known to be difficult to handle in various","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":205166,"byte_end":205240,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ circumstances.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":205241,"byte_end":205259,"line_start":14,"line_end":14,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":205260,"byte_end":205263,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ The main things of interest are `any()` to generate truly arbitrary","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":205264,"byte_end":205335,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/ characters, and `range()` and `ranges()` to select characters from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":205336,"byte_end":205406,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"/ inclusive ranges.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":205407,"byte_end":205428,"line_start":18,"line_end":18,"column_start":1,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":621},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":205885,"byte_end":205906,"line_start":37,"line_end":37,"column_start":11,"column_end":32},"name":"DEFAULT_SPECIAL_CHARS","qualname":"::char::DEFAULT_SPECIAL_CHARS","value":"&[char]","parent":null,"children":[],"decl_id":null,"docs":" A default set of characters to consider as \"special\" during character\n generation.","sig":null,"attributes":[{"value":"/ A default set of characters to consider as \"special\" during character","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":205659,"byte_end":205732,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ generation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":205733,"byte_end":205748,"line_start":33,"line_end":33,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":205749,"byte_end":205752,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Most of the characters here were chosen specifically because they are","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":205753,"byte_end":205826,"line_start":35,"line_end":35,"column_start":1,"column_end":74}},{"value":"/ difficult to handle in particular contexts.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":205827,"byte_end":205874,"line_start":36,"line_end":36,"column_start":1,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":622},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":206801,"byte_end":206825,"line_start":57,"line_end":57,"column_start":11,"column_end":35},"name":"DEFAULT_PREFERRED_RANGES","qualname":"::char::DEFAULT_PREFERRED_RANGES","value":"&[CharRange]","parent":null,"children":[],"decl_id":null,"docs":" A default sequence of ranges used preferentially when generating random\n characters.\n","sig":null,"attributes":[{"value":"/ A default sequence of ranges used preferentially when generating random","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":206699,"byte_end":206774,"line_start":55,"line_end":55,"column_start":1,"column_end":76}},{"value":"/ characters.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":206775,"byte_end":206790,"line_start":56,"line_end":56,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":623},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":208223,"byte_end":208234,"line_start":93,"line_end":93,"column_start":8,"column_end":19},"name":"select_char","qualname":"::char::select_char","value":"pub fn select_char<impl Rng: Rng>(&mut impl Rng, &[char], &[CharRange],\n                                  &[CharRange]) -> char","parent":null,"children":[],"decl_id":null,"docs":" Selects a random character the way `CharStrategy` does.","sig":null,"attributes":[{"value":"/ Selects a random character the way `CharStrategy` does.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":206991,"byte_end":207050,"line_start":68,"line_end":68,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207051,"byte_end":207054,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ If `special` is non-empty, there is a 50% chance that a character from this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207055,"byte_end":207134,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/ array is chosen randomly, and will be returned if that character falls","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207135,"byte_end":207209,"line_start":71,"line_end":71,"column_start":1,"column_end":75}},{"value":"/ within `ranges`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207210,"byte_end":207230,"line_start":72,"line_end":72,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207231,"byte_end":207234,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ If `preferred` is non-empty, there is a 50% chance that any generation","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207235,"byte_end":207309,"line_start":74,"line_end":74,"column_start":1,"column_end":75}},{"value":"/ which gets past the `special` step picks a random element from this list,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207310,"byte_end":207387,"line_start":75,"line_end":75,"column_start":1,"column_end":78}},{"value":"/ then a random character from within that range (both endpoints inclusive).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207388,"byte_end":207466,"line_start":76,"line_end":76,"column_start":1,"column_end":79}},{"value":"/ That character will be returned if it falls within `ranges`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207467,"byte_end":207531,"line_start":77,"line_end":77,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207532,"byte_end":207535,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ In all other cases, an element is picked randomly from `ranges` and a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207536,"byte_end":207609,"line_start":79,"line_end":79,"column_start":1,"column_end":74}},{"value":"/ random character within the range (both endpoints inclusive) is chosen and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207610,"byte_end":207688,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/ returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207689,"byte_end":207702,"line_start":81,"line_end":81,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207703,"byte_end":207706,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ Notice that in all cases, `ranges` completely defines the set of characters","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207707,"byte_end":207786,"line_start":83,"line_end":83,"column_start":1,"column_end":80}},{"value":"/ that can possibly be defined.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207787,"byte_end":207820,"line_start":84,"line_end":84,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207821,"byte_end":207824,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ It is legal for ranges in all cases to contain non-characters.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207825,"byte_end":207891,"line_start":86,"line_end":86,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207892,"byte_end":207895,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ Both `preferred` and `ranges` bias selection towards characters in smaller","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207896,"byte_end":207974,"line_start":88,"line_end":88,"column_start":1,"column_end":79}},{"value":"/ ranges. This is deliberate. `preferred` is usually tuned to select","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":207975,"byte_end":208045,"line_start":89,"line_end":89,"column_start":1,"column_end":71}},{"value":"/ particular characters anyway. `ranges` is usually derived from some","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":208046,"byte_end":208117,"line_start":90,"line_end":90,"column_start":1,"column_end":72}},{"value":"/ external property, and the fact that a range is small often means it is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":208118,"byte_end":208193,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/ more interesting.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":208194,"byte_end":208215,"line_start":92,"line_end":92,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":5225},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":211375,"byte_end":211387,"line_start":173,"line_end":173,"column_start":12,"column_end":24},"name":"CharStrategy","qualname":"::char::CharStrategy","value":"CharStrategy {  }","parent":null,"children":[{"krate":0,"index":5227},{"krate":0,"index":5228},{"krate":0,"index":5229}],"decl_id":null,"docs":" Strategy for generating `char`s.","sig":null,"attributes":[{"value":"/ Strategy for generating `char`s.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":209879,"byte_end":209915,"line_start":147,"line_end":147,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":209916,"byte_end":209919,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ Character selection is more sophisticated than integer selection. Naïve","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":209920,"byte_end":209996,"line_start":149,"line_end":149,"column_start":1,"column_end":76}},{"value":"/ selection (particularly in the larger context of generating strings) would","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":209997,"byte_end":210075,"line_start":150,"line_end":150,"column_start":1,"column_end":79}},{"value":"/ result in starting inputs like `ꂡ螧轎ቶᢹ糦狥芹ᘆ㶏曊ᒀ踔虙ჲ` and \"simplified\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":210076,"byte_end":210175,"line_start":151,"line_end":151,"column_start":1,"column_end":70}},{"value":"/ inputs consisting mostly of control characters. It also has difficulty","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":210176,"byte_end":210250,"line_start":152,"line_end":152,"column_start":1,"column_end":75}},{"value":"/ locating edge cases, since the vast majority of code points (such as the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":210251,"byte_end":210327,"line_start":153,"line_end":153,"column_start":1,"column_end":77}},{"value":"/ enormous CJK regions) don't cause problems for anything with even basic","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":210328,"byte_end":210403,"line_start":154,"line_end":154,"column_start":1,"column_end":76}},{"value":"/ Unicode support.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":210404,"byte_end":210424,"line_start":155,"line_end":155,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":210425,"byte_end":210428,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ Instead, character selection is always based on explicit ranges, and is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":210429,"byte_end":210504,"line_start":157,"line_end":157,"column_start":1,"column_end":76}},{"value":"/ designed to bias to specifically chosen characters and character ranges to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":210505,"byte_end":210583,"line_start":158,"line_end":158,"column_start":1,"column_end":79}},{"value":"/ produce inputs that are both more useful and easier for humans to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":210584,"byte_end":210653,"line_start":159,"line_end":159,"column_start":1,"column_end":70}},{"value":"/ understand. There are also hard-wired simplification targets based on ASCII","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":210654,"byte_end":210733,"line_start":160,"line_end":160,"column_start":1,"column_end":80}},{"value":"/ instead of simply simplifying towards NUL to avoid problematic inputs being","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":210734,"byte_end":210813,"line_start":161,"line_end":161,"column_start":1,"column_end":80}},{"value":"/ reduced to a bunch of NUL characters.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":210814,"byte_end":210855,"line_start":162,"line_end":162,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":210856,"byte_end":210859,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ Shrinking never crosses ranges. If you have a complex range like `[A-Za-z]`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":210860,"byte_end":210939,"line_start":164,"line_end":164,"column_start":1,"column_end":80}},{"value":"/ and the starting point `x` is chosen, it will not shrink to the first `A-Z`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":210940,"byte_end":211019,"line_start":165,"line_end":165,"column_start":1,"column_end":80}},{"value":"/ group, but rather simply to `a`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":211020,"byte_end":211056,"line_start":166,"line_end":166,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":211057,"byte_end":211060,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ The usual way to get instances of this class is with the module-level `ANY`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":211061,"byte_end":211140,"line_start":168,"line_end":168,"column_start":1,"column_end":80}},{"value":"/ constant or `range` function. Directly constructing a `CharStrategy` is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":211141,"byte_end":211216,"line_start":169,"line_end":169,"column_start":1,"column_end":76}},{"value":"/ only necessary for complex ranges or to override the default biases.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":211217,"byte_end":211289,"line_start":170,"line_end":170,"column_start":1,"column_end":73}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":211314,"byte_end":211363,"line_start":172,"line_end":172,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":211715,"byte_end":211718,"line_start":184,"line_end":184,"column_start":12,"column_end":15},"name":"new","qualname":"<CharStrategy>::new","value":"pub fn new(Cow, Cow, Cow) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `CharStrategy` with the parameters it will pass to the\n function underlying `select_char()`.","sig":null,"attributes":[{"value":"/ Construct a new `CharStrategy` with the parameters it will pass to the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":211530,"byte_end":211604,"line_start":180,"line_end":180,"column_start":5,"column_end":79}},{"value":"/ function underlying `select_char()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":211609,"byte_end":211649,"line_start":181,"line_end":181,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":211654,"byte_end":211657,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ All arguments as per `select_char()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":211662,"byte_end":211703,"line_start":183,"line_end":183,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":212043,"byte_end":212055,"line_start":197,"line_end":197,"column_start":12,"column_end":24},"name":"new_borrowed","qualname":"<CharStrategy>::new_borrowed","value":"pub fn new_borrowed(&'a [char], &'a [CharRange], &'a [CharRange]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Same as `CharStrategy::new()` but using `Cow::Borrowed` for all parts.\n","sig":null,"attributes":[{"value":"/ Same as `CharStrategy::new()` but using `Cow::Borrowed` for all parts.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":211957,"byte_end":212031,"line_start":196,"line_end":196,"column_start":5,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":635},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":212499,"byte_end":212502,"line_start":214,"line_end":214,"column_start":8,"column_end":11},"name":"any","qualname":"::char::any","value":"pub fn any() -> CharStrategy","parent":null,"children":[],"decl_id":null,"docs":" Creates a `CharStrategy` which picks from literally any character, with the\n default biases.\n","sig":null,"attributes":[{"value":"/ Creates a `CharStrategy` which picks from literally any character, with the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":212392,"byte_end":212471,"line_start":212,"line_end":212,"column_start":1,"column_end":80}},{"value":"/ default biases.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":212472,"byte_end":212491,"line_start":213,"line_end":213,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":636},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":212849,"byte_end":212854,"line_start":224,"line_end":224,"column_start":8,"column_end":13},"name":"range","qualname":"::char::range","value":"pub fn range(char, char) -> CharStrategy","parent":null,"children":[],"decl_id":null,"docs":" Creates a `CharStrategy` which selects characters within the given\n endpoints, inclusive, using the default biases.\n","sig":null,"attributes":[{"value":"/ Creates a `CharStrategy` which selects characters within the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":212719,"byte_end":212789,"line_start":222,"line_end":222,"column_start":1,"column_end":71}},{"value":"/ endpoints, inclusive, using the default biases.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":212790,"byte_end":212841,"line_start":223,"line_end":223,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":637},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":213227,"byte_end":213233,"line_start":234,"line_end":234,"column_start":8,"column_end":14},"name":"ranges","qualname":"::char::ranges","value":"pub fn ranges(Cow<, [CharRange]>) -> CharStrategy","parent":null,"children":[],"decl_id":null,"docs":" Creates a `CharStrategy` which selects characters within the given ranges,\n all inclusive, using the default biases.\n","sig":null,"attributes":[{"value":"/ Creates a `CharStrategy` which selects characters within the given ranges,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":213096,"byte_end":213174,"line_start":232,"line_end":232,"column_start":1,"column_end":79}},{"value":"/ all inclusive, using the default biases.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":213175,"byte_end":213219,"line_start":233,"line_end":233,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":5236},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":213531,"byte_end":213544,"line_start":244,"line_end":244,"column_start":12,"column_end":25},"name":"CharValueTree","qualname":"::char::CharValueTree","value":"CharValueTree {  }","parent":null,"children":[{"krate":0,"index":5237}],"decl_id":null,"docs":" The `ValueTree` corresponding to `CharStrategy`.\n","sig":null,"attributes":[{"value":"/ The `ValueTree` corresponding to `CharStrategy`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":213437,"byte_end":213489,"line_start":242,"line_end":242,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":650},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"collection","qualname":"::collection","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":8768},{"krate":0,"index":652},{"krate":0,"index":8770},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":5243},{"krate":0,"index":5258},{"krate":0,"index":5254},{"krate":0,"index":5255},{"krate":0,"index":5251},{"krate":0,"index":5252},{"krate":0,"index":5248},{"krate":0,"index":5246},{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":708},{"krate":0,"index":5260},{"krate":0,"index":5267},{"krate":0,"index":5264},{"krate":0,"index":711},{"krate":0,"index":5274},{"krate":0,"index":5279},{"krate":0,"index":5278},{"krate":0,"index":5276},{"krate":0,"index":5270},{"krate":0,"index":5289},{"krate":0,"index":5296},{"krate":0,"index":5293},{"krate":0,"index":5299},{"krate":0,"index":5306},{"krate":0,"index":5303},{"krate":0,"index":5281},{"krate":0,"index":5286},{"krate":0,"index":714},{"krate":0,"index":5316},{"krate":0,"index":5321},{"krate":0,"index":5320},{"krate":0,"index":5318},{"krate":0,"index":5312},{"krate":0,"index":5331},{"krate":0,"index":5338},{"krate":0,"index":5335},{"krate":0,"index":5341},{"krate":0,"index":5348},{"krate":0,"index":5345},{"krate":0,"index":5323},{"krate":0,"index":5328},{"krate":0,"index":717},{"krate":0,"index":5358},{"krate":0,"index":5363},{"krate":0,"index":5362},{"krate":0,"index":5360},{"krate":0,"index":5354},{"krate":0,"index":5373},{"krate":0,"index":5380},{"krate":0,"index":5377},{"krate":0,"index":5383},{"krate":0,"index":5390},{"krate":0,"index":5387},{"krate":0,"index":5365},{"krate":0,"index":5370},{"krate":0,"index":720},{"krate":0,"index":5400},{"krate":0,"index":5405},{"krate":0,"index":5404},{"krate":0,"index":5402},{"krate":0,"index":5396},{"krate":0,"index":5407},{"krate":0,"index":5413},{"krate":0,"index":5411},{"krate":0,"index":5410},{"krate":0,"index":723},{"krate":0,"index":5423},{"krate":0,"index":5430},{"krate":0,"index":5427},{"krate":0,"index":5433},{"krate":0,"index":5440},{"krate":0,"index":5437},{"krate":0,"index":5415},{"krate":0,"index":5420},{"krate":0,"index":726},{"krate":0,"index":5450},{"krate":0,"index":5455},{"krate":0,"index":5454},{"krate":0,"index":5452},{"krate":0,"index":5446},{"krate":0,"index":729},{"krate":0,"index":5465},{"krate":0,"index":5472},{"krate":0,"index":5469},{"krate":0,"index":5475},{"krate":0,"index":5482},{"krate":0,"index":5479},{"krate":0,"index":5457},{"krate":0,"index":5462},{"krate":0,"index":732},{"krate":0,"index":5493},{"krate":0,"index":5498},{"krate":0,"index":5497},{"krate":0,"index":5495},{"krate":0,"index":5488},{"krate":0,"index":735},{"krate":0,"index":5510},{"krate":0,"index":5519},{"krate":0,"index":5515},{"krate":0,"index":5523},{"krate":0,"index":5532},{"krate":0,"index":5528},{"krate":0,"index":5500},{"krate":0,"index":5506},{"krate":0,"index":739},{"krate":0,"index":5544},{"krate":0,"index":5549},{"krate":0,"index":5548},{"krate":0,"index":5546},{"krate":0,"index":5539},{"krate":0,"index":743},{"krate":0,"index":5561},{"krate":0,"index":5570},{"krate":0,"index":5566},{"krate":0,"index":5574},{"krate":0,"index":5583},{"krate":0,"index":5579},{"krate":0,"index":5551},{"krate":0,"index":5557},{"krate":0,"index":747},{"krate":0,"index":5590},{"krate":0,"index":5600},{"krate":0,"index":5599},{"krate":0,"index":5597},{"krate":0,"index":5602},{"krate":0,"index":5612},{"krate":0,"index":5609},{"krate":0,"index":751},{"krate":0,"index":756},{"krate":0,"index":762}],"decl_id":null,"docs":" Strategies for generating `std::collections` of values.\n","sig":null,"attributes":[{"value":"/ Strategies for generating `std::collections` of values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":218516,"byte_end":218575,"line_start":10,"line_end":10,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5243},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":219574,"byte_end":219583,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"name":"SizeRange","qualname":"::collection::SizeRange","value":"","parent":null,"children":[],"decl_id":null,"docs":" The minimum and maximum range/bounds on the size of a collection.\n The interval must form a subset of `[0, std::usize::MAX)`.","sig":null,"attributes":[{"value":"/ The minimum and maximum range/bounds on the size of a collection.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":219215,"byte_end":219284,"line_start":34,"line_end":34,"column_start":1,"column_end":70}},{"value":"/ The interval must form a subset of `[0, std::usize::MAX)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":219285,"byte_end":219347,"line_start":35,"line_end":35,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":219348,"byte_end":219351,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ A value like `0..=std::usize::MAX` will still be accepted but will silently","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":219352,"byte_end":219431,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ truncate the maximum to `std::usize::MAX - 1`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":219432,"byte_end":219482,"line_start":38,"line_end":38,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":219483,"byte_end":219486,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ The `Default` is `0..100`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":219487,"byte_end":219517,"line_start":40,"line_end":40,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":678},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":219678,"byte_end":219688,"line_start":45,"line_end":45,"column_start":8,"column_end":18},"name":"size_range","qualname":"::collection::size_range","value":"pub fn size_range<impl Into<SizeRange>: Into<SizeRange>>(impl Into<SizeRange>)\n-> SizeRange","parent":null,"children":[],"decl_id":null,"docs":" Creates a `SizeRange` from some value that is convertible into it.\n","sig":null,"attributes":[{"value":"/ Creates a `SizeRange` from some value that is convertible into it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":219600,"byte_end":219670,"line_start":44,"line_end":44,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":220003,"byte_end":220006,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"new","qualname":"<SizeRange>::new","value":"pub fn new(RangeInclusive<usize>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `SizeBounds` from a `RangeInclusive<usize>`.\n","sig":null,"attributes":[{"value":"/ Creates a `SizeBounds` from a `RangeInclusive<usize>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":219933,"byte_end":219991,"line_start":57,"line_end":57,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":220379,"byte_end":220383,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"with","qualname":"<SizeRange>::with","value":"pub fn with<X>(Self, X) -> (Self, X)","parent":null,"children":[],"decl_id":null,"docs":" Merges self together with some other argument producing a product\n type expected by some impelementations of `A: Arbitrary` in\n `A::Parameters`. This can be more ergonomic to work with and may\n help type inference.\n","sig":null,"attributes":[{"value":"/ Merges self together with some other argument producing a product","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":220128,"byte_end":220197,"line_start":64,"line_end":64,"column_start":5,"column_end":74}},{"value":"/ type expected by some impelementations of `A: Arbitrary` in","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":220202,"byte_end":220265,"line_start":65,"line_end":65,"column_start":5,"column_end":68}},{"value":"/ `A::Parameters`. This can be more ergonomic to work with and may","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":220270,"byte_end":220338,"line_start":66,"line_end":66,"column_start":5,"column_end":73}},{"value":"/ help type inference.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":220343,"byte_end":220367,"line_start":67,"line_end":67,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":220755,"byte_end":220759,"line_start":76,"line_end":76,"column_start":12,"column_end":16},"name":"lift","qualname":"<SizeRange>::lift","value":"pub fn lift<X: Default>(Self) -> (Self, X)","parent":null,"children":[],"decl_id":null,"docs":" Merges self together with some other argument generated with a\n default value producing a product type expected by some\n impelementations of `A: Arbitrary` in `A::Parameters`.\n This can be more ergonomic to work with and may help type inference.\n","sig":null,"attributes":[{"value":"/ Merges self together with some other argument generated with a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":220473,"byte_end":220539,"line_start":72,"line_end":72,"column_start":5,"column_end":71}},{"value":"/ default value producing a product type expected by some","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":220544,"byte_end":220603,"line_start":73,"line_end":73,"column_start":5,"column_end":64}},{"value":"/ impelementations of `A: Arbitrary` in `A::Parameters`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":220608,"byte_end":220666,"line_start":74,"line_end":74,"column_start":5,"column_end":63}},{"value":"/ This can be more ergonomic to work with and may help type inference.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":220671,"byte_end":220743,"line_start":75,"line_end":75,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":5260},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":224117,"byte_end":224128,"line_start":199,"line_end":199,"column_start":12,"column_end":23},"name":"VecStrategy","qualname":"::collection::VecStrategy","value":"VecStrategy {  }","parent":null,"children":[{"krate":0,"index":5262},{"krate":0,"index":5263}],"decl_id":null,"docs":" Strategy to create `Vec`s with a length in a certain range.","sig":null,"attributes":[{"value":"/ Strategy to create `Vec`s with a length in a certain range.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":223908,"byte_end":223971,"line_start":194,"line_end":194,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":223972,"byte_end":223975,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ Created by the `vec()` function in the same module.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":223976,"byte_end":224031,"line_start":196,"line_end":196,"column_start":1,"column_end":56}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":224032,"byte_end":224081,"line_start":197,"line_end":197,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":711},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":224470,"byte_end":224473,"line_start":209,"line_end":209,"column_start":8,"column_end":11},"name":"vec","qualname":"::collection::vec","value":"pub fn vec<T: Strategy,\n           impl Into<SizeRange>: Into<SizeRange>>(T, impl Into<SizeRange>)\n-> VecStrategy<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `Vec`s containing elements drawn from\n `element` and with a size range given by `size`.","sig":null,"attributes":[{"value":"/ Create a strategy to generate `Vec`s containing elements drawn from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":224184,"byte_end":224255,"line_start":204,"line_end":204,"column_start":1,"column_end":72}},{"value":"/ `element` and with a size range given by `size`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":224256,"byte_end":224308,"line_start":205,"line_end":205,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":224309,"byte_end":224312,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ To make a `Vec` with a fixed number of elements, each with its own","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":224313,"byte_end":224383,"line_start":207,"line_end":207,"column_start":1,"column_end":71}},{"value":"/ strategy, you can instead make a `Vec` of strategies (boxed if necessary).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":224384,"byte_end":224462,"line_start":208,"line_end":208,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":5289},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":224974,"byte_end":224990,"line_start":229,"line_end":229,"column_start":16,"column_end":32},"name":"VecDequeStrategy","qualname":"::collection::VecDequeStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `VecDeque`s with a length in a certain range.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/macros.rs","byte_start":7723,"byte_end":7772,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":5299},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":225206,"byte_end":225223,"line_start":234,"line_end":234,"column_start":16,"column_end":33},"name":"VecDequeValueTree","qualname":"::collection::VecDequeValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `VecDequeStrategy`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":714},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":225473,"byte_end":225482,"line_start":241,"line_end":241,"column_start":8,"column_end":17},"name":"vec_deque","qualname":"::collection::vec_deque","value":"pub fn vec_deque<T: Strategy,\n                 impl Into<SizeRange>: Into<SizeRange>>(T,\n                                                        impl Into<SizeRange>)\n-> VecDequeStrategy<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `VecDeque`s containing elements drawn from\n `element` and with a size range given by `size`.\n","sig":null,"attributes":[{"value":"/ Create a strategy to generate `VecDeque`s containing elements drawn from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":225336,"byte_end":225412,"line_start":239,"line_end":239,"column_start":1,"column_end":77}},{"value":"/ `element` and with a size range given by `size`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":225413,"byte_end":225465,"line_start":240,"line_end":240,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":5331},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":225987,"byte_end":226005,"line_start":259,"line_end":259,"column_start":16,"column_end":34},"name":"LinkedListStrategy","qualname":"::collection::LinkedListStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `LinkedList`s with a length in a certain range.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/macros.rs","byte_start":7723,"byte_end":7772,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":5341},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":226222,"byte_end":226241,"line_start":264,"line_end":264,"column_start":16,"column_end":35},"name":"LinkedListValueTree","qualname":"::collection::LinkedListValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `LinkedListStrategy`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":717},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":226492,"byte_end":226503,"line_start":271,"line_end":271,"column_start":8,"column_end":19},"name":"linked_list","qualname":"::collection::linked_list","value":"pub fn linked_list<T: Strategy,\n                   impl Into<SizeRange>: Into<SizeRange>>(T,\n                                                          impl Into<SizeRange>)\n-> LinkedListStrategy<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `LinkedList`s containing elements drawn from\n `element` and with a size range given by `size`.\n","sig":null,"attributes":[{"value":"/ Create a strategy to generate `LinkedList`s containing elements drawn from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":226353,"byte_end":226431,"line_start":269,"line_end":269,"column_start":1,"column_end":79}},{"value":"/ `element` and with a size range given by `size`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":226432,"byte_end":226484,"line_start":270,"line_end":270,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":5373},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":227006,"byte_end":227024,"line_start":289,"line_end":289,"column_start":16,"column_end":34},"name":"BinaryHeapStrategy","qualname":"::collection::BinaryHeapStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `BinaryHeap`s with a length in a certain range.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/macros.rs","byte_start":7723,"byte_end":7772,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":5383},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":227262,"byte_end":227281,"line_start":294,"line_end":294,"column_start":16,"column_end":35},"name":"BinaryHeapValueTree","qualname":"::collection::BinaryHeapValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `BinaryHeapStrategy`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":720},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":227553,"byte_end":227564,"line_start":301,"line_end":301,"column_start":8,"column_end":19},"name":"binary_heap","qualname":"::collection::binary_heap","value":"pub fn binary_heap<T: Strategy,\n                   impl Into<SizeRange>: Into<SizeRange>>(T,\n                                                          impl Into<SizeRange>)\n-> BinaryHeapStrategy<T> where T::Value: Ord","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `BinaryHeap`s containing elements drawn from\n `element` and with a size range given by `size`.\n","sig":null,"attributes":[{"value":"/ Create a strategy to generate `BinaryHeap`s containing elements drawn from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":227414,"byte_end":227492,"line_start":299,"line_end":299,"column_start":1,"column_end":79}},{"value":"/ `element` and with a size range given by `size`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":227493,"byte_end":227545,"line_start":300,"line_end":300,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":5423},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":228448,"byte_end":228463,"line_start":335,"line_end":335,"column_start":16,"column_end":31},"name":"HashSetStrategy","qualname":"::collection::HashSetStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `HashSet`s with a length in a certain range.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/macros.rs","byte_start":7679,"byte_end":7690,"line_start":58,"line_end":58,"column_start":11,"column_end":22}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/macros.rs","byte_start":7723,"byte_end":7772,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":5433},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":228727,"byte_end":228743,"line_start":340,"line_end":340,"column_start":16,"column_end":32},"name":"HashSetValueTree","qualname":"::collection::HashSetValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `HashSetStrategy`.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/macros.rs","byte_start":7863,"byte_end":7874,"line_start":64,"line_end":64,"column_start":11,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":726},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":229253,"byte_end":229261,"line_start":352,"line_end":352,"column_start":8,"column_end":16},"name":"hash_set","qualname":"::collection::hash_set","value":"pub fn hash_set<T: Strategy,\n                impl Into<SizeRange>: Into<SizeRange>>(T,\n                                                       impl Into<SizeRange>)\n-> HashSetStrategy<T> where T::Value: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `HashSet`s containing elements drawn from\n `element` and with a size range given by `size`.","sig":null,"attributes":[{"value":"/ Create a strategy to generate `HashSet`s containing elements drawn from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":228905,"byte_end":228980,"line_start":345,"line_end":345,"column_start":1,"column_end":76}},{"value":"/ `element` and with a size range given by `size`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":228981,"byte_end":229033,"line_start":346,"line_end":346,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":229034,"byte_end":229037,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ This strategy will implicitly do local rejects to ensure that the `HashSet`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":229038,"byte_end":229117,"line_start":348,"line_end":348,"column_start":1,"column_end":80}},{"value":"/ has at least the minimum number of elements, in case `element` should","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":229118,"byte_end":229191,"line_start":349,"line_end":349,"column_start":1,"column_end":74}},{"value":"/ produce duplicate values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":229192,"byte_end":229221,"line_start":350,"line_end":350,"column_start":1,"column_end":30}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":229222,"byte_end":229245,"line_start":351,"line_end":351,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5465},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":230139,"byte_end":230155,"line_start":385,"line_end":385,"column_start":16,"column_end":32},"name":"BTreeSetStrategy","qualname":"::collection::BTreeSetStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `BTreeSet`s with a length in a certain range.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/macros.rs","byte_start":7723,"byte_end":7772,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":5475},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":230416,"byte_end":230433,"line_start":390,"line_end":390,"column_start":16,"column_end":33},"name":"BTreeSetValueTree","qualname":"::collection::BTreeSetValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `BTreeSetStrategy`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":732},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":230917,"byte_end":230926,"line_start":401,"line_end":401,"column_start":8,"column_end":17},"name":"btree_set","qualname":"::collection::btree_set","value":"pub fn btree_set<T: Strategy,\n                 impl Into<SizeRange>: Into<SizeRange>>(T,\n                                                        impl Into<SizeRange>)\n-> BTreeSetStrategy<T> where T::Value: Ord","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `BTreeSet`s containing elements drawn from\n `element` and with a size range given by `size`.","sig":null,"attributes":[{"value":"/ Create a strategy to generate `BTreeSet`s containing elements drawn from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":230591,"byte_end":230667,"line_start":395,"line_end":395,"column_start":1,"column_end":77}},{"value":"/ `element` and with a size range given by `size`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":230668,"byte_end":230720,"line_start":396,"line_end":396,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":230721,"byte_end":230724,"line_start":397,"line_end":397,"column_start":1,"column_end":4}},{"value":"/ This strategy will implicitly do local rejects to ensure that the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":230725,"byte_end":230794,"line_start":398,"line_end":398,"column_start":1,"column_end":70}},{"value":"/ `BTreeSet` has at least the minimum number of elements, in case `element`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":230795,"byte_end":230872,"line_start":399,"line_end":399,"column_start":1,"column_end":78}},{"value":"/ should produce duplicate values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":230873,"byte_end":230909,"line_start":400,"line_end":400,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":5510},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":231890,"byte_end":231905,"line_start":438,"line_end":438,"column_start":16,"column_end":31},"name":"HashMapStrategy","qualname":"::collection::HashMapStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `HashMap`s with a length in a certain range.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/macros.rs","byte_start":7679,"byte_end":7690,"line_start":58,"line_end":58,"column_start":11,"column_end":22}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/macros.rs","byte_start":7723,"byte_end":7772,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":5523},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":232224,"byte_end":232240,"line_start":445,"line_end":445,"column_start":16,"column_end":32},"name":"HashMapValueTree","qualname":"::collection::HashMapValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `HashMapStrategy`.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/macros.rs","byte_start":7863,"byte_end":7874,"line_start":64,"line_end":64,"column_start":11,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":739},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":232854,"byte_end":232862,"line_start":460,"line_end":460,"column_start":8,"column_end":16},"name":"hash_map","qualname":"::collection::hash_map","value":"pub fn hash_map<K: Strategy, V: Strategy,\n                impl Into<SizeRange>: Into<SizeRange>>(K, V,\n                                                       impl Into<SizeRange>)\n-> HashMapStrategy<K, V> where K::Value: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `HashMap`s containing keys and values drawn\n from `key` and `value` respectively, and with a size within the given\n range.","sig":null,"attributes":[{"value":"/ Create a strategy to generate `HashMap`s containing keys and values drawn","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":232476,"byte_end":232553,"line_start":452,"line_end":452,"column_start":1,"column_end":78}},{"value":"/ from `key` and `value` respectively, and with a size within the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":232554,"byte_end":232627,"line_start":453,"line_end":453,"column_start":1,"column_end":74}},{"value":"/ range.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":232628,"byte_end":232638,"line_start":454,"line_end":454,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":232639,"byte_end":232642,"line_start":455,"line_end":455,"column_start":1,"column_end":4}},{"value":"/ This strategy will implicitly do local rejects to ensure that the `HashMap`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":232643,"byte_end":232722,"line_start":456,"line_end":456,"column_start":1,"column_end":80}},{"value":"/ has at least the minimum number of elements, in case `key` should produce","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":232723,"byte_end":232800,"line_start":457,"line_end":457,"column_start":1,"column_end":78}},{"value":"/ duplicate values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":232801,"byte_end":232822,"line_start":458,"line_end":458,"column_start":1,"column_end":22}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":232823,"byte_end":232846,"line_start":459,"line_end":459,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5561},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":233769,"byte_end":233785,"line_start":495,"line_end":495,"column_start":16,"column_end":32},"name":"BTreeMapStrategy","qualname":"::collection::BTreeMapStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `BTreeMap`s with a length in a certain range.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/macros.rs","byte_start":7723,"byte_end":7772,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":5574},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":234101,"byte_end":234118,"line_start":502,"line_end":502,"column_start":16,"column_end":33},"name":"BTreeMapValueTree","qualname":"::collection::BTreeMapValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `BTreeMapStrategy`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":747},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":234706,"byte_end":234715,"line_start":516,"line_end":516,"column_start":8,"column_end":17},"name":"btree_map","qualname":"::collection::btree_map","value":"pub fn btree_map<K: Strategy, V: Strategy,\n                 impl Into<SizeRange>: Into<SizeRange>>(K, V,\n                                                        impl Into<SizeRange>)\n-> BTreeMapStrategy<K, V> where K::Value: Ord","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `BTreeMap`s containing keys and values drawn\n from `key` and `value` respectively, and with a size within the given\n range.","sig":null,"attributes":[{"value":"/ Create a strategy to generate `BTreeMap`s containing keys and values drawn","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":234350,"byte_end":234428,"line_start":509,"line_end":509,"column_start":1,"column_end":79}},{"value":"/ from `key` and `value` respectively, and with a size within the given","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":234429,"byte_end":234502,"line_start":510,"line_end":510,"column_start":1,"column_end":74}},{"value":"/ range.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":234503,"byte_end":234513,"line_start":511,"line_end":511,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":234514,"byte_end":234517,"line_start":512,"line_end":512,"column_start":1,"column_end":4}},{"value":"/ This strategy will implicitly do local rejects to ensure that the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":234518,"byte_end":234587,"line_start":513,"line_end":513,"column_start":1,"column_end":70}},{"value":"/ `BTreeMap` has at least the minimum number of elements, in case `key`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":234588,"byte_end":234661,"line_start":514,"line_end":514,"column_start":1,"column_end":74}},{"value":"/ should produce duplicate values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":234662,"byte_end":234698,"line_start":515,"line_end":515,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":5602},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":235265,"byte_end":235277,"line_start":540,"line_end":540,"column_start":12,"column_end":24},"name":"VecValueTree","qualname":"::collection::VecValueTree","value":"VecValueTree {  }","parent":null,"children":[{"krate":0,"index":5604},{"krate":0,"index":5605},{"krate":0,"index":5606},{"krate":0,"index":5607},{"krate":0,"index":5608}],"decl_id":null,"docs":" `ValueTree` corresponding to `VecStrategy`.\n","sig":null,"attributes":[{"value":"/ `ValueTree` corresponding to `VecStrategy`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":235182,"byte_end":235229,"line_start":538,"line_end":538,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":770},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"num","qualname":"::num","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","parent":null,"children":[{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":8820},{"krate":0,"index":779},{"krate":0,"index":781},{"krate":0,"index":5615},{"krate":0,"index":5674},{"krate":0,"index":5733},{"krate":0,"index":5792},{"krate":0,"index":5851},{"krate":0,"index":5910},{"krate":0,"index":5969},{"krate":0,"index":6025},{"krate":0,"index":6081},{"krate":0,"index":6137},{"krate":0,"index":6193},{"krate":0,"index":6249},{"krate":0,"index":6305},{"krate":0,"index":6327},{"krate":0,"index":6323},{"krate":0,"index":6324},{"krate":0,"index":6320},{"krate":0,"index":6321},{"krate":0,"index":6318},{"krate":0,"index":6312},{"krate":0,"index":6310},{"krate":0,"index":6307},{"krate":0,"index":6328},{"krate":0,"index":6341},{"krate":0,"index":6343},{"krate":0,"index":6345},{"krate":0,"index":6347},{"krate":0,"index":6349},{"krate":0,"index":6364},{"krate":0,"index":6367},{"krate":0,"index":6369},{"krate":0,"index":6372},{"krate":0,"index":6374},{"krate":0,"index":6377},{"krate":0,"index":6379},{"krate":0,"index":6382},{"krate":0,"index":6384},{"krate":0,"index":6387},{"krate":0,"index":6390},{"krate":0,"index":787},{"krate":0,"index":789},{"krate":0,"index":795},{"krate":0,"index":801},{"krate":0,"index":6431},{"krate":0,"index":6511}],"decl_id":null,"docs":" Strategies to generate numeric values (as opposed to integers used as bit\n fields).","sig":null,"attributes":[{"value":"/ Strategies to generate numeric values (as opposed to integers used as bit","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":243123,"byte_end":243200,"line_start":10,"line_end":10,"column_start":1,"column_end":78}},{"value":"/ fields).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":243201,"byte_end":243213,"line_start":11,"line_end":11,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":243214,"byte_end":243217,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ All strategies in this module shrink by binary searching towards 0.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":243218,"byte_end":243289,"line_start":13,"line_end":13,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":5615},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":253031,"byte_end":253033,"line_start":330,"line_end":330,"column_start":28,"column_end":30},"name":"i8","qualname":"::num::i8","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","parent":null,"children":[{"krate":0,"index":5616},{"krate":0,"index":5617},{"krate":0,"index":5618},{"krate":0,"index":5637},{"krate":0,"index":5643},{"krate":0,"index":5642},{"krate":0,"index":5640},{"krate":0,"index":5632},{"krate":0,"index":5633},{"krate":0,"index":5645},{"krate":0,"index":5652},{"krate":0,"index":5651},{"krate":0,"index":5649},{"krate":0,"index":5619},{"krate":0,"index":5627},{"krate":0,"index":5654},{"krate":0,"index":5658},{"krate":0,"index":5662},{"krate":0,"index":5666},{"krate":0,"index":5670}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":247187,"byte_end":247209,"line_start":142,"line_end":142,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5674},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":253063,"byte_end":253066,"line_start":331,"line_end":331,"column_start":28,"column_end":31},"name":"i16","qualname":"::num::i16","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","parent":null,"children":[{"krate":0,"index":5675},{"krate":0,"index":5676},{"krate":0,"index":5677},{"krate":0,"index":5696},{"krate":0,"index":5702},{"krate":0,"index":5701},{"krate":0,"index":5699},{"krate":0,"index":5691},{"krate":0,"index":5692},{"krate":0,"index":5704},{"krate":0,"index":5711},{"krate":0,"index":5710},{"krate":0,"index":5708},{"krate":0,"index":5678},{"krate":0,"index":5686},{"krate":0,"index":5713},{"krate":0,"index":5717},{"krate":0,"index":5721},{"krate":0,"index":5725},{"krate":0,"index":5729}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":247187,"byte_end":247209,"line_start":142,"line_end":142,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5733},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":253096,"byte_end":253099,"line_start":332,"line_end":332,"column_start":28,"column_end":31},"name":"i32","qualname":"::num::i32","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","parent":null,"children":[{"krate":0,"index":5734},{"krate":0,"index":5735},{"krate":0,"index":5736},{"krate":0,"index":5755},{"krate":0,"index":5761},{"krate":0,"index":5760},{"krate":0,"index":5758},{"krate":0,"index":5750},{"krate":0,"index":5751},{"krate":0,"index":5763},{"krate":0,"index":5770},{"krate":0,"index":5769},{"krate":0,"index":5767},{"krate":0,"index":5737},{"krate":0,"index":5745},{"krate":0,"index":5772},{"krate":0,"index":5776},{"krate":0,"index":5780},{"krate":0,"index":5784},{"krate":0,"index":5788}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":247187,"byte_end":247209,"line_start":142,"line_end":142,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5792},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":253129,"byte_end":253132,"line_start":333,"line_end":333,"column_start":28,"column_end":31},"name":"i64","qualname":"::num::i64","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","parent":null,"children":[{"krate":0,"index":5793},{"krate":0,"index":5794},{"krate":0,"index":5795},{"krate":0,"index":5814},{"krate":0,"index":5820},{"krate":0,"index":5819},{"krate":0,"index":5817},{"krate":0,"index":5809},{"krate":0,"index":5810},{"krate":0,"index":5822},{"krate":0,"index":5829},{"krate":0,"index":5828},{"krate":0,"index":5826},{"krate":0,"index":5796},{"krate":0,"index":5804},{"krate":0,"index":5831},{"krate":0,"index":5835},{"krate":0,"index":5839},{"krate":0,"index":5843},{"krate":0,"index":5847}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":247187,"byte_end":247209,"line_start":142,"line_end":142,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5851},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":253198,"byte_end":253202,"line_start":335,"line_end":335,"column_start":28,"column_end":32},"name":"i128","qualname":"::num::i128","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","parent":null,"children":[{"krate":0,"index":5852},{"krate":0,"index":5853},{"krate":0,"index":5854},{"krate":0,"index":5873},{"krate":0,"index":5879},{"krate":0,"index":5878},{"krate":0,"index":5876},{"krate":0,"index":5868},{"krate":0,"index":5869},{"krate":0,"index":5881},{"krate":0,"index":5888},{"krate":0,"index":5887},{"krate":0,"index":5885},{"krate":0,"index":5855},{"krate":0,"index":5863},{"krate":0,"index":5890},{"krate":0,"index":5894},{"krate":0,"index":5898},{"krate":0,"index":5902},{"krate":0,"index":5906}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":247187,"byte_end":247209,"line_start":142,"line_end":142,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5910},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":253232,"byte_end":253237,"line_start":336,"line_end":336,"column_start":28,"column_end":33},"name":"isize","qualname":"::num::isize","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","parent":null,"children":[{"krate":0,"index":5911},{"krate":0,"index":5912},{"krate":0,"index":5913},{"krate":0,"index":5932},{"krate":0,"index":5938},{"krate":0,"index":5937},{"krate":0,"index":5935},{"krate":0,"index":5927},{"krate":0,"index":5928},{"krate":0,"index":5940},{"krate":0,"index":5947},{"krate":0,"index":5946},{"krate":0,"index":5944},{"krate":0,"index":5914},{"krate":0,"index":5922},{"krate":0,"index":5949},{"krate":0,"index":5953},{"krate":0,"index":5957},{"krate":0,"index":5961},{"krate":0,"index":5965}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":247187,"byte_end":247209,"line_start":142,"line_end":142,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5969},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":253269,"byte_end":253271,"line_start":337,"line_end":337,"column_start":30,"column_end":32},"name":"u8","qualname":"::num::u8","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","parent":null,"children":[{"krate":0,"index":5970},{"krate":0,"index":5971},{"krate":0,"index":5972},{"krate":0,"index":5988},{"krate":0,"index":5994},{"krate":0,"index":5993},{"krate":0,"index":5991},{"krate":0,"index":5983},{"krate":0,"index":5984},{"krate":0,"index":5996},{"krate":0,"index":6003},{"krate":0,"index":6002},{"krate":0,"index":6000},{"krate":0,"index":5973},{"krate":0,"index":5978},{"krate":0,"index":6005},{"krate":0,"index":6009},{"krate":0,"index":6013},{"krate":0,"index":6017},{"krate":0,"index":6021}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":250400,"byte_end":250422,"line_start":244,"line_end":244,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6025},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":253303,"byte_end":253306,"line_start":338,"line_end":338,"column_start":30,"column_end":33},"name":"u16","qualname":"::num::u16","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","parent":null,"children":[{"krate":0,"index":6026},{"krate":0,"index":6027},{"krate":0,"index":6028},{"krate":0,"index":6044},{"krate":0,"index":6050},{"krate":0,"index":6049},{"krate":0,"index":6047},{"krate":0,"index":6039},{"krate":0,"index":6040},{"krate":0,"index":6052},{"krate":0,"index":6059},{"krate":0,"index":6058},{"krate":0,"index":6056},{"krate":0,"index":6029},{"krate":0,"index":6034},{"krate":0,"index":6061},{"krate":0,"index":6065},{"krate":0,"index":6069},{"krate":0,"index":6073},{"krate":0,"index":6077}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":250400,"byte_end":250422,"line_start":244,"line_end":244,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6081},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":253338,"byte_end":253341,"line_start":339,"line_end":339,"column_start":30,"column_end":33},"name":"u32","qualname":"::num::u32","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","parent":null,"children":[{"krate":0,"index":6082},{"krate":0,"index":6083},{"krate":0,"index":6084},{"krate":0,"index":6100},{"krate":0,"index":6106},{"krate":0,"index":6105},{"krate":0,"index":6103},{"krate":0,"index":6095},{"krate":0,"index":6096},{"krate":0,"index":6108},{"krate":0,"index":6115},{"krate":0,"index":6114},{"krate":0,"index":6112},{"krate":0,"index":6085},{"krate":0,"index":6090},{"krate":0,"index":6117},{"krate":0,"index":6121},{"krate":0,"index":6125},{"krate":0,"index":6129},{"krate":0,"index":6133}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":250400,"byte_end":250422,"line_start":244,"line_end":244,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6137},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":253373,"byte_end":253376,"line_start":340,"line_end":340,"column_start":30,"column_end":33},"name":"u64","qualname":"::num::u64","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","parent":null,"children":[{"krate":0,"index":6138},{"krate":0,"index":6139},{"krate":0,"index":6140},{"krate":0,"index":6156},{"krate":0,"index":6162},{"krate":0,"index":6161},{"krate":0,"index":6159},{"krate":0,"index":6151},{"krate":0,"index":6152},{"krate":0,"index":6164},{"krate":0,"index":6171},{"krate":0,"index":6170},{"krate":0,"index":6168},{"krate":0,"index":6141},{"krate":0,"index":6146},{"krate":0,"index":6173},{"krate":0,"index":6177},{"krate":0,"index":6181},{"krate":0,"index":6185},{"krate":0,"index":6189}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":250400,"byte_end":250422,"line_start":244,"line_end":244,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6193},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":253444,"byte_end":253448,"line_start":342,"line_end":342,"column_start":30,"column_end":34},"name":"u128","qualname":"::num::u128","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","parent":null,"children":[{"krate":0,"index":6194},{"krate":0,"index":6195},{"krate":0,"index":6196},{"krate":0,"index":6212},{"krate":0,"index":6218},{"krate":0,"index":6217},{"krate":0,"index":6215},{"krate":0,"index":6207},{"krate":0,"index":6208},{"krate":0,"index":6220},{"krate":0,"index":6227},{"krate":0,"index":6226},{"krate":0,"index":6224},{"krate":0,"index":6197},{"krate":0,"index":6202},{"krate":0,"index":6229},{"krate":0,"index":6233},{"krate":0,"index":6237},{"krate":0,"index":6241},{"krate":0,"index":6245}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":250400,"byte_end":250422,"line_start":244,"line_end":244,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6249},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":253480,"byte_end":253485,"line_start":343,"line_end":343,"column_start":30,"column_end":35},"name":"usize","qualname":"::num::usize","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","parent":null,"children":[{"krate":0,"index":6250},{"krate":0,"index":6251},{"krate":0,"index":6252},{"krate":0,"index":6268},{"krate":0,"index":6274},{"krate":0,"index":6273},{"krate":0,"index":6271},{"krate":0,"index":6263},{"krate":0,"index":6264},{"krate":0,"index":6276},{"krate":0,"index":6283},{"krate":0,"index":6282},{"krate":0,"index":6280},{"krate":0,"index":6253},{"krate":0,"index":6258},{"krate":0,"index":6285},{"krate":0,"index":6289},{"krate":0,"index":6293},{"krate":0,"index":6297},{"krate":0,"index":6301}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":250400,"byte_end":250422,"line_start":244,"line_end":244,"column_start":9,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":790},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":254780,"byte_end":254784,"line_start":390,"line_end":390,"column_start":10,"column_end":14},"name":"Bits","qualname":"::num::FloatLayout::Bits","value":"type Bits: Copy;","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":6431},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":273323,"byte_end":273326,"line_start":850,"line_end":850,"column_start":19,"column_end":22},"name":"f32","qualname":"::num::f32","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","parent":null,"children":[{"krate":0,"index":6432},{"krate":0,"index":6433},{"krate":0,"index":6434},{"krate":0,"index":6435},{"krate":0,"index":6436},{"krate":0,"index":6437},{"krate":0,"index":6438},{"krate":0,"index":6473},{"krate":0,"index":6479},{"krate":0,"index":6478},{"krate":0,"index":6476},{"krate":0,"index":6454},{"krate":0,"index":6457},{"krate":0,"index":6459},{"krate":0,"index":6460},{"krate":0,"index":6461},{"krate":0,"index":6462},{"krate":0,"index":6463},{"krate":0,"index":6464},{"krate":0,"index":6465},{"krate":0,"index":6466},{"krate":0,"index":6467},{"krate":0,"index":6468},{"krate":0,"index":6481},{"krate":0,"index":6489},{"krate":0,"index":6488},{"krate":0,"index":6486},{"krate":0,"index":6439},{"krate":0,"index":6449},{"krate":0,"index":6491},{"krate":0,"index":6495},{"krate":0,"index":6499},{"krate":0,"index":6503},{"krate":0,"index":6507}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":266903,"byte_end":266925,"line_start":668,"line_end":668,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6511},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":273347,"byte_end":273350,"line_start":851,"line_end":851,"column_start":19,"column_end":22},"name":"f64","qualname":"::num::f64","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","parent":null,"children":[{"krate":0,"index":6512},{"krate":0,"index":6513},{"krate":0,"index":6514},{"krate":0,"index":6515},{"krate":0,"index":6516},{"krate":0,"index":6517},{"krate":0,"index":6518},{"krate":0,"index":6553},{"krate":0,"index":6559},{"krate":0,"index":6558},{"krate":0,"index":6556},{"krate":0,"index":6534},{"krate":0,"index":6537},{"krate":0,"index":6539},{"krate":0,"index":6540},{"krate":0,"index":6541},{"krate":0,"index":6542},{"krate":0,"index":6543},{"krate":0,"index":6544},{"krate":0,"index":6545},{"krate":0,"index":6546},{"krate":0,"index":6547},{"krate":0,"index":6548},{"krate":0,"index":6561},{"krate":0,"index":6569},{"krate":0,"index":6568},{"krate":0,"index":6566},{"krate":0,"index":6519},{"krate":0,"index":6529},{"krate":0,"index":6571},{"krate":0,"index":6575},{"krate":0,"index":6579},{"krate":0,"index":6583},{"krate":0,"index":6587}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":266903,"byte_end":266925,"line_start":668,"line_end":668,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":809},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strategy","qualname":"::strategy","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/mod.rs","parent":null,"children":[{"krate":0,"index":810},{"krate":0,"index":851},{"krate":0,"index":915},{"krate":0,"index":978},{"krate":0,"index":1002},{"krate":0,"index":1060},{"krate":0,"index":1102},{"krate":0,"index":1210},{"krate":0,"index":1248},{"krate":0,"index":1277},{"krate":0,"index":1378},{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1460}],"decl_id":null,"docs":" Defines the core traits used by Proptest.\n","sig":null,"attributes":[{"value":"/ Defines the core traits used by Proptest.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/mod.rs","byte_start":291247,"byte_end":291292,"line_start":10,"line_end":10,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":816},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter.rs","byte_start":292326,"byte_end":292332,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"Filter","qualname":"::strategy::filter::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821}],"decl_id":null,"docs":" `Strategy` and `ValueTree` filter adaptor.","sig":null,"attributes":[{"value":"/ `Strategy` and `ValueTree` filter adaptor.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter.rs","byte_start":292179,"byte_end":292225,"line_start":15,"line_end":15,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter.rs","byte_start":292226,"byte_end":292229,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_filter()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter.rs","byte_start":292230,"byte_end":292264,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter.rs","byte_start":292265,"byte_end":292314,"line_start":18,"line_end":18,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":858},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":296251,"byte_end":296260,"line_start":19,"line_end":19,"column_start":12,"column_end":21},"name":"FilterMap","qualname":"::strategy::filter_map::FilterMap","value":"FilterMap {  }","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863}],"decl_id":null,"docs":" `Strategy` and `ValueTree` filter_map adaptor.","sig":null,"attributes":[{"value":"/ `Strategy` and `ValueTree` filter_map adaptor.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":296096,"byte_end":296146,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":296147,"byte_end":296150,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_filter_map()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":296151,"byte_end":296189,"line_start":17,"line_end":17,"column_start":1,"column_end":39}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":296190,"byte_end":296239,"line_start":18,"line_end":18,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":883},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":297715,"byte_end":297733,"line_start":74,"line_end":74,"column_start":12,"column_end":30},"name":"FilterMapValueTree","qualname":"::strategy::filter_map::FilterMapValueTree","value":"FilterMapValueTree {  }","parent":null,"children":[{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889}],"decl_id":null,"docs":" `ValueTree` corresponding to `FilterMap`.\n","sig":null,"attributes":[{"value":"/ `ValueTree` corresponding to `FilterMap`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":297658,"byte_end":297703,"line_start":73,"line_end":73,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6591},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":302078,"byte_end":302085,"line_start":22,"line_end":22,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::strategy::flatten::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":6593}],"decl_id":null,"docs":" Adaptor that flattens a `Strategy` which produces other `Strategy`s into a\n `Strategy` that picks one of those strategies and then picks values from\n it.\n","sig":null,"attributes":[{"value":"/ Adaptor that flattens a `Strategy` which produces other `Strategy`s into a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":301823,"byte_end":301901,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/ `Strategy` that picks one of those strategies and then picks values from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":301902,"byte_end":301978,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/ it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":301979,"byte_end":301986,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":302017,"byte_end":302066,"line_start":21,"line_end":21,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":302188,"byte_end":302191,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<Flatten<S>>::new","value":"pub fn new(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wrap `source` to flatten it.\n","sig":null,"attributes":[{"value":"/ Wrap `source` to flatten it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":302144,"byte_end":302176,"line_start":27,"line_end":27,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":931},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":302639,"byte_end":302655,"line_start":47,"line_end":47,"column_start":12,"column_end":28},"name":"FlattenValueTree","qualname":"::strategy::flatten::FlattenValueTree","value":"FlattenValueTree {  }","parent":null,"children":[{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937}],"decl_id":null,"docs":" The `ValueTree` produced by `Flatten`.\n","sig":null,"attributes":[{"value":"/ The `ValueTree` produced by `Flatten`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":302585,"byte_end":302627,"line_start":46,"line_end":46,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":6602},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":307964,"byte_end":307974,"line_start":203,"line_end":203,"column_start":12,"column_end":22},"name":"IndFlatten","qualname":"::strategy::flatten::IndFlatten","value":"","parent":null,"children":[],"decl_id":null,"docs":" Similar to `Flatten`, but does not shrink the input strategy.","sig":null,"attributes":[{"value":"/ Similar to `Flatten`, but does not shrink the input strategy.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":307794,"byte_end":307859,"line_start":199,"line_end":199,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":307860,"byte_end":307863,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_ind_flat_map()` fore more details.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":307864,"byte_end":307922,"line_start":201,"line_end":201,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":958},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":308522,"byte_end":308535,"line_start":222,"line_end":222,"column_start":12,"column_end":25},"name":"IndFlattenMap","qualname":"::strategy::flatten::IndFlattenMap","value":"IndFlattenMap {  }","parent":null,"children":[{"krate":0,"index":961},{"krate":0,"index":962}],"decl_id":null,"docs":" Similar to `Map` plus `Flatten`, but does not shrink the input strategy and\n passes the original input through.","sig":null,"attributes":[{"value":"/ Similar to `Map` plus `Flatten`, but does not shrink the input strategy and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":308329,"byte_end":308408,"line_start":218,"line_end":218,"column_start":1,"column_end":80}},{"value":"/ passes the original input through.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":308409,"byte_end":308447,"line_start":219,"line_end":219,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":308448,"byte_end":308451,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_ind_flat_map2()` for more details.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":308452,"byte_end":308510,"line_start":221,"line_end":221,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":6614},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":314319,"byte_end":314323,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"Fuse","qualname":"::strategy::fuse::Fuse","value":"Fuse {  }","parent":null,"children":[{"krate":0,"index":6616},{"krate":0,"index":6617},{"krate":0,"index":6618}],"decl_id":null,"docs":" Adaptor for `Strategy` and `ValueTree` which guards `simplify()` and\n `complicate()` to avoid contract violations.","sig":null,"attributes":[{"value":"/ Adaptor for `Strategy` and `ValueTree` which guards `simplify()` and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313010,"byte_end":313082,"line_start":13,"line_end":13,"column_start":1,"column_end":73}},{"value":"/ `complicate()` to avoid contract violations.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313083,"byte_end":313131,"line_start":14,"line_end":14,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313132,"byte_end":313135,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This can be used as an intermediate when the caller would otherwise need","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313136,"byte_end":313212,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ its own separate state tracking, or as a workaround for a broken","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313213,"byte_end":313281,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ `ValueTree` implementation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313282,"byte_end":313313,"line_start":18,"line_end":18,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313314,"byte_end":313317,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This wrapper specifically has the following effects:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313318,"byte_end":313374,"line_start":20,"line_end":20,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313375,"byte_end":313378,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ - Calling `complicate()` before `simplify()` was ever called does nothing","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313379,"byte_end":313456,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/   and returns `false`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313457,"byte_end":313483,"line_start":23,"line_end":23,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313484,"byte_end":313487,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ - Calling `simplify()` after it has returned `false` and no calls to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313488,"byte_end":313560,"line_start":25,"line_end":25,"column_start":1,"column_end":73}},{"value":"/   `complicate()` returned `true` does nothing and returns `false`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313561,"byte_end":313631,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313632,"byte_end":313635,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ - Calling `complicate()` after it has returned `false` and no calls to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313636,"byte_end":313710,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/   `simplify()` returned `true` does nothing and returns `false`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313711,"byte_end":313779,"line_start":29,"line_end":29,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313780,"byte_end":313783,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ There is also limited functionality to alter the internal state to assist","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313784,"byte_end":313861,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ in its usage as a state tracker.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313862,"byte_end":313898,"line_start":32,"line_end":32,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313899,"byte_end":313902,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Wrapping a `Strategy` in `Fuse` simply causes its `ValueTree` to also be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313903,"byte_end":313979,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ wrapped in `Fuse`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":313980,"byte_end":314002,"line_start":35,"line_end":35,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":314003,"byte_end":314006,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ While this is similar to `std::iter::Fuse`, it is not exposed as a method","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":314007,"byte_end":314084,"line_start":37,"line_end":37,"column_start":1,"column_end":78}},{"value":"/ on `Strategy` since the vast majority of proptest should never need this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":314085,"byte_end":314161,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ functionality; it mainly concerns implementors of strategies.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":314162,"byte_end":314227,"line_start":39,"line_end":39,"column_start":1,"column_end":66}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":314258,"byte_end":314307,"line_start":41,"line_end":41,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":983},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":314463,"byte_end":314466,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<Fuse<T>>::new","value":"pub fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wrap the given `T` in `Fuse`.\n","sig":null,"attributes":[{"value":"/ Wrap the given `T` in `Fuse`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":314418,"byte_end":314451,"line_start":49,"line_end":49,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":991},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315245,"byte_end":315257,"line_start":77,"line_end":77,"column_start":12,"column_end":24},"name":"may_simplify","qualname":"<Fuse<T>>::may_simplify","value":"pub fn may_simplify(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether a call to `simplify()` may be productive.","sig":null,"attributes":[{"value":"/ Return whether a call to `simplify()` may be productive.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":314867,"byte_end":314927,"line_start":69,"line_end":69,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":314932,"byte_end":314935,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Formally, this is true if one of the following holds:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":314940,"byte_end":314997,"line_start":71,"line_end":71,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315002,"byte_end":315005,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ - `simplify()` has never been called.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315010,"byte_end":315051,"line_start":73,"line_end":73,"column_start":5,"column_end":46}},{"value":"/ - The most recent call to `simplify()` returned `true`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315056,"byte_end":315115,"line_start":74,"line_end":74,"column_start":5,"column_end":64}},{"value":"/ - `complicate()` has been called more recently than `simplify()` and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315120,"byte_end":315192,"line_start":75,"line_end":75,"column_start":5,"column_end":77}},{"value":"/   the last call returned `true`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315197,"byte_end":315233,"line_start":76,"line_end":76,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315425,"byte_end":315442,"line_start":83,"line_end":83,"column_start":12,"column_end":29},"name":"disallow_simplify","qualname":"<Fuse<T>>::disallow_simplify","value":"pub fn disallow_simplify(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Disallow any further calls to `simplify()` until a call to\n `complicate()` returns `true`.\n","sig":null,"attributes":[{"value":"/ Disallow any further calls to `simplify()` until a call to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315312,"byte_end":315374,"line_start":81,"line_end":81,"column_start":5,"column_end":67}},{"value":"/ `complicate()` returns `true`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315379,"byte_end":315413,"line_start":82,"line_end":82,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":993},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315838,"byte_end":315852,"line_start":94,"line_end":94,"column_start":12,"column_end":26},"name":"may_complicate","qualname":"<Fuse<T>>::may_complicate","value":"pub fn may_complicate(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether a call to `complicate()` may be productive.","sig":null,"attributes":[{"value":"/ Return whether a call to `complicate()` may be productive.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315502,"byte_end":315564,"line_start":87,"line_end":87,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315569,"byte_end":315572,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Formally, this is true if one of the following holds:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315577,"byte_end":315634,"line_start":89,"line_end":89,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315639,"byte_end":315642,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ - The most recent call to `complicate()` returned `true`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315647,"byte_end":315708,"line_start":91,"line_end":91,"column_start":5,"column_end":66}},{"value":"/ - `simplify()` has been called more recently than `complicate()` and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315713,"byte_end":315785,"line_start":92,"line_end":92,"column_start":5,"column_end":77}},{"value":"/   the last call returned `true`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315790,"byte_end":315826,"line_start":93,"line_end":93,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":994},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":316022,"byte_end":316041,"line_start":100,"line_end":100,"column_start":12,"column_end":31},"name":"disallow_complicate","qualname":"<Fuse<T>>::disallow_complicate","value":"pub fn disallow_complicate(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Disallow any further calls to `complicate()` until a call to\n `simplify()` returns `true`.\n","sig":null,"attributes":[{"value":"/ Disallow any further calls to `complicate()` until a call to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315909,"byte_end":315973,"line_start":98,"line_end":98,"column_start":5,"column_end":69}},{"value":"/ `simplify()` returns `true`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":315978,"byte_end":316010,"line_start":99,"line_end":99,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":995},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":316175,"byte_end":316181,"line_start":105,"line_end":105,"column_start":12,"column_end":18},"name":"freeze","qualname":"<Fuse<T>>::freeze","value":"pub fn freeze(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Prevent any further shrinking operations from occurring.\n","sig":null,"attributes":[{"value":"/ Prevent any further shrinking operations from occurring.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":316103,"byte_end":316163,"line_start":104,"line_end":104,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":6627},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":320110,"byte_end":320114,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Just","qualname":"::strategy::just::Just","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `Strategy` which always produces a single value value and never\n simplifies.\n","sig":null,"attributes":[{"value":"/ A `Strategy` which always produces a single value value and never","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":319933,"byte_end":320002,"line_start":26,"line_end":26,"column_start":1,"column_end":70}},{"value":"/ simplifies.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":320003,"byte_end":320018,"line_start":27,"line_end":27,"column_start":1,"column_end":16}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":320049,"byte_end":320098,"line_start":29,"line_end":29,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":6630},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":320188,"byte_end":320193,"line_start":32,"line_end":32,"column_start":5,"column_end":10},"name":"0","qualname":"::strategy::just::Just::0","value":"T","parent":{"krate":0,"index":6627},"children":[],"decl_id":null,"docs":" The value produced by this strategy.\n","sig":null,"attributes":[{"value":"/ The value produced by this strategy.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":320143,"byte_end":320183,"line_start":31,"line_end":31,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":1019},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":321283,"byte_end":321291,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"name":"LazyJust","qualname":"::strategy::just::LazyJust","value":"LazyJust {  }","parent":null,"children":[{"krate":0,"index":1022}],"decl_id":null,"docs":" A `Strategy` which always produces a single value value and never\n simplifies. If `T` is `Clone`, you should use `Just` instead.","sig":null,"attributes":[{"value":"/ A `Strategy` which always produces a single value value and never","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":320714,"byte_end":320783,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/ simplifies. If `T` is `Clone`, you should use `Just` instead.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":320784,"byte_end":320849,"line_start":57,"line_end":57,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":320850,"byte_end":320853,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ This is a generalization of `Just` and works by calling","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":320854,"byte_end":320913,"line_start":59,"line_end":59,"column_start":1,"column_end":60}},{"value":"/ the provided `Fn () -> T` in `.current()` every time. This is not a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":320914,"byte_end":320985,"line_start":60,"line_end":60,"column_start":1,"column_end":72}},{"value":"/ very interesting strategy, but is required in cases where `T` is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":320986,"byte_end":321054,"line_start":61,"line_end":61,"column_start":1,"column_end":69}},{"value":"/ not `Clone`. It is also used in `proptest_derive` where we can't","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":321055,"byte_end":321123,"line_start":62,"line_end":62,"column_start":1,"column_end":69}},{"value":"/ assume that your type is `Clone`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":321124,"byte_end":321161,"line_start":63,"line_end":63,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":321162,"byte_end":321165,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ **It is important that the function used be pure.**","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":321166,"byte_end":321221,"line_start":65,"line_end":65,"column_start":1,"column_end":56}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":321222,"byte_end":321271,"line_start":66,"line_end":66,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":1023},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":321432,"byte_end":321442,"line_start":73,"line_end":73,"column_start":10,"column_end":20},"name":"LazyJustFn","qualname":"::strategy::just::LazyJustFn","value":"LazyJust<V, fn() -> V>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `LazyJust<T, fn () -> T>`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `LazyJust<T, fn () -> T>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":321378,"byte_end":321422,"line_start":72,"line_end":72,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":321692,"byte_end":321695,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<LazyJust<T, F>>::new","value":"pub fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `LazyJust` strategy given the function/closure\n that produces the value.","sig":null,"attributes":[{"value":"/ Constructs a `LazyJust` strategy given the function/closure","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":321516,"byte_end":321579,"line_start":76,"line_end":76,"column_start":5,"column_end":68}},{"value":"/ that produces the value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":321584,"byte_end":321612,"line_start":77,"line_end":77,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":321617,"byte_end":321620,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ **It is important that the function used be pure.**","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":321625,"byte_end":321680,"line_start":79,"line_end":79,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1067},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/lazy.rs","byte_start":323897,"byte_end":323910,"line_start":21,"line_end":21,"column_start":12,"column_end":25},"name":"LazyValueTree","qualname":"::strategy::lazy::LazyValueTree","value":"LazyValueTree {  }","parent":null,"children":[{"krate":0,"index":1069}],"decl_id":null,"docs":" Represents a value tree that is initialized on the first call to any\n methods.","sig":null,"attributes":[{"value":"/ Represents a value tree that is initialized on the first call to any","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/lazy.rs","byte_start":323643,"byte_end":323715,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ methods.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/lazy.rs","byte_start":323716,"byte_end":323728,"line_start":17,"line_end":17,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/lazy.rs","byte_start":323729,"byte_end":323732,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This is used to defer potentially expensive generation to shrinking time. It","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/lazy.rs","byte_start":323733,"byte_end":323813,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ is public only to allow APIs to expose it as an intermediate value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/lazy.rs","byte_start":323814,"byte_end":323885,"line_start":20,"line_end":20,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1108},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":329307,"byte_end":329310,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"Map","qualname":"::strategy::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":1111},{"krate":0,"index":1112}],"decl_id":null,"docs":" `Strategy` and `ValueTree` map adaptor.","sig":null,"attributes":[{"value":"/ `Strategy` and `ValueTree` map adaptor.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":329166,"byte_end":329209,"line_start":21,"line_end":21,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":329210,"byte_end":329213,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_map()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":329214,"byte_end":329245,"line_start":23,"line_end":23,"column_start":1,"column_end":32}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":329246,"byte_end":329295,"line_start":24,"line_end":24,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1137},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":330905,"byte_end":330912,"line_start":89,"line_end":89,"column_start":12,"column_end":19},"name":"MapInto","qualname":"::strategy::map::MapInto","value":"MapInto {  }","parent":null,"children":[{"krate":0,"index":1140},{"krate":0,"index":1141}],"decl_id":null,"docs":" `Strategy` and `ValueTree` map into adaptor.","sig":null,"attributes":[{"value":"/ `Strategy` and `ValueTree` map into adaptor.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":330754,"byte_end":330802,"line_start":85,"line_end":85,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":330803,"byte_end":330806,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_map_into()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":330807,"byte_end":330843,"line_start":87,"line_end":87,"column_start":1,"column_end":37}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":330844,"byte_end":330893,"line_start":88,"line_end":88,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1167},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":332522,"byte_end":332529,"line_start":158,"line_end":158,"column_start":12,"column_end":19},"name":"Perturb","qualname":"::strategy::map::Perturb","value":"Perturb {  }","parent":null,"children":[{"krate":0,"index":1170},{"krate":0,"index":1171}],"decl_id":null,"docs":" `Strategy` perturbation adaptor.","sig":null,"attributes":[{"value":"/ `Strategy` perturbation adaptor.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":332384,"byte_end":332420,"line_start":154,"line_end":154,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":332421,"byte_end":332424,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_perturb()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":332425,"byte_end":332460,"line_start":156,"line_end":156,"column_start":1,"column_end":36}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":332461,"byte_end":332510,"line_start":157,"line_end":157,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1188},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":333572,"byte_end":333588,"line_start":201,"line_end":201,"column_start":12,"column_end":28},"name":"PerturbValueTree","qualname":"::strategy::map::PerturbValueTree","value":"PerturbValueTree {  }","parent":null,"children":[{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193}],"decl_id":null,"docs":" `ValueTree` perturbation adaptor.","sig":null,"attributes":[{"value":"/ `ValueTree` perturbation adaptor.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":333483,"byte_end":333520,"line_start":198,"line_end":198,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":333521,"byte_end":333524,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_perturb()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":333525,"byte_end":333560,"line_start":200,"line_end":200,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1219},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/recursive.rs","byte_start":336672,"byte_end":336681,"line_start":18,"line_end":18,"column_start":12,"column_end":21},"name":"Recursive","qualname":"::strategy::recursive::Recursive","value":"Recursive {  }","parent":null,"children":[{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1226}],"decl_id":null,"docs":" Return type from `Strategy::prop_recursive()`.\n","sig":null,"attributes":[{"value":"/ Return type from `Strategy::prop_recursive()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/recursive.rs","byte_start":336560,"byte_end":336610,"line_start":16,"line_end":16,"column_start":1,"column_end":51}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/recursive.rs","byte_start":336611,"byte_end":336660,"line_start":17,"line_end":17,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":6645},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":343917,"byte_end":343924,"line_start":23,"line_end":23,"column_start":12,"column_end":19},"name":"Shuffle","qualname":"::strategy::shuffle::Shuffle","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Strategy` shuffle adaptor.","sig":null,"attributes":[{"value":"/ `Strategy` shuffle adaptor.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":343760,"byte_end":343791,"line_start":18,"line_end":18,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":343792,"byte_end":343795,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_shuffle()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":343796,"byte_end":343831,"line_start":20,"line_end":20,"column_start":1,"column_end":36}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":343856,"byte_end":343905,"line_start":22,"line_end":22,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":1257},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":344192,"byte_end":344203,"line_start":30,"line_end":30,"column_start":11,"column_end":22},"name":"Shuffleable","qualname":"::strategy::shuffle::Shuffleable","value":"Shuffleable","parent":null,"children":[{"krate":0,"index":1258},{"krate":0,"index":1259}],"decl_id":null,"docs":" A value which can be used with the `prop_shuffle` combinator.","sig":null,"attributes":[{"value":"/ A value which can be used with the `prop_shuffle` combinator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":343944,"byte_end":344009,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":344010,"byte_end":344013,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ This is not a general-purpose trait. Its methods are prefixed with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":344014,"byte_end":344084,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ `shuffle_` to avoid the compiler suggesting them or this trait as","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":344085,"byte_end":344154,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/ corrections in errors.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":344155,"byte_end":344181,"line_start":29,"line_end":29,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1258},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":344259,"byte_end":344270,"line_start":32,"line_end":32,"column_start":8,"column_end":19},"name":"shuffle_len","qualname":"::strategy::shuffle::Shuffleable::shuffle_len","value":"pub fn shuffle_len(&Self) -> usize","parent":{"krate":0,"index":1257},"children":[],"decl_id":null,"docs":" Return the length of this collection.\n","sig":null,"attributes":[{"value":"/ Return the length of this collection.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":344210,"byte_end":344251,"line_start":31,"line_end":31,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1259},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":344343,"byte_end":344355,"line_start":34,"line_end":34,"column_start":8,"column_end":20},"name":"shuffle_swap","qualname":"::strategy::shuffle::Shuffleable::shuffle_swap","value":"pub fn shuffle_swap(&mut Self, usize, usize)","parent":{"krate":0,"index":1257},"children":[],"decl_id":null,"docs":" Swap the elements at the given indices.\n","sig":null,"attributes":[{"value":"/ Swap the elements at the given indices.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":344292,"byte_end":344335,"line_start":33,"line_end":33,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":6832},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":346205,"byte_end":346221,"line_start":113,"line_end":113,"column_start":12,"column_end":28},"name":"ShuffleValueTree","qualname":"::strategy::shuffle::ShuffleValueTree","value":"ShuffleValueTree {  }","parent":null,"children":[{"krate":0,"index":6834},{"krate":0,"index":6835},{"krate":0,"index":6836},{"krate":0,"index":6837}],"decl_id":null,"docs":" `ValueTree` shuffling adaptor.","sig":null,"attributes":[{"value":"/ `ValueTree` shuffling adaptor.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":346095,"byte_end":346129,"line_start":109,"line_end":109,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":346130,"byte_end":346133,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_shuffle()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":346134,"byte_end":346169,"line_start":111,"line_end":111,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":1286},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":352624,"byte_end":352631,"line_start":29,"line_end":29,"column_start":10,"column_end":17},"name":"NewTree","qualname":"::strategy::traits::NewTree","value":"Result<<S as Strategy>::Tree, Reason>","parent":null,"children":[],"decl_id":null,"docs":" A new [`ValueTree`] from a [`Strategy`] when [`Ok`] or otherwise [`Err`]\n when a new value-tree can not be produced for some reason such as\n in the case of filtering with a predicate which always returns false.\n You should pass in your strategy as the type parameter.","sig":null,"attributes":[{"value":"/ A new [`ValueTree`] from a [`Strategy`] when [`Ok`] or otherwise [`Err`]","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":352080,"byte_end":352156,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"/ when a new value-tree can not be produced for some reason such as","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":352157,"byte_end":352226,"line_start":21,"line_end":21,"column_start":1,"column_end":70}},{"value":"/ in the case of filtering with a predicate which always returns false.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":352227,"byte_end":352300,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ You should pass in your strategy as the type parameter.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":352301,"byte_end":352360,"line_start":23,"line_end":23,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":352361,"byte_end":352364,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`Strategy`]: trait.Strategy.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":352365,"byte_end":352402,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"/ [`ValueTree`]: trait.ValueTree.html","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":352403,"byte_end":352442,"line_start":26,"line_end":26,"column_start":1,"column_end":40}},{"value":"/ [`Ok`]: https://doc.rust-lang.org/nightly/std/result/enum.Result.html#variant.Ok","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":352443,"byte_end":352527,"line_start":27,"line_end":27,"column_start":1,"column_end":85}},{"value":"/ [`Err`]: https://doc.rust-lang.org/nightly/std/result/enum.Result.html#variant.Err","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":352528,"byte_end":352614,"line_start":28,"line_end":28,"column_start":1,"column_end":87}}]},{"kind":"Trait","id":{"krate":0,"index":1288},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":352974,"byte_end":352982,"line_start":37,"line_end":37,"column_start":11,"column_end":19},"name":"Strategy","qualname":"::strategy::traits::Strategy","value":"Strategy: fmt::Debug","parent":null,"children":[{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1292},{"krate":0,"index":1295},{"krate":0,"index":1297},{"krate":0,"index":1300},{"krate":0,"index":1303},{"krate":0,"index":1306},{"krate":0,"index":1309},{"krate":0,"index":1312},{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323}],"decl_id":null,"docs":" A strategy for producing arbitrary values of a given type.","sig":null,"attributes":[{"value":"/ A strategy for producing arbitrary values of a given type.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":352677,"byte_end":352739,"line_start":31,"line_end":31,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":352740,"byte_end":352743,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ `fmt::Debug` is a hard requirement for all strategies currently due to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":352744,"byte_end":352818,"line_start":33,"line_end":33,"column_start":1,"column_end":75}},{"value":"/ `prop_flat_map()`. This constraint will be removed when specialisation","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":352819,"byte_end":352893,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ becomes stable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":352894,"byte_end":352913,"line_start":35,"line_end":35,"column_start":1,"column_end":20}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":352914,"byte_end":352963,"line_start":36,"line_end":36,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":1289},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":353059,"byte_end":353063,"line_start":39,"line_end":39,"column_start":10,"column_end":14},"name":"Tree","qualname":"::strategy::traits::Strategy::Tree","value":"type Tree: ValueTree<Value = Self::Value>;","parent":{"krate":0,"index":1288},"children":[],"decl_id":null,"docs":" The value tree generated by this `Strategy`.\n","sig":null,"attributes":[{"value":"/ The value tree generated by this `Strategy`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":353001,"byte_end":353049,"line_start":38,"line_end":38,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":1290},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":353411,"byte_end":353416,"line_start":46,"line_end":46,"column_start":10,"column_end":15},"name":"Value","qualname":"::strategy::traits::Strategy::Value","value":"type Value: fmt::Debug;","parent":{"krate":0,"index":1288},"children":[],"decl_id":null,"docs":" The type of value used by functions under test generated by this Strategy.","sig":null,"attributes":[{"value":"/ The type of value used by functions under test generated by this Strategy.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":353102,"byte_end":353180,"line_start":41,"line_end":41,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":353185,"byte_end":353188,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the same type as the associated type `Value`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":353193,"byte_end":353261,"line_start":43,"line_end":43,"column_start":5,"column_end":73}},{"value":"/ in `Self::Tree`. It is provided here to simplify usage particularly","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":353266,"byte_end":353337,"line_start":44,"line_end":44,"column_start":5,"column_end":76}},{"value":"/ in conjunction with `-> impl Strategy<Value = MyType>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":353342,"byte_end":353401,"line_start":45,"line_end":45,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":354134,"byte_end":354142,"line_start":60,"line_end":60,"column_start":8,"column_end":16},"name":"new_tree","qualname":"::strategy::traits::Strategy::new_tree","value":"pub fn new_tree(&Self, &mut TestRunner) -> NewTree<Self>","parent":{"krate":0,"index":1288},"children":[],"decl_id":null,"docs":" Generate a new value tree from the given runner.","sig":null,"attributes":[{"value":"/ Generate a new value tree from the given runner.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":353435,"byte_end":353487,"line_start":48,"line_end":48,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":353492,"byte_end":353495,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ This may fail if there are constraints on the generated value and the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":353500,"byte_end":353573,"line_start":50,"line_end":50,"column_start":5,"column_end":78}},{"value":"/ generator is unable to produce anything that satisfies them. Any","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":353578,"byte_end":353646,"line_start":51,"line_end":51,"column_start":5,"column_end":73}},{"value":"/ failure is wrapped in `TestError::Abort`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":353651,"byte_end":353696,"line_start":52,"line_end":52,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":353701,"byte_end":353704,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ This method is generally expected to be deterministic. That is, given a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":353709,"byte_end":353784,"line_start":54,"line_end":54,"column_start":5,"column_end":80}},{"value":"/ `TestRunner` with its RNG in a particular state, this should produce an","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":353789,"byte_end":353864,"line_start":55,"line_end":55,"column_start":5,"column_end":80}},{"value":"/ identical `ValueTree` every time. Non-deterministic strategies do not","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":353869,"byte_end":353942,"line_start":56,"line_end":56,"column_start":5,"column_end":78}},{"value":"/ cause problems during normal operation, but they do break failure","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":353947,"byte_end":354016,"line_start":57,"line_end":57,"column_start":5,"column_end":74}},{"value":"/ persistence since it is implemented by simply saving the seed used to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":354021,"byte_end":354094,"line_start":58,"line_end":58,"column_start":5,"column_end":78}},{"value":"/ generate the test case.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":354099,"byte_end":354126,"line_start":59,"line_end":59,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1292},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":354837,"byte_end":354845,"line_start":74,"line_end":74,"column_start":8,"column_end":16},"name":"prop_map","qualname":"::strategy::traits::Strategy::prop_map","value":"pub fn prop_map<O: fmt::Debug, F: Fn(Self::Value) -> O>(Self, F)\n-> Map<Self, F> where Self: Sized","parent":{"krate":0,"index":1288},"children":[],"decl_id":null,"docs":" Returns a strategy which produces values transformed by the function\n `fun`.","sig":null,"attributes":[{"value":"/ Returns a strategy which produces values transformed by the function","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":354198,"byte_end":354270,"line_start":62,"line_end":62,"column_start":5,"column_end":77}},{"value":"/ `fun`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":354275,"byte_end":354285,"line_start":63,"line_end":63,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":354290,"byte_end":354293,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ There is no need (or possibility, for that matter) to define how the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":354298,"byte_end":354370,"line_start":65,"line_end":65,"column_start":5,"column_end":77}},{"value":"/ output is to be shrunken. Shrinking continues to take place in terms of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":354375,"byte_end":354450,"line_start":66,"line_end":66,"column_start":5,"column_end":80}},{"value":"/ the source value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":354455,"byte_end":354476,"line_start":67,"line_end":67,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":354481,"byte_end":354484,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ `fun` should be a deterministic function. That is, for a given input","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":354489,"byte_end":354561,"line_start":69,"line_end":69,"column_start":5,"column_end":77}},{"value":"/ value, it should produce an equivalent output value on every call.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":354566,"byte_end":354636,"line_start":70,"line_end":70,"column_start":5,"column_end":75}},{"value":"/ Proptest assumes that it can call the function as many times as needed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":354641,"byte_end":354715,"line_start":71,"line_end":71,"column_start":5,"column_end":79}},{"value":"/ to generate as many identical values as needed. For this reason, `F` is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":354720,"byte_end":354795,"line_start":72,"line_end":72,"column_start":5,"column_end":80}},{"value":"/ `Fn` rather than `FnMut`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":354800,"byte_end":354829,"line_start":73,"line_end":73,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":355527,"byte_end":355540,"line_start":96,"line_end":96,"column_start":8,"column_end":21},"name":"prop_map_into","qualname":"::strategy::traits::Strategy::prop_map_into","value":"pub fn prop_map_into<O: fmt::Debug>(Self) -> MapInto<Self, O> where\nSelf: Sized, Self::Value: Into<O>","parent":{"krate":0,"index":1288},"children":[],"decl_id":null,"docs":" Returns a strategy which produces values of type `O` by transforming\n `Self` with `Into<O>`.","sig":null,"attributes":[{"value":"/ Returns a strategy which produces values of type `O` by transforming","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":355069,"byte_end":355141,"line_start":87,"line_end":87,"column_start":5,"column_end":77}},{"value":"/ `Self` with `Into<O>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":355146,"byte_end":355172,"line_start":88,"line_end":88,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":355177,"byte_end":355180,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ You should always prefer this operation instead of `prop_map` when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":355185,"byte_end":355255,"line_start":90,"line_end":90,"column_start":5,"column_end":75}},{"value":"/ you can as it is both clearer and also currently more efficient.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":355260,"byte_end":355328,"line_start":91,"line_end":91,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":355333,"byte_end":355336,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ There is no need (or possibility, for that matter) to define how the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":355341,"byte_end":355413,"line_start":93,"line_end":93,"column_start":5,"column_end":77}},{"value":"/ output is to be shrunken. Shrinking continues to take place in terms of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":355418,"byte_end":355493,"line_start":94,"line_end":94,"column_start":5,"column_end":80}},{"value":"/ the source value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":355498,"byte_end":355519,"line_start":95,"line_end":95,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":357056,"byte_end":357068,"line_start":137,"line_end":137,"column_start":8,"column_end":20},"name":"prop_perturb","qualname":"::strategy::traits::Strategy::prop_perturb","value":"pub fn prop_perturb<O: fmt::Debug, F: Fn(Self::Value, TestRng) -> O>(Self, F)\n-> Perturb<Self, F> where Self: Sized","parent":{"krate":0,"index":1288},"children":[],"decl_id":null,"docs":" Returns a strategy which produces values transformed by the function\n `fun`, which is additionally given a random number generator.","sig":null,"attributes":[{"value":"/ Returns a strategy which produces values transformed by the function","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":355687,"byte_end":355759,"line_start":104,"line_end":104,"column_start":5,"column_end":77}},{"value":"/ `fun`, which is additionally given a random number generator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":355764,"byte_end":355829,"line_start":105,"line_end":105,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":355834,"byte_end":355837,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ This is exactly like `prop_map()` except for the addition of the second","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":355842,"byte_end":355917,"line_start":107,"line_end":107,"column_start":5,"column_end":80}},{"value":"/ argument to the function. This allows introducing chaotic variations to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":355922,"byte_end":355997,"line_start":108,"line_end":108,"column_start":5,"column_end":80}},{"value":"/ generated values that are not easily expressed otherwise while allowing","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356002,"byte_end":356077,"line_start":109,"line_end":109,"column_start":5,"column_end":80}},{"value":"/ shrinking to proceed reasonably.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356082,"byte_end":356118,"line_start":110,"line_end":110,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356123,"byte_end":356126,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ During shrinking, `fun` is always called with an identical random","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356131,"byte_end":356200,"line_start":112,"line_end":112,"column_start":5,"column_end":74}},{"value":"/ number generator, so if it is a pure function it will always perform","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356205,"byte_end":356277,"line_start":113,"line_end":113,"column_start":5,"column_end":77}},{"value":"/ the same perturbation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356282,"byte_end":356308,"line_start":114,"line_end":114,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356313,"byte_end":356316,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356321,"byte_end":356335,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356340,"byte_end":356343,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356348,"byte_end":356355,"line_start":118,"line_end":118,"column_start":5,"column_end":12}},{"value":"/ // The prelude also gets us the `Rng` trait.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356360,"byte_end":356408,"line_start":119,"line_end":119,"column_start":5,"column_end":53}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356413,"byte_end":356442,"line_start":120,"line_end":120,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356447,"byte_end":356450,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ proptest! {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356455,"byte_end":356470,"line_start":122,"line_end":122,"column_start":5,"column_end":20}},{"value":"/   #[test]","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356475,"byte_end":356488,"line_start":123,"line_end":123,"column_start":5,"column_end":18}},{"value":"/   fn test_something(a in (0i32..10).prop_perturb(","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356493,"byte_end":356546,"line_start":124,"line_end":124,"column_start":5,"column_end":58}},{"value":"/       // Perturb the integer `a` (range 0..10) to a pair of that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356551,"byte_end":356619,"line_start":125,"line_end":125,"column_start":5,"column_end":73}},{"value":"/       // integer and another that's ± 10 of it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356624,"byte_end":356676,"line_start":126,"line_end":126,"column_start":5,"column_end":56}},{"value":"/       // Note that this particular case would be better implemented as","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356681,"byte_end":356755,"line_start":127,"line_end":127,"column_start":5,"column_end":79}},{"value":"/       // `(0i32..10, -10i32..10).prop_map(|(a, b)| (a, a + b))`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356760,"byte_end":356827,"line_start":128,"line_end":128,"column_start":5,"column_end":72}},{"value":"/       // but is shown here for simplicity.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356832,"byte_end":356878,"line_start":129,"line_end":129,"column_start":5,"column_end":51}},{"value":"/       |centre, rng| (centre, centre + rng.gen_range(-10, 10))))","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356883,"byte_end":356950,"line_start":130,"line_end":130,"column_start":5,"column_end":72}},{"value":"/   {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356955,"byte_end":356962,"line_start":131,"line_end":131,"column_start":5,"column_end":12}},{"value":"/       // Test stuff","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356967,"byte_end":356990,"line_start":132,"line_end":132,"column_start":5,"column_end":28}},{"value":"/   }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":356995,"byte_end":357002,"line_start":133,"line_end":133,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":357007,"byte_end":357012,"line_start":134,"line_end":134,"column_start":5,"column_end":10}},{"value":"/ # fn main() { }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":357017,"byte_end":357036,"line_start":135,"line_end":135,"column_start":5,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":357041,"byte_end":357048,"line_start":136,"line_end":136,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1300},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":361379,"byte_end":361392,"line_start":238,"line_end":238,"column_start":8,"column_end":21},"name":"prop_flat_map","qualname":"::strategy::traits::Strategy::prop_flat_map","value":"pub fn prop_flat_map<S: Strategy, F: Fn(Self::Value) -> S>(Self, F)\n-> Flatten<Map<Self, F>> where Self: Sized","parent":{"krate":0,"index":1288},"children":[],"decl_id":null,"docs":" Maps values produced by this strategy into new strategies and picks\n values from those strategies.","sig":null,"attributes":[{"value":"/ Maps values produced by this strategy into new strategies and picks","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":357309,"byte_end":357380,"line_start":150,"line_end":150,"column_start":5,"column_end":76}},{"value":"/ values from those strategies.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":357385,"byte_end":357418,"line_start":151,"line_end":151,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":357423,"byte_end":357426,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ `fun` is used to transform the values produced by this strategy into","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":357431,"byte_end":357503,"line_start":153,"line_end":153,"column_start":5,"column_end":77}},{"value":"/ other strategies. Values are then chosen from the derived strategies.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":357508,"byte_end":357581,"line_start":154,"line_end":154,"column_start":5,"column_end":78}},{"value":"/ Shrinking proceeds by shrinking individual values as well as shrinking","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":357586,"byte_end":357660,"line_start":155,"line_end":155,"column_start":5,"column_end":79}},{"value":"/ the input used to generate the internal strategies.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":357665,"byte_end":357720,"line_start":156,"line_end":156,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":357725,"byte_end":357728,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ ## Shrinking","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":357733,"byte_end":357749,"line_start":158,"line_end":158,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":357754,"byte_end":357757,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ In the case of test failure, shrinking will not only shrink the output","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":357762,"byte_end":357836,"line_start":160,"line_end":160,"column_start":5,"column_end":79}},{"value":"/ from the combinator itself, but also the input, i.e., the strategy used","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":357841,"byte_end":357916,"line_start":161,"line_end":161,"column_start":5,"column_end":80}},{"value":"/ to generate the output itself. Doing this requires searching the new","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":357921,"byte_end":357993,"line_start":162,"line_end":162,"column_start":5,"column_end":77}},{"value":"/ derived strategy for a new failing input. The combinator will generate","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":357998,"byte_end":358072,"line_start":163,"line_end":163,"column_start":5,"column_end":79}},{"value":"/ up to `Config::cases` values for this search.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358077,"byte_end":358126,"line_start":164,"line_end":164,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358131,"byte_end":358134,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ As a result, nested `prop_flat_map`/`Flatten` combinators risk","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358139,"byte_end":358205,"line_start":166,"line_end":166,"column_start":5,"column_end":71}},{"value":"/ exponential run time on this search for new failing values. To ensure","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358210,"byte_end":358283,"line_start":167,"line_end":167,"column_start":5,"column_end":78}},{"value":"/ that test failures occur within a reasonable amount of time, all of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358288,"byte_end":358359,"line_start":168,"line_end":168,"column_start":5,"column_end":76}},{"value":"/ these combinators share a single \"flat map regen\" counter, and will","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358364,"byte_end":358435,"line_start":169,"line_end":169,"column_start":5,"column_end":76}},{"value":"/ stop generating new values if it exceeds `Config::max_flat_map_regens`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358440,"byte_end":358515,"line_start":170,"line_end":170,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358520,"byte_end":358523,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358528,"byte_end":358542,"line_start":172,"line_end":172,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358547,"byte_end":358550,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ Generate two integers, where the second is always less than the first,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358555,"byte_end":358629,"line_start":174,"line_end":174,"column_start":5,"column_end":79}},{"value":"/ without using filtering:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358634,"byte_end":358662,"line_start":175,"line_end":175,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358667,"byte_end":358670,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358675,"byte_end":358682,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358687,"byte_end":358716,"line_start":178,"line_end":178,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358721,"byte_end":358724,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ proptest! {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358729,"byte_end":358744,"line_start":180,"line_end":180,"column_start":5,"column_end":20}},{"value":"/   # /*","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358749,"byte_end":358759,"line_start":181,"line_end":181,"column_start":5,"column_end":15}},{"value":"/   #[test]","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358764,"byte_end":358777,"line_start":182,"line_end":182,"column_start":5,"column_end":18}},{"value":"/   # */","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358782,"byte_end":358792,"line_start":183,"line_end":183,"column_start":5,"column_end":15}},{"value":"/   fn test_two(","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358797,"byte_end":358815,"line_start":184,"line_end":184,"column_start":5,"column_end":23}},{"value":"/     // Pick integers in the 1..65536 range, and derive a strategy","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358820,"byte_end":358889,"line_start":185,"line_end":185,"column_start":5,"column_end":74}},{"value":"/     // which emits a tuple of that integer and another one which is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358894,"byte_end":358965,"line_start":186,"line_end":186,"column_start":5,"column_end":76}},{"value":"/     // some value less than it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":358970,"byte_end":359005,"line_start":187,"line_end":187,"column_start":5,"column_end":40}},{"value":"/     (a, b) in (1..65536).prop_flat_map(|a| (Just(a), 0..a))","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359010,"byte_end":359073,"line_start":188,"line_end":188,"column_start":5,"column_end":68}},{"value":"/   ) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359078,"byte_end":359087,"line_start":189,"line_end":189,"column_start":5,"column_end":14}},{"value":"/     prop_assert!(b < a);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359092,"byte_end":359120,"line_start":190,"line_end":190,"column_start":5,"column_end":33}},{"value":"/   }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359125,"byte_end":359132,"line_start":191,"line_end":191,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359137,"byte_end":359142,"line_start":192,"line_end":192,"column_start":5,"column_end":10}},{"value":"/ #","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359147,"byte_end":359152,"line_start":193,"line_end":193,"column_start":5,"column_end":10}},{"value":"/ # fn main() { test_two(); }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359157,"byte_end":359188,"line_start":194,"line_end":194,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359193,"byte_end":359200,"line_start":195,"line_end":195,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359205,"byte_end":359208,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ ## Choosing the right flat-map","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359213,"byte_end":359247,"line_start":197,"line_end":197,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359252,"byte_end":359255,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ `Strategy` has three \"flat-map\" combinators. They look very similar at","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359260,"byte_end":359334,"line_start":199,"line_end":199,"column_start":5,"column_end":79}},{"value":"/ first, and can be used to produce superficially identical test results.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359339,"byte_end":359414,"line_start":200,"line_end":200,"column_start":5,"column_end":80}},{"value":"/ For example, the following three expressions all produce inputs which","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359419,"byte_end":359492,"line_start":201,"line_end":201,"column_start":5,"column_end":78}},{"value":"/ are 2-tuples `(a,b)` where the `b` component is less than `a`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359497,"byte_end":359563,"line_start":202,"line_end":202,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359568,"byte_end":359571,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359576,"byte_end":359589,"line_start":204,"line_end":204,"column_start":5,"column_end":18}},{"value":"/ # #![allow(unused_variables)]","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359594,"byte_end":359627,"line_start":205,"line_end":205,"column_start":5,"column_end":38}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359632,"byte_end":359661,"line_start":206,"line_end":206,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359666,"byte_end":359669,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ let flat_map = (1..10).prop_flat_map(|a| (Just(a), 0..a));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359674,"byte_end":359736,"line_start":208,"line_end":208,"column_start":5,"column_end":67}},{"value":"/ let ind_flat_map = (1..10).prop_ind_flat_map(|a| (Just(a), 0..a));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359741,"byte_end":359811,"line_start":209,"line_end":209,"column_start":5,"column_end":75}},{"value":"/ let ind_flat_map2 = (1..10).prop_ind_flat_map2(|a| 0..a);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359816,"byte_end":359877,"line_start":210,"line_end":210,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359882,"byte_end":359889,"line_start":211,"line_end":211,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359894,"byte_end":359897,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ The three do differ however in terms of how they shrink.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359902,"byte_end":359962,"line_start":213,"line_end":213,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359967,"byte_end":359970,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ For `flat_map`, both `a` and `b` will shrink, and the invariant that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":359975,"byte_end":360047,"line_start":215,"line_end":215,"column_start":5,"column_end":77}},{"value":"/ `b < a` is maintained. This is a \"dependent\" or \"higher-order\" strategy","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":360052,"byte_end":360127,"line_start":216,"line_end":216,"column_start":5,"column_end":80}},{"value":"/ in that it remembers that the strategy for choosing `b` is dependent on","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":360132,"byte_end":360207,"line_start":217,"line_end":217,"column_start":5,"column_end":80}},{"value":"/ the value chosen for `a`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":360212,"byte_end":360241,"line_start":218,"line_end":218,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":360246,"byte_end":360249,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ For `ind_flat_map`, the invariant `b < a` is maintained, but only","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":360254,"byte_end":360323,"line_start":220,"line_end":220,"column_start":5,"column_end":74}},{"value":"/ because `a` does not shrink. This is due to the fact that the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":360328,"byte_end":360393,"line_start":221,"line_end":221,"column_start":5,"column_end":70}},{"value":"/ dependency between the strategies is not tracked; `a` is simply seen as","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":360398,"byte_end":360473,"line_start":222,"line_end":222,"column_start":5,"column_end":80}},{"value":"/ a constant.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":360478,"byte_end":360493,"line_start":223,"line_end":223,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":360498,"byte_end":360501,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ Finally, for `ind_flat_map2`, the invariant `b < a` is _not_","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":360506,"byte_end":360570,"line_start":225,"line_end":225,"column_start":5,"column_end":69}},{"value":"/ maintained, because `a` can shrink independently of `b`, again because","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":360575,"byte_end":360649,"line_start":226,"line_end":226,"column_start":5,"column_end":79}},{"value":"/ the dependency between the two variables is not tracked, but in this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":360654,"byte_end":360726,"line_start":227,"line_end":227,"column_start":5,"column_end":77}},{"value":"/ case the derivation of `a` is still exposed to the shrinking system.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":360731,"byte_end":360803,"line_start":228,"line_end":228,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":360808,"byte_end":360811,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ The use-cases for the independent flat-map variants is pretty narrow.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":360816,"byte_end":360889,"line_start":230,"line_end":230,"column_start":5,"column_end":78}},{"value":"/ For the majority of cases where invariants need to be maintained and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":360894,"byte_end":360966,"line_start":231,"line_end":231,"column_start":5,"column_end":77}},{"value":"/ you want all components to shrink, `prop_flat_map` is the way to go.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":360971,"byte_end":361043,"line_start":232,"line_end":232,"column_start":5,"column_end":77}},{"value":"/ `prop_ind_flat_map` makes the most sense when the input to the map","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":361048,"byte_end":361118,"line_start":233,"line_end":233,"column_start":5,"column_end":75}},{"value":"/ function is not exposed in the output and shrinking across strategies","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":361123,"byte_end":361196,"line_start":234,"line_end":234,"column_start":5,"column_end":78}},{"value":"/ is not expected to be useful. `prop_ind_flat_map2` is useful for using","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":361201,"byte_end":361275,"line_start":235,"line_end":235,"column_start":5,"column_end":79}},{"value":"/ related values as starting points while not constraining them to that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":361280,"byte_end":361353,"line_start":236,"line_end":236,"column_start":5,"column_end":78}},{"value":"/ relation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":361358,"byte_end":361371,"line_start":237,"line_end":237,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":362267,"byte_end":362284,"line_start":264,"line_end":264,"column_start":8,"column_end":25},"name":"prop_ind_flat_map","qualname":"::strategy::traits::Strategy::prop_ind_flat_map","value":"pub fn prop_ind_flat_map<S: Strategy, F: Fn(Self::Value) -> S>(Self, F)\n-> IndFlatten<Map<Self, F>> where Self: Sized","parent":{"krate":0,"index":1288},"children":[],"decl_id":null,"docs":" Maps values produced by this strategy into new strategies and picks\n values from those strategies while considering the new strategies to be\n independent.","sig":null,"attributes":[{"value":"/ Maps values produced by this strategy into new strategies and picks","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":361637,"byte_end":361708,"line_start":251,"line_end":251,"column_start":5,"column_end":76}},{"value":"/ values from those strategies while considering the new strategies to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":361713,"byte_end":361788,"line_start":252,"line_end":252,"column_start":5,"column_end":80}},{"value":"/ independent.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":361793,"byte_end":361809,"line_start":253,"line_end":253,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":361814,"byte_end":361817,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This is very similar to `prop_flat_map()`, but shrinking will *not*","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":361822,"byte_end":361893,"line_start":255,"line_end":255,"column_start":5,"column_end":76}},{"value":"/ attempt to shrink the input that produces the derived strategies. This","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":361898,"byte_end":361972,"line_start":256,"line_end":256,"column_start":5,"column_end":79}},{"value":"/ is appropriate for when the derived strategies already fully shrink in","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":361977,"byte_end":362051,"line_start":257,"line_end":257,"column_start":5,"column_end":79}},{"value":"/ the desired way.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":362056,"byte_end":362076,"line_start":258,"line_end":258,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":362081,"byte_end":362084,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ In most cases, you want `prop_flat_map()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":362089,"byte_end":362135,"line_start":260,"line_end":260,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":362140,"byte_end":362143,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ See `prop_flat_map()` for a more detailed explanation on how the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":362148,"byte_end":362216,"line_start":262,"line_end":262,"column_start":5,"column_end":73}},{"value":"/ three flat-map combinators differ.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":362221,"byte_end":362259,"line_start":263,"line_end":263,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":362819,"byte_end":362837,"line_start":282,"line_end":282,"column_start":8,"column_end":26},"name":"prop_ind_flat_map2","qualname":"::strategy::traits::Strategy::prop_ind_flat_map2","value":"pub fn prop_ind_flat_map2<S: Strategy, F: Fn(Self::Value) -> S>(Self, F)\n-> IndFlattenMap<Self, F> where Self: Sized","parent":{"krate":0,"index":1288},"children":[],"decl_id":null,"docs":" Similar to `prop_ind_flat_map()`, but produces 2-tuples with the input\n generated from `self` in slot 0 and the derived strategy in slot 1.","sig":null,"attributes":[{"value":"/ Similar to `prop_ind_flat_map()`, but produces 2-tuples with the input","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":362530,"byte_end":362604,"line_start":277,"line_end":277,"column_start":5,"column_end":79}},{"value":"/ generated from `self` in slot 0 and the derived strategy in slot 1.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":362609,"byte_end":362680,"line_start":278,"line_end":278,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":362685,"byte_end":362688,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ See `prop_flat_map()` for a more detailed explanation on how the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":362693,"byte_end":362761,"line_start":280,"line_end":280,"column_start":5,"column_end":73}},{"value":"/ three flat-map combinators differ differ.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":362766,"byte_end":362811,"line_start":281,"line_end":281,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":364210,"byte_end":364221,"line_start":315,"line_end":315,"column_start":8,"column_end":19},"name":"prop_filter","qualname":"::strategy::traits::Strategy::prop_filter","value":"pub fn prop_filter<R: Into<Reason>, F: Fn(&Self::Value) -> bool>(Self, R, F)\n-> Filter<Self, F> where Self: Sized","parent":{"krate":0,"index":1288},"children":[],"decl_id":null,"docs":" Returns a strategy which only produces values accepted by `fun`.","sig":null,"attributes":[{"value":"/ Returns a strategy which only produces values accepted by `fun`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":363079,"byte_end":363147,"line_start":295,"line_end":295,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":363152,"byte_end":363155,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ This results in a very naïve form of rejection sampling and should only","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":363160,"byte_end":363236,"line_start":297,"line_end":297,"column_start":5,"column_end":80}},{"value":"/ be used if (a) relatively few values will actually be rejected; (b) it","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":363241,"byte_end":363315,"line_start":298,"line_end":298,"column_start":5,"column_end":79}},{"value":"/ isn't easy to express what you want by using another strategy and/or","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":363320,"byte_end":363392,"line_start":299,"line_end":299,"column_start":5,"column_end":77}},{"value":"/ `map()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":363397,"byte_end":363409,"line_start":300,"line_end":300,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":363414,"byte_end":363417,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ There are a lot of downsides to this form of filtering. It slows","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":363422,"byte_end":363490,"line_start":302,"line_end":302,"column_start":5,"column_end":73}},{"value":"/ testing down, since values must be generated but then discarded.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":363495,"byte_end":363563,"line_start":303,"line_end":303,"column_start":5,"column_end":73}},{"value":"/ Proptest only allows a limited number of rejects this way (across the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":363568,"byte_end":363641,"line_start":304,"line_end":304,"column_start":5,"column_end":78}},{"value":"/ entire `TestRunner`). Rejection can interfere with shrinking;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":363646,"byte_end":363711,"line_start":305,"line_end":305,"column_start":5,"column_end":70}},{"value":"/ particularly, complex filters may largely or entirely prevent shrinking","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":363716,"byte_end":363791,"line_start":306,"line_end":306,"column_start":5,"column_end":80}},{"value":"/ from substantially altering the original value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":363796,"byte_end":363847,"line_start":307,"line_end":307,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":363852,"byte_end":363855,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ Local rejection sampling is still preferable to rejecting the entire","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":363860,"byte_end":363932,"line_start":309,"line_end":309,"column_start":5,"column_end":77}},{"value":"/ input to a test (via `TestCaseError::Reject`), however, and the default","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":363937,"byte_end":364012,"line_start":310,"line_end":310,"column_start":5,"column_end":80}},{"value":"/ number of local rejections allowed is much higher than the number of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":364017,"byte_end":364089,"line_start":311,"line_end":311,"column_start":5,"column_end":77}},{"value":"/ whole-input rejections.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":364094,"byte_end":364121,"line_start":312,"line_end":312,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":364126,"byte_end":364129,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ `whence` is used to record where and why the rejection occurred.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":364134,"byte_end":364202,"line_start":314,"line_end":314,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":365739,"byte_end":365754,"line_start":349,"line_end":349,"column_start":8,"column_end":23},"name":"prop_filter_map","qualname":"::strategy::traits::Strategy::prop_filter_map","value":"pub fn prop_filter_map<F: Fn(Self::Value) -> Option<O>, O: fmt::Debug,\n                       impl Into<Reason>: Into<Reason>>(Self,\n                                                        impl Into<Reason>, F)\n-> FilterMap<Self, F> where Self: Sized","parent":{"krate":0,"index":1288},"children":[],"decl_id":null,"docs":" Returns a strategy which only produces transformed values where `fun`\n returns `Some(value)` and rejects those where `fun` returns `None`.","sig":null,"attributes":[{"value":"/ Returns a strategy which only produces transformed values where `fun`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":364437,"byte_end":364510,"line_start":326,"line_end":326,"column_start":5,"column_end":78}},{"value":"/ returns `Some(value)` and rejects those where `fun` returns `None`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":364515,"byte_end":364586,"line_start":327,"line_end":327,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":364591,"byte_end":364594,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ Using this method is preferable to using `.prop_map(..).prop_filter(..)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":364599,"byte_end":364676,"line_start":329,"line_end":329,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":364681,"byte_end":364684,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ This results in a very naïve form of rejection sampling and should only","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":364689,"byte_end":364765,"line_start":331,"line_end":331,"column_start":5,"column_end":80}},{"value":"/ be used if (a) relatively few values will actually be rejected; (b) it","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":364770,"byte_end":364844,"line_start":332,"line_end":332,"column_start":5,"column_end":79}},{"value":"/ isn't easy to express what you want by using another strategy and/or","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":364849,"byte_end":364921,"line_start":333,"line_end":333,"column_start":5,"column_end":77}},{"value":"/ `map()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":364926,"byte_end":364938,"line_start":334,"line_end":334,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":364943,"byte_end":364946,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ There are a lot of downsides to this form of filtering. It slows","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":364951,"byte_end":365019,"line_start":336,"line_end":336,"column_start":5,"column_end":73}},{"value":"/ testing down, since values must be generated but then discarded.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":365024,"byte_end":365092,"line_start":337,"line_end":337,"column_start":5,"column_end":73}},{"value":"/ Proptest only allows a limited number of rejects this way (across the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":365097,"byte_end":365170,"line_start":338,"line_end":338,"column_start":5,"column_end":78}},{"value":"/ entire `TestRunner`). Rejection can interfere with shrinking;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":365175,"byte_end":365240,"line_start":339,"line_end":339,"column_start":5,"column_end":70}},{"value":"/ particularly, complex filters may largely or entirely prevent shrinking","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":365245,"byte_end":365320,"line_start":340,"line_end":340,"column_start":5,"column_end":80}},{"value":"/ from substantially altering the original value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":365325,"byte_end":365376,"line_start":341,"line_end":341,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":365381,"byte_end":365384,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ Local rejection sampling is still preferable to rejecting the entire","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":365389,"byte_end":365461,"line_start":343,"line_end":343,"column_start":5,"column_end":77}},{"value":"/ input to a test (via `TestCaseError::Reject`), however, and the default","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":365466,"byte_end":365541,"line_start":344,"line_end":344,"column_start":5,"column_end":80}},{"value":"/ number of local rejections allowed is much higher than the number of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":365546,"byte_end":365618,"line_start":345,"line_end":345,"column_start":5,"column_end":77}},{"value":"/ whole-input rejections.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":365623,"byte_end":365650,"line_start":346,"line_end":346,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":365655,"byte_end":365658,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ `whence` is used to record where and why the rejection occurred.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":365663,"byte_end":365731,"line_start":348,"line_end":348,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":366782,"byte_end":366792,"line_start":374,"line_end":374,"column_start":8,"column_end":18},"name":"prop_union","qualname":"::strategy::traits::Strategy::prop_union","value":"pub fn prop_union(Self, Self) -> Union<Self> where Self: Sized","parent":{"krate":0,"index":1288},"children":[],"decl_id":null,"docs":" Returns a strategy which picks uniformly from `self` and `other`.","sig":null,"attributes":[{"value":"/ Returns a strategy which picks uniformly from `self` and `other`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":365994,"byte_end":366063,"line_start":360,"line_end":360,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":366068,"byte_end":366071,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ When shrinking, if a value from `other` was originally chosen but that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":366076,"byte_end":366150,"line_start":362,"line_end":362,"column_start":5,"column_end":79}},{"value":"/ value can be shrunken no further, it switches to a value from `self`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":366155,"byte_end":366227,"line_start":363,"line_end":363,"column_start":5,"column_end":77}},{"value":"/ and starts shrinking that.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":366232,"byte_end":366262,"line_start":364,"line_end":364,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":366267,"byte_end":366270,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ Be aware that chaining `prop_union` calls will result in a very","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":366275,"byte_end":366342,"line_start":366,"line_end":366,"column_start":5,"column_end":72}},{"value":"/ right-skewed distribution. If this is not what you want, you can call","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":366347,"byte_end":366420,"line_start":367,"line_end":367,"column_start":5,"column_end":78}},{"value":"/ the `.or()` method on the `Union` to add more values to the same union,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":366425,"byte_end":366500,"line_start":368,"line_end":368,"column_start":5,"column_end":80}},{"value":"/ or directly call `Union::new()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":366505,"byte_end":366541,"line_start":369,"line_end":369,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":366546,"byte_end":366549,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ Both `self` and `other` must be of the same type. To combine","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":366554,"byte_end":366618,"line_start":371,"line_end":371,"column_start":5,"column_end":69}},{"value":"/ heterogeneous strategies, call the `boxed()` method on both `self` and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":366623,"byte_end":366697,"line_start":372,"line_end":372,"column_start":5,"column_end":79}},{"value":"/ `other` to erase the type differences before calling `prop_union()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":366702,"byte_end":366774,"line_start":373,"line_end":373,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1317},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":369660,"byte_end":369674,"line_start":448,"line_end":448,"column_start":8,"column_end":22},"name":"prop_recursive","qualname":"::strategy::traits::Strategy::prop_recursive","value":"pub fn prop_recursive<R: Strategy<Value = Self::Value> + 'static,\n                      F: Fn(BoxedStrategy<Self::Value>) ->\n                      R>(Self, u32, u32, u32, F) -> Recursive<Self::Value, F>\nwhere Self: Sized + 'static","parent":{"krate":0,"index":1288},"children":[],"decl_id":null,"docs":" Generate a recursive structure with `self` items as leaves.","sig":null,"attributes":[{"value":"/ Generate a recursive structure with `self` items as leaves.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":366913,"byte_end":366976,"line_start":381,"line_end":381,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":366981,"byte_end":366984,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ `recurse` is applied to various strategies that produce the same type","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":366989,"byte_end":367062,"line_start":383,"line_end":383,"column_start":5,"column_end":78}},{"value":"/ as `self` with nesting depth _n_ to create a strategy that produces the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":367067,"byte_end":367142,"line_start":384,"line_end":384,"column_start":5,"column_end":80}},{"value":"/ same type with nesting depth _n+1_. Generated structures will have a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":367147,"byte_end":367219,"line_start":385,"line_end":385,"column_start":5,"column_end":77}},{"value":"/ depth between 0 and `depth` and will usually have up to `desired_size`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":367224,"byte_end":367298,"line_start":386,"line_end":386,"column_start":5,"column_end":79}},{"value":"/ total elements, though they may have more. `expected_branch_size` gives","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":367303,"byte_end":367378,"line_start":387,"line_end":387,"column_start":5,"column_end":80}},{"value":"/ the expected maximum size for any collection which may contain","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":367383,"byte_end":367449,"line_start":388,"line_end":388,"column_start":5,"column_end":71}},{"value":"/ recursive elements and is used to control branch probability to achieve","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":367454,"byte_end":367529,"line_start":389,"line_end":389,"column_start":5,"column_end":80}},{"value":"/ the desired size. Passing a too small value can result in trees vastly","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":367534,"byte_end":367608,"line_start":390,"line_end":390,"column_start":5,"column_end":79}},{"value":"/ larger than desired.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":367613,"byte_end":367637,"line_start":391,"line_end":391,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":367642,"byte_end":367645,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ Note that `depth` only counts branches; i.e., `depth = 0` is a single","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":367650,"byte_end":367723,"line_start":393,"line_end":393,"column_start":5,"column_end":78}},{"value":"/ leaf, and `depth = 1` is a leaf or a branch containing only leaves.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":367728,"byte_end":367799,"line_start":394,"line_end":394,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":367804,"byte_end":367807,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ In practise, generated values usually have a lower depth than `depth`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":367812,"byte_end":367885,"line_start":396,"line_end":396,"column_start":5,"column_end":78}},{"value":"/ (but `depth` is a hard limit) and almost always under","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":367890,"byte_end":367947,"line_start":397,"line_end":397,"column_start":5,"column_end":62}},{"value":"/ `expected_branch_size` (though it is not a hard limit) since the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":367952,"byte_end":368020,"line_start":398,"line_end":398,"column_start":5,"column_end":73}},{"value":"/ underlying code underestimates probabilities.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368025,"byte_end":368074,"line_start":399,"line_end":399,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368079,"byte_end":368082,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ Shrinking shrinks both the inner values and attempts switching from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368087,"byte_end":368158,"line_start":401,"line_end":401,"column_start":5,"column_end":76}},{"value":"/ recursive to non-recursive cases.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368163,"byte_end":368200,"line_start":402,"line_end":402,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368205,"byte_end":368208,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368213,"byte_end":368227,"line_start":404,"line_end":404,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368232,"byte_end":368235,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ ```rust,norun","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368240,"byte_end":368257,"line_start":406,"line_end":406,"column_start":5,"column_end":22}},{"value":"/ # #![allow(unused_variables)]","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368262,"byte_end":368295,"line_start":407,"line_end":407,"column_start":5,"column_end":38}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368300,"byte_end":368334,"line_start":408,"line_end":408,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368339,"byte_end":368342,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368347,"byte_end":368376,"line_start":410,"line_end":410,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368381,"byte_end":368384,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ /// Define our own JSON AST type","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368389,"byte_end":368425,"line_start":412,"line_end":412,"column_start":5,"column_end":41}},{"value":"/ #[derive(Debug, Clone)]","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368430,"byte_end":368457,"line_start":413,"line_end":413,"column_start":5,"column_end":32}},{"value":"/ enum JsonNode {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368462,"byte_end":368481,"line_start":414,"line_end":414,"column_start":5,"column_end":24}},{"value":"/   Null,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368486,"byte_end":368497,"line_start":415,"line_end":415,"column_start":5,"column_end":16}},{"value":"/   Bool(bool),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368502,"byte_end":368519,"line_start":416,"line_end":416,"column_start":5,"column_end":22}},{"value":"/   Number(f64),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368524,"byte_end":368542,"line_start":417,"line_end":417,"column_start":5,"column_end":23}},{"value":"/   String(String),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368547,"byte_end":368568,"line_start":418,"line_end":418,"column_start":5,"column_end":26}},{"value":"/   Array(Vec<JsonNode>),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368573,"byte_end":368600,"line_start":419,"line_end":419,"column_start":5,"column_end":32}},{"value":"/   Map(HashMap<String, JsonNode>),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368605,"byte_end":368642,"line_start":420,"line_end":420,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368647,"byte_end":368652,"line_start":421,"line_end":421,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368657,"byte_end":368660,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368665,"byte_end":368682,"line_start":423,"line_end":423,"column_start":5,"column_end":22}},{"value":"/ #","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368687,"byte_end":368692,"line_start":424,"line_end":424,"column_start":5,"column_end":10}},{"value":"/ // Define a strategy for generating leaf nodes of the AST","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368697,"byte_end":368758,"line_start":425,"line_end":425,"column_start":5,"column_end":66}},{"value":"/ let json_leaf = prop_oneof![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368763,"byte_end":368795,"line_start":426,"line_end":426,"column_start":5,"column_end":37}},{"value":"/   Just(JsonNode::Null),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368800,"byte_end":368827,"line_start":427,"line_end":427,"column_start":5,"column_end":32}},{"value":"/   prop::bool::ANY.prop_map(JsonNode::Bool),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368832,"byte_end":368879,"line_start":428,"line_end":428,"column_start":5,"column_end":52}},{"value":"/   prop::num::f64::ANY.prop_map(JsonNode::Number),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368884,"byte_end":368937,"line_start":429,"line_end":429,"column_start":5,"column_end":58}},{"value":"/   \".*\".prop_map(JsonNode::String),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368942,"byte_end":368980,"line_start":430,"line_end":430,"column_start":5,"column_end":43}},{"value":"/ ];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368985,"byte_end":368991,"line_start":431,"line_end":431,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":368996,"byte_end":368999,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ // Now define a strategy for a whole tree","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":369004,"byte_end":369049,"line_start":433,"line_end":433,"column_start":5,"column_end":50}},{"value":"/ let json_tree = json_leaf.prop_recursive(","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":369054,"byte_end":369099,"line_start":434,"line_end":434,"column_start":5,"column_end":50}},{"value":"/   4, // No more than 4 branch levels deep","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":369104,"byte_end":369149,"line_start":435,"line_end":435,"column_start":5,"column_end":50}},{"value":"/   64, // Target around 64 total elements","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":369154,"byte_end":369198,"line_start":436,"line_end":436,"column_start":5,"column_end":49}},{"value":"/   16, // Each collection is up to 16 elements long","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":369203,"byte_end":369257,"line_start":437,"line_end":437,"column_start":5,"column_end":59}},{"value":"/   |element| prop_oneof![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":369262,"byte_end":369290,"line_start":438,"line_end":438,"column_start":5,"column_end":33}},{"value":"/     // NB `element` is an `Arc` and we'll need to reference it twice,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":369295,"byte_end":369368,"line_start":439,"line_end":439,"column_start":5,"column_end":78}},{"value":"/     // so we clone it the first time.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":369373,"byte_end":369414,"line_start":440,"line_end":440,"column_start":5,"column_end":46}},{"value":"/     prop::collection::vec(element.clone(), 0..16)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":369419,"byte_end":369472,"line_start":441,"line_end":441,"column_start":5,"column_end":58}},{"value":"/       .prop_map(JsonNode::Array),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":369477,"byte_end":369514,"line_start":442,"line_end":442,"column_start":5,"column_end":42}},{"value":"/     prop::collection::hash_map(\".*\", element, 0..16)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":369519,"byte_end":369575,"line_start":443,"line_end":443,"column_start":5,"column_end":61}},{"value":"/       .prop_map(JsonNode::Map)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":369580,"byte_end":369614,"line_start":444,"line_end":444,"column_start":5,"column_end":39}},{"value":"/   ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":369619,"byte_end":369628,"line_start":445,"line_end":445,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":369633,"byte_end":369640,"line_start":446,"line_end":446,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":369645,"byte_end":369652,"line_start":447,"line_end":447,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371288,"byte_end":371300,"line_start":500,"line_end":500,"column_start":8,"column_end":20},"name":"prop_shuffle","qualname":"::strategy::traits::Strategy::prop_shuffle","value":"pub fn prop_shuffle(Self) -> Shuffle<Self> where Self: Sized,\nSelf::Value: Shuffleable","parent":{"krate":0,"index":1288},"children":[],"decl_id":null,"docs":" Shuffle the contents of the values produced by this strategy.","sig":null,"attributes":[{"value":"/ Shuffle the contents of the values produced by this strategy.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370073,"byte_end":370138,"line_start":464,"line_end":464,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370143,"byte_end":370146,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ That is, this modifies a strategy producing a `Vec`, slice, etc, to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370151,"byte_end":370222,"line_start":466,"line_end":466,"column_start":5,"column_end":76}},{"value":"/ shuffle the contents of that `Vec`/slice/etc.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370227,"byte_end":370276,"line_start":467,"line_end":467,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370281,"byte_end":370284,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ Initially, the value is fully shuffled. During shrinking, the input","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370289,"byte_end":370360,"line_start":469,"line_end":469,"column_start":5,"column_end":76}},{"value":"/ value will initially be unchanged while the result will gradually be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370365,"byte_end":370437,"line_start":470,"line_end":470,"column_start":5,"column_end":77}},{"value":"/ restored to its original order. Once de-shuffling either completes or","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370442,"byte_end":370515,"line_start":471,"line_end":471,"column_start":5,"column_end":78}},{"value":"/ is cancelled by calls to `complicate()` pinning it to a particular","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370520,"byte_end":370590,"line_start":472,"line_end":472,"column_start":5,"column_end":75}},{"value":"/ permutation, the inner value will be simplified.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370595,"byte_end":370647,"line_start":473,"line_end":473,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370652,"byte_end":370655,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370660,"byte_end":370674,"line_start":475,"line_end":475,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370679,"byte_end":370682,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370687,"byte_end":370694,"line_start":477,"line_end":477,"column_start":5,"column_end":12}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370699,"byte_end":370728,"line_start":478,"line_end":478,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370733,"byte_end":370736,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ static VALUES: &'static [u32] = &[0, 1, 2, 3, 4];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370741,"byte_end":370794,"line_start":480,"line_end":480,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370799,"byte_end":370802,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ fn is_permutation(orig: &[u32], mut actual: Vec<u32>) -> bool {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370807,"byte_end":370874,"line_start":482,"line_end":482,"column_start":5,"column_end":72}},{"value":"/   actual.sort();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370879,"byte_end":370899,"line_start":483,"line_end":483,"column_start":5,"column_end":25}},{"value":"/   orig == &actual[..]","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370904,"byte_end":370929,"line_start":484,"line_end":484,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370934,"byte_end":370939,"line_start":485,"line_end":485,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370944,"byte_end":370947,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ proptest! {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370952,"byte_end":370967,"line_start":487,"line_end":487,"column_start":5,"column_end":20}},{"value":"/   # /*","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370972,"byte_end":370982,"line_start":488,"line_end":488,"column_start":5,"column_end":15}},{"value":"/   #[test]","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":370987,"byte_end":371000,"line_start":489,"line_end":489,"column_start":5,"column_end":18}},{"value":"/   # */","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371005,"byte_end":371015,"line_start":490,"line_end":490,"column_start":5,"column_end":15}},{"value":"/   fn test_is_permutation(","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371020,"byte_end":371049,"line_start":491,"line_end":491,"column_start":5,"column_end":34}},{"value":"/       ref perm in Just(VALUES.to_owned()).prop_shuffle()","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371054,"byte_end":371114,"line_start":492,"line_end":492,"column_start":5,"column_end":65}},{"value":"/   ) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371119,"byte_end":371128,"line_start":493,"line_end":493,"column_start":5,"column_end":14}},{"value":"/       assert!(is_permutation(VALUES, perm.clone()));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371133,"byte_end":371189,"line_start":494,"line_end":494,"column_start":5,"column_end":61}},{"value":"/   }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371194,"byte_end":371201,"line_start":495,"line_end":495,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371206,"byte_end":371211,"line_start":496,"line_end":496,"column_start":5,"column_end":10}},{"value":"/ #","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371216,"byte_end":371221,"line_start":497,"line_end":497,"column_start":5,"column_end":10}},{"value":"/ # fn main() { test_is_permutation(); }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371226,"byte_end":371268,"line_start":498,"line_end":498,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371273,"byte_end":371280,"line_start":499,"line_end":499,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1321},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371792,"byte_end":371797,"line_start":516,"line_end":516,"column_start":8,"column_end":13},"name":"boxed","qualname":"::strategy::traits::Strategy::boxed","value":"pub fn boxed(Self) -> BoxedStrategy<Self::Value> where Self: Sized + 'static","parent":{"krate":0,"index":1288},"children":[],"decl_id":null,"docs":" Erases the type of this `Strategy` so it can be passed around as a\n simple trait object.","sig":null,"attributes":[{"value":"/ Erases the type of this `Strategy` so it can be passed around as a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371428,"byte_end":371498,"line_start":508,"line_end":508,"column_start":5,"column_end":75}},{"value":"/ simple trait object.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371503,"byte_end":371527,"line_start":509,"line_end":509,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371532,"byte_end":371535,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ See also `sboxed()` if this `Strategy` is `Send` and `Sync` and you","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371540,"byte_end":371611,"line_start":511,"line_end":511,"column_start":5,"column_end":76}},{"value":"/ want to preserve that information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371616,"byte_end":371654,"line_start":512,"line_end":512,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371659,"byte_end":371662,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ Strategies of this type afford cheap shallow cloning via reference","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371667,"byte_end":371737,"line_start":514,"line_end":514,"column_start":5,"column_end":75}},{"value":"/ counting by using an `Arc` internally.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371742,"byte_end":371784,"line_start":515,"line_end":515,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":372299,"byte_end":372305,"line_start":531,"line_end":531,"column_start":8,"column_end":14},"name":"sboxed","qualname":"::strategy::traits::Strategy::sboxed","value":"pub fn sboxed(Self) -> SBoxedStrategy<Self::Value> where Self: Sized + Send +\nSync + 'static","parent":{"krate":0,"index":1288},"children":[],"decl_id":null,"docs":" Erases the type of this `Strategy` so it can be passed around as a\n simple trait object.","sig":null,"attributes":[{"value":"/ Erases the type of this `Strategy` so it can be passed around as a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":371952,"byte_end":372022,"line_start":523,"line_end":523,"column_start":5,"column_end":75}},{"value":"/ simple trait object.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":372027,"byte_end":372051,"line_start":524,"line_end":524,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":372056,"byte_end":372059,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ Unlike `boxed()`, this conversion retains the `Send` and `Sync` traits","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":372064,"byte_end":372138,"line_start":526,"line_end":526,"column_start":5,"column_end":79}},{"value":"/ on the output.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":372143,"byte_end":372161,"line_start":527,"line_end":527,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":372166,"byte_end":372169,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ Strategies of this type afford cheap shallow cloning via reference","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":372174,"byte_end":372244,"line_start":529,"line_end":529,"column_start":5,"column_end":75}},{"value":"/ counting by using an `Arc` internally.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":372249,"byte_end":372291,"line_start":530,"line_end":530,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":373068,"byte_end":373077,"line_start":547,"line_end":547,"column_start":8,"column_end":17},"name":"no_shrink","qualname":"::strategy::traits::Strategy::no_shrink","value":"pub fn no_shrink(Self) -> NoShrink<Self> where Self: Sized","parent":{"krate":0,"index":1288},"children":[],"decl_id":null,"docs":" Wraps this strategy to prevent values from being subject to shrinking.","sig":null,"attributes":[{"value":"/ Wraps this strategy to prevent values from being subject to shrinking.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":372476,"byte_end":372550,"line_start":538,"line_end":538,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":372555,"byte_end":372558,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ Suppressing shrinking is useful when testing things like linear","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":372563,"byte_end":372630,"line_start":540,"line_end":540,"column_start":5,"column_end":72}},{"value":"/ approximation functions. Ordinarily, proptest will tend to shrink the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":372635,"byte_end":372708,"line_start":541,"line_end":541,"column_start":5,"column_end":78}},{"value":"/ input to the function until the result is just barely outside the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":372713,"byte_end":372782,"line_start":542,"line_end":542,"column_start":5,"column_end":74}},{"value":"/ acceptable range whereas the original input may have produced a result","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":372787,"byte_end":372861,"line_start":543,"line_end":543,"column_start":5,"column_end":79}},{"value":"/ far outside of it. Since this makes it harder to see what the actual","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":372866,"byte_end":372938,"line_start":544,"line_end":544,"column_start":5,"column_end":77}},{"value":"/ problem is, making the input `NoShrink` allows learning about inputs","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":372943,"byte_end":373015,"line_start":545,"line_end":545,"column_start":5,"column_end":77}},{"value":"/ that produce more incorrect results.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":373020,"byte_end":373060,"line_start":546,"line_end":546,"column_start":5,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":1324},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374631,"byte_end":374640,"line_start":580,"line_end":580,"column_start":11,"column_end":20},"name":"ValueTree","qualname":"::strategy::traits::ValueTree","value":"ValueTree","parent":null,"children":[{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328}],"decl_id":null,"docs":" A generated value and its associated shrinker.","sig":null,"attributes":[{"value":"/ A generated value and its associated shrinker.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":373171,"byte_end":373221,"line_start":555,"line_end":555,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":373222,"byte_end":373225,"line_start":556,"line_end":556,"column_start":1,"column_end":4}},{"value":"/ Conceptually, a `ValueTree` represents a spectrum between a \"minimally","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":373226,"byte_end":373300,"line_start":557,"line_end":557,"column_start":1,"column_end":75}},{"value":"/ complex\" value and a starting, randomly-chosen value. For values such as","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":373301,"byte_end":373377,"line_start":558,"line_end":558,"column_start":1,"column_end":77}},{"value":"/ numbers, this can be thought of as a simple binary search, and this is how","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":373378,"byte_end":373456,"line_start":559,"line_end":559,"column_start":1,"column_end":79}},{"value":"/ the `ValueTree` state machine is defined.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":373457,"byte_end":373502,"line_start":560,"line_end":560,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":373503,"byte_end":373506,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ The `ValueTree` state machine notionally has three fields: low, current,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":373507,"byte_end":373583,"line_start":562,"line_end":562,"column_start":1,"column_end":77}},{"value":"/ and high. Initially, low is the \"minimally complex\" value for the type, and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":373584,"byte_end":373663,"line_start":563,"line_end":563,"column_start":1,"column_end":80}},{"value":"/ high and current are both the initially chosen value. It can be queried for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":373664,"byte_end":373743,"line_start":564,"line_end":564,"column_start":1,"column_end":80}},{"value":"/ its current state. When shrinking, the controlling code tries simplifying","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":373744,"byte_end":373821,"line_start":565,"line_end":565,"column_start":1,"column_end":78}},{"value":"/ the value one step. If the test failure still happens with the simplified","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":373822,"byte_end":373899,"line_start":566,"line_end":566,"column_start":1,"column_end":78}},{"value":"/ value, further simplification occurs. Otherwise, the code steps back up","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":373900,"byte_end":373975,"line_start":567,"line_end":567,"column_start":1,"column_end":76}},{"value":"/ towards the prior complexity.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":373976,"byte_end":374009,"line_start":568,"line_end":568,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374010,"byte_end":374013,"line_start":569,"line_end":569,"column_start":1,"column_end":4}},{"value":"/ The main invariants here are that the \"high\" value always corresponds to a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374014,"byte_end":374092,"line_start":570,"line_end":570,"column_start":1,"column_end":79}},{"value":"/ failing test case, and that repeated calls to `complicate()` will return","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374093,"byte_end":374169,"line_start":571,"line_end":571,"column_start":1,"column_end":77}},{"value":"/ `false` only once the \"current\" value has returned to what it was before","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374170,"byte_end":374246,"line_start":572,"line_end":572,"column_start":1,"column_end":77}},{"value":"/ the last call to `simplify()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374247,"byte_end":374281,"line_start":573,"line_end":573,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374282,"byte_end":374285,"line_start":574,"line_end":574,"column_start":1,"column_end":4}},{"value":"/ While it would be possible for default do-nothing implementations of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374286,"byte_end":374358,"line_start":575,"line_end":575,"column_start":1,"column_end":73}},{"value":"/ `simplify()` and `complicate()` to be provided, this was not done","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374359,"byte_end":374428,"line_start":576,"line_end":576,"column_start":1,"column_end":70}},{"value":"/ deliberately since the majority of strategies will want to define their own","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374429,"byte_end":374508,"line_start":577,"line_end":577,"column_start":1,"column_end":80}},{"value":"/ shrinking anyway, and the minority that do not must call it out explicitly","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374509,"byte_end":374587,"line_start":578,"line_end":578,"column_start":1,"column_end":79}},{"value":"/ by their own implementation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374588,"byte_end":374620,"line_start":579,"line_end":579,"column_start":1,"column_end":33}}]},{"kind":"Type","id":{"krate":0,"index":1325},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374712,"byte_end":374717,"line_start":582,"line_end":582,"column_start":10,"column_end":15},"name":"Value","qualname":"::strategy::traits::ValueTree::Value","value":"type Value: fmt::Debug;","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" The type of the value produced by this `ValueTree`.\n","sig":null,"attributes":[{"value":"/ The type of the value produced by this `ValueTree`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374647,"byte_end":374702,"line_start":581,"line_end":581,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374774,"byte_end":374781,"line_start":585,"line_end":585,"column_start":8,"column_end":15},"name":"current","qualname":"::strategy::traits::ValueTree::current","value":"pub fn current(&Self) -> Self::Value","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Returns the current value.\n","sig":null,"attributes":[{"value":"/ Returns the current value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374736,"byte_end":374766,"line_start":584,"line_end":584,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1327},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375439,"byte_end":375447,"line_start":597,"line_end":597,"column_start":8,"column_end":16},"name":"simplify","qualname":"::strategy::traits::ValueTree::simplify","value":"pub fn simplify(&mut Self) -> bool","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Attempts to simplify the current value. Notionally, this sets the\n \"high\" value to the current value, and the current value to a \"halfway\n point\" between high and low, rounding towards low.","sig":null,"attributes":[{"value":"/ Attempts to simplify the current value. Notionally, this sets the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374809,"byte_end":374878,"line_start":586,"line_end":586,"column_start":5,"column_end":74}},{"value":"/ \"high\" value to the current value, and the current value to a \"halfway","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374883,"byte_end":374957,"line_start":587,"line_end":587,"column_start":5,"column_end":79}},{"value":"/ point\" between high and low, rounding towards low.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":374962,"byte_end":375016,"line_start":588,"line_end":588,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375021,"byte_end":375024,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ Returns whether any state changed as a result of this call. This does","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375029,"byte_end":375102,"line_start":590,"line_end":590,"column_start":5,"column_end":78}},{"value":"/ not necessarily imply that the value of `current()` has changed, since","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375107,"byte_end":375181,"line_start":591,"line_end":591,"column_start":5,"column_end":79}},{"value":"/ in the most general case, it is not possible for an implementation to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375186,"byte_end":375259,"line_start":592,"line_end":592,"column_start":5,"column_end":78}},{"value":"/ determine this.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375264,"byte_end":375283,"line_start":593,"line_end":593,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375288,"byte_end":375291,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ This call needs to correctly handle being called even immediately after","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375296,"byte_end":375371,"line_start":595,"line_end":595,"column_start":5,"column_end":80}},{"value":"/ it had been called previously and returned `false`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375376,"byte_end":375431,"line_start":596,"line_end":596,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":376745,"byte_end":376755,"line_start":620,"line_end":620,"column_start":8,"column_end":18},"name":"complicate","qualname":"::strategy::traits::ValueTree::complicate","value":"pub fn complicate(&mut Self) -> bool","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Attempts to partially undo the last simplification. Notionally, this\n sets the \"low\" value to one plus the current value, and the current\n value to a \"halfway point\" between high and the new low, rounding\n towards low.","sig":null,"attributes":[{"value":"/ Attempts to partially undo the last simplification. Notionally, this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375472,"byte_end":375544,"line_start":598,"line_end":598,"column_start":5,"column_end":77}},{"value":"/ sets the \"low\" value to one plus the current value, and the current","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375549,"byte_end":375620,"line_start":599,"line_end":599,"column_start":5,"column_end":76}},{"value":"/ value to a \"halfway point\" between high and the new low, rounding","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375625,"byte_end":375694,"line_start":600,"line_end":600,"column_start":5,"column_end":74}},{"value":"/ towards low.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375699,"byte_end":375715,"line_start":601,"line_end":601,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375720,"byte_end":375723,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ Returns whether any state changed as a result of this call. This does","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375728,"byte_end":375801,"line_start":603,"line_end":603,"column_start":5,"column_end":78}},{"value":"/ not necessarily imply that the value of `current()` has changed, since","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375806,"byte_end":375880,"line_start":604,"line_end":604,"column_start":5,"column_end":79}},{"value":"/ in the most general case, it is not possible for an implementation to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375885,"byte_end":375958,"line_start":605,"line_end":605,"column_start":5,"column_end":78}},{"value":"/ determine this.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375963,"byte_end":375982,"line_start":606,"line_end":606,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375987,"byte_end":375990,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ It is usually expected that, immediately after a call to `simplify()`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":375995,"byte_end":376068,"line_start":608,"line_end":608,"column_start":5,"column_end":78}},{"value":"/ which returns true, this call will itself return true. However, this is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":376073,"byte_end":376148,"line_start":609,"line_end":609,"column_start":5,"column_end":80}},{"value":"/ not always the case; in some strategies, particularly those that use","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":376153,"byte_end":376225,"line_start":610,"line_end":610,"column_start":5,"column_end":77}},{"value":"/ some form of rejection sampling, the act of trying to simplify may","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":376230,"byte_end":376300,"line_start":611,"line_end":611,"column_start":5,"column_end":75}},{"value":"/ change the state such that `simplify()` returns true, yet ultimately","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":376305,"byte_end":376377,"line_start":612,"line_end":612,"column_start":5,"column_end":77}},{"value":"/ left the resulting value unchanged, in which case there is nothing left","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":376382,"byte_end":376457,"line_start":613,"line_end":613,"column_start":5,"column_end":80}},{"value":"/ to complicate.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":376462,"byte_end":376480,"line_start":614,"line_end":614,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":376485,"byte_end":376488,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ This call does not need to gracefully handle being called before","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":376493,"byte_end":376561,"line_start":616,"line_end":616,"column_start":5,"column_end":73}},{"value":"/ `simplify()` was ever called, but does need to correctly handle being","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":376566,"byte_end":376639,"line_start":617,"line_end":617,"column_start":5,"column_end":78}},{"value":"/ called even immediately after it had been called previously and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":376644,"byte_end":376711,"line_start":618,"line_end":618,"column_start":5,"column_end":72}},{"value":"/ returned `false`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":376716,"byte_end":376737,"line_start":619,"line_end":619,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":6844},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":377184,"byte_end":377192,"line_start":633,"line_end":633,"column_start":12,"column_end":20},"name":"NoShrink","qualname":"::strategy::traits::NoShrink","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wraps a `Strategy` or `ValueTree` to suppress shrinking of generated\n values.","sig":null,"attributes":[{"value":"/ Wraps a `Strategy` or `ValueTree` to suppress shrinking of generated","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":376954,"byte_end":377026,"line_start":627,"line_end":627,"column_start":1,"column_end":73}},{"value":"/ values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":377027,"byte_end":377038,"line_start":628,"line_end":628,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":377039,"byte_end":377042,"line_start":629,"line_end":629,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::no_shrink()` for more details.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":377043,"byte_end":377092,"line_start":630,"line_end":630,"column_start":1,"column_end":50}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":377123,"byte_end":377172,"line_start":632,"line_end":632,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":6883},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":378996,"byte_end":379009,"line_start":703,"line_end":703,"column_start":12,"column_end":25},"name":"BoxedStrategy","qualname":"::strategy::traits::BoxedStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" A boxed `Strategy` trait object as produced by `Strategy::boxed()`.","sig":null,"attributes":[{"value":"/ A boxed `Strategy` trait object as produced by `Strategy::boxed()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":378728,"byte_end":378799,"line_start":697,"line_end":697,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":378800,"byte_end":378803,"line_start":698,"line_end":698,"column_start":1,"column_end":4}},{"value":"/ Strategies of this type afford cheap shallow cloning via reference","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":378804,"byte_end":378874,"line_start":699,"line_end":699,"column_start":1,"column_end":71}},{"value":"/ counting by using an `Arc` internally.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":378875,"byte_end":378917,"line_start":700,"line_end":700,"column_start":1,"column_end":43}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":378935,"byte_end":378984,"line_start":702,"line_end":702,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":6890},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":379370,"byte_end":379384,"line_start":712,"line_end":712,"column_start":12,"column_end":26},"name":"SBoxedStrategy","qualname":"::strategy::traits::SBoxedStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" A boxed `Strategy` trait object which is also `Sync` and\n `Send`, as produced by `Strategy::sboxed()`.","sig":null,"attributes":[{"value":"/ A boxed `Strategy` trait object which is also `Sync` and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":379064,"byte_end":379124,"line_start":705,"line_end":705,"column_start":1,"column_end":61}},{"value":"/ `Send`, as produced by `Strategy::sboxed()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":379125,"byte_end":379173,"line_start":706,"line_end":706,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":379174,"byte_end":379177,"line_start":707,"line_end":707,"column_start":1,"column_end":4}},{"value":"/ Strategies of this type afford cheap shallow cloning via reference","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":379178,"byte_end":379248,"line_start":708,"line_end":708,"column_start":1,"column_end":71}},{"value":"/ counting by using an `Arc` internally.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":379249,"byte_end":379291,"line_start":709,"line_end":709,"column_start":1,"column_end":43}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":379309,"byte_end":379358,"line_start":711,"line_end":711,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":6904},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":381210,"byte_end":381236,"line_start":791,"line_end":791,"column_start":12,"column_end":38},"name":"CheckStrategySanityOptions","qualname":"::strategy::traits::CheckStrategySanityOptions","value":"CheckStrategySanityOptions { strict_complicate_after_simplify, error_on_local_rejects, _non_exhaustive }","parent":null,"children":[{"krate":0,"index":6905},{"krate":0,"index":6906},{"krate":0,"index":6907}],"decl_id":null,"docs":" Options passed to `check_strategy_sanity()`.\n","sig":null,"attributes":[{"value":"/ Options passed to `check_strategy_sanity()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":381120,"byte_end":381168,"line_start":789,"line_end":789,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":6905},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":381540,"byte_end":381572,"line_start":797,"line_end":797,"column_start":9,"column_end":41},"name":"strict_complicate_after_simplify","qualname":"::strategy::traits::CheckStrategySanityOptions::strict_complicate_after_simplify","value":"bool","parent":{"krate":0,"index":6904},"children":[],"decl_id":null,"docs":" If true (the default), require that `complicate()` return `true` at\n least once after any call to `simplify()` which itself returns once.","sig":null,"attributes":[{"value":"/ If true (the default), require that `complicate()` return `true` at","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":381243,"byte_end":381314,"line_start":792,"line_end":792,"column_start":5,"column_end":76}},{"value":"/ least once after any call to `simplify()` which itself returns once.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":381319,"byte_end":381391,"line_start":793,"line_end":793,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":381396,"byte_end":381399,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ This property is not required by contract, but many strategies are","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":381404,"byte_end":381474,"line_start":795,"line_end":795,"column_start":5,"column_end":75}},{"value":"/ designed in a way that this is expected to hold.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":381479,"byte_end":381531,"line_start":796,"line_end":796,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":6906},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":381745,"byte_end":381767,"line_start":801,"line_end":801,"column_start":9,"column_end":31},"name":"error_on_local_rejects","qualname":"::strategy::traits::CheckStrategySanityOptions::error_on_local_rejects","value":"bool","parent":{"krate":0,"index":6904},"children":[],"decl_id":null,"docs":" If true, cause local rejects to return an error instead of retrying.\n Defaults to false. Useful for testing behaviors around error handling.\n","sig":null,"attributes":[{"value":"/ If true, cause local rejects to return an error instead of retrying.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":381585,"byte_end":381657,"line_start":799,"line_end":799,"column_start":5,"column_end":77}},{"value":"/ Defaults to false. Useful for testing behaviors around error handling.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":381662,"byte_end":381736,"line_start":800,"line_end":800,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":6907},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":381872,"byte_end":381887,"line_start":806,"line_end":806,"column_start":9,"column_end":24},"name":"_non_exhaustive","qualname":"::strategy::traits::CheckStrategySanityOptions::_non_exhaustive","value":"()","parent":{"krate":0,"index":6904},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":381822,"byte_end":381844,"line_start":804,"line_end":804,"column_start":5,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":1375},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":382853,"byte_end":382874,"line_start":833,"line_end":833,"column_start":8,"column_end":29},"name":"check_strategy_sanity","qualname":"::strategy::traits::check_strategy_sanity","value":"pub fn check_strategy_sanity<S: Strategy>(S,\n                                          Option<CheckStrategySanityOptions>)\nwhere S::Tree: Clone + fmt::Debug, S::Value: cmp::PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Run some tests on the given `Strategy` to ensure that it upholds the\n simplify/complicate contracts.","sig":null,"attributes":[{"value":"/ Run some tests on the given `Strategy` to ensure that it upholds the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":382153,"byte_end":382225,"line_start":819,"line_end":819,"column_start":1,"column_end":73}},{"value":"/ simplify/complicate contracts.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":382226,"byte_end":382260,"line_start":820,"line_end":820,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":382261,"byte_end":382264,"line_start":821,"line_end":821,"column_start":1,"column_end":4}},{"value":"/ This is used to internally test proptest, but is made generally available","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":382265,"byte_end":382342,"line_start":822,"line_end":822,"column_start":1,"column_end":78}},{"value":"/ for external implementations to use as well.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":382343,"byte_end":382391,"line_start":823,"line_end":823,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":382392,"byte_end":382395,"line_start":824,"line_end":824,"column_start":1,"column_end":4}},{"value":"/ `options` can be passed to configure the test; if `None`, the defaults are","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":382396,"byte_end":382474,"line_start":825,"line_end":825,"column_start":1,"column_end":79}},{"value":"/ used. Note that the defaults check for certain properties which are **not**","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":382475,"byte_end":382554,"line_start":826,"line_end":826,"column_start":1,"column_end":80}},{"value":"/ actually required by the `Strategy` and `ValueTree` contracts; if you think","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":382555,"byte_end":382634,"line_start":827,"line_end":827,"column_start":1,"column_end":80}},{"value":"/ your code is right but it fails the test, consider whether a non-default","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":382635,"byte_end":382711,"line_start":828,"line_end":828,"column_start":1,"column_end":77}},{"value":"/ configuration is necessary.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":382712,"byte_end":382743,"line_start":829,"line_end":829,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":382744,"byte_end":382747,"line_start":830,"line_end":830,"column_start":1,"column_end":4}},{"value":"/ This can work with fallible strategies, but limits how many times it will","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":382748,"byte_end":382825,"line_start":831,"line_end":831,"column_start":1,"column_end":78}},{"value":"/ retry failures.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":382826,"byte_end":382845,"line_start":832,"line_end":832,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":1392},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":391217,"byte_end":391218,"line_start":23,"line_end":23,"column_start":10,"column_end":11},"name":"W","qualname":"::strategy::unions::W","value":"(u32, T)","parent":null,"children":[],"decl_id":null,"docs":" A **relative** `weight` of a particular `Strategy` corresponding to `T`\n coupled with `T` itself. The weight is currently given in `u32`.\n","sig":null,"attributes":[{"value":"/ A **relative** `weight` of a particular `Strategy` corresponding to `T`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":391063,"byte_end":391138,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/ coupled with `T` itself. The weight is currently given in `u32`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":391139,"byte_end":391207,"line_start":22,"line_end":22,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1394},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":391387,"byte_end":391389,"line_start":27,"line_end":27,"column_start":10,"column_end":12},"name":"WA","qualname":"::strategy::unions::WA","value":"(u32, Arc<T>)","parent":null,"children":[],"decl_id":null,"docs":" A **relative** `weight` of a particular `Strategy` corresponding to `T`\n coupled with `Arc<T>`. The weight is currently given in `u32`.\n","sig":null,"attributes":[{"value":"/ A **relative** `weight` of a particular `Strategy` corresponding to `T`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":391235,"byte_end":391310,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/ coupled with `Arc<T>`. The weight is currently given in `u32`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":391311,"byte_end":391377,"line_start":26,"line_end":26,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":6913},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":391605,"byte_end":391610,"line_start":34,"line_end":34,"column_start":12,"column_end":17},"name":"Union","qualname":"::strategy::unions::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":6915}],"decl_id":null,"docs":" A `Strategy` which picks from one of several delegate `Stragegy`s.","sig":null,"attributes":[{"value":"/ A `Strategy` which picks from one of several delegate `Stragegy`s.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":391411,"byte_end":391481,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":391482,"byte_end":391485,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_union()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":391486,"byte_end":391519,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":391544,"byte_end":391593,"line_start":33,"line_end":33,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":392164,"byte_end":392167,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"new","qualname":"<Union<T>>::new","value":"pub fn new<impl IntoIterator<Item = T>: IntoIterator<Item =\n           T>>(impl IntoIterator<Item = T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy which selects uniformly from the given delegate\n strategies.","sig":null,"attributes":[{"value":"/ Create a strategy which selects uniformly from the given delegate","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":391809,"byte_end":391878,"line_start":41,"line_end":41,"column_start":5,"column_end":74}},{"value":"/ strategies.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":391883,"byte_end":391898,"line_start":42,"line_end":42,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":391903,"byte_end":391906,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ When shrinking, after maximal simplification of the chosen element, the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":391911,"byte_end":391986,"line_start":44,"line_end":44,"column_start":5,"column_end":80}},{"value":"/ strategy will move to earlier options and continue simplification with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":391991,"byte_end":392065,"line_start":45,"line_end":45,"column_start":5,"column_end":79}},{"value":"/ those.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":392070,"byte_end":392080,"line_start":46,"line_end":46,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":392085,"byte_end":392088,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":392093,"byte_end":392106,"line_start":48,"line_end":48,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":392111,"byte_end":392114,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ Panics if `options` is empty.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":392119,"byte_end":392152,"line_start":50,"line_end":50,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1406},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":393204,"byte_end":393216,"line_start":81,"line_end":81,"column_start":12,"column_end":24},"name":"new_weighted","qualname":"<Union<T>>::new_weighted","value":"pub fn new_weighted(Vec<W<T>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy which selects from the given delegate strategies.","sig":null,"attributes":[{"value":"/ Create a strategy which selects from the given delegate strategies.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":392701,"byte_end":392772,"line_start":69,"line_end":69,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":392777,"byte_end":392780,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Each strategy is assigned a non-zero weight which determines how","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":392785,"byte_end":392853,"line_start":71,"line_end":71,"column_start":5,"column_end":73}},{"value":"/ frequently that strategy is chosen. For example, a strategy with a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":392858,"byte_end":392928,"line_start":72,"line_end":72,"column_start":5,"column_end":75}},{"value":"/ weight of 2 will be chosen twice as frequently as one with a weight of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":392933,"byte_end":393007,"line_start":73,"line_end":73,"column_start":5,"column_end":79}},{"value":"/ 1\\.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":393012,"byte_end":393019,"line_start":74,"line_end":74,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":393024,"byte_end":393027,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":393032,"byte_end":393045,"line_start":76,"line_end":76,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":393050,"byte_end":393053,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ Panics if `options` is empty or any element has a weight of 0.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":393058,"byte_end":393124,"line_start":78,"line_end":78,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":393129,"byte_end":393132,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Panics if the sum of the weights overflows a `u32`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":393137,"byte_end":393192,"line_start":80,"line_end":80,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":393796,"byte_end":393798,"line_start":98,"line_end":98,"column_start":12,"column_end":14},"name":"or","qualname":"<Union<T>>::or","value":"pub fn or(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Add `other` as an additional alternate strategy with weight 1.\n","sig":null,"attributes":[{"value":"/ Add `other` as an additional alternate strategy with weight 1.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":393718,"byte_end":393784,"line_start":97,"line_end":97,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":1422},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":396681,"byte_end":396695,"line_start":202,"line_end":202,"column_start":12,"column_end":26},"name":"UnionValueTree","qualname":"::strategy::unions::UnionValueTree","value":"UnionValueTree {  }","parent":null,"children":[{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427}],"decl_id":null,"docs":" `ValueTree corresponding to `Union`.\n","sig":null,"attributes":[{"value":"/ `ValueTree corresponding to `Union`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":396629,"byte_end":396669,"line_start":201,"line_end":201,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":6940},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402494,"byte_end":402504,"line_start":378,"line_end":378,"column_start":12,"column_end":22},"name":"TupleUnion","qualname":"::strategy::unions::TupleUnion","value":"","parent":null,"children":[],"decl_id":null,"docs":" Similar to `Union`, but internally uses a tuple to hold the strategies.","sig":null,"attributes":[{"value":"/ Similar to `Union`, but internally uses a tuple to hold the strategies.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":401903,"byte_end":401978,"line_start":366,"line_end":366,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":401979,"byte_end":401982,"line_start":367,"line_end":367,"column_start":1,"column_end":4}},{"value":"/ This allows better performance than vanilla `Union` since one does not need","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":401983,"byte_end":402062,"line_start":368,"line_end":368,"column_start":1,"column_end":80}},{"value":"/ to resort to boxing and dynamic dispatch to handle heterogeneous","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402063,"byte_end":402131,"line_start":369,"line_end":369,"column_start":1,"column_end":69}},{"value":"/ strategies.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402132,"byte_end":402147,"line_start":370,"line_end":370,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402148,"byte_end":402151,"line_start":371,"line_end":371,"column_start":1,"column_end":4}},{"value":"/ Deprecated in 0.9.4 in favor of `LazyTupleUnion`, which the `prop_oneof!`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402152,"byte_end":402229,"line_start":372,"line_end":372,"column_start":1,"column_end":78}},{"value":"/ macro now uses. `TupleUnion` is only kept around to avoid API breakage,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402230,"byte_end":402305,"line_start":373,"line_end":373,"column_start":1,"column_end":76}},{"value":"/ and its implementation will be replaced with `LazyTupleUnion` in the next","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402306,"byte_end":402383,"line_start":374,"line_end":374,"column_start":1,"column_end":78}},{"value":"/ major version.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402384,"byte_end":402402,"line_start":375,"line_end":375,"column_start":1,"column_end":19}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402403,"byte_end":402452,"line_start":376,"line_end":376,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1440},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403070,"byte_end":403073,"line_start":391,"line_end":391,"column_start":12,"column_end":15},"name":"new","qualname":"<TupleUnion<T>>::new","value":"pub fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wrap `tuple` in a `TupleUnion`.","sig":null,"attributes":[{"value":"/ Wrap `tuple` in a `TupleUnion`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402541,"byte_end":402576,"line_start":381,"line_end":381,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402581,"byte_end":402584,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ The struct definition allows any `T` for `tuple`, but to be useful, it","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402589,"byte_end":402663,"line_start":383,"line_end":383,"column_start":5,"column_end":79}},{"value":"/ must be a 2- to 10-tuple of `(u32, impl Strategy)` pairs where all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402668,"byte_end":402738,"line_start":384,"line_end":384,"column_start":5,"column_end":75}},{"value":"/ strategies ultimately produce the same value. Each `u32` indicates the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402743,"byte_end":402817,"line_start":385,"line_end":385,"column_start":5,"column_end":79}},{"value":"/ relative weight of its corresponding strategy.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402822,"byte_end":402872,"line_start":386,"line_end":386,"column_start":5,"column_end":55}},{"value":"/ You may use `W<S>` as an alias for `(u32, S)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402877,"byte_end":402927,"line_start":387,"line_end":387,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402932,"byte_end":402935,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ Using this constructor directly is discouraged; prefer to use","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402940,"byte_end":403005,"line_start":389,"line_end":389,"column_start":5,"column_end":70}},{"value":"/ `prop_oneof!` since it is generally clearer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403010,"byte_end":403058,"line_start":390,"line_end":390,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":6952},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403616,"byte_end":403630,"line_start":406,"line_end":406,"column_start":12,"column_end":26},"name":"LazyTupleUnion","qualname":"::strategy::unions::LazyTupleUnion","value":"","parent":null,"children":[],"decl_id":null,"docs":" Similar to `Union`, but internally uses a tuple to hold the strategies.","sig":null,"attributes":[{"value":"/ Similar to `Union`, but internally uses a tuple to hold the strategies.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403129,"byte_end":403204,"line_start":396,"line_end":396,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403205,"byte_end":403208,"line_start":397,"line_end":397,"column_start":1,"column_end":4}},{"value":"/ This allows better performance than vanilla `Union` since one does not need","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403209,"byte_end":403288,"line_start":398,"line_end":398,"column_start":1,"column_end":80}},{"value":"/ to resort to boxing and dynamic dispatch to handle heterogeneous","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403289,"byte_end":403357,"line_start":399,"line_end":399,"column_start":1,"column_end":69}},{"value":"/ strategies.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403358,"byte_end":403373,"line_start":400,"line_end":400,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403374,"byte_end":403377,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ The difference between this and `TupleUnion` is that with this, value trees","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403378,"byte_end":403457,"line_start":402,"line_end":402,"column_start":1,"column_end":80}},{"value":"/ for variants that aren't picked at first are generated lazily.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403458,"byte_end":403524,"line_start":403,"line_end":403,"column_start":1,"column_end":67}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403525,"byte_end":403574,"line_start":404,"line_end":404,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1443},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":404211,"byte_end":404214,"line_start":419,"line_end":419,"column_start":12,"column_end":15},"name":"new","qualname":"<LazyTupleUnion<T>>::new","value":"pub fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wrap `tuple` in a `TupleUnion`.","sig":null,"attributes":[{"value":"/ Wrap `tuple` in a `TupleUnion`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403671,"byte_end":403706,"line_start":409,"line_end":409,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403711,"byte_end":403714,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ The struct definition allows any `T` for `tuple`, but to be useful, it","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403719,"byte_end":403793,"line_start":411,"line_end":411,"column_start":5,"column_end":79}},{"value":"/ must be a 2- to 10-tuple of `(u32, Arc<impl Strategy>)` pairs where all","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403798,"byte_end":403873,"line_start":412,"line_end":412,"column_start":5,"column_end":80}},{"value":"/ strategies ultimately produce the same value. Each `u32` indicates the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403878,"byte_end":403952,"line_start":413,"line_end":413,"column_start":5,"column_end":79}},{"value":"/ relative weight of its corresponding strategy.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403957,"byte_end":404007,"line_start":414,"line_end":414,"column_start":5,"column_end":55}},{"value":"/ You may use `WA<S>` as an alias for `(u32, Arc<S>)`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":404012,"byte_end":404068,"line_start":415,"line_end":415,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":404073,"byte_end":404076,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ Using this constructor directly is discouraged; prefer to use","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":404081,"byte_end":404146,"line_start":417,"line_end":417,"column_start":5,"column_end":70}},{"value":"/ `prop_oneof!` since it is generally clearer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":404151,"byte_end":404199,"line_start":418,"line_end":418,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":7144},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":407387,"byte_end":407406,"line_start":503,"line_end":503,"column_start":12,"column_end":31},"name":"TupleUnionValueTree","qualname":"::strategy::unions::TupleUnionValueTree","value":"TupleUnionValueTree {  }","parent":null,"children":[{"krate":0,"index":7146},{"krate":0,"index":7147},{"krate":0,"index":7148},{"krate":0,"index":7149}],"decl_id":null,"docs":" `ValueTree` type produced by `TupleUnion`.\n","sig":null,"attributes":[{"value":"/ `ValueTree` type produced by `TupleUnion`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":407299,"byte_end":407345,"line_start":501,"line_end":501,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":7158},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":407591,"byte_end":407614,"line_start":512,"line_end":512,"column_start":12,"column_end":35},"name":"LazyTupleUnionValueTree","qualname":"::strategy::unions::LazyTupleUnionValueTree","value":"LazyTupleUnionValueTree {  }","parent":null,"children":[{"krate":0,"index":7160},{"krate":0,"index":7161},{"krate":0,"index":7162},{"krate":0,"index":7163}],"decl_id":null,"docs":" `ValueTree` type produced by `LazyTupleUnion`.\n","sig":null,"attributes":[{"value":"/ `ValueTree` type produced by `LazyTupleUnion`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":407499,"byte_end":407549,"line_start":510,"line_end":510,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":1447},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":409330,"byte_end":409345,"line_start":561,"line_end":561,"column_start":8,"column_end":23},"name":"float_to_weight","qualname":"::strategy::unions::float_to_weight","value":"pub fn float_to_weight(f64) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Convert a floating-point weight in the range (0.0,1.0) to a pair of weights\n that can be used with `Union` and similar.","sig":null,"attributes":[{"value":"/ Convert a floating-point weight in the range (0.0,1.0) to a pair of weights","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":408696,"byte_end":408775,"line_start":547,"line_end":547,"column_start":1,"column_end":80}},{"value":"/ that can be used with `Union` and similar.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":408776,"byte_end":408822,"line_start":548,"line_end":548,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":408823,"byte_end":408826,"line_start":549,"line_end":549,"column_start":1,"column_end":4}},{"value":"/ The first return value is the weight corresponding to `f`; the second","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":408827,"byte_end":408900,"line_start":550,"line_end":550,"column_start":1,"column_end":74}},{"value":"/ return value is the weight corresponding to `1.0 - f`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":408901,"byte_end":408959,"line_start":551,"line_end":551,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":408960,"byte_end":408963,"line_start":552,"line_end":552,"column_start":1,"column_end":4}},{"value":"/ This call does not make any guarantees as to what range of weights it may","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":408964,"byte_end":409041,"line_start":553,"line_end":553,"column_start":1,"column_end":78}},{"value":"/ produce, except that adding the two return values will never overflow a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":409042,"byte_end":409117,"line_start":554,"line_end":554,"column_start":1,"column_end":76}},{"value":"/ `u32`. As such, it is generally not meaningful to combine any other weights","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":409118,"byte_end":409197,"line_start":555,"line_end":555,"column_start":1,"column_end":80}},{"value":"/ with the two returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":409198,"byte_end":409224,"line_start":556,"line_end":556,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":409225,"byte_end":409228,"line_start":557,"line_end":557,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":409229,"byte_end":409242,"line_start":558,"line_end":558,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":409243,"byte_end":409246,"line_start":559,"line_end":559,"column_start":1,"column_end":4}},{"value":"/ Panics if `f` is not a real number between 0.0 and 1.0, both exclusive.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":409247,"byte_end":409322,"line_start":560,"line_end":560,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":1460},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"statics","qualname":"::strategy::statics","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","parent":null,"children":[{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1464},{"krate":0,"index":7532},{"krate":0,"index":7538},{"krate":0,"index":1467},{"krate":0,"index":1471},{"krate":0,"index":1475},{"krate":0,"index":1481},{"krate":0,"index":1485},{"krate":0,"index":1492},{"krate":0,"index":7542},{"krate":0,"index":7547},{"krate":0,"index":1496},{"krate":0,"index":1500},{"krate":0,"index":1504},{"krate":0,"index":1511},{"krate":0,"index":1518},{"krate":0,"index":1523}],"decl_id":null,"docs":" Modified versions of the normal strategy combinators which take specialised\n traits instead of normal functions.","sig":null,"attributes":[{"value":"/ Modified versions of the normal strategy combinators which take specialised","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":418255,"byte_end":418334,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ traits instead of normal functions.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":418335,"byte_end":418374,"line_start":11,"line_end":11,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":418375,"byte_end":418378,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This entire module is strictly a workaround until","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":418379,"byte_end":418432,"line_start":13,"line_end":13,"column_start":1,"column_end":54}},{"value":"/ <https://github.com/rust-lang/rfcs/pull/1522> and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":418433,"byte_end":418486,"line_start":14,"line_end":14,"column_start":1,"column_end":54}},{"value":"/ <https://github.com/rust-lang/rfcs/pull/2071> are available in stable. It","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":418487,"byte_end":418564,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ allows naming types built on the combinators without resorting to dynamic","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":418565,"byte_end":418642,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ dispatch or causing `Arc` to allocate space for a function pointer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":418643,"byte_end":418714,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":418715,"byte_end":418718,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ External code is discouraged from using this module directly. It is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":418719,"byte_end":418790,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/ deliberately not exposed in a convenient way (i.e., via the `Strategy`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":418791,"byte_end":418865,"line_start":20,"line_end":20,"column_start":1,"column_end":75}},{"value":"/ trait itself), but is nonetheless exposed since external trait implementors","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":418866,"byte_end":418945,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ may face the same issues.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":418946,"byte_end":418975,"line_start":22,"line_end":22,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":418976,"byte_end":418979,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ **This module is subject to removal at some point after the language","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":418980,"byte_end":419052,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/ features linked above become stable.**","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":419053,"byte_end":419095,"line_start":25,"line_end":25,"column_start":1,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":1464},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":419404,"byte_end":419412,"line_start":37,"line_end":37,"column_start":11,"column_end":19},"name":"FilterFn","qualname":"::strategy::statics::FilterFn","value":"FilterFn<T>","parent":null,"children":[{"krate":0,"index":1466}],"decl_id":null,"docs":" Essentially `Fn (&T) -> bool`.\n","sig":null,"attributes":[{"value":"/ Essentially `Fn (&T) -> bool`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":419359,"byte_end":419393,"line_start":36,"line_end":36,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1466},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":419469,"byte_end":419474,"line_start":39,"line_end":39,"column_start":8,"column_end":13},"name":"apply","qualname":"::strategy::statics::FilterFn::apply","value":"pub fn apply(&Self, &T) -> bool","parent":{"krate":0,"index":1464},"children":[],"decl_id":null,"docs":" Test whether `t` passes the filter.\n","sig":null,"attributes":[{"value":"/ Test whether `t` passes the filter.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":419422,"byte_end":419461,"line_start":38,"line_end":38,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":7532},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":419621,"byte_end":419627,"line_start":45,"line_end":45,"column_start":12,"column_end":18},"name":"Filter","qualname":"::strategy::statics::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":7535},{"krate":0,"index":7536},{"krate":0,"index":7537}],"decl_id":null,"docs":" Static version of `strategy::Filter`.\n","sig":null,"attributes":[{"value":"/ Static version of `strategy::Filter`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":419501,"byte_end":419542,"line_start":42,"line_end":42,"column_start":1,"column_end":42}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":419560,"byte_end":419609,"line_start":44,"line_end":44,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":419856,"byte_end":419859,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<Filter<S, F>>::new","value":"pub fn new(S, Reason, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adapt strategy `source` to reject values which do not pass `filter`,\n using `whence` as the reported reason/location.\n","sig":null,"attributes":[{"value":"/ Adapt strategy `source` to reject values which do not pass `filter`,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":419716,"byte_end":419788,"line_start":52,"line_end":52,"column_start":5,"column_end":77}},{"value":"/ using `whence` as the reported reason/location.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":419793,"byte_end":419844,"line_start":53,"line_end":53,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":1492},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":422189,"byte_end":422194,"line_start":139,"line_end":139,"column_start":11,"column_end":16},"name":"MapFn","qualname":"::strategy::statics::MapFn","value":"MapFn<T>","parent":null,"children":[{"krate":0,"index":1494},{"krate":0,"index":1495}],"decl_id":null,"docs":" Essentially `Fn (T) -> Output`.\n","sig":null,"attributes":[{"value":"/ Essentially `Fn (T) -> Output`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":422143,"byte_end":422178,"line_start":138,"line_end":138,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":1494},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":422236,"byte_end":422242,"line_start":141,"line_end":141,"column_start":10,"column_end":16},"name":"Output","qualname":"::strategy::statics::MapFn::Output","value":"type Output: fmt::Debug;","parent":{"krate":0,"index":1492},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":422204,"byte_end":422226,"line_start":140,"line_end":140,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1495},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":422293,"byte_end":422298,"line_start":144,"line_end":144,"column_start":8,"column_end":13},"name":"apply","qualname":"::strategy::statics::MapFn::apply","value":"pub fn apply(&Self, T) -> Self::Output","parent":{"krate":0,"index":1492},"children":[],"decl_id":null,"docs":" Map `T` to `Output`.\n","sig":null,"attributes":[{"value":"/ Map `T` to `Output`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":422261,"byte_end":422285,"line_start":143,"line_end":143,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":7542},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":422449,"byte_end":422452,"line_start":150,"line_end":150,"column_start":12,"column_end":15},"name":"Map","qualname":"::strategy::statics::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":7545},{"krate":0,"index":7546}],"decl_id":null,"docs":" Static version of `strategy::Map`.\n","sig":null,"attributes":[{"value":"/ Static version of `strategy::Map`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":422332,"byte_end":422370,"line_start":147,"line_end":147,"column_start":1,"column_end":39}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":422388,"byte_end":422437,"line_start":149,"line_end":149,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1499},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":422598,"byte_end":422601,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"new","qualname":"<Map<S, F>>::new","value":"pub fn new(S, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adapt strategy `source` by applying `fun` to values it produces.\n","sig":null,"attributes":[{"value":"/ Adapt strategy `source` by applying `fun` to values it produces.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":422518,"byte_end":422586,"line_start":156,"line_end":156,"column_start":5,"column_end":73}}]},{"kind":"Mod","id":{"krate":0,"index":1526},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"test_runner","qualname":"::test_runner","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/mod.rs","parent":null,"children":[{"krate":0,"index":1527},{"krate":0,"index":1565},{"krate":0,"index":1586},{"krate":0,"index":1706},{"krate":0,"index":1722},{"krate":0,"index":1758},{"krate":0,"index":1821},{"krate":0,"index":1916},{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1919},{"krate":0,"index":1920},{"krate":0,"index":1921},{"krate":0,"index":1922}],"decl_id":null,"docs":" State and functions for running proptest tests.","sig":null,"attributes":[{"value":"/ State and functions for running proptest tests.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/mod.rs","byte_start":425595,"byte_end":425646,"line_start":10,"line_end":10,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/mod.rs","byte_start":425647,"byte_end":425650,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ You do not normally need to access things in this module directly except","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/mod.rs","byte_start":425651,"byte_end":425727,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ when implementing new low-level strategies.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/mod.rs","byte_start":425728,"byte_end":425775,"line_start":13,"line_end":13,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":7562},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":431564,"byte_end":431570,"line_start":178,"line_end":178,"column_start":12,"column_end":18},"name":"Config","qualname":"::test_runner::config::Config","value":"Config { cases, max_local_rejects, max_global_rejects, max_flat_map_regens, failure_persistence, source_file, test_name, max_shrink_time, max_shrink_iters, result_cache, verbose, rng_algorithm, _non_exhaustive }","parent":null,"children":[{"krate":0,"index":7563},{"krate":0,"index":7564},{"krate":0,"index":7565},{"krate":0,"index":7566},{"krate":0,"index":7567},{"krate":0,"index":7568},{"krate":0,"index":7569},{"krate":0,"index":7570},{"krate":0,"index":7571},{"krate":0,"index":7572},{"krate":0,"index":7573},{"krate":0,"index":7574},{"krate":0,"index":7575}],"decl_id":null,"docs":" Configuration for how a proptest test should be run.\n","sig":null,"attributes":[{"value":"/ Configuration for how a proptest test should be run.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":431461,"byte_end":431517,"line_start":176,"line_end":176,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":7563},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":431889,"byte_end":431894,"line_start":186,"line_end":186,"column_start":9,"column_end":14},"name":"cases","qualname":"::test_runner::config::Config::cases","value":"u32","parent":{"krate":0,"index":7562},"children":[],"decl_id":null,"docs":" The number of successful test cases that must execute for the test as a\n whole to pass.","sig":null,"attributes":[{"value":"/ The number of successful test cases that must execute for the test as a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":431577,"byte_end":431652,"line_start":179,"line_end":179,"column_start":5,"column_end":80}},{"value":"/ whole to pass.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":431657,"byte_end":431675,"line_start":180,"line_end":180,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":431680,"byte_end":431683,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ This does not include implicitly-replayed persisted failing cases.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":431688,"byte_end":431758,"line_start":182,"line_end":182,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":431763,"byte_end":431766,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ The default is 256, which can be overridden by setting the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":431771,"byte_end":431833,"line_start":184,"line_end":184,"column_start":5,"column_end":67}},{"value":"/ `PROPTEST_CASES` environment variable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":431838,"byte_end":431880,"line_start":185,"line_end":185,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":7564},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432158,"byte_end":432175,"line_start":193,"line_end":193,"column_start":9,"column_end":26},"name":"max_local_rejects","qualname":"::test_runner::config::Config::max_local_rejects","value":"u32","parent":{"krate":0,"index":7562},"children":[],"decl_id":null,"docs":" The maximum number of individual inputs that may be rejected before the\n test as a whole aborts.","sig":null,"attributes":[{"value":"/ The maximum number of individual inputs that may be rejected before the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":431906,"byte_end":431981,"line_start":188,"line_end":188,"column_start":5,"column_end":80}},{"value":"/ test as a whole aborts.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":431986,"byte_end":432013,"line_start":189,"line_end":189,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432018,"byte_end":432021,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ The default is 65536, which can be overridden by setting the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432026,"byte_end":432090,"line_start":191,"line_end":191,"column_start":5,"column_end":69}},{"value":"/ `PROPTEST_MAX_LOCAL_REJECTS` environment variable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432095,"byte_end":432149,"line_start":192,"line_end":192,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":7565},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432437,"byte_end":432455,"line_start":200,"line_end":200,"column_start":9,"column_end":27},"name":"max_global_rejects","qualname":"::test_runner::config::Config::max_global_rejects","value":"u32","parent":{"krate":0,"index":7562},"children":[],"decl_id":null,"docs":" The maximum number of combined inputs that may be rejected before the\n test as a whole aborts.","sig":null,"attributes":[{"value":"/ The maximum number of combined inputs that may be rejected before the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432187,"byte_end":432260,"line_start":195,"line_end":195,"column_start":5,"column_end":78}},{"value":"/ test as a whole aborts.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432265,"byte_end":432292,"line_start":196,"line_end":196,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432297,"byte_end":432300,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ The default is 1024, which can be overridden by setting the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432305,"byte_end":432368,"line_start":198,"line_end":198,"column_start":5,"column_end":68}},{"value":"/ `PROPTEST_MAX_GLOBAL_REJECTS` environment variable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432373,"byte_end":432428,"line_start":199,"line_end":199,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":7566},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432824,"byte_end":432843,"line_start":208,"line_end":208,"column_start":9,"column_end":28},"name":"max_flat_map_regens","qualname":"::test_runner::config::Config::max_flat_map_regens","value":"u32","parent":{"krate":0,"index":7562},"children":[],"decl_id":null,"docs":" The maximum number of times all `Flatten` combinators will attempt to\n regenerate values. This puts a limit on the worst-case exponential\n explosion that can happen with nested `Flatten`s.","sig":null,"attributes":[{"value":"/ The maximum number of times all `Flatten` combinators will attempt to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432467,"byte_end":432540,"line_start":202,"line_end":202,"column_start":5,"column_end":78}},{"value":"/ regenerate values. This puts a limit on the worst-case exponential","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432545,"byte_end":432615,"line_start":203,"line_end":203,"column_start":5,"column_end":75}},{"value":"/ explosion that can happen with nested `Flatten`s.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432620,"byte_end":432673,"line_start":204,"line_end":204,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432678,"byte_end":432681,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ The default is 1_000_000, which can be overridden by setting the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432686,"byte_end":432754,"line_start":206,"line_end":206,"column_start":5,"column_end":73}},{"value":"/ `PROPTEST_MAX_FLAT_MAP_REGENS` environment variable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432759,"byte_end":432815,"line_start":207,"line_end":207,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":7567},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433493,"byte_end":433512,"line_start":221,"line_end":221,"column_start":9,"column_end":28},"name":"failure_persistence","qualname":"::test_runner::config::Config::failure_persistence","value":"core::option::Option<std::boxed::Box<(dyn test_runner::failure_persistence::FailurePersistence + 'static)>>","parent":{"krate":0,"index":7562},"children":[],"decl_id":null,"docs":" Indicates whether and how to persist failed test results.","sig":null,"attributes":[{"value":"/ Indicates whether and how to persist failed test results.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432855,"byte_end":432916,"line_start":210,"line_end":210,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432921,"byte_end":432924,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ When compiling with \"std\" feature (i.e. the standard library is available), the default","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":432929,"byte_end":433020,"line_start":212,"line_end":212,"column_start":5,"column_end":96}},{"value":"/ is `Some(Box::new(FileFailurePersistence::SourceParallel(\"proptest-regressions\")))`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433025,"byte_end":433113,"line_start":213,"line_end":213,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433118,"byte_end":433121,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ Without the standard library, the default is `None`, and no persistence occurs.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433126,"byte_end":433209,"line_start":215,"line_end":215,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433214,"byte_end":433217,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ See the docs of [`FileFailurePersistence`](enum.FileFailurePersistence.html)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433222,"byte_end":433302,"line_start":217,"line_end":217,"column_start":5,"column_end":85}},{"value":"/ and [`MapFailurePersistence`](struct.MapFailurePersistence.html) for more information.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433307,"byte_end":433397,"line_start":218,"line_end":218,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433402,"byte_end":433405,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ The default cannot currently be overridden by an environment variable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433410,"byte_end":433484,"line_start":220,"line_end":220,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":7568},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433952,"byte_end":433963,"line_start":231,"line_end":231,"column_start":9,"column_end":20},"name":"source_file","qualname":"::test_runner::config::Config::source_file","value":"core::option::Option<&'static str>","parent":{"krate":0,"index":7562},"children":[],"decl_id":null,"docs":" File location of the current test, relevant for persistence\n and debugging.","sig":null,"attributes":[{"value":"/ File location of the current test, relevant for persistence","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433556,"byte_end":433619,"line_start":223,"line_end":223,"column_start":5,"column_end":68}},{"value":"/ and debugging.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433624,"byte_end":433642,"line_start":224,"line_end":224,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433647,"byte_end":433650,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Note the use of `&str` rather than `Path` to be compatible with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433655,"byte_end":433722,"line_start":226,"line_end":226,"column_start":5,"column_end":72}},{"value":"/ `#![no_std]` use cases where `Path` is unavailable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433727,"byte_end":433782,"line_start":227,"line_end":227,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433787,"byte_end":433790,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ See the docs of [`FileFailurePersistence`](enum.FileFailurePersistence.html)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433795,"byte_end":433875,"line_start":229,"line_end":229,"column_start":5,"column_end":85}},{"value":"/ for more information on how it may be used for persistence.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433880,"byte_end":433943,"line_start":230,"line_end":230,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":7569},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":434360,"byte_end":434369,"line_start":241,"line_end":241,"column_start":9,"column_end":18},"name":"test_name","qualname":"::test_runner::config::Config::test_name","value":"core::option::Option<&'static str>","parent":{"krate":0,"index":7562},"children":[],"decl_id":null,"docs":" The fully-qualified name of the test being run, as would be passed to\n the test executable to run just that test.","sig":null,"attributes":[{"value":"/ The fully-qualified name of the test being run, as would be passed to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":433992,"byte_end":434065,"line_start":233,"line_end":233,"column_start":5,"column_end":78}},{"value":"/ the test executable to run just that test.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":434070,"byte_end":434116,"line_start":234,"line_end":234,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":434121,"byte_end":434124,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ This must be set if `fork` is `true`. Otherwise, it is unused. It is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":434129,"byte_end":434201,"line_start":236,"line_end":236,"column_start":5,"column_end":77}},{"value":"/ automatically set by `proptest!`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":434206,"byte_end":434243,"line_start":237,"line_end":237,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":434248,"byte_end":434251,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ This must include the crate name at the beginning, as produced by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":434256,"byte_end":434325,"line_start":239,"line_end":239,"column_start":5,"column_end":74}},{"value":"/ `module_path!()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":434330,"byte_end":434351,"line_start":240,"line_end":240,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":7570},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436407,"byte_end":436422,"line_start":289,"line_end":289,"column_start":9,"column_end":24},"name":"max_shrink_time","qualname":"::test_runner::config::Config::max_shrink_time","value":"u32","parent":{"krate":0,"index":7562},"children":[],"decl_id":null,"docs":" If non-zero, give up the shrinking process after this many milliseconds\n have elapsed since the start of the shrinking process.","sig":null,"attributes":[{"value":"/ If non-zero, give up the shrinking process after this many milliseconds","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":435878,"byte_end":435953,"line_start":278,"line_end":278,"column_start":5,"column_end":80}},{"value":"/ have elapsed since the start of the shrinking process.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":435958,"byte_end":436016,"line_start":279,"line_end":279,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436021,"byte_end":436024,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ This will not cause currently running test cases to be interrupted.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436029,"byte_end":436100,"line_start":281,"line_end":281,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436105,"byte_end":436108,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This configuration is only available when the `std` feature is enabled","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436113,"byte_end":436187,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/ (which it is by default).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436192,"byte_end":436221,"line_start":284,"line_end":284,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436226,"byte_end":436229,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ The default is `0` (i.e., no limit), which can be overridden by setting","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436234,"byte_end":436309,"line_start":286,"line_end":286,"column_start":5,"column_end":80}},{"value":"/ the `PROPTEST_MAX_SHRINK_TIME` environment variable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436314,"byte_end":436370,"line_start":287,"line_end":287,"column_start":5,"column_end":61}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436375,"byte_end":436398,"line_start":288,"line_end":288,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":7571},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437024,"byte_end":437040,"line_start":304,"line_end":304,"column_start":9,"column_end":25},"name":"max_shrink_iters","qualname":"::test_runner::config::Config::max_shrink_iters","value":"u32","parent":{"krate":0,"index":7562},"children":[],"decl_id":null,"docs":" Give up on shrinking if more than this number of iterations of the test\n code are run.","sig":null,"attributes":[{"value":"/ Give up on shrinking if more than this number of iterations of the test","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436434,"byte_end":436509,"line_start":291,"line_end":291,"column_start":5,"column_end":80}},{"value":"/ code are run.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436514,"byte_end":436531,"line_start":292,"line_end":292,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436536,"byte_end":436539,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ Setting this to `std::u32::MAX` causes the actual limit to be four","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436544,"byte_end":436614,"line_start":294,"line_end":294,"column_start":5,"column_end":75}},{"value":"/ times the number of test cases.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436619,"byte_end":436654,"line_start":295,"line_end":295,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436659,"byte_end":436662,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ Setting this value to `0` disables shrinking altogether.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436667,"byte_end":436727,"line_start":297,"line_end":297,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436732,"byte_end":436735,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ Note that the type of this field will change in a future version of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436740,"byte_end":436811,"line_start":299,"line_end":299,"column_start":5,"column_end":76}},{"value":"/ proptest to better accommodate its special values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436816,"byte_end":436870,"line_start":300,"line_end":300,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436875,"byte_end":436878,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ The default is `std::u32::MAX`, which can be overridden by setting the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436883,"byte_end":436957,"line_start":302,"line_end":302,"column_start":5,"column_end":79}},{"value":"/ `PROPTEST_MAX_SHRINK_ITERS` environment variable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":436962,"byte_end":437015,"line_start":303,"line_end":303,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":7572},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437864,"byte_end":437876,"line_start":322,"line_end":322,"column_start":9,"column_end":21},"name":"result_cache","qualname":"::test_runner::config::Config::result_cache","value":"fn() -> std::boxed::Box<(dyn test_runner::result_cache::ResultCache + 'static)>","parent":{"krate":0,"index":7562},"children":[],"decl_id":null,"docs":" A function to create new result caches.","sig":null,"attributes":[{"value":"/ A function to create new result caches.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437052,"byte_end":437095,"line_start":306,"line_end":306,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437100,"byte_end":437103,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ The default is to do no caching. The easiest way to enable caching is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437108,"byte_end":437181,"line_start":308,"line_end":308,"column_start":5,"column_end":78}},{"value":"/ to set this field to `basic_result_cache` (though that is currently","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437186,"byte_end":437257,"line_start":309,"line_end":309,"column_start":5,"column_end":76}},{"value":"/ only available with the `std` feature).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437262,"byte_end":437305,"line_start":310,"line_end":310,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437310,"byte_end":437313,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ This is useful for strategies which have a tendency to produce","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437318,"byte_end":437384,"line_start":312,"line_end":312,"column_start":5,"column_end":71}},{"value":"/ duplicate values, or for tests where shrinking can take a very long","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437389,"byte_end":437460,"line_start":313,"line_end":313,"column_start":5,"column_end":76}},{"value":"/ time due to exploring the same output multiple times.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437465,"byte_end":437522,"line_start":314,"line_end":314,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437527,"byte_end":437530,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ When caching is enabled, generated values themselves are not stored, so","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437535,"byte_end":437610,"line_start":316,"line_end":316,"column_start":5,"column_end":80}},{"value":"/ this does not pose a risk of memory exhaustion for large test inputs","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437615,"byte_end":437687,"line_start":317,"line_end":317,"column_start":5,"column_end":77}},{"value":"/ unless using extraordinarily large test case counts.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437692,"byte_end":437748,"line_start":318,"line_end":318,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437753,"byte_end":437756,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ Caching incurs its own overhead, and may very well make your test run","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437761,"byte_end":437834,"line_start":320,"line_end":320,"column_start":5,"column_end":78}},{"value":"/ more slowly.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437839,"byte_end":437855,"line_start":321,"line_end":321,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":7573},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438596,"byte_end":438603,"line_start":340,"line_end":340,"column_start":9,"column_end":16},"name":"verbose","qualname":"::test_runner::config::Config::verbose","value":"u32","parent":{"krate":0,"index":7562},"children":[],"decl_id":null,"docs":" Set to non-zero values to cause proptest to emit human-targeted\n messages to stderr as it runs.","sig":null,"attributes":[{"value":"/ Set to non-zero values to cause proptest to emit human-targeted","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437913,"byte_end":437980,"line_start":324,"line_end":324,"column_start":5,"column_end":72}},{"value":"/ messages to stderr as it runs.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":437985,"byte_end":438019,"line_start":325,"line_end":325,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438024,"byte_end":438027,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ Greater values cause greater amounts of logs to be emitted. The exact","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438032,"byte_end":438105,"line_start":327,"line_end":327,"column_start":5,"column_end":78}},{"value":"/ meaning of certain levels other than 0 is subject to change.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438110,"byte_end":438174,"line_start":328,"line_end":328,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438179,"byte_end":438182,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ - 0: No extra output.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438187,"byte_end":438212,"line_start":330,"line_end":330,"column_start":5,"column_end":30}},{"value":"/ - 1: Log test failure messages.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438217,"byte_end":438252,"line_start":331,"line_end":331,"column_start":5,"column_end":40}},{"value":"/ - 2: Trace low-level details.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438257,"byte_end":438290,"line_start":332,"line_end":332,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438295,"byte_end":438298,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ This is only available with the `std` feature (enabled by default)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438303,"byte_end":438373,"line_start":334,"line_end":334,"column_start":5,"column_end":75}},{"value":"/ since on nostd proptest has no way to produce output.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438378,"byte_end":438435,"line_start":335,"line_end":335,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438440,"byte_end":438443,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ The default is `0`, which can be overridden by setting the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438448,"byte_end":438510,"line_start":337,"line_end":337,"column_start":5,"column_end":67}},{"value":"/ `PROPTEST_VERBOSE` environment variable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438515,"byte_end":438559,"line_start":338,"line_end":338,"column_start":5,"column_end":49}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438564,"byte_end":438587,"line_start":339,"line_end":339,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":7574},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438958,"byte_end":438971,"line_start":349,"line_end":349,"column_start":9,"column_end":22},"name":"rng_algorithm","qualname":"::test_runner::config::Config::rng_algorithm","value":"test_runner::rng::RngAlgorithm","parent":{"krate":0,"index":7562},"children":[],"decl_id":null,"docs":" The RNG algorithm to use when not using a user-provided RNG.","sig":null,"attributes":[{"value":"/ The RNG algorithm to use when not using a user-provided RNG.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438615,"byte_end":438679,"line_start":342,"line_end":342,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438684,"byte_end":438687,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ The default is `RngAlgorithm::default()`, which can be overridden by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438692,"byte_end":438764,"line_start":344,"line_end":344,"column_start":5,"column_end":77}},{"value":"/ setting the `PROPTEST_RNG_ALGORITHM` environment variable to one of the following:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438769,"byte_end":438855,"line_start":345,"line_end":345,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438860,"byte_end":438863,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ - `xs` — `RngAlgorithm::XorShift`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438868,"byte_end":438907,"line_start":347,"line_end":347,"column_start":5,"column_end":42}},{"value":"/ - `cc` — `RngAlgorithm::ChaCha`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":438912,"byte_end":438949,"line_start":348,"line_end":348,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":7575},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439068,"byte_end":439083,"line_start":353,"line_end":353,"column_start":9,"column_end":24},"name":"_non_exhaustive","qualname":"::test_runner::config::Config::_non_exhaustive","value":"()","parent":{"krate":0,"index":7562},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1555},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439561,"byte_end":439571,"line_start":370,"line_end":370,"column_start":12,"column_end":22},"name":"with_cases","qualname":"<Config>::with_cases","value":"pub fn with_cases(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `Config` only differing from the `default()` in the\n number of test cases required to pass the test successfully.","sig":null,"attributes":[{"value":"/ Constructs a `Config` only differing from the `default()` in the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439110,"byte_end":439178,"line_start":357,"line_end":357,"column_start":5,"column_end":73}},{"value":"/ number of test cases required to pass the test successfully.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439183,"byte_end":439247,"line_start":358,"line_end":358,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439252,"byte_end":439255,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ This is simply a more concise alternative to using field-record update","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439260,"byte_end":439334,"line_start":360,"line_end":360,"column_start":5,"column_end":79}},{"value":"/ syntax:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439339,"byte_end":439350,"line_start":361,"line_end":361,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439355,"byte_end":439358,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439363,"byte_end":439370,"line_start":363,"line_end":363,"column_start":5,"column_end":12}},{"value":"/ # use proptest::test_runner::Config;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439375,"byte_end":439415,"line_start":364,"line_end":364,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439420,"byte_end":439435,"line_start":365,"line_end":365,"column_start":5,"column_end":20}},{"value":"/     Config::with_cases(42),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439440,"byte_end":439471,"line_start":366,"line_end":366,"column_start":5,"column_end":36}},{"value":"/     Config { cases: 42, .. Config::default() }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439476,"byte_end":439526,"line_start":367,"line_end":367,"column_start":5,"column_end":55}},{"value":"/ );","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439531,"byte_end":439537,"line_start":368,"line_end":368,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439542,"byte_end":439549,"line_start":369,"line_end":369,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1556},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440156,"byte_end":440172,"line_start":390,"line_end":390,"column_start":12,"column_end":28},"name":"with_source_file","qualname":"<Config>::with_source_file","value":"pub fn with_source_file(&'static str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `Config` only differing from the `default()` in the\n source_file of the present test.","sig":null,"attributes":[{"value":"/ Constructs a `Config` only differing from the `default()` in the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439681,"byte_end":439749,"line_start":377,"line_end":377,"column_start":5,"column_end":73}},{"value":"/ source_file of the present test.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439754,"byte_end":439790,"line_start":378,"line_end":378,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439795,"byte_end":439798,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ This is simply a more concise alternative to using field-record update","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439803,"byte_end":439877,"line_start":380,"line_end":380,"column_start":5,"column_end":79}},{"value":"/ syntax:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439882,"byte_end":439893,"line_start":381,"line_end":381,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439898,"byte_end":439901,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439906,"byte_end":439913,"line_start":383,"line_end":383,"column_start":5,"column_end":12}},{"value":"/ # use proptest::test_runner::Config;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439918,"byte_end":439958,"line_start":384,"line_end":384,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439963,"byte_end":439978,"line_start":385,"line_end":385,"column_start":5,"column_end":20}},{"value":"/     Config::with_source_file(\"computer/question\"),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439983,"byte_end":440037,"line_start":386,"line_end":386,"column_start":5,"column_end":59}},{"value":"/     Config { source_file: Some(\"computer/question\"), .. Config::default() }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440042,"byte_end":440121,"line_start":387,"line_end":387,"column_start":5,"column_end":84}},{"value":"/ );","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440126,"byte_end":440132,"line_start":388,"line_end":388,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440137,"byte_end":440144,"line_start":389,"line_end":389,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1557},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":441015,"byte_end":441037,"line_start":416,"line_end":416,"column_start":12,"column_end":34},"name":"clone_with_source_file","qualname":"<Config>::clone_with_source_file","value":"pub fn clone_with_source_file(&Self, &'static str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `Config` only differing from the provided Config instance, `self`,\n in the source_file of the present test.","sig":null,"attributes":[{"value":"/ Constructs a `Config` only differing from the provided Config instance, `self`,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440322,"byte_end":440405,"line_start":397,"line_end":397,"column_start":5,"column_end":88}},{"value":"/ in the source_file of the present test.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440410,"byte_end":440453,"line_start":398,"line_end":398,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440458,"byte_end":440461,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ This is simply a more concise alternative to using field-record update","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440466,"byte_end":440540,"line_start":400,"line_end":400,"column_start":5,"column_end":79}},{"value":"/ syntax:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440545,"byte_end":440556,"line_start":401,"line_end":401,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440561,"byte_end":440564,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440569,"byte_end":440576,"line_start":403,"line_end":403,"column_start":5,"column_end":12}},{"value":"/ # use proptest::test_runner::Config;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440581,"byte_end":440621,"line_start":404,"line_end":404,"column_start":5,"column_end":45}},{"value":"/ let a = Config::with_source_file(\"computer/question\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440626,"byte_end":440684,"line_start":405,"line_end":405,"column_start":5,"column_end":63}},{"value":"/ let b = a.clone_with_source_file(\"answer/42\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440689,"byte_end":440739,"line_start":406,"line_end":406,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440744,"byte_end":440759,"line_start":407,"line_end":407,"column_start":5,"column_end":20}},{"value":"/     a,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440764,"byte_end":440774,"line_start":408,"line_end":408,"column_start":5,"column_end":15}},{"value":"/     Config { source_file: Some(\"computer/question\"), .. Config::default() }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440779,"byte_end":440858,"line_start":409,"line_end":409,"column_start":5,"column_end":84}},{"value":"/ );","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440863,"byte_end":440869,"line_start":410,"line_end":410,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440874,"byte_end":440889,"line_start":411,"line_end":411,"column_start":5,"column_end":20}},{"value":"/     b,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440894,"byte_end":440904,"line_start":412,"line_end":412,"column_start":5,"column_end":15}},{"value":"/     Config { source_file: Some(\"answer/42\"), .. Config::default() }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440909,"byte_end":440980,"line_start":413,"line_end":413,"column_start":5,"column_end":76}},{"value":"/ );","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440985,"byte_end":440991,"line_start":414,"line_end":414,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":440996,"byte_end":441003,"line_start":415,"line_end":415,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1558},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":441383,"byte_end":441387,"line_start":426,"line_end":426,"column_start":12,"column_end":16},"name":"fork","qualname":"<Config>::fork","value":"pub fn fork(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether this configuration implies forking.","sig":null,"attributes":[{"value":"/ Return whether this configuration implies forking.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":441195,"byte_end":441249,"line_start":422,"line_end":422,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":441254,"byte_end":441257,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ This method exists even if the \"fork\" feature is disabled, in which","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":441262,"byte_end":441333,"line_start":424,"line_end":424,"column_start":5,"column_end":76}},{"value":"/ case it simply returns false.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":441338,"byte_end":441371,"line_start":425,"line_end":425,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1560},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":442089,"byte_end":442096,"line_start":454,"line_end":454,"column_start":12,"column_end":19},"name":"timeout","qualname":"<Config>::timeout","value":"pub fn timeout(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the configured timeout.","sig":null,"attributes":[{"value":"/ Returns the configured timeout.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":441884,"byte_end":441919,"line_start":449,"line_end":449,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":441924,"byte_end":441927,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ This method exists even if the \"timeout\" feature is disabled, in which","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":441932,"byte_end":442006,"line_start":451,"line_end":451,"column_start":5,"column_end":79}},{"value":"/ case it simply returns 0.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":442011,"byte_end":442040,"line_start":452,"line_end":452,"column_start":5,"column_end":34}},{"value":"cfg(not(feature = \"timeout\"))","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":442045,"byte_end":442077,"line_start":453,"line_end":453,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1561},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":442278,"byte_end":442294,"line_start":461,"line_end":461,"column_start":12,"column_end":28},"name":"max_shrink_iters","qualname":"<Config>::max_shrink_iters","value":"pub fn max_shrink_iters(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the configured limit on shrinking iterations.","sig":null,"attributes":[{"value":"/ Returns the configured limit on shrinking iterations.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":442134,"byte_end":442191,"line_start":458,"line_end":458,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":442196,"byte_end":442199,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ This takes into account the special \"automatic\" behaviour.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":442204,"byte_end":442266,"line_start":460,"line_end":460,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1562},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":442635,"byte_end":442651,"line_start":473,"line_end":473,"column_start":12,"column_end":28},"name":"__sugar_to_owned","qualname":"<Config>::__sugar_to_owned","value":"pub fn __sugar_to_owned(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":442582,"byte_end":442604,"line_start":471,"line_end":471,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7585},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444031,"byte_end":444037,"line_start":31,"line_end":31,"column_start":5,"column_end":11},"name":"Reject","qualname":"::test_runner::errors::TestCaseError::Reject","value":"TestCaseError::Reject(Reason)","parent":{"krate":0,"index":7584},"children":[],"decl_id":null,"docs":" The input was not valid for the test case. This does not count as a\n test failure (nor a success); rather, it simply signals to generate\n a new input and try again.\n","sig":null,"attributes":[{"value":"/ The input was not valid for the test case. This does not count as a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":443844,"byte_end":443915,"line_start":28,"line_end":28,"column_start":5,"column_end":76}},{"value":"/ test failure (nor a success); rather, it simply signals to generate","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":443920,"byte_end":443991,"line_start":29,"line_end":29,"column_start":5,"column_end":76}},{"value":"/ a new input and try again.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":443996,"byte_end":444026,"line_start":30,"line_end":30,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7588},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444096,"byte_end":444100,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Fail","qualname":"::test_runner::errors::TestCaseError::Fail","value":"TestCaseError::Fail(Reason)","parent":{"krate":0,"index":7584},"children":[],"decl_id":null,"docs":" The code under test failed the test.\n","sig":null,"attributes":[{"value":"/ The code under test failed the test.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444051,"byte_end":444091,"line_start":32,"line_end":32,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":7584},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":443824,"byte_end":443837,"line_start":27,"line_end":27,"column_start":10,"column_end":23},"name":"TestCaseError","qualname":"::test_runner::errors::TestCaseError","value":"pub enum TestCaseError {\n\n    /// The input was not valid for the test case. This does not count as a\n    /// test failure (nor a success); rather, it simply signals to generate\n    /// a new input and try again.\n    Reject(Reason),\n\n    /// The code under test failed the test.\n    Fail(Reason),\n}","parent":null,"children":[{"krate":0,"index":7585},{"krate":0,"index":7588}],"decl_id":null,"docs":" Errors which can be returned from test cases to indicate non-successful\n completion.","sig":null,"attributes":[{"value":"/ Errors which can be returned from test cases to indicate non-successful","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":443410,"byte_end":443485,"line_start":17,"line_end":17,"column_start":1,"column_end":76}},{"value":"/ completion.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":443486,"byte_end":443501,"line_start":18,"line_end":18,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":443502,"byte_end":443505,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Note that in spite of the name, `TestCaseError` is currently *not* an","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":443506,"byte_end":443579,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ instance of `Error`, since otherwise `impl<E : Error> From<E>` could not be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":443580,"byte_end":443659,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ provided.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":443660,"byte_end":443673,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":443674,"byte_end":443677,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Any `Error` can be converted to a `TestCaseError`, which places","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":443678,"byte_end":443745,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/ `Error::display()` into the `Fail` case.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":443746,"byte_end":443790,"line_start":25,"line_end":25,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1569},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444175,"byte_end":444189,"line_start":37,"line_end":37,"column_start":10,"column_end":24},"name":"TestCaseResult","qualname":"::test_runner::errors::TestCaseResult","value":"Result<(), TestCaseError>","parent":null,"children":[],"decl_id":null,"docs":" Convenience for the type returned by test cases.\n","sig":null,"attributes":[{"value":"/ Convenience for the type returned by test cases.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444113,"byte_end":444165,"line_start":36,"line_end":36,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1571},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444612,"byte_end":444618,"line_start":46,"line_end":46,"column_start":12,"column_end":18},"name":"reject","qualname":"<TestCaseError>::reject","value":"pub fn reject<impl Into<Reason>: Into<Reason>>(impl Into<Reason>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rejects the generated test input as invalid for this test case. This\n does not count as a test failure (nor a success); rather, it simply\n signals to generate a new input and try again.","sig":null,"attributes":[{"value":"/ Rejects the generated test input as invalid for this test case. This","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444245,"byte_end":444317,"line_start":40,"line_end":40,"column_start":5,"column_end":77}},{"value":"/ does not count as a test failure (nor a success); rather, it simply","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444322,"byte_end":444393,"line_start":41,"line_end":41,"column_start":5,"column_end":76}},{"value":"/ signals to generate a new input and try again.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444398,"byte_end":444448,"line_start":42,"line_end":42,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444453,"byte_end":444456,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ The string gives the location and context of the rejection, and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444461,"byte_end":444528,"line_start":44,"line_end":44,"column_start":5,"column_end":72}},{"value":"/ should be suitable for formatting like `Foo did X at {whence}`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444533,"byte_end":444600,"line_start":45,"line_end":45,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1573},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444877,"byte_end":444881,"line_start":54,"line_end":54,"column_start":12,"column_end":16},"name":"fail","qualname":"<TestCaseError>::fail","value":"pub fn fail<impl Into<Reason>: Into<Reason>>(impl Into<Reason>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The code under test failed the test.","sig":null,"attributes":[{"value":"/ The code under test failed the test.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444712,"byte_end":444752,"line_start":50,"line_end":50,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444757,"byte_end":444760,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ The string should indicate the location of the failure, but may","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444765,"byte_end":444832,"line_start":52,"line_end":52,"column_start":5,"column_end":72}},{"value":"/ generally be any string.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444837,"byte_end":444865,"line_start":53,"line_end":53,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7597},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":445727,"byte_end":445732,"line_start":82,"line_end":82,"column_start":5,"column_end":10},"name":"Abort","qualname":"::test_runner::errors::TestError::Abort","value":"TestError::Abort(Reason)","parent":{"krate":0,"index":7595},"children":[],"decl_id":null,"docs":" The test was aborted for the given reason, for example, due to too many\n inputs having been rejected.\n","sig":null,"attributes":[{"value":"/ The test was aborted for the given reason, for example, due to too many","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":445610,"byte_end":445685,"line_start":80,"line_end":80,"column_start":5,"column_end":80}},{"value":"/ inputs having been rejected.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":445690,"byte_end":445722,"line_start":81,"line_end":81,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7600},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":445917,"byte_end":445921,"line_start":86,"line_end":86,"column_start":5,"column_end":9},"name":"Fail","qualname":"::test_runner::errors::TestError::Fail","value":"TestError::Fail(Reason, T)","parent":{"krate":0,"index":7595},"children":[],"decl_id":null,"docs":" A failing test case was found. The string indicates where and/or why\n the test failed. The `T` is the minimal input found to reproduce the\n failure.\n","sig":null,"attributes":[{"value":"/ A failing test case was found. The string indicates where and/or why","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":445746,"byte_end":445818,"line_start":83,"line_end":83,"column_start":5,"column_end":77}},{"value":"/ the test failed. The `T` is the minimal input found to reproduce the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":445823,"byte_end":445895,"line_start":84,"line_end":84,"column_start":5,"column_end":77}},{"value":"/ failure.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":445900,"byte_end":445912,"line_start":85,"line_end":85,"column_start":5,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":7595},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":445591,"byte_end":445600,"line_start":79,"line_end":79,"column_start":10,"column_end":19},"name":"TestError","qualname":"::test_runner::errors::TestError","value":"pub enum TestError<T> {\n\n    /// The test was aborted for the given reason, for example, due to too many\n    /// inputs having been rejected.\n    Abort(Reason),\n\n    /// A failing test case was found. The string indicates where and/or why\n    /// the test failed. The `T` is the minimal input found to reproduce the\n    /// failure.\n    Fail(Reason, T),\n}","parent":null,"children":[{"krate":0,"index":7597},{"krate":0,"index":7600}],"decl_id":null,"docs":" A failure state from running test cases for a single test.\n","sig":null,"attributes":[{"value":"/ A failure state from running test cases for a single test.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":445480,"byte_end":445542,"line_start":77,"line_end":77,"column_start":1,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7622},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":453019,"byte_end":453022,"line_start":41,"line_end":41,"column_start":5,"column_end":8},"name":"Off","qualname":"::test_runner::failure_persistence::file::FileFailurePersistence::Off","value":"FileFailurePersistence::Off","parent":{"krate":0,"index":7621},"children":[],"decl_id":null,"docs":" Completely disables persistence of failing test cases.","sig":null,"attributes":[{"value":"/ Completely disables persistence of failing test cases.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":452765,"byte_end":452823,"line_start":36,"line_end":36,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":452828,"byte_end":452831,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ This is semantically equivalent to `Direct(\"/dev/null\")` on Unix and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":452836,"byte_end":452908,"line_start":38,"line_end":38,"column_start":5,"column_end":77}},{"value":"/ `Direct(\"NUL\")` on Windows (though it is internally handled by simply","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":452913,"byte_end":452986,"line_start":39,"line_end":39,"column_start":5,"column_end":78}},{"value":"/ not doing any I/O).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":452991,"byte_end":453014,"line_start":40,"line_end":40,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7624},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454065,"byte_end":454079,"line_start":60,"line_end":60,"column_start":5,"column_end":19},"name":"SourceParallel","qualname":"::test_runner::failure_persistence::file::FileFailurePersistence::SourceParallel","value":"FileFailurePersistence::SourceParallel(&'static str)","parent":{"krate":0,"index":7621},"children":[],"decl_id":null,"docs":" The path given to `TestRunner::set_source_file()` is parsed. The path\n is traversed up the directory tree until a directory containing a file\n named `lib.rs` or `main.rs` is found. A sibling to that directory with\n the name given by the string in this configuration is created, and a\n file with the same name and path relative to the source directory, but\n with the extension changed to `.txt`, is used.","sig":null,"attributes":[{"value":"/ The path given to `TestRunner::set_source_file()` is parsed. The path","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":453028,"byte_end":453101,"line_start":42,"line_end":42,"column_start":5,"column_end":78}},{"value":"/ is traversed up the directory tree until a directory containing a file","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":453106,"byte_end":453180,"line_start":43,"line_end":43,"column_start":5,"column_end":79}},{"value":"/ named `lib.rs` or `main.rs` is found. A sibling to that directory with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":453185,"byte_end":453259,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/ the name given by the string in this configuration is created, and a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":453264,"byte_end":453336,"line_start":45,"line_end":45,"column_start":5,"column_end":77}},{"value":"/ file with the same name and path relative to the source directory, but","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":453341,"byte_end":453415,"line_start":46,"line_end":46,"column_start":5,"column_end":79}},{"value":"/ with the extension changed to `.txt`, is used.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":453420,"byte_end":453470,"line_start":47,"line_end":47,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":453475,"byte_end":453478,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ For example, given a source path of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":453483,"byte_end":453522,"line_start":49,"line_end":49,"column_start":5,"column_end":44}},{"value":"/ `/home/jsmith/code/project/src/foo/bar.rs` and a configuration of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":453527,"byte_end":453596,"line_start":50,"line_end":50,"column_start":5,"column_end":74}},{"value":"/ `SourceParallel(\"proptest-regressions\")` (the default), assuming the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":453601,"byte_end":453673,"line_start":51,"line_end":51,"column_start":5,"column_end":77}},{"value":"/ `src` directory has a `lib.rs` or `main.rs`, the resulting file would","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":453678,"byte_end":453751,"line_start":52,"line_end":52,"column_start":5,"column_end":78}},{"value":"/ be `/home/jsmith/code/project/proptest-regressions/foo/bar.txt`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":453756,"byte_end":453824,"line_start":53,"line_end":53,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":453829,"byte_end":453832,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ If no `lib.rs` or `main.rs` can be found, a warning is printed and this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":453837,"byte_end":453912,"line_start":55,"line_end":55,"column_start":5,"column_end":80}},{"value":"/ behaves like `WithSource`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":453917,"byte_end":453947,"line_start":56,"line_end":56,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":453952,"byte_end":453955,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ If no source file has been configured, a warning is printed and this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":453960,"byte_end":454032,"line_start":58,"line_end":58,"column_start":5,"column_end":77}},{"value":"/ behaves like `Off`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454037,"byte_end":454060,"line_start":59,"line_end":59,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7627},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454543,"byte_end":454553,"line_start":69,"line_end":69,"column_start":5,"column_end":15},"name":"WithSource","qualname":"::test_runner::failure_persistence::file::FileFailurePersistence::WithSource","value":"FileFailurePersistence::WithSource(&'static str)","parent":{"krate":0,"index":7621},"children":[],"decl_id":null,"docs":" The path given to `TestRunner::set_source_file()` is parsed. The\n extension of the path is changed to the string given in this\n configuration, and that filename is used.","sig":null,"attributes":[{"value":"/ The path given to `TestRunner::set_source_file()` is parsed. The","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454099,"byte_end":454167,"line_start":61,"line_end":61,"column_start":5,"column_end":73}},{"value":"/ extension of the path is changed to the string given in this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454172,"byte_end":454236,"line_start":62,"line_end":62,"column_start":5,"column_end":69}},{"value":"/ configuration, and that filename is used.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454241,"byte_end":454286,"line_start":63,"line_end":63,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454291,"byte_end":454294,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ For example, given a source path of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454299,"byte_end":454338,"line_start":65,"line_end":65,"column_start":5,"column_end":44}},{"value":"/ `/home/jsmith/code/project/src/foo/bar.rs` and a configuration of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454343,"byte_end":454412,"line_start":66,"line_end":66,"column_start":5,"column_end":74}},{"value":"/ `WithSource(\"regressions\")`, the resulting path would be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454417,"byte_end":454477,"line_start":67,"line_end":67,"column_start":5,"column_end":65}},{"value":"/ `/home/jsmith/code/project/src/foo/bar.regressions`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454482,"byte_end":454538,"line_start":68,"line_end":68,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7630},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454685,"byte_end":454691,"line_start":72,"line_end":72,"column_start":5,"column_end":11},"name":"Direct","qualname":"::test_runner::failure_persistence::file::FileFailurePersistence::Direct","value":"FileFailurePersistence::Direct(&'static str)","parent":{"krate":0,"index":7621},"children":[],"decl_id":null,"docs":" The string given in this option is directly used as a file path without\n any further processing.\n","sig":null,"attributes":[{"value":"/ The string given in this option is directly used as a file path without","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454573,"byte_end":454648,"line_start":70,"line_end":70,"column_start":5,"column_end":80}},{"value":"/ any further processing.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454653,"byte_end":454680,"line_start":71,"line_end":71,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7633},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454757,"byte_end":454771,"line_start":75,"line_end":75,"column_start":5,"column_end":19},"name":"_NonExhaustive","qualname":"::test_runner::failure_persistence::file::FileFailurePersistence::_NonExhaustive","value":"FileFailurePersistence::_NonExhaustive","parent":{"krate":0,"index":7621},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454730,"byte_end":454752,"line_start":74,"line_end":74,"column_start":5,"column_end":27}}]},{"kind":"Enum","id":{"krate":0,"index":7621},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":452736,"byte_end":452758,"line_start":35,"line_end":35,"column_start":10,"column_end":32},"name":"FileFailurePersistence","qualname":"::test_runner::failure_persistence::file::FileFailurePersistence","value":"pub enum FileFailurePersistence {\n\n    /// Completely disables persistence of failing test cases.\n    ///\n    /// This is semantically equivalent to `Direct(\"/dev/null\")` on Unix and\n    /// `Direct(\"NUL\")` on Windows (though it is internally handled by simply\n    /// not doing any I/O).\n    Off,\n\n    /// The path given to `TestRunner::set_source_file()` is parsed. The path\n    /// is traversed up the directory tree until a directory containing a file\n    /// named `lib.rs` or `main.rs` is found. A sibling to that directory with\n    /// the name given by the string in this configuration is created, and a\n    /// file with the same name and path relative to the source directory, but\n    /// with the extension changed to `.txt`, is used.\n    ///\n    /// For example, given a source path of\n    /// `/home/jsmith/code/project/src/foo/bar.rs` and a configuration of\n    /// `SourceParallel(\"proptest-regressions\")` (the default), assuming the\n    /// `src` directory has a `lib.rs` or `main.rs`, the resulting file would\n    /// be `/home/jsmith/code/project/proptest-regressions/foo/bar.txt`.\n    ///\n    /// If no `lib.rs` or `main.rs` can be found, a warning is printed and this\n    /// behaves like `WithSource`.\n    ///\n    /// If no source file has been configured, a warning is printed and this\n    /// behaves like `Off`.\n    SourceParallel(&'static str),\n\n    /// The path given to `TestRunner::set_source_file()` is parsed. The\n    /// extension of the path is changed to the string given in this\n    /// configuration, and that filename is used.\n    ///\n    /// For example, given a source path of\n    /// `/home/jsmith/code/project/src/foo/bar.rs` and a configuration of\n    /// `WithSource(\"regressions\")`, the resulting path would be\n    /// `/home/jsmith/code/project/src/foo/bar.regressions`.\n    WithSource(&'static str),\n\n    /// The string given in this option is directly used as a file path without\n    /// any further processing.\n    Direct(&'static str),\n\n    #[doc(hidden)]\n    #[allow(missing_docs)]\n    _NonExhaustive,\n}","parent":null,"children":[{"krate":0,"index":7622},{"krate":0,"index":7624},{"krate":0,"index":7627},{"krate":0,"index":7630},{"krate":0,"index":7633}],"decl_id":null,"docs":" Describes how failing test cases are persisted.","sig":null,"attributes":[{"value":"/ Describes how failing test cases are persisted.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":452328,"byte_end":452379,"line_start":27,"line_end":27,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":452380,"byte_end":452383,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Note that file names in this enum are `&str` rather than `&Path` since","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":452384,"byte_end":452458,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"/ constant functions are not yet in Rust stable as of 2017-12-16.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":452459,"byte_end":452526,"line_start":30,"line_end":30,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":452527,"byte_end":452530,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ In all cases, if a derived path references a directory which does not yet","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":452531,"byte_end":452608,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/ exist, proptest will attempt to create all necessary parent directories.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":452609,"byte_end":452685,"line_start":33,"line_end":33,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":7657},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/map.rs","byte_start":471061,"byte_end":471082,"line_start":21,"line_end":21,"column_start":12,"column_end":33},"name":"MapFailurePersistence","qualname":"::test_runner::failure_persistence::map::MapFailurePersistence","value":"MapFailurePersistence { map }","parent":null,"children":[{"krate":0,"index":7658}],"decl_id":null,"docs":" Failure persistence option that loads and saves seeds in memory\n on the heap. This may be useful when accumulating test failures\n across multiple `TestRunner` instances for external reporting\n or batched persistence.\n","sig":null,"attributes":[{"value":"/ Failure persistence option that loads and saves seeds in memory","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/map.rs","byte_start":470776,"byte_end":470843,"line_start":16,"line_end":16,"column_start":1,"column_end":68}},{"value":"/ on the heap. This may be useful when accumulating test failures","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/map.rs","byte_start":470844,"byte_end":470911,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ across multiple `TestRunner` instances for external reporting","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/map.rs","byte_start":470912,"byte_end":470977,"line_start":18,"line_end":18,"column_start":1,"column_end":66}},{"value":"/ or batched persistence.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/map.rs","byte_start":470978,"byte_end":471005,"line_start":19,"line_end":19,"column_start":1,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":7658},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/map.rs","byte_start":471136,"byte_end":471139,"line_start":23,"line_end":23,"column_start":9,"column_end":12},"name":"map","qualname":"::test_runner::failure_persistence::map::MapFailurePersistence::map","value":"std::collections::BTreeMap<&'static str, std::collections::BTreeSet<test_runner::failure_persistence::PersistedSeed>>","parent":{"krate":0,"index":7657},"children":[],"decl_id":null,"docs":" Backing map, keyed by source_file.\n","sig":null,"attributes":[{"value":"/ Backing map, keyed by source_file.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/map.rs","byte_start":471089,"byte_end":471127,"line_start":22,"line_end":22,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":7678},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":447522,"byte_end":447535,"line_start":33,"line_end":33,"column_start":12,"column_end":25},"name":"PersistedSeed","qualname":"::test_runner::failure_persistence::PersistedSeed","value":"","parent":null,"children":[],"decl_id":null,"docs":" Opaque struct representing a seed which can be persisted.","sig":null,"attributes":[{"value":"/ Opaque struct representing a seed which can be persisted.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":447271,"byte_end":447332,"line_start":28,"line_end":28,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":447333,"byte_end":447336,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The `Display` and `FromStr` implementations go to and from the format","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":447337,"byte_end":447410,"line_start":30,"line_end":30,"column_start":1,"column_end":74}},{"value":"/ Proptest uses for its persistence file.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":447411,"byte_end":447454,"line_start":31,"line_end":31,"column_start":1,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":1689},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":448217,"byte_end":448235,"line_start":55,"line_end":55,"column_start":11,"column_end":29},"name":"FailurePersistence","qualname":"::test_runner::failure_persistence::FailurePersistence","value":"FailurePersistence: Send + Sync + fmt::Debug","parent":null,"children":[{"krate":0,"index":1690},{"krate":0,"index":1692},{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1697},{"krate":0,"index":1698},{"krate":0,"index":1699}],"decl_id":null,"docs":" Provides external persistence for historical test failures by storing seeds.","sig":null,"attributes":[{"value":"/ Provides external persistence for historical test failures by storing seeds.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":447877,"byte_end":447957,"line_start":49,"line_end":49,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":447958,"byte_end":447961,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ **Note**: Implementing `load_persisted_failures` and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":447962,"byte_end":448018,"line_start":51,"line_end":51,"column_start":1,"column_end":57}},{"value":"/ `save_persisted_failures` is **deprecated** and these methods will be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":448019,"byte_end":448092,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/ removed in proptest 0.10.0. Instead, implement `load_persisted_failures2`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":448093,"byte_end":448170,"line_start":53,"line_end":53,"column_start":1,"column_end":78}},{"value":"/ and `save_persisted_failures2`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":448171,"byte_end":448206,"line_start":54,"line_end":54,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1690},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":448699,"byte_end":448723,"line_start":64,"line_end":64,"column_start":8,"column_end":32},"name":"load_persisted_failures2","qualname":"::test_runner::failure_persistence::FailurePersistence::load_persisted_failures2","value":"pub fn load_persisted_failures2(&Self, Option<&'static str>)\n-> Vec<PersistedSeed>","parent":{"krate":0,"index":1689},"children":[],"decl_id":null,"docs":" Supply seeds associated with the given `source_file` that may be used\n by a `TestRunner`'s random number generator in order to consistently\n recreate a previously-failing `Strategy`-provided value.","sig":null,"attributes":[{"value":"/ Supply seeds associated with the given `source_file` that may be used","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":448268,"byte_end":448341,"line_start":56,"line_end":56,"column_start":5,"column_end":78}},{"value":"/ by a `TestRunner`'s random number generator in order to consistently","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":448346,"byte_end":448418,"line_start":57,"line_end":57,"column_start":5,"column_end":77}},{"value":"/ recreate a previously-failing `Strategy`-provided value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":448423,"byte_end":448483,"line_start":58,"line_end":58,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":448488,"byte_end":448491,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ The default implementation is **for backwards compatibility**. It","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":448496,"byte_end":448565,"line_start":60,"line_end":60,"column_start":5,"column_end":74}},{"value":"/ delegates to `load_persisted_failures` and converts the results into","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":448570,"byte_end":448642,"line_start":61,"line_end":61,"column_start":5,"column_end":77}},{"value":"/ XorShift seeds.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":448647,"byte_end":448666,"line_start":62,"line_end":62,"column_start":5,"column_end":24}},{"value":"allow(deprecated)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":448671,"byte_end":448691,"line_start":63,"line_end":63,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":449231,"byte_end":449254,"line_start":80,"line_end":80,"column_start":8,"column_end":31},"name":"load_persisted_failures","qualname":"::test_runner::failure_persistence::FailurePersistence::load_persisted_failures","value":"pub fn load_persisted_failures(&Self, Option<&'static str>) -> Vec<[u8; ]>","parent":{"krate":0,"index":1689},"children":[],"decl_id":null,"docs":" Use `load_persisted_failures2` instead.","sig":null,"attributes":[{"value":"/ Use `load_persisted_failures2` instead.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":448983,"byte_end":449026,"line_start":74,"line_end":74,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":449031,"byte_end":449034,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ This function inadvertently exposes the implementation of seeds prior","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":449039,"byte_end":449112,"line_start":76,"line_end":76,"column_start":5,"column_end":78}},{"value":"/ to Proptest 0.9.1 and only works with XorShift seeds.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":449117,"byte_end":449174,"line_start":77,"line_end":77,"column_start":5,"column_end":62}},{"value":"deprecated","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":449179,"byte_end":449192,"line_start":78,"line_end":78,"column_start":5,"column_end":18}},{"value":"allow(unused_variables)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":449197,"byte_end":449223,"line_start":79,"line_end":79,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1694},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":449681,"byte_end":449704,"line_start":92,"line_end":92,"column_start":8,"column_end":31},"name":"save_persisted_failure2","qualname":"::test_runner::failure_persistence::FailurePersistence::save_persisted_failure2","value":"pub fn save_persisted_failure2(&mut Self, Option<&'static str>, PersistedSeed,\n                               &fmt::Debug)","parent":{"krate":0,"index":1689},"children":[],"decl_id":null,"docs":" Store a new failure-generating seed associated with the given `source_file`.","sig":null,"attributes":[{"value":"/ Store a new failure-generating seed associated with the given `source_file`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":449410,"byte_end":449490,"line_start":87,"line_end":87,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":449495,"byte_end":449498,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ The default implementation is **for backwards compatibility**. It","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":449503,"byte_end":449572,"line_start":89,"line_end":89,"column_start":5,"column_end":74}},{"value":"/ delegates to `save_persisted_failure` if `seed` is a XorShift seed.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":449577,"byte_end":449648,"line_start":90,"line_end":90,"column_start":5,"column_end":76}},{"value":"allow(deprecated)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":449653,"byte_end":449673,"line_start":91,"line_end":91,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1695},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":450290,"byte_end":450312,"line_start":112,"line_end":112,"column_start":8,"column_end":30},"name":"save_persisted_failure","qualname":"::test_runner::failure_persistence::FailurePersistence::save_persisted_failure","value":"pub fn save_persisted_failure(&mut Self, Option<&'static str>, [u8; ],\n                              &fmt::Debug)","parent":{"krate":0,"index":1689},"children":[],"decl_id":null,"docs":" Use `save_persisted_failures2` instead.","sig":null,"attributes":[{"value":"/ Use `save_persisted_failures2` instead.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":450042,"byte_end":450085,"line_start":106,"line_end":106,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":450090,"byte_end":450093,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ This function inadvertently exposes the implementation of seeds prior","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":450098,"byte_end":450171,"line_start":108,"line_end":108,"column_start":5,"column_end":78}},{"value":"/ to Proptest 0.9.1 and only works with XorShift seeds.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":450176,"byte_end":450233,"line_start":109,"line_end":109,"column_start":5,"column_end":62}},{"value":"deprecated","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":450238,"byte_end":450251,"line_start":110,"line_end":110,"column_start":5,"column_end":18}},{"value":"allow(unused_variables)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":450256,"byte_end":450282,"line_start":111,"line_end":111,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1697},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":450595,"byte_end":450604,"line_start":122,"line_end":122,"column_start":8,"column_end":17},"name":"box_clone","qualname":"::test_runner::failure_persistence::FailurePersistence::box_clone","value":"pub fn box_clone(&Self) -> Box<FailurePersistence>","parent":{"krate":0,"index":1689},"children":[],"decl_id":null,"docs":" Delegate method for producing a trait object usable with `Clone`\n","sig":null,"attributes":[{"value":"/ Delegate method for producing a trait object usable with `Clone`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":450519,"byte_end":450587,"line_start":121,"line_end":121,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1698},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":450732,"byte_end":450734,"line_start":125,"line_end":125,"column_start":8,"column_end":10},"name":"eq","qualname":"::test_runner::failure_persistence::FailurePersistence::eq","value":"pub fn eq(&Self, &FailurePersistence) -> bool","parent":{"krate":0,"index":1689},"children":[],"decl_id":null,"docs":" Equality testing delegate required due to constraints of trait objects.\n","sig":null,"attributes":[{"value":"/ Equality testing delegate required due to constraints of trait objects.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":450649,"byte_end":450724,"line_start":124,"line_end":124,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1699},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":450845,"byte_end":450851,"line_start":128,"line_end":128,"column_start":8,"column_end":14},"name":"as_any","qualname":"::test_runner::failure_persistence::FailurePersistence::as_any","value":"pub fn as_any(&Self) -> &Any","parent":{"krate":0,"index":1689},"children":[],"decl_id":null,"docs":" Assistant method for trait object comparison.\n","sig":null,"attributes":[{"value":"/ Assistant method for trait object comparison.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":450788,"byte_end":450837,"line_start":127,"line_end":127,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":7700},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476189,"byte_end":476195,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"name":"Reason","qualname":"::test_runner::reason::Reason","value":"","parent":null,"children":[],"decl_id":null,"docs":" The reason for why something, such as a generated value, was rejected.","sig":null,"attributes":[{"value":"/ The reason for why something, such as a generated value, was rejected.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":475836,"byte_end":475910,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":475911,"byte_end":475914,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Currently this is merely a wrapper around a message, but more properties","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":475915,"byte_end":475991,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ may be added in the future.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":475992,"byte_end":476023,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476024,"byte_end":476027,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This is constructed via `.into()` on a `String`, `&'static str`, or","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476028,"byte_end":476099,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/ `Box<str>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476100,"byte_end":476115,"line_start":18,"line_end":18,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1713},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476415,"byte_end":476422,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"name":"message","qualname":"<Reason>::message","value":"pub fn message(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Return the message for this `Reason`.","sig":null,"attributes":[{"value":"/ Return the message for this `Reason`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476235,"byte_end":476276,"line_start":23,"line_end":23,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476281,"byte_end":476284,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ The message is intended for human consumption, and is not guaranteed to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476289,"byte_end":476364,"line_start":25,"line_end":25,"column_start":5,"column_end":80}},{"value":"/ have any format in particular.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476369,"byte_end":476403,"line_start":26,"line_end":26,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":7725},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":477769,"byte_end":477783,"line_start":24,"line_end":24,"column_start":12,"column_end":26},"name":"ResultCacheKey","qualname":"::test_runner::result_cache::ResultCacheKey","value":"ResultCacheKey {  }","parent":null,"children":[{"krate":0,"index":7727}],"decl_id":null,"docs":" A key used for the result cache.","sig":null,"attributes":[{"value":"/ A key used for the result cache.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":477445,"byte_end":477481,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":477482,"byte_end":477485,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The capabilities of this structure are currently quite limited; all one can","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":477486,"byte_end":477565,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ do with safe code is get the `&dyn Debug` of the test input value. This may","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":477566,"byte_end":477645,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ improve in the future, particularly at such a time that specialisation","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":477646,"byte_end":477720,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ becomes stable.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":477721,"byte_end":477740,"line_start":22,"line_end":22,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1730},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":478010,"byte_end":478021,"line_start":34,"line_end":34,"column_start":12,"column_end":23},"name":"value_debug","qualname":"<ResultCacheKey>::value_debug","value":"pub fn value_debug(&Self) -> &fmt::Debug","parent":null,"children":[],"decl_id":null,"docs":" Return the test input value as an `&dyn Debug`.\n","sig":null,"attributes":[{"value":"/ Return the test input value as an `&dyn Debug`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":477947,"byte_end":477998,"line_start":33,"line_end":33,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":1731},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":478141,"byte_end":478152,"line_start":40,"line_end":40,"column_start":11,"column_end":22},"name":"ResultCache","qualname":"::test_runner::result_cache::ResultCache","value":"ResultCache","parent":null,"children":[{"krate":0,"index":1732},{"krate":0,"index":1733},{"krate":0,"index":1734}],"decl_id":null,"docs":" An object which can cache the outcomes of tests.\n","sig":null,"attributes":[{"value":"/ An object which can cache the outcomes of tests.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":478078,"byte_end":478130,"line_start":39,"line_end":39,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1732},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":478432,"byte_end":478435,"line_start":46,"line_end":46,"column_start":8,"column_end":11},"name":"key","qualname":"::test_runner::result_cache::ResultCache::key","value":"pub fn key(&Self, &ResultCacheKey) -> u64","parent":{"krate":0,"index":1731},"children":[],"decl_id":null,"docs":" Convert the given cache key into a `u64` representing that value. The\n u64 is used as the key below.","sig":null,"attributes":[{"value":"/ Convert the given cache key into a `u64` representing that value. The","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":478159,"byte_end":478232,"line_start":41,"line_end":41,"column_start":5,"column_end":78}},{"value":"/ u64 is used as the key below.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":478237,"byte_end":478270,"line_start":42,"line_end":42,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":478275,"byte_end":478278,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ This is a separate step so that ownership of the key value can be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":478283,"byte_end":478352,"line_start":44,"line_end":44,"column_start":5,"column_end":74}},{"value":"/ handed off to user code without needing to be able to clone it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":478357,"byte_end":478424,"line_start":45,"line_end":45,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1733},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":478705,"byte_end":478708,"line_start":51,"line_end":51,"column_start":8,"column_end":11},"name":"put","qualname":"::test_runner::result_cache::ResultCache::put","value":"pub fn put(&mut Self, u64, &TestCaseResult)","parent":{"krate":0,"index":1731},"children":[],"decl_id":null,"docs":" Save `result` as the outcome associated with the test input in `key`.","sig":null,"attributes":[{"value":"/ Save `result` as the outcome associated with the test input in `key`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":478477,"byte_end":478550,"line_start":47,"line_end":47,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":478555,"byte_end":478558,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ `result` is passed as a reference so that the decision to clone depends","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":478563,"byte_end":478638,"line_start":49,"line_end":49,"column_start":5,"column_end":80}},{"value":"/ on whether the cache actually plans on storing it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":478643,"byte_end":478697,"line_start":50,"line_end":50,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1734},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":478895,"byte_end":478898,"line_start":54,"line_end":54,"column_start":8,"column_end":11},"name":"get","qualname":"::test_runner::result_cache::ResultCache::get","value":"pub fn get(&Self, u64) -> Option<&TestCaseResult>","parent":{"krate":0,"index":1731},"children":[],"decl_id":null,"docs":" If `put()` has been called with a semantically equivalent `key`, return\n the saved result. Otherwise, return `None`.\n","sig":null,"attributes":[{"value":"/ If `put()` has been called with a semantically equivalent `key`, return","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":478760,"byte_end":478835,"line_start":52,"line_end":52,"column_start":5,"column_end":80}},{"value":"/ the saved result. Otherwise, return `None`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":478840,"byte_end":478887,"line_start":53,"line_end":53,"column_start":5,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":1750},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":480144,"byte_end":480162,"line_start":100,"line_end":100,"column_start":8,"column_end":26},"name":"basic_result_cache","qualname":"::test_runner::result_cache::basic_result_cache","value":"pub fn basic_result_cache() -> Box<ResultCache>","parent":null,"children":[],"decl_id":null,"docs":" A basic result cache.","sig":null,"attributes":[{"value":"/ A basic result cache.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":480017,"byte_end":480042,"line_start":96,"line_end":96,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":480043,"byte_end":480046,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ Values are identified by their `Debug` string representation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":480047,"byte_end":480112,"line_start":98,"line_end":98,"column_start":1,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":480113,"byte_end":480136,"line_start":99,"line_end":99,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":1757},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":480616,"byte_end":480633,"line_start":118,"line_end":118,"column_start":8,"column_end":25},"name":"noop_result_cache","qualname":"::test_runner::result_cache::noop_result_cache","value":"pub fn noop_result_cache() -> Box<ResultCache>","parent":null,"children":[],"decl_id":null,"docs":" A result cache that does nothing.","sig":null,"attributes":[{"value":"/ A result cache that does nothing.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":480503,"byte_end":480540,"line_start":115,"line_end":115,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":480541,"byte_end":480544,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ This is the default value of `ProptestConfig.result_cache`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":480545,"byte_end":480608,"line_start":117,"line_end":117,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7740},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482092,"byte_end":482100,"line_start":34,"line_end":34,"column_start":5,"column_end":13},"name":"XorShift","qualname":"::test_runner::rng::RngAlgorithm::XorShift","value":"RngAlgorithm::XorShift","parent":{"krate":0,"index":7739},"children":[],"decl_id":null,"docs":" The [XorShift](https://rust-random.github.io/rand/rand_xorshift/struct.XorShiftRng.html)\n algorithm. This was the default up through and including Proptest 0.9.0.","sig":null,"attributes":[{"value":"/ The [XorShift](https://rust-random.github.io/rand/rand_xorshift/struct.XorShiftRng.html)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":481655,"byte_end":481747,"line_start":26,"line_end":26,"column_start":5,"column_end":97}},{"value":"/ algorithm. This was the default up through and including Proptest 0.9.0.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":481752,"byte_end":481828,"line_start":27,"line_end":27,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":481833,"byte_end":481836,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ It is faster than ChaCha but produces lower quality randomness and has","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":481841,"byte_end":481915,"line_start":29,"line_end":29,"column_start":5,"column_end":79}},{"value":"/ some pathological cases where it may fail to produce outputs that are","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":481920,"byte_end":481993,"line_start":30,"line_end":30,"column_start":5,"column_end":78}},{"value":"/ random even to casual observation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":481998,"byte_end":482036,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482041,"byte_end":482044,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ The seed must be exactly 16 bytes.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482049,"byte_end":482087,"line_start":33,"line_end":33,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7742},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482312,"byte_end":482318,"line_start":39,"line_end":39,"column_start":5,"column_end":11},"name":"ChaCha","qualname":"::test_runner::rng::RngAlgorithm::ChaCha","value":"RngAlgorithm::ChaCha","parent":{"krate":0,"index":7739},"children":[],"decl_id":null,"docs":" The [ChaCha](https://rust-random.github.io/rand/rand_chacha/struct.ChaChaRng.html)\n algorithm. This became the default with Proptest 0.9.1.","sig":null,"attributes":[{"value":"/ The [ChaCha](https://rust-random.github.io/rand/rand_chacha/struct.ChaChaRng.html)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482106,"byte_end":482192,"line_start":35,"line_end":35,"column_start":5,"column_end":91}},{"value":"/ algorithm. This became the default with Proptest 0.9.1.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482197,"byte_end":482256,"line_start":36,"line_end":36,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482261,"byte_end":482264,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ The seed must be exactly 32 bytes.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482269,"byte_end":482307,"line_start":38,"line_end":38,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7744},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":483116,"byte_end":483127,"line_start":55,"line_end":55,"column_start":5,"column_end":16},"name":"PassThrough","qualname":"::test_runner::rng::RngAlgorithm::PassThrough","value":"RngAlgorithm::PassThrough","parent":{"krate":0,"index":7739},"children":[],"decl_id":null,"docs":" This is not an actual RNG algorithm, but instead returns data directly\n from its \"seed\".","sig":null,"attributes":[{"value":"/ This is not an actual RNG algorithm, but instead returns data directly","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482324,"byte_end":482398,"line_start":40,"line_end":40,"column_start":5,"column_end":79}},{"value":"/ from its \"seed\".","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482403,"byte_end":482423,"line_start":41,"line_end":41,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482428,"byte_end":482431,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ This is useful when Proptest is being driven from some other entropy","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482436,"byte_end":482508,"line_start":43,"line_end":43,"column_start":5,"column_end":77}},{"value":"/ source, such as a fuzzer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482513,"byte_end":482542,"line_start":44,"line_end":44,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482547,"byte_end":482550,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ It is the user's responsibility to ensure that the seed is \"big","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482555,"byte_end":482622,"line_start":46,"line_end":46,"column_start":5,"column_end":72}},{"value":"/ enough\". Proptest makes no guarantees about how much data is consumed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482627,"byte_end":482700,"line_start":47,"line_end":47,"column_start":5,"column_end":78}},{"value":"/ from the seed for any particular strategy. If the seed is exhausted,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482705,"byte_end":482777,"line_start":48,"line_end":48,"column_start":5,"column_end":77}},{"value":"/ the RNG panics.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482782,"byte_end":482801,"line_start":49,"line_end":49,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482806,"byte_end":482809,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ Note that in cases where a new RNG is to be derived from an existing","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482814,"byte_end":482886,"line_start":51,"line_end":51,"column_start":5,"column_end":77}},{"value":"/ one, *the data is split evenly between them*, regardless of how much","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482891,"byte_end":482963,"line_start":52,"line_end":52,"column_start":5,"column_end":77}},{"value":"/ entropy is actually needed. This means that combinators like","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":482968,"byte_end":483032,"line_start":53,"line_end":53,"column_start":5,"column_end":69}},{"value":"/ `prop_perturb` and `prop_flat_map` can require extremely large inputs.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":483037,"byte_end":483111,"line_start":54,"line_end":54,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7746},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":483179,"byte_end":483193,"line_start":58,"line_end":58,"column_start":5,"column_end":19},"name":"_NonExhaustive","qualname":"::test_runner::rng::RngAlgorithm::_NonExhaustive","value":"RngAlgorithm::_NonExhaustive","parent":{"krate":0,"index":7739},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":483133,"byte_end":483155,"line_start":56,"line_end":56,"column_start":5,"column_end":27}}]},{"kind":"Enum","id":{"krate":0,"index":7739},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":481636,"byte_end":481648,"line_start":25,"line_end":25,"column_start":10,"column_end":22},"name":"RngAlgorithm","qualname":"::test_runner::rng::RngAlgorithm","value":"pub enum RngAlgorithm {\n\n    /// The [XorShift](https://rust-random.github.io/rand/rand_xorshift/struct.XorShiftRng.html)\n    /// algorithm. This was the default up through and including Proptest 0.9.0.\n    ///\n    /// It is faster than ChaCha but produces lower quality randomness and has\n    /// some pathological cases where it may fail to produce outputs that are\n    /// random even to casual observation.\n    ///\n    /// The seed must be exactly 16 bytes.\n    XorShift,\n\n    /// The [ChaCha](https://rust-random.github.io/rand/rand_chacha/struct.ChaChaRng.html)\n    /// algorithm. This became the default with Proptest 0.9.1.\n    ///\n    /// The seed must be exactly 32 bytes.\n    ChaCha,\n\n    /// This is not an actual RNG algorithm, but instead returns data directly\n    /// from its \"seed\".\n    ///\n    /// This is useful when Proptest is being driven from some other entropy\n    /// source, such as a fuzzer.\n    ///\n    /// It is the user's responsibility to ensure that the seed is \"big\n    /// enough\". Proptest makes no guarantees about how much data is consumed\n    /// from the seed for any particular strategy. If the seed is exhausted,\n    /// the RNG panics.\n    ///\n    /// Note that in cases where a new RNG is to be derived from an existing\n    /// one, *the data is split evenly between them*, regardless of how much\n    /// entropy is actually needed. This means that combinators like\n    /// `prop_perturb` and `prop_flat_map` can require extremely large inputs.\n    PassThrough,\n\n    #[allow(missing_docs)]\n    #[doc(hidden)]\n    _NonExhaustive,\n}","parent":null,"children":[{"krate":0,"index":7740},{"krate":0,"index":7742},{"krate":0,"index":7744},{"krate":0,"index":7746}],"decl_id":null,"docs":" Identifies a particular RNG algorithm supported by proptest.","sig":null,"attributes":[{"value":"/ Identifies a particular RNG algorithm supported by proptest.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":481310,"byte_end":481374,"line_start":19,"line_end":19,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":481375,"byte_end":481378,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Proptest supports dynamic configuration of algorithms to allow it to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":481379,"byte_end":481451,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ continue operating with persisted regression files and to allow the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":481452,"byte_end":481523,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"/ configuration to be expressed in the `Config` struct.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":481524,"byte_end":481581,"line_start":23,"line_end":23,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":7759},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":484367,"byte_end":484374,"line_start":103,"line_end":103,"column_start":12,"column_end":19},"name":"TestRng","qualname":"::test_runner::rng::TestRng","value":"TestRng {  }","parent":null,"children":[{"krate":0,"index":7760}],"decl_id":null,"docs":" Proptest's random number generator.\n","sig":null,"attributes":[{"value":"/ Proptest's random number generator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":484292,"byte_end":484331,"line_start":101,"line_end":101,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1811},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":491713,"byte_end":491722,"line_start":340,"line_end":340,"column_start":12,"column_end":21},"name":"from_seed","qualname":"<TestRng>::from_seed","value":"pub fn from_seed(RngAlgorithm, &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new RNG with the given algorithm and seed.","sig":null,"attributes":[{"value":"/ Create a new RNG with the given algorithm and seed.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":491362,"byte_end":491417,"line_start":331,"line_end":331,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":491422,"byte_end":491425,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ Any RNG created with the same algorithm-seed pair will produce the same","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":491430,"byte_end":491505,"line_start":333,"line_end":333,"column_start":5,"column_end":80}},{"value":"/ sequence of values on all systems and all supporting versions of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":491510,"byte_end":491578,"line_start":334,"line_end":334,"column_start":5,"column_end":73}},{"value":"/ proptest.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":491583,"byte_end":491596,"line_start":335,"line_end":335,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":491601,"byte_end":491604,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":491609,"byte_end":491622,"line_start":337,"line_end":337,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":491627,"byte_end":491630,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ Panics if `seed` is not an appropriate length for `algorithm`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":491635,"byte_end":491701,"line_start":339,"line_end":339,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1814},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":493597,"byte_end":493614,"line_start":382,"line_end":382,"column_start":12,"column_end":29},"name":"deterministic_rng","qualname":"<TestRng>::deterministic_rng","value":"pub fn deterministic_rng(RngAlgorithm) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a `TestRng` with a particular hard-coded seed.","sig":null,"attributes":[{"value":"/ Returns a `TestRng` with a particular hard-coded seed.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":492738,"byte_end":492796,"line_start":368,"line_end":368,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":492801,"byte_end":492804,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ The seed value will always be the same for a particular version of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":492809,"byte_end":492879,"line_start":370,"line_end":370,"column_start":5,"column_end":75}},{"value":"/ Proptest and algorithm, but may change across releases.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":492884,"byte_end":492943,"line_start":371,"line_end":371,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":492948,"byte_end":492951,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ This is useful for testing things like strategy implementations without","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":492956,"byte_end":493031,"line_start":373,"line_end":373,"column_start":5,"column_end":80}},{"value":"/ risking getting \"unlucky\" RNGs which deviate from average behaviour","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":493036,"byte_end":493107,"line_start":374,"line_end":374,"column_start":5,"column_end":76}},{"value":"/ enough to cause spurious failures. For example, a strategy for `bool`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":493112,"byte_end":493185,"line_start":375,"line_end":375,"column_start":5,"column_end":78}},{"value":"/ which is supposed to produce `true` 50% of the time might have a test","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":493190,"byte_end":493263,"line_start":376,"line_end":376,"column_start":5,"column_end":78}},{"value":"/ which checks that the distribution is \"close enough\" to 50%. If every","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":493268,"byte_end":493341,"line_start":377,"line_end":377,"column_start":5,"column_end":78}},{"value":"/ test run starts with a different RNG, occasionally there will be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":493346,"byte_end":493414,"line_start":378,"line_end":378,"column_start":5,"column_end":73}},{"value":"/ spurious test failures when the RNG happens to produce a very skewed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":493419,"byte_end":493491,"line_start":379,"line_end":379,"column_start":5,"column_end":77}},{"value":"/ distribution. Using this or `TestRunner::deterministic()` avoids such","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":493496,"byte_end":493569,"line_start":380,"line_end":380,"column_start":5,"column_end":78}},{"value":"/ issues.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":493574,"byte_end":493585,"line_start":381,"line_end":381,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":7818},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":501592,"byte_end":501602,"line_start":69,"line_end":69,"column_start":12,"column_end":22},"name":"TestRunner","qualname":"::test_runner::runner::TestRunner","value":"TestRunner {  }","parent":null,"children":[{"krate":0,"index":7819},{"krate":0,"index":7820},{"krate":0,"index":7821},{"krate":0,"index":7822},{"krate":0,"index":7823},{"krate":0,"index":7824},{"krate":0,"index":7825},{"krate":0,"index":7826}],"decl_id":null,"docs":" State used when running a proptest test.\n","sig":null,"attributes":[{"value":"/ State used when running a proptest test.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":501519,"byte_end":501563,"line_start":67,"line_end":67,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1868},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508143,"byte_end":508146,"line_start":302,"line_end":302,"column_start":12,"column_end":15},"name":"new","qualname":"<TestRunner>::new","value":"pub fn new(Config) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a fresh `TestRunner` with the given configuration.","sig":null,"attributes":[{"value":"/ Create a fresh `TestRunner` with the given configuration.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":507764,"byte_end":507825,"line_start":294,"line_end":294,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":507830,"byte_end":507833,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ The runner will use an RNG with a generated seed and the default","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":507838,"byte_end":507906,"line_start":296,"line_end":296,"column_start":5,"column_end":73}},{"value":"/ algorithm.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":507911,"byte_end":507925,"line_start":297,"line_end":297,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":507930,"byte_end":507933,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ In `no_std` environments, every `TestRunner` will use the same","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":507938,"byte_end":508004,"line_start":299,"line_end":299,"column_start":5,"column_end":71}},{"value":"/ hard-coded seed. This seed is not contractually guaranteed and may be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508009,"byte_end":508082,"line_start":300,"line_end":300,"column_start":5,"column_end":78}},{"value":"/ changed between releases without notice.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508087,"byte_end":508131,"line_start":301,"line_end":301,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1869},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508826,"byte_end":508839,"line_start":322,"line_end":322,"column_start":12,"column_end":25},"name":"deterministic","qualname":"<TestRunner>::deterministic","value":"pub fn deterministic() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a fresh `TestRunner` with the standard deterministic RNG.","sig":null,"attributes":[{"value":"/ Create a fresh `TestRunner` with the standard deterministic RNG.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508304,"byte_end":508372,"line_start":307,"line_end":307,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508377,"byte_end":508380,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ This is sugar for the following:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508385,"byte_end":508421,"line_start":309,"line_end":309,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508426,"byte_end":508429,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508434,"byte_end":508445,"line_start":311,"line_end":311,"column_start":5,"column_end":16}},{"value":"/ # use proptest::test_runner::*;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508450,"byte_end":508485,"line_start":312,"line_end":312,"column_start":5,"column_end":40}},{"value":"/ let config = Config::default();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508490,"byte_end":508525,"line_start":313,"line_end":313,"column_start":5,"column_end":40}},{"value":"/ let algorithm = config.rng_algorithm;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508530,"byte_end":508571,"line_start":314,"line_end":314,"column_start":5,"column_end":46}},{"value":"/ TestRunner::new_with_rng(","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508576,"byte_end":508605,"line_start":315,"line_end":315,"column_start":5,"column_end":34}},{"value":"/     config,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508610,"byte_end":508625,"line_start":316,"line_end":316,"column_start":5,"column_end":20}},{"value":"/     TestRng::deterministic_rng(algorithm));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508630,"byte_end":508677,"line_start":317,"line_end":317,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508682,"byte_end":508689,"line_start":318,"line_end":318,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508694,"byte_end":508697,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ Refer to `TestRng::deterministic_rng()` for more information on the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508702,"byte_end":508773,"line_start":320,"line_end":320,"column_start":5,"column_end":76}},{"value":"/ properties of the RNG used here.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":508778,"byte_end":508814,"line_start":321,"line_end":321,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1870},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":509110,"byte_end":509122,"line_start":329,"line_end":329,"column_start":12,"column_end":24},"name":"new_with_rng","qualname":"<TestRunner>::new_with_rng","value":"pub fn new_with_rng(Config, TestRng) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a fresh `TestRunner` with the given configuration and RNG.\n","sig":null,"attributes":[{"value":"/ Create a fresh `TestRunner` with the given configuration and RNG.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":509029,"byte_end":509098,"line_start":328,"line_end":328,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1872},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":510149,"byte_end":510152,"line_start":359,"line_end":359,"column_start":12,"column_end":15},"name":"rng","qualname":"<TestRunner>::rng","value":"pub fn rng(&mut Self) -> &mut TestRng","parent":null,"children":[],"decl_id":null,"docs":" Returns the RNG for this test run.\n","sig":null,"attributes":[{"value":"/ Returns the RNG for this test run.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":510099,"byte_end":510137,"line_start":358,"line_end":358,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1873},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":510315,"byte_end":510322,"line_start":365,"line_end":365,"column_start":12,"column_end":19},"name":"new_rng","qualname":"<TestRunner>::new_rng","value":"pub fn new_rng(&mut Self) -> TestRng","parent":null,"children":[],"decl_id":null,"docs":" Create a new, independent but deterministic RNG from the RNG in this\n runner.\n","sig":null,"attributes":[{"value":"/ Create a new, independent but deterministic RNG from the RNG in this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":510215,"byte_end":510287,"line_start":363,"line_end":363,"column_start":5,"column_end":77}},{"value":"/ runner.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":510292,"byte_end":510303,"line_start":364,"line_end":364,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1874},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":510442,"byte_end":510448,"line_start":370,"line_end":370,"column_start":12,"column_end":18},"name":"config","qualname":"<TestRunner>::config","value":"pub fn config(&Self) -> &Config","parent":null,"children":[],"decl_id":null,"docs":" Returns the configuration of this runner.\n","sig":null,"attributes":[{"value":"/ Returns the configuration of this runner.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":510385,"byte_end":510430,"line_start":369,"line_end":369,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1875},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":511046,"byte_end":511049,"line_start":385,"line_end":385,"column_start":12,"column_end":15},"name":"run","qualname":"<TestRunner>::run","value":"pub fn run<S: Strategy, impl Fn(S::Value) -> TestCaseResult: Fn(S::Value) ->\n           TestCaseResult>(&mut Self, &S, impl Fn(S::Value) -> TestCaseResult)\n-> TestRunResult<S>","parent":null,"children":[],"decl_id":null,"docs":" Run test cases against `f`, choosing inputs via `strategy`.","sig":null,"attributes":[{"value":"/ Run test cases against `f`, choosing inputs via `strategy`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":510501,"byte_end":510564,"line_start":374,"line_end":374,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":510569,"byte_end":510572,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ If any failure cases occur, try to find a minimal failure case and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":510577,"byte_end":510647,"line_start":376,"line_end":376,"column_start":5,"column_end":75}},{"value":"/ report that. If invoking `f` panics, the panic is turned into a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":510652,"byte_end":510719,"line_start":377,"line_end":377,"column_start":5,"column_end":72}},{"value":"/ `TestCaseError::Fail`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":510724,"byte_end":510750,"line_start":378,"line_end":378,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":510755,"byte_end":510758,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ If failure persistence is enabled, all persisted failing cases are","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":510763,"byte_end":510833,"line_start":380,"line_end":380,"column_start":5,"column_end":75}},{"value":"/ tested first. If a later non-persisted case fails, its seed is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":510838,"byte_end":510904,"line_start":381,"line_end":381,"column_start":5,"column_end":71}},{"value":"/ persisted before returning failure.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":510909,"byte_end":510948,"line_start":382,"line_end":382,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":510953,"byte_end":510956,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ Returns success or failure indicating why the test as a whole failed.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":510961,"byte_end":511034,"line_start":384,"line_end":384,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1893},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":520931,"byte_end":520938,"line_start":660,"line_end":660,"column_start":12,"column_end":19},"name":"run_one","qualname":"<TestRunner>::run_one","value":"pub fn run_one<V: ValueTree, impl Fn(V::Value) -> TestCaseResult: Fn(V::Value)\n               ->\n               TestCaseResult>(&mut Self, V,\n                               impl Fn(V::Value) -> TestCaseResult)\n-> Result<bool, TestError<V::Value>>","parent":null,"children":[],"decl_id":null,"docs":" Run one specific test case against this runner.","sig":null,"attributes":[{"value":"/ Run one specific test case against this runner.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":520456,"byte_end":520507,"line_start":651,"line_end":651,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":520512,"byte_end":520515,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ If the test fails, finds the minimal failing test case. If the test","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":520520,"byte_end":520591,"line_start":653,"line_end":653,"column_start":5,"column_end":76}},{"value":"/ does not fail, returns whether it succeeded or was filtered out.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":520596,"byte_end":520664,"line_start":654,"line_end":654,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":520669,"byte_end":520672,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ This does not honour the `fork` config, and will not be able to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":520677,"byte_end":520744,"line_start":656,"line_end":656,"column_start":5,"column_end":72}},{"value":"/ terminate the run if it runs for longer than `timeout`. However, if the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":520749,"byte_end":520824,"line_start":657,"line_end":657,"column_start":5,"column_end":80}},{"value":"/ test function returns but took longer than `timeout`, the test case","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":520829,"byte_end":520900,"line_start":658,"line_end":658,"column_start":5,"column_end":76}},{"value":"/ will fail.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":520905,"byte_end":520919,"line_start":659,"line_end":659,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1907},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":527033,"byte_end":527045,"line_start":830,"line_end":830,"column_start":12,"column_end":24},"name":"reject_local","qualname":"<TestRunner>::reject_local","value":"pub fn reject_local<impl Into<Reason>: Into<Reason>>(&mut Self,\n                                                     impl Into<Reason>)\n-> Result<(), Reason>","parent":null,"children":[],"decl_id":null,"docs":" Update the state to account for a local rejection from `whence`, and\n return `Ok` if the caller should keep going or `Err` to abort.\n","sig":null,"attributes":[{"value":"/ Update the state to account for a local rejection from `whence`, and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":526878,"byte_end":526950,"line_start":828,"line_end":828,"column_start":5,"column_end":77}},{"value":"/ return `Ok` if the caller should keep going or `Err` to abort.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":526955,"byte_end":527021,"line_start":829,"line_end":829,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1913},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":528385,"byte_end":528399,"line_start":867,"line_end":867,"column_start":12,"column_end":26},"name":"flat_map_regen","qualname":"<TestRunner>::flat_map_regen","value":"pub fn flat_map_regen(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Increment the counter of flat map regenerations and return whether it\n is still under the configured limit.\n","sig":null,"attributes":[{"value":"/ Increment the counter of flat map regenerations and return whether it","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":528255,"byte_end":528328,"line_start":865,"line_end":865,"column_start":5,"column_end":78}},{"value":"/ is still under the configured limit.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":528333,"byte_end":528373,"line_start":866,"line_end":866,"column_start":5,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":1923},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/tuple.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tuple","qualname":"::tuple","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/tuple.rs","parent":null,"children":[{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":7840},{"krate":0,"index":7850},{"krate":0,"index":7848},{"krate":0,"index":7845},{"krate":0,"index":1926},{"krate":0,"index":7853},{"krate":0,"index":7858},{"krate":0,"index":7864},{"krate":0,"index":7870},{"krate":0,"index":7877},{"krate":0,"index":7884},{"krate":0,"index":7892},{"krate":0,"index":7900},{"krate":0,"index":7909},{"krate":0,"index":7918},{"krate":0,"index":7928},{"krate":0,"index":7938},{"krate":0,"index":7949},{"krate":0,"index":7960},{"krate":0,"index":7972},{"krate":0,"index":7984},{"krate":0,"index":7997},{"krate":0,"index":8010},{"krate":0,"index":8024},{"krate":0,"index":8038}],"decl_id":null,"docs":" Support for combining strategies into tuples.","sig":null,"attributes":[{"value":"/ Support for combining strategies into tuples.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/tuple.rs","byte_start":545574,"byte_end":545623,"line_start":10,"line_end":10,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/tuple.rs","byte_start":545624,"byte_end":545627,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ There is no explicit \"tuple strategy\"; simply make a tuple containing the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/tuple.rs","byte_start":545628,"byte_end":545705,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ strategy and that tuple is itself a strategy.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/tuple.rs","byte_start":545706,"byte_end":545755,"line_start":13,"line_end":13,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":7840},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/tuple.rs","byte_start":545914,"byte_end":545928,"line_start":20,"line_end":20,"column_start":12,"column_end":26},"name":"TupleValueTree","qualname":"::tuple::TupleValueTree","value":"TupleValueTree {  }","parent":null,"children":[{"krate":0,"index":7842},{"krate":0,"index":7843},{"krate":0,"index":7844}],"decl_id":null,"docs":" Common `ValueTree` implementation for all tuple strategies.\n","sig":null,"attributes":[{"value":"/ Common `ValueTree` implementation for all tuple strategies.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/tuple.rs","byte_start":545809,"byte_end":545872,"line_start":18,"line_end":18,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1928},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/tuple.rs","byte_start":546221,"byte_end":546224,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"new","qualname":"<TupleValueTree<T>>::new","value":"pub fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `TupleValueTree` wrapping `inner`.","sig":null,"attributes":[{"value":"/ Create a new `TupleValueTree` wrapping `inner`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/tuple.rs","byte_start":546033,"byte_end":546084,"line_start":27,"line_end":27,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/tuple.rs","byte_start":546089,"byte_end":546092,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ It only makes sense for `inner` to be a tuple of an arity for which the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/tuple.rs","byte_start":546097,"byte_end":546172,"line_start":29,"line_end":29,"column_start":5,"column_end":80}},{"value":"/ type implements `ValueTree`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/tuple.rs","byte_start":546177,"byte_end":546209,"line_start":30,"line_end":30,"column_start":5,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":1930},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"option","qualname":"::option","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","parent":null,"children":[{"krate":0,"index":1931},{"krate":0,"index":1932},{"krate":0,"index":9200},{"krate":0,"index":1933},{"krate":0,"index":1934},{"krate":0,"index":1935},{"krate":0,"index":1937},{"krate":0,"index":1939},{"krate":0,"index":1941},{"krate":0,"index":1947},{"krate":0,"index":8053},{"krate":0,"index":8063},{"krate":0,"index":8062},{"krate":0,"index":8058},{"krate":0,"index":8059},{"krate":0,"index":8056},{"krate":0,"index":8069},{"krate":0,"index":8074},{"krate":0,"index":8073},{"krate":0,"index":8071},{"krate":0,"index":8065},{"krate":0,"index":1949},{"krate":0,"index":1953},{"krate":0,"index":1956},{"krate":0,"index":1958},{"krate":0,"index":1961},{"krate":0,"index":1966},{"krate":0,"index":8084},{"krate":0,"index":8088},{"krate":0,"index":8091},{"krate":0,"index":8098},{"krate":0,"index":8095},{"krate":0,"index":8076},{"krate":0,"index":8081},{"krate":0,"index":1972},{"krate":0,"index":1975},{"krate":0,"index":1977}],"decl_id":null,"docs":" Strategies for generating `std::Option` values.\n","sig":null,"attributes":[{"value":"/ Strategies for generating `std::Option` values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":550098,"byte_end":550149,"line_start":10,"line_end":10,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":1935},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":550756,"byte_end":550760,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"prob","qualname":"::option::prob","value":"pub fn prob<impl Into<Probability>: Into<Probability>>(impl Into<Probability>)\n-> Probability","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Probability` from some value that is convertible into it.","sig":null,"attributes":[{"value":"/ Creates a `Probability` from some value that is convertible into it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":550498,"byte_end":550570,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":550571,"byte_end":550574,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":550575,"byte_end":550587,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":550588,"byte_end":550591,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Panics if the converted to probability would lie","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":550592,"byte_end":550644,"line_start":28,"line_end":28,"column_start":1,"column_end":53}},{"value":"/ outside interval `[0.0, 1.0]`. Consult the `Into` (or `From`)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":550645,"byte_end":550710,"line_start":29,"line_end":29,"column_start":1,"column_end":66}},{"value":"/ implementations for more details.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":550711,"byte_end":550748,"line_start":30,"line_end":30,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1942},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":551397,"byte_end":551400,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"new","qualname":"<Probability>::new","value":"pub fn new(f64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Probability` from a `f64`.","sig":null,"attributes":[{"value":"/ Creates a `Probability` from a `f64`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":551243,"byte_end":551284,"line_start":54,"line_end":54,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":551289,"byte_end":551292,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":551297,"byte_end":551309,"line_start":56,"line_end":56,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":551314,"byte_end":551317,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ Panics if the probability is outside interval `[0.0, 1.0]`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":551322,"byte_end":551385,"line_start":58,"line_end":58,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1943},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":551804,"byte_end":551808,"line_start":70,"line_end":70,"column_start":12,"column_end":16},"name":"with","qualname":"<Probability>::with","value":"pub fn with<X>(Self, X) -> (Self, X)","parent":null,"children":[],"decl_id":null,"docs":" Merges self together with some other argument producing a product\n type expected by some impelementations of `A: Arbitrary` in\n `A::Parameters`. This can be more ergonomic to work with and may\n help type inference.\n","sig":null,"attributes":[{"value":"/ Merges self together with some other argument producing a product","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":551553,"byte_end":551622,"line_start":66,"line_end":66,"column_start":5,"column_end":74}},{"value":"/ type expected by some impelementations of `A: Arbitrary` in","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":551627,"byte_end":551690,"line_start":67,"line_end":67,"column_start":5,"column_end":68}},{"value":"/ `A::Parameters`. This can be more ergonomic to work with and may","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":551695,"byte_end":551763,"line_start":68,"line_end":68,"column_start":5,"column_end":73}},{"value":"/ help type inference.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":551768,"byte_end":551792,"line_start":69,"line_end":69,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1945},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":552180,"byte_end":552184,"line_start":78,"line_end":78,"column_start":12,"column_end":16},"name":"lift","qualname":"<Probability>::lift","value":"pub fn lift<X: Default>(Self) -> (Self, X)","parent":null,"children":[],"decl_id":null,"docs":" Merges self together with some other argument generated with a\n default value producing a product type expected by some\n impelementations of `A: Arbitrary` in `A::Parameters`.\n This can be more ergonomic to work with and may help type inference.\n","sig":null,"attributes":[{"value":"/ Merges self together with some other argument generated with a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":551898,"byte_end":551964,"line_start":74,"line_end":74,"column_start":5,"column_end":71}},{"value":"/ default value producing a product type expected by some","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":551969,"byte_end":552028,"line_start":75,"line_end":75,"column_start":5,"column_end":64}},{"value":"/ impelementations of `A: Arbitrary` in `A::Parameters`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":552033,"byte_end":552091,"line_start":76,"line_end":76,"column_start":5,"column_end":63}},{"value":"/ This can be more ergonomic to work with and may help type inference.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":552096,"byte_end":552168,"line_start":77,"line_end":77,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":8053},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":552947,"byte_end":552958,"line_start":113,"line_end":113,"column_start":12,"column_end":23},"name":"Probability","qualname":"::option::Probability","value":"","parent":null,"children":[],"decl_id":null,"docs":" A probability in the range `[0.0, 1.0]` with a default of `0.5`.\n","sig":null,"attributes":[{"value":"/ A probability in the range `[0.0, 1.0]` with a default of `0.5`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":552826,"byte_end":552894,"line_start":111,"line_end":111,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":8084},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":554292,"byte_end":554306,"line_start":166,"line_end":166,"column_start":16,"column_end":30},"name":"OptionStrategy","qualname":"::option::OptionStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy which generates `Option` values whose inner `Some` values are\n generated by another strategy.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/macros.rs","byte_start":7723,"byte_end":7772,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":8091},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":554573,"byte_end":554588,"line_start":172,"line_end":172,"column_start":16,"column_end":31},"name":"OptionValueTree","qualname":"::option::OptionValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` type corresponding to `OptionStrategy`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1975},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":555329,"byte_end":555331,"line_start":193,"line_end":193,"column_start":8,"column_end":10},"name":"of","qualname":"::option::of","value":"pub fn of<T: Strategy>(T) -> OptionStrategy<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a strategy producing `Optional` values wrapping values from the\n given delegate strategy.","sig":null,"attributes":[{"value":"/ Return a strategy producing `Optional` values wrapping values from the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":555114,"byte_end":555188,"line_start":187,"line_end":187,"column_start":1,"column_end":75}},{"value":"/ given delegate strategy.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":555189,"byte_end":555217,"line_start":188,"line_end":188,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":555218,"byte_end":555221,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ `Some` values shrink to `None`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":555222,"byte_end":555257,"line_start":190,"line_end":190,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":555258,"byte_end":555261,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ `Some` and `None` are each chosen with 50% probability.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":555262,"byte_end":555321,"line_start":192,"line_end":192,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":1977},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":555699,"byte_end":555707,"line_start":204,"line_end":204,"column_start":8,"column_end":16},"name":"weighted","qualname":"::option::weighted","value":"pub fn weighted<T: Strategy,\n                impl Into<Probability>: Into<Probability>>(impl Into<Probability>,\n                                                           T)\n-> OptionStrategy<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a strategy producing `Optional` values wrapping values from the\n given delegate strategy.","sig":null,"attributes":[{"value":"/ Return a strategy producing `Optional` values wrapping values from the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":555417,"byte_end":555491,"line_start":197,"line_end":197,"column_start":1,"column_end":75}},{"value":"/ given delegate strategy.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":555492,"byte_end":555520,"line_start":198,"line_end":198,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":555521,"byte_end":555524,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ `Some` values shrink to `None`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":555525,"byte_end":555560,"line_start":200,"line_end":200,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":555561,"byte_end":555564,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ `Some` is chosen with a probability given by `probability_of_some`, which","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":555565,"byte_end":555642,"line_start":202,"line_end":202,"column_start":1,"column_end":78}},{"value":"/ must be between 0.0 and 1.0, both exclusive.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":555643,"byte_end":555691,"line_start":203,"line_end":203,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":1980},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"result","qualname":"::result","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","parent":null,"children":[{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":9204},{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1987},{"krate":0,"index":1988},{"krate":0,"index":1994},{"krate":0,"index":1998},{"krate":0,"index":2001},{"krate":0,"index":2005},{"krate":0,"index":2010},{"krate":0,"index":2016},{"krate":0,"index":2020},{"krate":0,"index":2023},{"krate":0,"index":2027},{"krate":0,"index":2032},{"krate":0,"index":2035},{"krate":0,"index":8114},{"krate":0,"index":8119},{"krate":0,"index":8123},{"krate":0,"index":8132},{"krate":0,"index":8128},{"krate":0,"index":8104},{"krate":0,"index":8110},{"krate":0,"index":8149},{"krate":0,"index":8154},{"krate":0,"index":8158},{"krate":0,"index":8167},{"krate":0,"index":8163},{"krate":0,"index":8139},{"krate":0,"index":8145},{"krate":0,"index":2038},{"krate":0,"index":2042},{"krate":0,"index":2046},{"krate":0,"index":2049},{"krate":0,"index":2053},{"krate":0,"index":2056}],"decl_id":null,"docs":" Strategies for combining delegate strategies into `std::Result`s.","sig":null,"attributes":[{"value":"/ Strategies for combining delegate strategies into `std::Result`s.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":557301,"byte_end":557370,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":557371,"byte_end":557374,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ That is, the strategies here are for producing `Ok` _and_ `Err` cases. To","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":557375,"byte_end":557452,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ simply adapt a strategy producing `T` into `Result<T, something>` which is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":557453,"byte_end":557531,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ always `Ok`, you can do something like `base_strategy.prop_map(Ok)` to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":557532,"byte_end":557606,"line_start":14,"line_end":14,"column_start":1,"column_end":75}},{"value":"/ simply wrap the generated values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":557607,"byte_end":557644,"line_start":15,"line_end":15,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":557645,"byte_end":557648,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Note that there are two nearly identical APIs for doing this, termed \"maybe","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":557649,"byte_end":557728,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ ok\" and \"maybe err\". The difference between the two is in how they shrink;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":557729,"byte_end":557807,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ \"maybe ok\" treats `Ok` as the special case and shrinks to `Err`;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":557808,"byte_end":557876,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/ conversely, \"maybe err\" treats `Err` as the special case and shrinks to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":557877,"byte_end":557952,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ `Ok`. Which to use largely depends on the code being tested; if the code","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":557953,"byte_end":558029,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/ typically handles errors by immediately bailing out and doing nothing else,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":558030,"byte_end":558109,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/ \"maybe ok\" is likely more suitable, as shrinking will cause the code to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":558110,"byte_end":558185,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ take simpler paths. On the other hand, functions that need to make a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":558186,"byte_end":558258,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/ complicated or fragile \"back out\" process on error are better tested with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":558259,"byte_end":558336,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/ \"maybe err\" since the success case results in an easier to understand code","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":558337,"byte_end":558415,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ path.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":558416,"byte_end":558425,"line_start":27,"line_end":27,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":8114},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":560056,"byte_end":560063,"line_start":88,"line_end":88,"column_start":16,"column_end":23},"name":"MaybeOk","qualname":"::result::MaybeOk","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy which generates `Result`s using `Ok` and `Err` values from two\n delegate strategies.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/macros.rs","byte_start":7723,"byte_end":7772,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":8123},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":560305,"byte_end":560321,"line_start":93,"line_end":93,"column_start":16,"column_end":32},"name":"MaybeOkValueTree","qualname":"::result::MaybeOkValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` type corresponding to `MaybeOk`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8149},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":560774,"byte_end":560782,"line_start":105,"line_end":105,"column_start":16,"column_end":24},"name":"MaybeErr","qualname":"::result::MaybeErr","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy which generates `Result`s using `Ok` and `Err` values from two\n delegate strategies.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/macros.rs","byte_start":7723,"byte_end":7772,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":8158},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":561026,"byte_end":561043,"line_start":110,"line_end":110,"column_start":16,"column_end":33},"name":"MaybeErrValueTree","qualname":"::result::MaybeErrValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` type corresponding to `MaybeErr`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2046},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":561993,"byte_end":562001,"line_start":138,"line_end":138,"column_start":8,"column_end":16},"name":"maybe_ok","qualname":"::result::maybe_ok","value":"pub fn maybe_ok<T: Strategy, E: Strategy>(T, E) -> MaybeOk<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy for `Result`s where `Ok` values are taken from `t` and\n `Err` values are taken from `e`.","sig":null,"attributes":[{"value":"/ Create a strategy for `Result`s where `Ok` values are taken from `t` and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":561772,"byte_end":561848,"line_start":132,"line_end":132,"column_start":1,"column_end":77}},{"value":"/ `Err` values are taken from `e`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":561849,"byte_end":561885,"line_start":133,"line_end":133,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":561886,"byte_end":561889,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ `Ok` and `Err` are chosen with equal probability.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":561890,"byte_end":561943,"line_start":135,"line_end":135,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":561944,"byte_end":561947,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ Generated values shrink to `Err`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":561948,"byte_end":561985,"line_start":137,"line_end":137,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":2049},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":562373,"byte_end":562390,"line_start":149,"line_end":149,"column_start":8,"column_end":25},"name":"maybe_ok_weighted","qualname":"::result::maybe_ok_weighted","value":"pub fn maybe_ok_weighted<T: Strategy, E: Strategy,\n                         impl Into<Probability>: Into<Probability>>(impl Into<Probability>,\n                                                                    T, E)\n-> MaybeOk<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy for `Result`s where `Ok` values are taken from `t` and\n `Err` values are taken from `e`.","sig":null,"attributes":[{"value":"/ Create a strategy for `Result`s where `Ok` values are taken from `t` and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":562095,"byte_end":562171,"line_start":142,"line_end":142,"column_start":1,"column_end":77}},{"value":"/ `Err` values are taken from `e`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":562172,"byte_end":562208,"line_start":143,"line_end":143,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":562209,"byte_end":562212,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ `probability_of_ok` is the probability (between 0.0 and 1.0, exclusive)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":562213,"byte_end":562288,"line_start":145,"line_end":145,"column_start":1,"column_end":76}},{"value":"/ that `Ok` is initially chosen.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":562289,"byte_end":562323,"line_start":146,"line_end":146,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":562324,"byte_end":562327,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ Generated values shrink to `Err`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":562328,"byte_end":562365,"line_start":148,"line_end":148,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":2053},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":563099,"byte_end":563108,"line_start":175,"line_end":175,"column_start":8,"column_end":17},"name":"maybe_err","qualname":"::result::maybe_err","value":"pub fn maybe_err<T: Strategy, E: Strategy>(T, E) -> MaybeErr<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy for `Result`s where `Ok` values are taken from `t` and\n `Err` values are taken from `e`.","sig":null,"attributes":[{"value":"/ Create a strategy for `Result`s where `Ok` values are taken from `t` and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":562879,"byte_end":562955,"line_start":169,"line_end":169,"column_start":1,"column_end":77}},{"value":"/ `Err` values are taken from `e`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":562956,"byte_end":562992,"line_start":170,"line_end":170,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":562993,"byte_end":562996,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ `Ok` and `Err` are chosen with equal probability.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":562997,"byte_end":563050,"line_start":172,"line_end":172,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":563051,"byte_end":563054,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ Generated values shrink to `Ok`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":563055,"byte_end":563091,"line_start":174,"line_end":174,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":2056},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":563482,"byte_end":563500,"line_start":186,"line_end":186,"column_start":8,"column_end":26},"name":"maybe_err_weighted","qualname":"::result::maybe_err_weighted","value":"pub fn maybe_err_weighted<T: Strategy, E: Strategy,\n                          impl Into<Probability>: Into<Probability>>(impl Into<Probability>,\n                                                                     T, E)\n-> MaybeErr<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy for `Result`s where `Ok` values are taken from `t` and\n `Err` values are taken from `e`.","sig":null,"attributes":[{"value":"/ Create a strategy for `Result`s where `Ok` values are taken from `t` and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":563204,"byte_end":563280,"line_start":179,"line_end":179,"column_start":1,"column_end":77}},{"value":"/ `Err` values are taken from `e`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":563281,"byte_end":563317,"line_start":180,"line_end":180,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":563318,"byte_end":563321,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ `probability_of_ok` is the probability (between 0.0 and 1.0, exclusive)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":563322,"byte_end":563397,"line_start":182,"line_end":182,"column_start":1,"column_end":76}},{"value":"/ that `Err` is initially chosen.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":563398,"byte_end":563433,"line_start":183,"line_end":183,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":563434,"byte_end":563437,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ Generated values shrink to `Ok`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":563438,"byte_end":563474,"line_start":185,"line_end":185,"column_start":1,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":2060},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sample","qualname":"::sample","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","parent":null,"children":[{"krate":0,"index":2061},{"krate":0,"index":2062},{"krate":0,"index":2063},{"krate":0,"index":2064},{"krate":0,"index":2065},{"krate":0,"index":2066},{"krate":0,"index":2067},{"krate":0,"index":2068},{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2071},{"krate":0,"index":2072},{"krate":0,"index":2073},{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2076},{"krate":0,"index":2077},{"krate":0,"index":2078},{"krate":0,"index":2079},{"krate":0,"index":2080},{"krate":0,"index":2081},{"krate":0,"index":8174},{"krate":0,"index":8181},{"krate":0,"index":8178},{"krate":0,"index":2085},{"krate":0,"index":8184},{"krate":0,"index":8191},{"krate":0,"index":8188},{"krate":0,"index":2090},{"krate":0,"index":8194},{"krate":0,"index":8201},{"krate":0,"index":8198},{"krate":0,"index":2097},{"krate":0,"index":8212},{"krate":0,"index":8219},{"krate":0,"index":8216},{"krate":0,"index":8222},{"krate":0,"index":8229},{"krate":0,"index":8226},{"krate":0,"index":8204},{"krate":0,"index":8209},{"krate":0,"index":2101},{"krate":0,"index":8235},{"krate":0,"index":8241},{"krate":0,"index":8240},{"krate":0,"index":8238},{"krate":0,"index":2104},{"krate":0,"index":8246},{"krate":0,"index":8251},{"krate":0,"index":8250},{"krate":0,"index":8248},{"krate":0,"index":8243},{"krate":0,"index":8259},{"krate":0,"index":8264},{"krate":0,"index":8262},{"krate":0,"index":8266},{"krate":0,"index":8271},{"krate":0,"index":8269},{"krate":0,"index":8253},{"krate":0,"index":8257},{"krate":0,"index":2112},{"krate":0,"index":8276},{"krate":0,"index":8281},{"krate":0,"index":8279},{"krate":0,"index":8283},{"krate":0,"index":8285},{"krate":0,"index":8287},{"krate":0,"index":8290},{"krate":0,"index":2114},{"krate":0,"index":2116},{"krate":0,"index":2120},{"krate":0,"index":2125}],"decl_id":null,"docs":" Strategies for generating values by taking samples of collections.","sig":null,"attributes":[{"value":"/ Strategies for generating values by taking samples of collections.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":566812,"byte_end":566882,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":566883,"byte_end":566886,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Note that the strategies in this module are not native combinators; that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":566887,"byte_end":566963,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ is, the input collection is not itself a strategy, but is rather fixed when","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":566964,"byte_end":567043,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ the strategy is created.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567044,"byte_end":567072,"line_start":14,"line_end":14,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":2081},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":568025,"byte_end":568036,"line_start":49,"line_end":49,"column_start":8,"column_end":19},"name":"subsequence","qualname":"::sample::subsequence","value":"pub fn subsequence<T: Clone + 'static,\n                   impl Into<Cow<'static, [T]>>: Into<Cow>,\n                   impl Into<SizeRange>: Into<SizeRange>>(impl Into<Cow<'static, [T]>>,\n                                                          impl Into<SizeRange>)\n-> Subsequence<T>","parent":null,"children":[],"decl_id":null,"docs":" Sample subsequences whose size are within `size` from the given collection\n `values`.","sig":null,"attributes":[{"value":"/ Sample subsequences whose size are within `size` from the given collection","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567441,"byte_end":567519,"line_start":32,"line_end":32,"column_start":1,"column_end":79}},{"value":"/ `values`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567520,"byte_end":567533,"line_start":33,"line_end":33,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567534,"byte_end":567537,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ A subsequence is a subset of the elements in a collection in the order they","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567538,"byte_end":567617,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ occur in that collection. The elements are not chosen to be contiguous.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567618,"byte_end":567693,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567694,"byte_end":567697,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This is roughly analogous to `rand::sample`, except that it guarantees that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567698,"byte_end":567777,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ the order is preserved.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567778,"byte_end":567805,"line_start":39,"line_end":39,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567806,"byte_end":567809,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ `values` may be a static slice or a `Vec`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567810,"byte_end":567856,"line_start":41,"line_end":41,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567857,"byte_end":567860,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567861,"byte_end":567874,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567875,"byte_end":567878,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Panics if the maximum size implied by `size` is larger than the size of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567879,"byte_end":567954,"line_start":45,"line_end":45,"column_start":1,"column_end":76}},{"value":"/ `values`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567955,"byte_end":567968,"line_start":46,"line_end":46,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567969,"byte_end":567972,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Panics if `size` is a zero-length range.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":567973,"byte_end":568017,"line_start":48,"line_end":48,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":8174},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":568796,"byte_end":568807,"line_start":76,"line_end":76,"column_start":12,"column_end":23},"name":"Subsequence","qualname":"::sample::Subsequence","value":"Subsequence {  }","parent":null,"children":[{"krate":0,"index":8176},{"krate":0,"index":8177}],"decl_id":null,"docs":" Strategy to generate `Vec`s by sampling a subsequence from another\n collection.","sig":null,"attributes":[{"value":"/ Strategy to generate `Vec`s by sampling a subsequence from another","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":568550,"byte_end":568620,"line_start":70,"line_end":70,"column_start":1,"column_end":71}},{"value":"/ collection.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":568621,"byte_end":568636,"line_start":71,"line_end":71,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":568637,"byte_end":568640,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ This is created by the `subsequence` function in the same module.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":568641,"byte_end":568710,"line_start":73,"line_end":73,"column_start":1,"column_end":70}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":568735,"byte_end":568784,"line_start":75,"line_end":75,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":8184},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":569354,"byte_end":569374,"line_start":95,"line_end":95,"column_start":12,"column_end":32},"name":"SubsequenceValueTree","qualname":"::sample::SubsequenceValueTree","value":"SubsequenceValueTree {  }","parent":null,"children":[{"krate":0,"index":8186},{"krate":0,"index":8187}],"decl_id":null,"docs":" `ValueTree` type for `Subsequence`.\n","sig":null,"attributes":[{"value":"/ `ValueTree` type for `Subsequence`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":569279,"byte_end":569318,"line_start":93,"line_end":93,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":8212},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":570381,"byte_end":570387,"line_start":134,"line_end":134,"column_start":16,"column_end":22},"name":"Select","qualname":"::sample::Select","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to produce one value from a fixed collection of options.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/macros.rs","byte_start":7723,"byte_end":7772,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":8222},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":570607,"byte_end":570622,"line_start":139,"line_end":139,"column_start":16,"column_end":31},"name":"SelectValueTree","qualname":"::sample::SelectValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `Select`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2101},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":571296,"byte_end":571302,"line_start":156,"line_end":156,"column_start":8,"column_end":14},"name":"select","qualname":"::sample::select","value":"pub fn select<T: Clone + fmt::Debug + 'static,\n              impl Into<Cow<'static, [T]>>: Into<Cow>>(impl Into<Cow<'static, [T]>>)\n-> Select<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy which uniformly selects one value from `values`.","sig":null,"attributes":[{"value":"/ Create a strategy which uniformly selects one value from `values`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":570750,"byte_end":570820,"line_start":144,"line_end":144,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":570821,"byte_end":570824,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ `values` should be a `&'static [T]` or a `Vec<T>`, or potentially another","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":570825,"byte_end":570902,"line_start":146,"line_end":146,"column_start":1,"column_end":78}},{"value":"/ type that can be coerced to `Cow<'static,[T]>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":570903,"byte_end":570954,"line_start":147,"line_end":147,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":570955,"byte_end":570958,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ This is largely equivalent to making a `Union` of a bunch of `Just`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":570959,"byte_end":571030,"line_start":149,"line_end":149,"column_start":1,"column_end":72}},{"value":"/ strategies, but is substantially more efficient and shrinks by binary","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":571031,"byte_end":571104,"line_start":150,"line_end":150,"column_start":1,"column_end":74}},{"value":"/ search.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":571105,"byte_end":571116,"line_start":151,"line_end":151,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":571117,"byte_end":571120,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ If `values` is also to be generated by a strategy, see","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":571121,"byte_end":571179,"line_start":153,"line_end":153,"column_start":1,"column_end":59}},{"value":"/ [`Index`](struct.Index.html) for a more efficient way to select values than","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":571180,"byte_end":571259,"line_start":154,"line_end":154,"column_start":1,"column_end":80}},{"value":"/ using `prop_flat_map()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":571260,"byte_end":571288,"line_start":155,"line_end":155,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":8235},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573413,"byte_end":573418,"line_start":213,"line_end":213,"column_start":12,"column_end":17},"name":"Index","qualname":"::sample::Index","value":"","parent":null,"children":[],"decl_id":null,"docs":" A stand-in for an index into a slice or similar collection or conceptually\n similar things.","sig":null,"attributes":[{"value":"/ A stand-in for an index into a slice or similar collection or conceptually","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":571501,"byte_end":571579,"line_start":164,"line_end":164,"column_start":1,"column_end":79}},{"value":"/ similar things.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":571580,"byte_end":571599,"line_start":165,"line_end":165,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":571600,"byte_end":571603,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ At the lowest level, `Index` is a mechanism for generating `usize` values","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":571604,"byte_end":571681,"line_start":167,"line_end":167,"column_start":1,"column_end":78}},{"value":"/ in the range [0..N), for some N whose value is not known until it is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":571682,"byte_end":571754,"line_start":168,"line_end":168,"column_start":1,"column_end":73}},{"value":"/ needed. (Contrast with using `0..N` itself as a strategy, where you need to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":571755,"byte_end":571834,"line_start":169,"line_end":169,"column_start":1,"column_end":80}},{"value":"/ know N when you define the strategy.)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":571835,"byte_end":571876,"line_start":170,"line_end":170,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":571877,"byte_end":571880,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ For any upper bound, the actual index produced by an `Index` is the same no","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":571881,"byte_end":571960,"line_start":172,"line_end":172,"column_start":1,"column_end":80}},{"value":"/ matter how many times it is used. Different upper bounds will produce","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":571961,"byte_end":572034,"line_start":173,"line_end":173,"column_start":1,"column_end":74}},{"value":"/ different but not independent values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572035,"byte_end":572076,"line_start":174,"line_end":174,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572077,"byte_end":572080,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ Shrinking will cause the index to binary search through the underlying","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572081,"byte_end":572155,"line_start":176,"line_end":176,"column_start":1,"column_end":75}},{"value":"/ collection(s) it is used to sample.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572156,"byte_end":572195,"line_start":177,"line_end":177,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572196,"byte_end":572199,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ Note that `Index` _cannot_ currently be used as a slice index (e.g.,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572200,"byte_end":572272,"line_start":179,"line_end":179,"column_start":1,"column_end":73}},{"value":"/ `slice[index]`) due to the trait coherence rules.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572273,"byte_end":572326,"line_start":180,"line_end":180,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572327,"byte_end":572330,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572331,"byte_end":572345,"line_start":182,"line_end":182,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572346,"byte_end":572349,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ If the collection itself being indexed is itself generated by a strategy,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572350,"byte_end":572427,"line_start":184,"line_end":184,"column_start":1,"column_end":78}},{"value":"/ you can make separately define that strategy and a strategy generating one","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572428,"byte_end":572506,"line_start":185,"line_end":185,"column_start":1,"column_end":79}},{"value":"/ or more `Index`es and then join the two after input generation, avoiding a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572507,"byte_end":572585,"line_start":186,"line_end":186,"column_start":1,"column_end":79}},{"value":"/ call to `prop_flat_map()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572586,"byte_end":572616,"line_start":187,"line_end":187,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572617,"byte_end":572620,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572621,"byte_end":572628,"line_start":189,"line_end":189,"column_start":1,"column_end":8}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572629,"byte_end":572658,"line_start":190,"line_end":190,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572659,"byte_end":572662,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ proptest! {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572663,"byte_end":572678,"line_start":192,"line_end":192,"column_start":1,"column_end":16}},{"value":"/     # /*","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572679,"byte_end":572691,"line_start":193,"line_end":193,"column_start":1,"column_end":13}},{"value":"/     #[test]","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572692,"byte_end":572707,"line_start":194,"line_end":194,"column_start":1,"column_end":16}},{"value":"/     # */","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572708,"byte_end":572720,"line_start":195,"line_end":195,"column_start":1,"column_end":13}},{"value":"/     fn my_test(","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572721,"byte_end":572740,"line_start":196,"line_end":196,"column_start":1,"column_end":20}},{"value":"/         names in prop::collection::vec(\"[a-z]+\", 10..20),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572741,"byte_end":572802,"line_start":197,"line_end":197,"column_start":1,"column_end":62}},{"value":"/         indices in prop::collection::vec(any::<prop::sample::Index>(), 5..10)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572803,"byte_end":572884,"line_start":198,"line_end":198,"column_start":1,"column_end":82}},{"value":"/     ) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572885,"byte_end":572896,"line_start":199,"line_end":199,"column_start":1,"column_end":12}},{"value":"/         // We now have Vec<String> of ten to twenty names, and a Vec<Index>","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572897,"byte_end":572976,"line_start":200,"line_end":200,"column_start":1,"column_end":80}},{"value":"/         // of five to ten indices and can combine them however we like.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":572977,"byte_end":573052,"line_start":201,"line_end":201,"column_start":1,"column_end":76}},{"value":"/         for index in &indices {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573053,"byte_end":573088,"line_start":202,"line_end":202,"column_start":1,"column_end":36}},{"value":"/             println!(\"Accessing item by index: {}\", names[index.index(names.len())]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573089,"byte_end":573178,"line_start":203,"line_end":203,"column_start":1,"column_end":90}},{"value":"/             println!(\"Accessing item by convenience method: {}\", index.get(&names));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573179,"byte_end":573267,"line_start":204,"line_end":204,"column_start":1,"column_end":89}},{"value":"/         }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573268,"byte_end":573281,"line_start":205,"line_end":205,"column_start":1,"column_end":14}},{"value":"/         // Test stuff...","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573282,"byte_end":573310,"line_start":206,"line_end":206,"column_start":1,"column_end":29}},{"value":"/     }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573311,"byte_end":573320,"line_start":207,"line_end":207,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573321,"byte_end":573326,"line_start":208,"line_end":208,"column_start":1,"column_end":6}},{"value":"/ #","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573327,"byte_end":573332,"line_start":209,"line_end":209,"column_start":1,"column_end":6}},{"value":"/ # fn main() { my_test(); }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573333,"byte_end":573363,"line_start":210,"line_end":210,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573364,"byte_end":573371,"line_start":211,"line_end":211,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2105},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573604,"byte_end":573609,"line_start":221,"line_end":221,"column_start":12,"column_end":17},"name":"index","qualname":"<Index>::index","value":"pub fn index(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the real index that would be used to index a collection of size `size`.","sig":null,"attributes":[{"value":"/ Return the real index that would be used to index a collection of size `size`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573445,"byte_end":573527,"line_start":216,"line_end":216,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573532,"byte_end":573535,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573540,"byte_end":573553,"line_start":218,"line_end":218,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573558,"byte_end":573561,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Panics if `size == 0`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573566,"byte_end":573592,"line_start":220,"line_end":220,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2106},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":574180,"byte_end":574183,"line_start":234,"line_end":234,"column_start":12,"column_end":15},"name":"get","qualname":"<Index>::get","value":"pub fn get<'a, T>(&Self, &'a [T]) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the element in `slice` that this `Index` refers to.","sig":null,"attributes":[{"value":"/ Return a reference to the element in `slice` that this `Index` refers to.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":574024,"byte_end":574101,"line_start":231,"line_end":231,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":574106,"byte_end":574109,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ A shortcut for `&slice[index.index(slice.len())]`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":574114,"byte_end":574168,"line_start":233,"line_end":233,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2109},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":574452,"byte_end":574459,"line_start":242,"line_end":242,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Index>::get_mut","value":"pub fn get_mut<'a, T>(&Self, &'a mut [T]) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the element in `slice` that this `Index`\n refers to.","sig":null,"attributes":[{"value":"/ Return a mutable reference to the element in `slice` that this `Index`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":574276,"byte_end":574350,"line_start":238,"line_end":238,"column_start":5,"column_end":79}},{"value":"/ refers to.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":574355,"byte_end":574369,"line_start":239,"line_end":239,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":574374,"byte_end":574377,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ A shortcut for `&mut slice[index.index(slice.len())]`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":574382,"byte_end":574440,"line_start":241,"line_end":241,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":8259},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":574822,"byte_end":574835,"line_start":259,"line_end":259,"column_start":16,"column_end":29},"name":"IndexStrategy","qualname":"::sample::IndexStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `Index`es.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/macros.rs","byte_start":7723,"byte_end":7772,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":8266},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575018,"byte_end":575032,"line_start":264,"line_end":264,"column_start":16,"column_end":30},"name":"IndexValueTree","qualname":"::sample::IndexValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `IndexStrategy`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8276},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576363,"byte_end":576371,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"Selector","qualname":"::sample::Selector","value":"Selector {  }","parent":null,"children":[{"krate":0,"index":8277},{"krate":0,"index":8278}],"decl_id":null,"docs":" A value for picking random values out of iterators.","sig":null,"attributes":[{"value":"/ A value for picking random values out of iterators.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575256,"byte_end":575311,"line_start":275,"line_end":275,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575312,"byte_end":575315,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ This is, in a sense, a more flexible variant of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575316,"byte_end":575367,"line_start":277,"line_end":277,"column_start":1,"column_end":52}},{"value":"/ [`Index`](struct.Index.html) in that it can operate on arbitrary","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575368,"byte_end":575436,"line_start":278,"line_end":278,"column_start":1,"column_end":69}},{"value":"/ `IntoIterator` values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575437,"byte_end":575463,"line_start":279,"line_end":279,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575464,"byte_end":575467,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ Initially, the selection is roughly uniform, with a very slight bias","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575468,"byte_end":575540,"line_start":281,"line_end":281,"column_start":1,"column_end":73}},{"value":"/ towards items earlier in the iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575541,"byte_end":575583,"line_start":282,"line_end":282,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575584,"byte_end":575587,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ Shrinking causes the selection to move toward items earlier in the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575588,"byte_end":575658,"line_start":284,"line_end":284,"column_start":1,"column_end":71}},{"value":"/ iterator, ultimately settling on the very first, but this currently happens","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575659,"byte_end":575738,"line_start":285,"line_end":285,"column_start":1,"column_end":80}},{"value":"/ in a very haphazard way that may fail to find the earliest failing input.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575739,"byte_end":575816,"line_start":286,"line_end":286,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575817,"byte_end":575820,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575821,"byte_end":575835,"line_start":288,"line_end":288,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575836,"byte_end":575839,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"/ Generate a non-indexable collection and a value to pick out of it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575840,"byte_end":575910,"line_start":290,"line_end":290,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575911,"byte_end":575914,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575915,"byte_end":575922,"line_start":292,"line_end":292,"column_start":1,"column_end":8}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575923,"byte_end":575952,"line_start":293,"line_end":293,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575953,"byte_end":575956,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"/ proptest! {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575957,"byte_end":575972,"line_start":295,"line_end":295,"column_start":1,"column_end":16}},{"value":"/     # /*","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575973,"byte_end":575985,"line_start":296,"line_end":296,"column_start":1,"column_end":13}},{"value":"/     #[test]","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575986,"byte_end":576001,"line_start":297,"line_end":297,"column_start":1,"column_end":16}},{"value":"/     # */","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576002,"byte_end":576014,"line_start":298,"line_end":298,"column_start":1,"column_end":13}},{"value":"/     fn my_test(","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576015,"byte_end":576034,"line_start":299,"line_end":299,"column_start":1,"column_end":20}},{"value":"/         names in prop::collection::hash_set(\"[a-z]+\", 10..20),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576035,"byte_end":576101,"line_start":300,"line_end":300,"column_start":1,"column_end":67}},{"value":"/         selector in any::<prop::sample::Selector>()","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576102,"byte_end":576157,"line_start":301,"line_end":301,"column_start":1,"column_end":56}},{"value":"/     ) {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576158,"byte_end":576169,"line_start":302,"line_end":302,"column_start":1,"column_end":12}},{"value":"/         println!(\"Selected name: {}\", selector.select(&names));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576170,"byte_end":576237,"line_start":303,"line_end":303,"column_start":1,"column_end":68}},{"value":"/         // Test stuff...","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576238,"byte_end":576266,"line_start":304,"line_end":304,"column_start":1,"column_end":29}},{"value":"/     }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576267,"byte_end":576276,"line_start":305,"line_end":305,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576277,"byte_end":576282,"line_start":306,"line_end":306,"column_start":1,"column_end":6}},{"value":"/ #","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576283,"byte_end":576288,"line_start":307,"line_end":307,"column_start":1,"column_end":6}},{"value":"/ # fn main() { my_test(); }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576289,"byte_end":576319,"line_start":308,"line_end":308,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576320,"byte_end":576327,"line_start":309,"line_end":309,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":8283},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576525,"byte_end":576541,"line_start":320,"line_end":320,"column_start":12,"column_end":28},"name":"SelectorStrategy","qualname":"::sample::SelectorStrategy","value":"SelectorStrategy {  }","parent":null,"children":[{"krate":0,"index":8284}],"decl_id":null,"docs":" Strategy to create `Selector`s.","sig":null,"attributes":[{"value":"/ Strategy to create `Selector`s.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576420,"byte_end":576455,"line_start":316,"line_end":316,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576456,"byte_end":576459,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ Created via `any::<Selector>()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576460,"byte_end":576496,"line_start":318,"line_end":318,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":8287},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576652,"byte_end":576669,"line_start":326,"line_end":326,"column_start":12,"column_end":29},"name":"SelectorValueTree","qualname":"::sample::SelectorValueTree","value":"SelectorValueTree {  }","parent":null,"children":[{"krate":0,"index":8288},{"krate":0,"index":8289}],"decl_id":null,"docs":" `ValueTree` corresponding to `SelectorStrategy`.\n","sig":null,"attributes":[{"value":"/ `ValueTree` corresponding to `SelectorStrategy`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576571,"byte_end":576623,"line_start":324,"line_end":324,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2126},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":577963,"byte_end":577969,"line_start":379,"line_end":379,"column_start":12,"column_end":18},"name":"select","qualname":"<Selector>::select","value":"pub fn select<T: IntoIterator>(&Self, T) -> T::Item","parent":null,"children":[],"decl_id":null,"docs":" Pick a random element from iterable `it`.","sig":null,"attributes":[{"value":"/ Pick a random element from iterable `it`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":577648,"byte_end":577693,"line_start":369,"line_end":369,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":577698,"byte_end":577701,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ The selection is unaffected by the elements themselves, and is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":577706,"byte_end":577772,"line_start":371,"line_end":371,"column_start":5,"column_end":71}},{"value":"/ dependent only on the actual length of `it`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":577777,"byte_end":577825,"line_start":372,"line_end":372,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":577830,"byte_end":577833,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ `it` is always iterated completely.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":577838,"byte_end":577877,"line_start":374,"line_end":374,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":577882,"byte_end":577885,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":577890,"byte_end":577903,"line_start":376,"line_end":376,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":577908,"byte_end":577911,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ Panics if `it` has no elements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":577916,"byte_end":577951,"line_start":378,"line_end":378,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2128},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":578380,"byte_end":578390,"line_start":391,"line_end":391,"column_start":12,"column_end":22},"name":"try_select","qualname":"<Selector>::try_select","value":"pub fn try_select<T: IntoIterator>(&Self, T) -> Option<T::Item>","parent":null,"children":[],"decl_id":null,"docs":" Pick a random element from iterable `it`.","sig":null,"attributes":[{"value":"/ Pick a random element from iterable `it`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":578090,"byte_end":578135,"line_start":383,"line_end":383,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":578140,"byte_end":578143,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if `it` is empty.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":578148,"byte_end":578184,"line_start":385,"line_end":385,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":578189,"byte_end":578192,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ The selection is unaffected by the elements themselves, and is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":578197,"byte_end":578263,"line_start":387,"line_end":387,"column_start":5,"column_end":71}},{"value":"/ dependent only on the actual length of `it`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":578268,"byte_end":578316,"line_start":388,"line_end":388,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":578321,"byte_end":578324,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ `it` is always iterated completely.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":578329,"byte_end":578368,"line_start":390,"line_end":390,"column_start":5,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":2130},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"string","qualname":"::string","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","parent":null,"children":[{"krate":0,"index":2131},{"krate":0,"index":2132},{"krate":0,"index":2133},{"krate":0,"index":2134},{"krate":0,"index":2135},{"krate":0,"index":2136},{"krate":0,"index":2137},{"krate":0,"index":2138},{"krate":0,"index":2139},{"krate":0,"index":2140},{"krate":0,"index":2141},{"krate":0,"index":2142},{"krate":0,"index":2143},{"krate":0,"index":2144},{"krate":0,"index":2145},{"krate":0,"index":2146},{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2149},{"krate":0,"index":2150},{"krate":0,"index":2151},{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":2154},{"krate":0,"index":2155},{"krate":0,"index":2156},{"krate":0,"index":2157},{"krate":0,"index":2158},{"krate":0,"index":2159},{"krate":0,"index":2160},{"krate":0,"index":8292},{"krate":0,"index":8315},{"krate":0,"index":8313},{"krate":0,"index":8309},{"krate":0,"index":8310},{"krate":0,"index":8306},{"krate":0,"index":8307},{"krate":0,"index":8300},{"krate":0,"index":8298},{"krate":0,"index":8295},{"krate":0,"index":2161},{"krate":0,"index":2163},{"krate":0,"index":2165},{"krate":0,"index":2167},{"krate":0,"index":2169},{"krate":0,"index":8346},{"krate":0,"index":8350},{"krate":0,"index":8334},{"krate":0,"index":8338},{"krate":0,"index":8343},{"krate":0,"index":2170},{"krate":0,"index":2174},{"krate":0,"index":2176},{"krate":0,"index":2179},{"krate":0,"index":2182},{"krate":0,"index":2185},{"krate":0,"index":2186},{"krate":0,"index":2189},{"krate":0,"index":2190},{"krate":0,"index":2199},{"krate":0,"index":2203},{"krate":0,"index":2209},{"krate":0,"index":2211},{"krate":0,"index":2216},{"krate":0,"index":2217},{"krate":0,"index":2219},{"krate":0,"index":2220}],"decl_id":null,"docs":" Strategies for generating strings and byte strings from regular\n expressions.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":2251,"byte_end":2274,"line_start":104,"line_end":104,"column_start":1,"column_end":24}},{"value":"/ Strategies for generating strings and byte strings from regular","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":583510,"byte_end":583577,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/ expressions.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":583578,"byte_end":583594,"line_start":11,"line_end":11,"column_start":1,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":8292},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":584278,"byte_end":584289,"line_start":37,"line_end":37,"column_start":12,"column_end":23},"name":"StringParam","qualname":"::string::StringParam","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wraps the regex that forms the `Strategy` for `String` so that a sensible\n `Default` can be given. The default is a string of non-control characters.\n","sig":null,"attributes":[{"value":"/ Wraps the regex that forms the `Strategy` for `String` so that a sensible","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":584049,"byte_end":584126,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ `Default` can be given. The default is a string of non-control characters.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":584127,"byte_end":584205,"line_start":35,"line_end":35,"column_start":1,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8317},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":585089,"byte_end":585100,"line_start":69,"line_end":69,"column_start":13,"column_end":24},"name":"RegexSyntax","qualname":"::string::error_container::Error::RegexSyntax","value":"Error::RegexSyntax(ParseError)","parent":{"krate":0,"index":8316},"children":[],"decl_id":null,"docs":" The string passed as the regex was not syntactically valid.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8320},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":585406,"byte_end":585422,"line_start":77,"line_end":77,"column_start":13,"column_end":29},"name":"UnsupportedRegex","qualname":"::string::error_container::Error::UnsupportedRegex","value":"Error::UnsupportedRegex(&'static str)","parent":{"krate":0,"index":8316},"children":[],"decl_id":null,"docs":" The regex was syntactically valid, but contains elements not\n supported by proptest.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":8316},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":584993,"byte_end":584998,"line_start":67,"line_end":67,"column_start":18,"column_end":23},"name":"Error","qualname":"::string::error_container::Error","value":"pub enum Error {\n\n    #[doc = r\" The string passed as the regex was not syntactically valid.\"]\n    RegexSyntax(ParseError),\n\n    #[doc = r\" The regex was syntactically valid, but contains elements not\"]\n    #[doc = r\" supported by proptest.\"]\n    UnsupportedRegex(&'static str),\n}","parent":null,"children":[{"krate":0,"index":8317},{"krate":0,"index":8320}],"decl_id":null,"docs":" Errors which may occur when preparing a regular expression for use with\n string generation.\n","sig":null,"attributes":[{"value":"allow(unknown_lints)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-error-1.2.2/src/lib.rs","byte_start":8191120,"byte_end":8191143,"line_start":566,"line_end":566,"column_start":9,"column_end":32}},{"value":"allow(renamed_and_removed_lints)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-error-1.2.2/src/lib.rs","byte_start":8191193,"byte_end":8191228,"line_start":567,"line_end":567,"column_start":9,"column_end":44}},{"value":"allow(unused_doc_comment)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-error-1.2.2/src/lib.rs","byte_start":8191237,"byte_end":8191265,"line_start":568,"line_end":568,"column_start":9,"column_end":37}},{"value":"allow(unused_doc_comments)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-error-1.2.2/src/lib.rs","byte_start":8191274,"byte_end":8191303,"line_start":569,"line_end":569,"column_start":9,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":8346},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":585790,"byte_end":585812,"line_start":92,"line_end":92,"column_start":16,"column_end":38},"name":"RegexGeneratorStrategy","qualname":"::string::RegexGeneratorStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy which generates values (i.e., `String` or `Vec<u8>`) matching\n a regular expression.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/macros.rs","byte_start":7723,"byte_end":7772,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":8334},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":585977,"byte_end":586000,"line_start":95,"line_end":95,"column_start":16,"column_end":39},"name":"RegexGeneratorValueTree","qualname":"::string::RegexGeneratorValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `RegexGeneratorStrategy`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2176},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":586757,"byte_end":586774,"line_start":118,"line_end":118,"column_start":11,"column_end":28},"name":"StrategyFromRegex","qualname":"::string::StrategyFromRegex","value":"StrategyFromRegex: Sized + fmt::Debug","parent":null,"children":[{"krate":0,"index":2177},{"krate":0,"index":2178}],"decl_id":null,"docs":" A type which knows how to produce a `Strategy` from a regular expression\n generating the type.","sig":null,"attributes":[{"value":"/ A type which knows how to produce a `Strategy` from a regular expression","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":586385,"byte_end":586461,"line_start":111,"line_end":111,"column_start":1,"column_end":77}},{"value":"/ generating the type.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":586462,"byte_end":586486,"line_start":112,"line_end":112,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":586487,"byte_end":586490,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ This trait exists for the benefit of `#[proptest(regex = \"...\")]`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":586491,"byte_end":586561,"line_start":114,"line_end":114,"column_start":1,"column_end":71}},{"value":"/ It is semver extempt, so use at your own risk.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":586562,"byte_end":586612,"line_start":115,"line_end":115,"column_start":1,"column_end":51}},{"value":"/ If you found a use for the trait beyond `Vec<u8>` and `String`,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":586613,"byte_end":586680,"line_start":116,"line_end":116,"column_start":1,"column_end":68}},{"value":"/ please file an issue at https://github.com/AltSysrq/proptest.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":586681,"byte_end":586746,"line_start":117,"line_end":117,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":2177},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":586806,"byte_end":586814,"line_start":119,"line_end":119,"column_start":10,"column_end":18},"name":"Strategy","qualname":"::string::StrategyFromRegex::Strategy","value":"type Strategy: Strategy<Value = Self>;","parent":{"krate":0,"index":2176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2178},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":586904,"byte_end":586914,"line_start":122,"line_end":122,"column_start":8,"column_end":18},"name":"from_regex","qualname":"::string::StrategyFromRegex::from_regex","value":"pub fn from_regex(&str) -> Self::Strategy","parent":{"krate":0,"index":2176},"children":[],"decl_id":null,"docs":" Produce a strategy for `Self` from the `regex`.\n","sig":null,"attributes":[{"value":"/ Produce a strategy for `Self` from the `regex`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":586845,"byte_end":586896,"line_start":121,"line_end":121,"column_start":5,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":2185},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":587575,"byte_end":587587,"line_start":146,"line_end":146,"column_start":8,"column_end":20},"name":"string_regex","qualname":"::string::string_regex","value":"pub fn string_regex(&str) -> ParseResult<String>","parent":null,"children":[],"decl_id":null,"docs":" Creates a strategy which generates strings matching the given regular\n expression.","sig":null,"attributes":[{"value":"/ Creates a strategy which generates strings matching the given regular","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":587318,"byte_end":587391,"line_start":141,"line_end":141,"column_start":1,"column_end":74}},{"value":"/ expression.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":587392,"byte_end":587407,"line_start":142,"line_end":142,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":587408,"byte_end":587411,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ If you don't need error handling and aren't limited by setup time, it is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":587412,"byte_end":587488,"line_start":144,"line_end":144,"column_start":1,"column_end":77}},{"value":"/ also possible to directly use a `&str` as a strategy with the same effect.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":587489,"byte_end":587567,"line_start":145,"line_end":145,"column_start":1,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":2186},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":587756,"byte_end":587775,"line_start":151,"line_end":151,"column_start":8,"column_end":27},"name":"string_regex_parsed","qualname":"::string::string_regex_parsed","value":"pub fn string_regex_parsed(&Hir) -> ParseResult<String>","parent":null,"children":[],"decl_id":null,"docs":" Like `string_regex()`, but allows providing a pre-parsed expression.\n","sig":null,"attributes":[{"value":"/ Like `string_regex()`, but allows providing a pre-parsed expression.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":587676,"byte_end":587748,"line_start":150,"line_end":150,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":2189},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":588151,"byte_end":588162,"line_start":164,"line_end":164,"column_start":8,"column_end":19},"name":"bytes_regex","qualname":"::string::bytes_regex","value":"pub fn bytes_regex(&str) -> ParseResult<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a strategy which generates byte strings matching the given regular\n expression.\n","sig":null,"attributes":[{"value":"/ Creates a strategy which generates byte strings matching the given regular","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":588049,"byte_end":588127,"line_start":162,"line_end":162,"column_start":1,"column_end":79}},{"value":"/ expression.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":588128,"byte_end":588143,"line_start":163,"line_end":163,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":2190},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":588330,"byte_end":588348,"line_start":169,"line_end":169,"column_start":8,"column_end":26},"name":"bytes_regex_parsed","qualname":"::string::bytes_regex_parsed","value":"pub fn bytes_regex_parsed(&Hir) -> ParseResult<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Like `bytes_regex()`, but allows providing a pre-parsed expression.\n","sig":null,"attributes":[{"value":"/ Like `bytes_regex()`, but allows providing a pre-parsed expression.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":588251,"byte_end":588322,"line_start":168,"line_end":168,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":2222},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","parent":null,"children":[{"krate":0,"index":2223},{"krate":0,"index":2224},{"krate":0,"index":2225},{"krate":0,"index":2226},{"krate":0,"index":2227},{"krate":0,"index":2228},{"krate":0,"index":2229},{"krate":0,"index":9288},{"krate":0,"index":2230},{"krate":0,"index":2231},{"krate":0,"index":2232},{"krate":0,"index":2233},{"krate":0,"index":2234},{"krate":0,"index":2235},{"krate":0,"index":2236},{"krate":0,"index":2237},{"krate":0,"index":2238},{"krate":0,"index":2239},{"krate":0,"index":2240},{"krate":0,"index":2241},{"krate":0,"index":2242},{"krate":0,"index":2243},{"krate":0,"index":2244},{"krate":0,"index":2245}],"decl_id":null,"docs":" Re-exports the most commonly-needed APIs of proptest.","sig":null,"attributes":[{"value":"/ Re-exports the most commonly-needed APIs of proptest.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":599770,"byte_end":599827,"line_start":10,"line_end":10,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":599828,"byte_end":599831,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This module is intended to be wildcard-imported, i.e.,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":599832,"byte_end":599890,"line_start":12,"line_end":12,"column_start":1,"column_end":59}},{"value":"/ `use proptest::prelude::*;`. Note that it re-exports the whole crate itself","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":599891,"byte_end":599970,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ under the name `prop`, so you don't need a separate `use proptest;` line.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":599971,"byte_end":600048,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600049,"byte_end":600052,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ In addition to Proptest's own APIs, this also reexports a small portion of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600053,"byte_end":600131,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ the `rand` crate sufficient to easily use `prop_perturb` and other","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600132,"byte_end":600202,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"/ functionality that exposes random number generators. Please note that this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600203,"byte_end":600281,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ is will always be a direct reexport; using these in preference to using the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600282,"byte_end":600361,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ `rand` crate directly will not provide insulation from the upcoming","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600362,"byte_end":600433,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ revision to the `rand` crate.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600434,"byte_end":600467,"line_start":21,"line_end":21,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":2245},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":601073,"byte_end":601077,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"name":"prop","qualname":"::prelude::prop","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","parent":null,"children":[{"krate":0,"index":2246},{"krate":0,"index":2247},{"krate":0,"index":2248},{"krate":0,"index":2249},{"krate":0,"index":2250},{"krate":0,"index":2251},{"krate":0,"index":2252},{"krate":0,"index":2253},{"krate":0,"index":2254},{"krate":0,"index":2255},{"krate":0,"index":2256},{"krate":0,"index":2257},{"krate":0,"index":2258},{"krate":0,"index":2259}],"decl_id":null,"docs":" Re-exports the entire public API of proptest so that an import of `prelude`\n allows simply writing, for example, `prop::num::i32::ANY` rather than\n `proptest::num::i32::ANY` plus a separate `use proptest;`.\n","sig":null,"attributes":[{"value":"/ Re-exports the entire public API of proptest so that an import of `prelude`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600848,"byte_end":600927,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ allows simply writing, for example, `prop::num::i32::ANY` rather than","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":600928,"byte_end":601001,"line_start":35,"line_end":35,"column_start":1,"column_end":74}},{"value":"/ `proptest::num::i32::ANY` plus a separate `use proptest;`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/prelude.rs","byte_start":601002,"byte_end":601064,"line_start":36,"line_end":36,"column_start":1,"column_end":63}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sugar.rs","byte_start":46714,"byte_end":46728,"line_start":1058,"line_end":1058,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/sample.rs","byte_start":92820,"byte_end":92825,"line_start":13,"line_end":13,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/sample.rs","byte_start":92996,"byte_end":93004,"line_start":23,"line_end":23,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_core/iter.rs","byte_start":100442,"byte_end":100448,"line_start":39,"line_end":39,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_core/iter.rs","byte_start":101237,"byte_end":101240,"line_start":69,"line_end":69,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_core/iter.rs","byte_start":102217,"byte_end":102222,"line_start":108,"line_end":108,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_core/result.rs","byte_start":111331,"byte_end":111337,"line_start":58,"line_end":58,"column_start":63,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_core/result.rs","byte_start":111801,"byte_end":111807,"line_start":74,"line_end":74,"column_start":67,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_alloc/collections.rs","byte_start":122651,"byte_end":122658,"line_start":149,"line_end":149,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_alloc/collections.rs","byte_start":123111,"byte_end":123119,"line_start":168,"line_end":168,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_alloc/collections.rs","byte_start":124227,"byte_end":124235,"line_start":206,"line_end":206,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_alloc/collections.rs","byte_start":124895,"byte_end":124903,"line_start":228,"line_end":228,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_std/string.rs","byte_start":153717,"byte_end":153723,"line_start":29,"line_end":29,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174069,"byte_end":174089,"line_start":58,"line_end":58,"column_start":12,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":185253,"byte_end":185259,"line_start":98,"line_end":98,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":185698,"byte_end":185701,"line_start":124,"line_end":124,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":186731,"byte_end":186745,"line_start":172,"line_end":172,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":187473,"byte_end":187487,"line_start":197,"line_end":197,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188597,"byte_end":188618,"line_start":235,"line_end":235,"column_start":21,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":189759,"byte_end":189780,"line_start":269,"line_end":269,"column_start":34,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":190769,"byte_end":190784,"line_start":306,"line_end":306,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":194896,"byte_end":194905,"line_start":448,"line_end":448,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":574},{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":195403,"byte_end":195412,"line_start":464,"line_end":464,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":196020,"byte_end":196029,"line_start":490,"line_end":490,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":201838,"byte_end":201841,"line_start":26,"line_end":26,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":202423,"byte_end":202431,"line_start":48,"line_end":48,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":202889,"byte_end":202902,"line_start":71,"line_end":71,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":203067,"byte_end":203080,"line_start":80,"line_end":80,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":211507,"byte_end":211519,"line_start":179,"line_end":179,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":213607,"byte_end":213619,"line_start":248,"line_end":248,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":214605,"byte_end":214618,"line_start":282,"line_end":282,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":214872,"byte_end":214885,"line_start":292,"line_end":292,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":219768,"byte_end":219777,"line_start":49,"line_end":49,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":219917,"byte_end":219926,"line_start":56,"line_end":56,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":694},{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":221968,"byte_end":221977,"line_start":122,"line_end":122,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":697}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":222163,"byte_end":222172,"line_start":129,"line_end":129,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":222349,"byte_end":222358,"line_start":136,"line_end":136,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":222546,"byte_end":222555,"line_start":143,"line_end":143,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":222737,"byte_end":222746,"line_start":150,"line_end":150,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":705}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":222969,"byte_end":222978,"line_start":157,"line_end":157,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":707}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":223535,"byte_end":223544,"line_start":181,"line_end":181,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":709},{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":228108,"byte_end":228115,"line_start":323,"line_end":323,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":725}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":229826,"byte_end":229833,"line_start":374,"line_end":374,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":231547,"byte_end":231554,"line_start":426,"line_end":426,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":233453,"byte_end":233460,"line_start":484,"line_end":484,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":235458,"byte_end":235469,"line_start":548,"line_end":548,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":236170,"byte_end":236173,"line_start":570,"line_end":570,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":236752,"byte_end":236764,"line_start":591,"line_end":591,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":768},{"krate":0,"index":769}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":254184,"byte_end":254194,"line_start":366,"line_end":366,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter.rs","byte_start":292440,"byte_end":292446,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter.rs","byte_start":292666,"byte_end":292672,"line_start":35,"line_end":35,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter.rs","byte_start":292959,"byte_end":292965,"line_start":45,"line_end":45,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter.rs","byte_start":293215,"byte_end":293221,"line_start":55,"line_end":55,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter.rs","byte_start":293817,"byte_end":293823,"line_start":75,"line_end":75,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter.rs","byte_start":294211,"byte_end":294217,"line_start":88,"line_end":88,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":296368,"byte_end":296377,"line_start":25,"line_end":25,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":296597,"byte_end":296606,"line_start":35,"line_end":35,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":296896,"byte_end":296905,"line_start":45,"line_end":45,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":875}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":297180,"byte_end":297189,"line_start":56,"line_end":56,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":297884,"byte_end":297902,"line_start":81,"line_end":81,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":298066,"byte_end":298084,"line_start":88,"line_end":88,"column_start":42,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":298415,"byte_end":298433,"line_start":99,"line_end":99,"column_start":5,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":299351,"byte_end":299369,"line_start":131,"line_end":131,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":302127,"byte_end":302134,"line_start":26,"line_end":26,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":925}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":302280,"byte_end":302287,"line_start":33,"line_end":33,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":303690,"byte_end":303706,"line_start":70,"line_end":70,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":940}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":304174,"byte_end":304190,"line_start":87,"line_end":87,"column_start":35,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":943}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":304724,"byte_end":304740,"line_start":106,"line_end":106,"column_start":20,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":946}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":305187,"byte_end":305203,"line_start":122,"line_end":122,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":308025,"byte_end":308035,"line_start":205,"line_end":205,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":308639,"byte_end":308652,"line_start":227,"line_end":227,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":308903,"byte_end":308916,"line_start":236,"line_end":236,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":309149,"byte_end":309162,"line_start":246,"line_end":246,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":314404,"byte_end":314408,"line_start":48,"line_end":48,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":983}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":314638,"byte_end":314642,"line_start":59,"line_end":59,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":314853,"byte_end":314857,"line_start":68,"line_end":68,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":995}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":316307,"byte_end":316311,"line_start":111,"line_end":111,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1001}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":320240,"byte_end":320244,"line_start":35,"line_end":35,"column_start":42,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":320431,"byte_end":320435,"line_start":44,"line_end":44,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":6639},{"krate":0,"index":6640},{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":321495,"byte_end":321503,"line_start":75,"line_end":75,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":321809,"byte_end":321817,"line_start":85,"line_end":85,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1034}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":322013,"byte_end":322021,"line_start":94,"line_end":94,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1038},{"krate":0,"index":6641},{"krate":0,"index":6642},{"krate":0,"index":1039}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":322179,"byte_end":322187,"line_start":102,"line_end":102,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":322238,"byte_end":322246,"line_start":104,"line_end":104,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":322401,"byte_end":322409,"line_start":112,"line_end":112,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1050}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/lazy.rs","byte_start":324142,"byte_end":324155,"line_start":34,"line_end":34,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/lazy.rs","byte_start":327099,"byte_end":327112,"line_start":119,"line_end":119,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1091}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/lazy.rs","byte_start":327280,"byte_end":327293,"line_start":130,"line_end":130,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/lazy.rs","byte_start":327529,"byte_end":327547,"line_start":141,"line_end":141,"column_start":29,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1097}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/lazy.rs","byte_start":327971,"byte_end":327989,"line_start":159,"line_end":159,"column_start":34,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1101}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":329414,"byte_end":329417,"line_start":30,"line_end":30,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1116}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":329658,"byte_end":329661,"line_start":39,"line_end":39,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1120}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":329882,"byte_end":329885,"line_start":48,"line_end":48,"column_start":69,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":330223,"byte_end":330226,"line_start":61,"line_end":61,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1133},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":331000,"byte_end":331007,"line_start":94,"line_end":94,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1145}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":331282,"byte_end":331289,"line_start":105,"line_end":105,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1149}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":331493,"byte_end":331500,"line_start":113,"line_end":113,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1153}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":331633,"byte_end":331640,"line_start":119,"line_end":119,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1159}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":331915,"byte_end":331922,"line_start":131,"line_end":131,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":332633,"byte_end":332640,"line_start":163,"line_end":163,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1175}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":332885,"byte_end":332892,"line_start":172,"line_end":172,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1179}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":333130,"byte_end":333137,"line_start":182,"line_end":182,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1184},{"krate":0,"index":1185},{"krate":0,"index":1186}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":333688,"byte_end":333704,"line_start":207,"line_end":207,"column_start":39,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1197}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":333995,"byte_end":334011,"line_start":217,"line_end":217,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1201}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":334295,"byte_end":334311,"line_start":228,"line_end":228,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/recursive.rs","byte_start":336850,"byte_end":336859,"line_start":26,"line_end":26,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1230}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/recursive.rs","byte_start":337266,"byte_end":337275,"line_start":38,"line_end":38,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1234}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/recursive.rs","byte_start":337700,"byte_end":337709,"line_start":54,"line_end":54,"column_start":7,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1239}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/recursive.rs","byte_start":338232,"byte_end":338241,"line_start":77,"line_end":77,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1247}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":345682,"byte_end":345689,"line_start":90,"line_end":90,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":346816,"byte_end":346832,"line_start":128,"line_end":128,"column_start":20,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1269},{"krate":0,"index":1270}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":347270,"byte_end":347286,"line_start":147,"line_end":147,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1273},{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":377232,"byte_end":377240,"line_start":635,"line_end":635,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":377464,"byte_end":377472,"line_start":644,"line_end":644,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1339}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":378396,"byte_end":378399,"line_start":681,"line_end":681,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":379478,"byte_end":379491,"line_start":716,"line_end":716,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":379597,"byte_end":379611,"line_start":722,"line_end":722,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1354}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":379733,"byte_end":379746,"line_start":728,"line_end":728,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1360}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":380106,"byte_end":380120,"line_start":746,"line_end":746,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1363},{"krate":0,"index":1364},{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":380679,"byte_end":380699,"line_start":773,"line_end":773,"column_start":32,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":381913,"byte_end":381939,"line_start":809,"line_end":809,"column_start":18,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1374}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":391794,"byte_end":391799,"line_start":40,"line_end":40,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1398},{"krate":0,"index":1401},{"krate":0,"index":1406},{"krate":0,"index":1408}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":394330,"byte_end":394335,"line_start":120,"line_end":120,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":399658,"byte_end":399672,"line_start":294,"line_end":294,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":6924},{"krate":0,"index":6925},{"krate":0,"index":6926},{"krate":0,"index":6927}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":399764,"byte_end":399778,"line_start":298,"line_end":298,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1433}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":400055,"byte_end":400069,"line_start":312,"line_end":312,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1436}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402521,"byte_end":402531,"line_start":380,"line_end":380,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1440}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403647,"byte_end":403661,"line_start":408,"line_end":408,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1443}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":419697,"byte_end":419703,"line_start":51,"line_end":51,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1470}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":420175,"byte_end":420181,"line_start":65,"line_end":65,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1474}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":420502,"byte_end":420508,"line_start":75,"line_end":75,"column_start":63,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1478},{"krate":0,"index":1479},{"krate":0,"index":1480}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":421096,"byte_end":421102,"line_start":95,"line_end":95,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1484}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":421491,"byte_end":421497,"line_start":108,"line_end":108,"column_start":57,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1490},{"krate":0,"index":1491}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":422502,"byte_end":422505,"line_start":155,"line_end":155,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1499}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":422706,"byte_end":422709,"line_start":162,"line_end":162,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1503}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":422981,"byte_end":422984,"line_start":171,"line_end":171,"column_start":60,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1507},{"krate":0,"index":1508},{"krate":0,"index":1509}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":423304,"byte_end":423307,"line_start":183,"line_end":183,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1514},{"krate":0,"index":1515},{"krate":0,"index":1516},{"krate":0,"index":1517}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439097,"byte_end":439103,"line_start":356,"line_end":356,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1555},{"krate":0,"index":1556},{"krate":0,"index":1557},{"krate":0,"index":1558},{"krate":0,"index":1559},{"krate":0,"index":1560},{"krate":0,"index":1561},{"krate":0,"index":1562}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":442740,"byte_end":442746,"line_start":479,"line_end":479,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1564}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444225,"byte_end":444238,"line_start":39,"line_end":39,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1571},{"krate":0,"index":1573}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444993,"byte_end":445006,"line_start":59,"line_end":59,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1576}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":445376,"byte_end":445389,"line_start":71,"line_end":71,"column_start":42,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1579}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":445974,"byte_end":445983,"line_start":89,"line_end":89,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1582}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":446416,"byte_end":446425,"line_start":103,"line_end":103,"column_start":45,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1585}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454793,"byte_end":454815,"line_start":78,"line_end":78,"column_start":18,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1621}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454929,"byte_end":454951,"line_start":84,"line_end":84,"column_start":29,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1623},{"krate":0,"index":1629},{"krate":0,"index":1630},{"krate":0,"index":1631},{"krate":0,"index":1633}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":462801,"byte_end":462823,"line_start":328,"line_end":328,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1644}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/map.rs","byte_start":471221,"byte_end":471242,"line_start":26,"line_end":26,"column_start":29,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1656},{"krate":0,"index":1659},{"krate":0,"index":1660},{"krate":0,"index":1661},{"krate":0,"index":1663}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/noop.rs","byte_start":473973,"byte_end":473995,"line_start":21,"line_end":21,"column_start":29,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1674},{"krate":0,"index":1675},{"krate":0,"index":1676},{"krate":0,"index":1677},{"krate":0,"index":1679}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":447572,"byte_end":447585,"line_start":35,"line_end":35,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1685}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":447722,"byte_end":447735,"line_start":41,"line_end":41,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1687},{"krate":0,"index":1688}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":451099,"byte_end":451102,"line_start":139,"line_end":139,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1705}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476222,"byte_end":476228,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1713}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476494,"byte_end":476500,"line_start":32,"line_end":32,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1715}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476598,"byte_end":476604,"line_start":38,"line_end":38,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1717}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476698,"byte_end":476704,"line_start":44,"line_end":44,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1719}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476812,"byte_end":476818,"line_start":50,"line_end":50,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1721}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":477833,"byte_end":477847,"line_start":28,"line_end":28,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1729},{"krate":0,"index":1730}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":479121,"byte_end":479137,"line_start":64,"line_end":64,"column_start":22,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1736},{"krate":0,"index":1748},{"krate":0,"index":1749}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":479381,"byte_end":479391,"line_start":71,"line_end":71,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1746},{"krate":0,"index":1747}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":480292,"byte_end":480307,"line_start":105,"line_end":105,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1756}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":483215,"byte_end":483227,"line_start":61,"line_end":61,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1780}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":483300,"byte_end":483312,"line_start":67,"line_end":67,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1782},{"krate":0,"index":1783}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":483994,"byte_end":484006,"line_start":89,"line_end":89,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1785},{"krate":0,"index":1786}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":484161,"byte_end":484173,"line_start":95,"line_end":95,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1788}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":484605,"byte_end":484612,"line_start":118,"line_end":118,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1790},{"krate":0,"index":1792},{"krate":0,"index":1794},{"krate":0,"index":1795}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":487034,"byte_end":487038,"line_start":198,"line_end":198,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1797},{"krate":0,"index":1800},{"krate":0,"index":1806}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":491348,"byte_end":491355,"line_start":330,"line_end":330,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":1818},{"krate":0,"index":1820}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":501860,"byte_end":501870,"line_start":81,"line_end":81,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1849}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":502471,"byte_end":502481,"line_start":96,"line_end":96,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1851}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":503133,"byte_end":503143,"line_start":117,"line_end":117,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1853}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":504151,"byte_end":504161,"line_start":164,"line_end":164,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1855},{"krate":0,"index":1856},{"krate":0,"index":1857},{"krate":0,"index":1858},{"krate":0,"index":1859}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":507747,"byte_end":507757,"line_start":293,"line_end":293,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1868},{"krate":0,"index":1869},{"krate":0,"index":1870},{"krate":0,"index":1871},{"krate":0,"index":1872},{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":1875},{"krate":0,"index":1878},{"krate":0,"index":1881},{"krate":0,"index":1884},{"krate":0,"index":1889},{"krate":0,"index":1893},{"krate":0,"index":1896},{"krate":0,"index":1900},{"krate":0,"index":1907},{"krate":0,"index":1909},{"krate":0,"index":1911},{"krate":0,"index":1913},{"krate":0,"index":1914}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/tuple.rs","byte_start":546009,"byte_end":546023,"line_start":26,"line_end":26,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1928}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":550844,"byte_end":550855,"line_start":35,"line_end":35,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1938}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":550986,"byte_end":550997,"line_start":42,"line_end":42,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1940}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":551225,"byte_end":551236,"line_start":53,"line_end":53,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1945}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":553354,"byte_end":553366,"line_start":127,"line_end":127,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1955}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":553441,"byte_end":553453,"line_start":132,"line_end":132,"column_start":18,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":553483,"byte_end":553495,"line_start":133,"line_end":133,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1960}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":553635,"byte_end":553647,"line_start":138,"line_end":138,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1965}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":553826,"byte_end":553838,"line_start":146,"line_end":146,"column_start":35,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1968},{"krate":0,"index":1969},{"krate":0,"index":1970},{"krate":0,"index":1971}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":554976,"byte_end":554990,"line_start":181,"line_end":181,"column_start":47,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1974}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":558755,"byte_end":558761,"line_start":41,"line_end":41,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1997}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":558842,"byte_end":558848,"line_start":46,"line_end":46,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":558884,"byte_end":558890,"line_start":47,"line_end":47,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2004}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":559051,"byte_end":559057,"line_start":52,"line_end":52,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":2008},{"krate":0,"index":2009}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":559239,"byte_end":559246,"line_start":59,"line_end":59,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2019}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":559327,"byte_end":559334,"line_start":64,"line_end":64,"column_start":21,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":559370,"byte_end":559377,"line_start":65,"line_end":65,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2026}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":559539,"byte_end":559546,"line_start":70,"line_end":70,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2030},{"krate":0,"index":2031}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":561441,"byte_end":561448,"line_start":118,"line_end":118,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2041}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":561643,"byte_end":561651,"line_start":125,"line_end":125,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2045}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":568972,"byte_end":568983,"line_start":81,"line_end":81,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2087},{"krate":0,"index":2088},{"krate":0,"index":2089}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":569527,"byte_end":569547,"line_start":100,"line_end":100,"column_start":53,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":2092},{"krate":0,"index":2093},{"krate":0,"index":2095},{"krate":0,"index":2096}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":570062,"byte_end":570073,"line_start":121,"line_end":121,"column_start":65,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":2099},{"krate":0,"index":2100}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573433,"byte_end":573438,"line_start":215,"line_end":215,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2105},{"krate":0,"index":2106},{"krate":0,"index":2109}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575125,"byte_end":575138,"line_start":269,"line_end":269,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2113}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576750,"byte_end":576766,"line_start":331,"line_end":331,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2115}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576878,"byte_end":576894,"line_start":337,"line_end":337,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2117},{"krate":0,"index":2118},{"krate":0,"index":2119}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":577207,"byte_end":577224,"line_start":349,"line_end":349,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2121},{"krate":0,"index":2122},{"krate":0,"index":2123},{"krate":0,"index":2124}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":577633,"byte_end":577641,"line_start":368,"line_end":368,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2126},{"krate":0,"index":2128}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":584435,"byte_end":584446,"line_start":45,"line_end":45,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2164}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":584537,"byte_end":584548,"line_start":51,"line_end":51,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2166}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":586977,"byte_end":586983,"line_start":125,"line_end":125,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2180},{"krate":0,"index":2181}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":587161,"byte_end":587164,"line_start":133,"line_end":133,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2183},{"krate":0,"index":2184}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":591781,"byte_end":591791,"line_start":282,"line_end":282,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2214},{"krate":0,"index":2215}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":1295,"byte_end":1305,"line_start":43,"line_end":43,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":2031,"byte_end":2036,"line_start":88,"line_end":88,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":23}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":2047,"byte_end":2056,"line_start":90,"line_end":90,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":38}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/mod.rs","byte_start":64889,"byte_end":64896,"line_start":27,"line_end":27,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":66}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":2066,"byte_end":2071,"line_start":91,"line_end":91,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":494}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":2081,"byte_end":2085,"line_start":92,"line_end":92,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":503}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":2095,"byte_end":2099,"line_start":93,"line_end":93,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":592}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":2109,"byte_end":2113,"line_start":94,"line_end":94,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":613}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":2123,"byte_end":2133,"line_start":95,"line_end":95,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":650}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":2143,"byte_end":2146,"line_start":96,"line_end":96,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":770}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":2156,"byte_end":2164,"line_start":97,"line_end":97,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":809}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/mod.rs","byte_start":291734,"byte_end":291741,"line_start":37,"line_end":37,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1460}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":2174,"byte_end":2185,"line_start":98,"line_end":98,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1526}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":2195,"byte_end":2200,"line_start":99,"line_end":99,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1923}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":2211,"byte_end":2217,"line_start":101,"line_end":101,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1930}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":2227,"byte_end":2233,"line_start":102,"line_end":102,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1980}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":2243,"byte_end":2249,"line_start":103,"line_end":103,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2060}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":2283,"byte_end":2289,"line_start":105,"line_end":105,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2130}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/lib.rs","byte_start":2300,"byte_end":2307,"line_start":107,"line_end":107,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2222}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sugar.rs","byte_start":46714,"byte_end":46728,"line_start":1058,"line_end":1058,"column_start":36,"column_end":50},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2283},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":67992,"byte_end":67997,"line_start":45,"line_end":45,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":2050},"to":{"krate":0,"index":46}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/traits.rs","byte_start":68005,"byte_end":68010,"line_start":45,"line_end":45,"column_start":35,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":6599},"to":{"krate":0,"index":46}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":78558,"byte_end":78563,"line_start":41,"line_end":41,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":1,"index":6599},"to":{"krate":0,"index":71}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":78566,"byte_end":78571,"line_start":41,"line_end":41,"column_start":52,"column_end":57},"kind":"SuperTrait","from":{"krate":1,"index":2050},"to":{"krate":0,"index":71}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82433,"byte_end":82438,"line_start":131,"line_end":131,"column_start":10,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":6599},"to":{"krate":0,"index":78}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/functor.rs","byte_start":82441,"byte_end":82446,"line_start":131,"line_end":131,"column_start":18,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":2050},"to":{"krate":0,"index":78}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/sample.rs","byte_start":92820,"byte_end":92825,"line_start":13,"line_end":13,"column_start":20,"column_end":25},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":8235},"to":{"krate":0,"index":46}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/sample.rs","byte_start":92996,"byte_end":93004,"line_start":23,"line_end":23,"column_start":20,"column_end":28},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":8276},"to":{"krate":0,"index":46}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_core/iter.rs","byte_start":100442,"byte_end":100448,"line_start":39,"line_end":39,"column_start":35,"column_end":41},"kind":{"Impl":{"id":12}},"from":{"krate":1,"index":31642},"to":{"krate":0,"index":71}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_core/iter.rs","byte_start":101237,"byte_end":101240,"line_start":69,"line_end":69,"column_start":36,"column_end":39},"kind":{"Impl":{"id":16}},"from":{"krate":1,"index":31613},"to":{"krate":0,"index":78}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_core/iter.rs","byte_start":102217,"byte_end":102222,"line_start":108,"line_end":108,"column_start":38,"column_end":43},"kind":{"Impl":{"id":19}},"from":{"krate":1,"index":31577},"to":{"krate":0,"index":78}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_core/result.rs","byte_start":111331,"byte_end":111337,"line_start":58,"line_end":58,"column_start":63,"column_end":69},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":32474},"to":{"krate":0,"index":71}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_core/result.rs","byte_start":111801,"byte_end":111807,"line_start":74,"line_end":74,"column_start":67,"column_end":73},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":32474},"to":{"krate":0,"index":78}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_alloc/collections.rs","byte_start":122651,"byte_end":122658,"line_start":149,"line_end":149,"column_start":9,"column_end":16},"kind":{"Impl":{"id":53}},"from":{"krate":4,"index":6842},"to":{"krate":0,"index":78}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_alloc/collections.rs","byte_start":123111,"byte_end":123119,"line_start":168,"line_end":168,"column_start":46,"column_end":54},"kind":{"Impl":{"id":54}},"from":{"krate":4,"index":719},"to":{"krate":0,"index":78}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_alloc/collections.rs","byte_start":124227,"byte_end":124235,"line_start":206,"line_end":206,"column_start":9,"column_end":17},"kind":{"Impl":{"id":57}},"from":{"krate":5,"index":905},"to":{"krate":0,"index":78}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_alloc/collections.rs","byte_start":124895,"byte_end":124903,"line_start":228,"line_end":228,"column_start":47,"column_end":55},"kind":{"Impl":{"id":59}},"from":{"krate":5,"index":939},"to":{"krate":0,"index":78}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/arbitrary/_std/string.rs","byte_start":153717,"byte_end":153723,"line_start":29,"line_end":29,"column_start":20,"column_end":26},"kind":{"Impl":{"id":107}},"from":{"krate":5,"index":5501},"to":{"krate":0,"index":46}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/array.rs","byte_start":174069,"byte_end":174089,"line_start":58,"line_end":58,"column_start":12,"column_end":32},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":4054},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":183459,"byte_end":183464,"line_start":34,"line_end":34,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1742},"to":{"krate":0,"index":518}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":183472,"byte_end":183477,"line_start":34,"line_end":34,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":6599},"to":{"krate":0,"index":518}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":185253,"byte_end":185259,"line_start":98,"line_end":98,"column_start":21,"column_end":27},"kind":{"Impl":{"id":135}},"from":{"krate":17,"index":30},"to":{"krate":0,"index":518}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":185698,"byte_end":185701,"line_start":124,"line_end":124,"column_start":21,"column_end":24},"kind":{"Impl":{"id":136}},"from":{"krate":5,"index":4754},"to":{"krate":0,"index":518}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":186731,"byte_end":186745,"line_start":172,"line_end":172,"column_start":21,"column_end":35},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":5049},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":187473,"byte_end":187487,"line_start":197,"line_end":197,"column_start":34,"column_end":48},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":5049},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":188597,"byte_end":188618,"line_start":235,"line_end":235,"column_start":21,"column_end":42},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":5062},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":189759,"byte_end":189780,"line_start":269,"line_end":269,"column_start":34,"column_end":55},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":5062},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":190769,"byte_end":190784,"line_start":306,"line_end":306,"column_start":35,"column_end":50},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":5073},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":194896,"byte_end":194905,"line_start":448,"line_end":448,"column_start":10,"column_end":19},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":5179},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":195403,"byte_end":195412,"line_start":464,"line_end":464,"column_start":25,"column_end":34},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":5179},"to":{"krate":0,"index":518}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bits.rs","byte_start":196020,"byte_end":196029,"line_start":490,"line_end":490,"column_start":34,"column_end":43},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":5179},"to":{"krate":1,"index":5206}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":201838,"byte_end":201841,"line_start":26,"line_end":26,"column_start":19,"column_end":22},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":5186},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":202423,"byte_end":202431,"line_start":48,"line_end":48,"column_start":19,"column_end":27},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":5194},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":202889,"byte_end":202902,"line_start":71,"line_end":71,"column_start":6,"column_end":19},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":5202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/bool.rs","byte_start":203067,"byte_end":203080,"line_start":80,"line_end":80,"column_start":20,"column_end":33},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":5202},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":211507,"byte_end":211519,"line_start":179,"line_end":179,"column_start":10,"column_end":22},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":5225},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":213607,"byte_end":213619,"line_start":248,"line_end":248,"column_start":23,"column_end":35},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":5225},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":214605,"byte_end":214618,"line_start":282,"line_end":282,"column_start":6,"column_end":19},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":5236},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/char.rs","byte_start":214872,"byte_end":214885,"line_start":292,"line_end":292,"column_start":20,"column_end":33},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":5236},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":219768,"byte_end":219777,"line_start":49,"line_end":49,"column_start":18,"column_end":27},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":5243},"to":{"krate":1,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":219917,"byte_end":219926,"line_start":56,"line_end":56,"column_start":6,"column_end":15},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":5243},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":221968,"byte_end":221977,"line_start":122,"line_end":122,"column_start":31,"column_end":40},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":5243},"to":{"krate":1,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":222163,"byte_end":222172,"line_start":129,"line_end":129,"column_start":22,"column_end":31},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":5243},"to":{"krate":1,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":222349,"byte_end":222358,"line_start":136,"line_end":136,"column_start":31,"column_end":40},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":5243},"to":{"krate":1,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":222546,"byte_end":222555,"line_start":143,"line_end":143,"column_start":29,"column_end":38},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":5243},"to":{"krate":1,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":222737,"byte_end":222746,"line_start":150,"line_end":150,"column_start":38,"column_end":47},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":5243},"to":{"krate":1,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":222969,"byte_end":222978,"line_start":157,"line_end":157,"column_start":40,"column_end":49},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":5243},"to":{"krate":1,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":223535,"byte_end":223544,"line_start":181,"line_end":181,"column_start":21,"column_end":30},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":5243},"to":{"krate":1,"index":2110}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":228108,"byte_end":228115,"line_start":323,"line_end":323,"column_start":54,"column_end":61},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":5407},"to":{"krate":0,"index":1464}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":229826,"byte_end":229833,"line_start":374,"line_end":374,"column_start":49,"column_end":56},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":5407},"to":{"krate":0,"index":1464}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":231547,"byte_end":231554,"line_start":426,"line_end":426,"column_start":60,"column_end":67},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":5407},"to":{"krate":0,"index":1464}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":233453,"byte_end":233460,"line_start":484,"line_end":484,"column_start":55,"column_end":62},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":5407},"to":{"krate":0,"index":1464}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":235458,"byte_end":235469,"line_start":548,"line_end":548,"column_start":32,"column_end":43},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":5260},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":236170,"byte_end":236173,"line_start":570,"line_end":570,"column_start":32,"column_end":35},"kind":{"Impl":{"id":167}},"from":{"krate":5,"index":4754},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/collection.rs","byte_start":236752,"byte_end":236764,"line_start":591,"line_end":591,"column_start":34,"column_end":46},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":5602},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/num.rs","byte_start":254184,"byte_end":254194,"line_start":366,"line_end":366,"column_start":6,"column_end":16},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":6305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter.rs","byte_start":292440,"byte_end":292446,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":816},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter.rs","byte_start":292666,"byte_end":292672,"line_start":35,"line_end":35,"column_start":39,"column_end":45},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":816},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter.rs","byte_start":292959,"byte_end":292965,"line_start":45,"line_end":45,"column_start":29,"column_end":35},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":816},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter.rs","byte_start":293215,"byte_end":293221,"line_start":55,"line_end":55,"column_start":58,"column_end":64},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":816},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter.rs","byte_start":293817,"byte_end":293823,"line_start":75,"line_end":75,"column_start":46,"column_end":52},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":816},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter.rs","byte_start":294211,"byte_end":294217,"line_start":88,"line_end":88,"column_start":60,"column_end":66},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":816},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":296368,"byte_end":296377,"line_start":25,"line_end":25,"column_start":12,"column_end":21},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":858},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":296597,"byte_end":296606,"line_start":35,"line_end":35,"column_start":39,"column_end":48},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":858},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":296896,"byte_end":296905,"line_start":45,"line_end":45,"column_start":29,"column_end":38},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":858},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":297180,"byte_end":297189,"line_start":56,"line_end":56,"column_start":9,"column_end":18},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":858},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":297884,"byte_end":297902,"line_start":81,"line_end":81,"column_start":9,"column_end":27},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":883},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":298066,"byte_end":298084,"line_start":88,"line_end":88,"column_start":42,"column_end":60},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":883},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":298415,"byte_end":298433,"line_start":99,"line_end":99,"column_start":5,"column_end":23},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":883},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/filter_map.rs","byte_start":299351,"byte_end":299369,"line_start":131,"line_end":131,"column_start":9,"column_end":27},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":883},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":302127,"byte_end":302134,"line_start":26,"line_end":26,"column_start":19,"column_end":26},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":6591},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":302280,"byte_end":302287,"line_start":33,"line_end":33,"column_start":32,"column_end":39},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":6591},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":303690,"byte_end":303706,"line_start":70,"line_end":70,"column_start":30,"column_end":46},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":931},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":304174,"byte_end":304190,"line_start":87,"line_end":87,"column_start":35,"column_end":51},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":931},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":304724,"byte_end":304740,"line_start":106,"line_end":106,"column_start":20,"column_end":36},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":931},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":305187,"byte_end":305203,"line_start":122,"line_end":122,"column_start":34,"column_end":50},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":931},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":308025,"byte_end":308035,"line_start":205,"line_end":205,"column_start":32,"column_end":42},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":6602},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":308639,"byte_end":308652,"line_start":227,"line_end":227,"column_start":39,"column_end":52},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":958},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":308903,"byte_end":308916,"line_start":236,"line_end":236,"column_start":29,"column_end":42},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":958},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/flatten.rs","byte_start":309149,"byte_end":309162,"line_start":246,"line_end":246,"column_start":9,"column_end":22},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":958},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":314404,"byte_end":314408,"line_start":48,"line_end":48,"column_start":9,"column_end":13},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":6614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":314638,"byte_end":314642,"line_start":59,"line_end":59,"column_start":32,"column_end":36},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":6614},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":314853,"byte_end":314857,"line_start":68,"line_end":68,"column_start":20,"column_end":24},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":6614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/fuse.rs","byte_start":316307,"byte_end":316311,"line_start":111,"line_end":111,"column_start":34,"column_end":38},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":6614},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":320240,"byte_end":320244,"line_start":35,"line_end":35,"column_start":42,"column_end":46},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":6627},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":320431,"byte_end":320435,"line_start":44,"line_end":44,"column_start":43,"column_end":47},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":6627},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":321495,"byte_end":321503,"line_start":75,"line_end":75,"column_start":23,"column_end":31},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":1019},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":321809,"byte_end":321817,"line_start":85,"line_end":85,"column_start":56,"column_end":64},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":1019},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":322013,"byte_end":322021,"line_start":94,"line_end":94,"column_start":49,"column_end":57},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":1019},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":322179,"byte_end":322187,"line_start":102,"line_end":102,"column_start":39,"column_end":47},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":1019},"to":{"krate":1,"index":2055}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":322238,"byte_end":322246,"line_start":104,"line_end":104,"column_start":41,"column_end":49},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":1019},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/just.rs","byte_start":322401,"byte_end":322409,"line_start":112,"line_end":112,"column_start":38,"column_end":46},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1019},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/lazy.rs","byte_start":324142,"byte_end":324155,"line_start":34,"line_end":34,"column_start":19,"column_end":32},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":1067},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/lazy.rs","byte_start":327099,"byte_end":327112,"line_start":119,"line_end":119,"column_start":29,"column_end":42},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":1067},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/lazy.rs","byte_start":327280,"byte_end":327293,"line_start":130,"line_end":130,"column_start":34,"column_end":47},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":1067},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/lazy.rs","byte_start":327529,"byte_end":327547,"line_start":141,"line_end":141,"column_start":29,"column_end":47},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":1070},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/lazy.rs","byte_start":327971,"byte_end":327989,"line_start":159,"line_end":159,"column_start":34,"column_end":52},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":1070},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":329414,"byte_end":329417,"line_start":30,"line_end":30,"column_start":39,"column_end":42},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":1108},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":329658,"byte_end":329661,"line_start":39,"line_end":39,"column_start":29,"column_end":32},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":1108},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":329882,"byte_end":329885,"line_start":48,"line_end":48,"column_start":69,"column_end":72},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":1108},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":330223,"byte_end":330226,"line_start":61,"line_end":61,"column_start":9,"column_end":12},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":1108},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":331000,"byte_end":331007,"line_start":94,"line_end":94,"column_start":12,"column_end":19},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":1137},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":331282,"byte_end":331289,"line_start":105,"line_end":105,"column_start":39,"column_end":46},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":1137},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":331493,"byte_end":331500,"line_start":113,"line_end":113,"column_start":29,"column_end":36},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":1137},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":331633,"byte_end":331640,"line_start":119,"line_end":119,"column_start":47,"column_end":54},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":1137},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":331915,"byte_end":331922,"line_start":131,"line_end":131,"column_start":49,"column_end":56},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":1137},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":332633,"byte_end":332640,"line_start":163,"line_end":163,"column_start":39,"column_end":46},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":1167},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":332885,"byte_end":332892,"line_start":172,"line_end":172,"column_start":29,"column_end":36},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":1167},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":333130,"byte_end":333137,"line_start":182,"line_end":182,"column_start":9,"column_end":16},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":1167},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":333688,"byte_end":333704,"line_start":207,"line_end":207,"column_start":39,"column_end":55},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":1188},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":333995,"byte_end":334011,"line_start":217,"line_end":217,"column_start":29,"column_end":45},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":1188},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/map.rs","byte_start":334295,"byte_end":334311,"line_start":228,"line_end":228,"column_start":9,"column_end":25},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":1188},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/recursive.rs","byte_start":336850,"byte_end":336859,"line_start":26,"line_end":26,"column_start":39,"column_end":48},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":1219},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/recursive.rs","byte_start":337266,"byte_end":337275,"line_start":38,"line_end":38,"column_start":22,"column_end":31},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":1219},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/recursive.rs","byte_start":337700,"byte_end":337709,"line_start":54,"line_end":54,"column_start":7,"column_end":16},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":1219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/recursive.rs","byte_start":338232,"byte_end":338241,"line_start":77,"line_end":77,"column_start":20,"column_end":29},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":1219},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":345682,"byte_end":345689,"line_start":90,"line_end":90,"column_start":32,"column_end":39},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":6645},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":346816,"byte_end":346832,"line_start":128,"line_end":128,"column_start":20,"column_end":36},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":6832},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/shuffle.rs","byte_start":347270,"byte_end":347286,"line_start":147,"line_end":147,"column_start":34,"column_end":50},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":6832},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":352989,"byte_end":352994,"line_start":37,"line_end":37,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":6599},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":377232,"byte_end":377240,"line_start":635,"line_end":635,"column_start":32,"column_end":40},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":6844},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":377464,"byte_end":377472,"line_start":644,"line_end":644,"column_start":34,"column_end":42},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":6844},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":378396,"byte_end":378399,"line_start":681,"line_end":681,"column_start":43,"column_end":46},"kind":{"Impl":{"id":242}},"from":{"krate":5,"index":93},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":379478,"byte_end":379491,"line_start":716,"line_end":716,"column_start":19,"column_end":32},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":6883},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":379597,"byte_end":379611,"line_start":722,"line_end":722,"column_start":19,"column_end":33},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":6890},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":379733,"byte_end":379746,"line_start":728,"line_end":728,"column_start":34,"column_end":47},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":6883},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":380106,"byte_end":380120,"line_start":746,"line_end":746,"column_start":34,"column_end":48},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":6890},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":380679,"byte_end":380699,"line_start":773,"line_end":773,"column_start":32,"column_end":52},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":6897},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/traits.rs","byte_start":381913,"byte_end":381939,"line_start":809,"line_end":809,"column_start":18,"column_end":44},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":6904},"to":{"krate":1,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":391794,"byte_end":391799,"line_start":40,"line_end":40,"column_start":19,"column_end":24},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":6913},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":394330,"byte_end":394335,"line_start":120,"line_end":120,"column_start":32,"column_end":37},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":6913},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":399658,"byte_end":399672,"line_start":294,"line_end":294,"column_start":33,"column_end":47},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":1422},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":399764,"byte_end":399778,"line_start":298,"line_end":298,"column_start":29,"column_end":43},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":1422},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":400055,"byte_end":400069,"line_start":312,"line_end":312,"column_start":34,"column_end":48},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":1422},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":402521,"byte_end":402531,"line_start":380,"line_end":380,"column_start":9,"column_end":19},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":6940},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/unions.rs","byte_start":403647,"byte_end":403661,"line_start":408,"line_end":408,"column_start":9,"column_end":23},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":6952},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":419697,"byte_end":419703,"line_start":51,"line_end":51,"column_start":12,"column_end":18},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":7532},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":420175,"byte_end":420181,"line_start":65,"line_end":65,"column_start":39,"column_end":45},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":7532},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":420502,"byte_end":420508,"line_start":75,"line_end":75,"column_start":63,"column_end":69},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":7532},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":421096,"byte_end":421102,"line_start":95,"line_end":95,"column_start":43,"column_end":49},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":7532},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":421491,"byte_end":421497,"line_start":108,"line_end":108,"column_start":57,"column_end":63},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":7532},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":422502,"byte_end":422505,"line_start":155,"line_end":155,"column_start":12,"column_end":15},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":7542},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":422706,"byte_end":422709,"line_start":162,"line_end":162,"column_start":39,"column_end":42},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":7542},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":422981,"byte_end":422984,"line_start":171,"line_end":171,"column_start":60,"column_end":63},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":7542},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/strategy/statics.rs","byte_start":423304,"byte_end":423307,"line_start":183,"line_end":183,"column_start":54,"column_end":57},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":7542},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":439097,"byte_end":439103,"line_start":356,"line_end":356,"column_start":6,"column_end":12},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":7562},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/config.rs","byte_start":442740,"byte_end":442746,"line_start":479,"line_end":479,"column_start":18,"column_end":24},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":7562},"to":{"krate":1,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444225,"byte_end":444238,"line_start":39,"line_end":39,"column_start":6,"column_end":19},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":7584},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":444993,"byte_end":445006,"line_start":59,"line_end":59,"column_start":23,"column_end":36},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":7584},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":445376,"byte_end":445389,"line_start":71,"line_end":71,"column_start":42,"column_end":55},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":7584},"to":{"krate":1,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":445974,"byte_end":445983,"line_start":89,"line_end":89,"column_start":38,"column_end":47},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":7595},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/errors.rs","byte_start":446416,"byte_end":446425,"line_start":103,"line_end":103,"column_start":45,"column_end":54},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":7595},"to":{"krate":4,"index":1725}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454793,"byte_end":454815,"line_start":78,"line_end":78,"column_start":18,"column_end":40},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":7621},"to":{"krate":1,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":454929,"byte_end":454951,"line_start":84,"line_end":84,"column_start":29,"column_end":51},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":7621},"to":{"krate":0,"index":1689}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/file.rs","byte_start":462801,"byte_end":462823,"line_start":328,"line_end":328,"column_start":6,"column_end":28},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":7621},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/map.rs","byte_start":471221,"byte_end":471242,"line_start":26,"line_end":26,"column_start":29,"column_end":50},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":7657},"to":{"krate":0,"index":1689}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/noop.rs","byte_start":473973,"byte_end":473995,"line_start":21,"line_end":21,"column_start":29,"column_end":51},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":7669},"to":{"krate":0,"index":1689}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":447572,"byte_end":447585,"line_start":35,"line_end":35,"column_start":18,"column_end":31},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":7678},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":447722,"byte_end":447735,"line_start":41,"line_end":41,"column_start":18,"column_end":31},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":7678},"to":{"krate":1,"index":8571}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":448237,"byte_end":448241,"line_start":55,"line_end":55,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2045},"to":{"krate":0,"index":1689}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":448244,"byte_end":448248,"line_start":55,"line_end":55,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":2057},"to":{"krate":0,"index":1689}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":448256,"byte_end":448261,"line_start":55,"line_end":55,"column_start":50,"column_end":55},"kind":"SuperTrait","from":{"krate":1,"index":6599},"to":{"krate":0,"index":1689}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/failure_persistence/mod.rs","byte_start":451099,"byte_end":451102,"line_start":139,"line_end":139,"column_start":16,"column_end":19},"kind":{"Impl":{"id":279}},"from":{"krate":5,"index":93},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476222,"byte_end":476228,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":7700},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476494,"byte_end":476500,"line_start":32,"line_end":32,"column_start":29,"column_end":35},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":7700},"to":{"krate":1,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476598,"byte_end":476604,"line_start":38,"line_end":38,"column_start":23,"column_end":29},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":7700},"to":{"krate":1,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476698,"byte_end":476704,"line_start":44,"line_end":44,"column_start":25,"column_end":31},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":7700},"to":{"krate":1,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/reason.rs","byte_start":476812,"byte_end":476818,"line_start":50,"line_end":50,"column_start":23,"column_end":29},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":7700},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":477833,"byte_end":477847,"line_start":28,"line_end":28,"column_start":10,"column_end":24},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":7725},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":479121,"byte_end":479137,"line_start":64,"line_end":64,"column_start":22,"column_end":38},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":7731},"to":{"krate":0,"index":1731}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":479381,"byte_end":479391,"line_start":71,"line_end":71,"column_start":28,"column_end":38},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":1742},"to":{"krate":4,"index":3179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/result_cache.rs","byte_start":480292,"byte_end":480307,"line_start":105,"line_end":105,"column_start":22,"column_end":37},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":1751},"to":{"krate":0,"index":1731}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":483215,"byte_end":483227,"line_start":61,"line_end":61,"column_start":18,"column_end":30},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":7739},"to":{"krate":1,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":483300,"byte_end":483312,"line_start":67,"line_end":67,"column_start":6,"column_end":18},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":7739},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":483994,"byte_end":484006,"line_start":89,"line_end":89,"column_start":23,"column_end":35},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":7739},"to":{"krate":1,"index":8571}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":484161,"byte_end":484173,"line_start":95,"line_end":95,"column_start":23,"column_end":35},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":7739},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":484605,"byte_end":484612,"line_start":118,"line_end":118,"column_start":18,"column_end":25},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":7759},"to":{"krate":23,"index":123}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":487034,"byte_end":487038,"line_start":198,"line_end":198,"column_start":6,"column_end":10},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":7780},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/rng.rs","byte_start":491348,"byte_end":491355,"line_start":330,"line_end":330,"column_start":6,"column_end":13},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":7759},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":501860,"byte_end":501870,"line_start":81,"line_end":81,"column_start":21,"column_end":31},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":7818},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":502471,"byte_end":502481,"line_start":96,"line_end":96,"column_start":23,"column_end":33},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":7818},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":503133,"byte_end":503143,"line_start":117,"line_end":117,"column_start":18,"column_end":28},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":7818},"to":{"krate":1,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":504151,"byte_end":504161,"line_start":164,"line_end":164,"column_start":6,"column_end":16},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":7829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/test_runner/runner.rs","byte_start":507747,"byte_end":507757,"line_start":293,"line_end":293,"column_start":6,"column_end":16},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":7818},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/tuple.rs","byte_start":546009,"byte_end":546023,"line_start":26,"line_end":26,"column_start":9,"column_end":23},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":7840},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":550844,"byte_end":550855,"line_start":35,"line_end":35,"column_start":18,"column_end":29},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":8053},"to":{"krate":1,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":550986,"byte_end":550997,"line_start":42,"line_end":42,"column_start":20,"column_end":31},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":8053},"to":{"krate":1,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":551225,"byte_end":551236,"line_start":53,"line_end":53,"column_start":6,"column_end":17},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":8053},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":553354,"byte_end":553366,"line_start":127,"line_end":127,"column_start":19,"column_end":31},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":1949},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":553441,"byte_end":553453,"line_start":132,"line_end":132,"column_start":18,"column_end":30},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":1949},"to":{"krate":1,"index":2055}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":553483,"byte_end":553495,"line_start":133,"line_end":133,"column_start":24,"column_end":36},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":1949},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":553635,"byte_end":553647,"line_start":138,"line_end":138,"column_start":34,"column_end":46},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":1949},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":553826,"byte_end":553838,"line_start":146,"line_end":146,"column_start":35,"column_end":47},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":1949},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/option.rs","byte_start":554976,"byte_end":554990,"line_start":181,"line_end":181,"column_start":47,"column_end":61},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":8084},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":558755,"byte_end":558761,"line_start":41,"line_end":41,"column_start":22,"column_end":28},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":1988},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":558842,"byte_end":558848,"line_start":46,"line_end":46,"column_start":21,"column_end":27},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":1988},"to":{"krate":1,"index":2055}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":558884,"byte_end":558890,"line_start":47,"line_end":47,"column_start":27,"column_end":33},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":1988},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":559051,"byte_end":559057,"line_start":52,"line_end":52,"column_start":58,"column_end":64},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":1988},"to":{"krate":0,"index":1492}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":559239,"byte_end":559246,"line_start":59,"line_end":59,"column_start":22,"column_end":29},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":2010},"to":{"krate":1,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":559327,"byte_end":559334,"line_start":64,"line_end":64,"column_start":21,"column_end":28},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":2010},"to":{"krate":1,"index":2055}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":559370,"byte_end":559377,"line_start":65,"line_end":65,"column_start":27,"column_end":34},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":2010},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":559539,"byte_end":559546,"line_start":70,"line_end":70,"column_start":58,"column_end":65},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":2010},"to":{"krate":0,"index":1492}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":561441,"byte_end":561448,"line_start":118,"line_end":118,"column_start":9,"column_end":16},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":8114},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/result.rs","byte_start":561643,"byte_end":561651,"line_start":125,"line_end":125,"column_start":9,"column_end":17},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":8149},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":568972,"byte_end":568983,"line_start":81,"line_end":81,"column_start":52,"column_end":63},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":8174},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":569527,"byte_end":569547,"line_start":100,"line_end":100,"column_start":53,"column_end":73},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":8184},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":570062,"byte_end":570073,"line_start":121,"line_end":121,"column_start":65,"column_end":76},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":8194},"to":{"krate":0,"index":1492}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":573433,"byte_end":573438,"line_start":215,"line_end":215,"column_start":6,"column_end":11},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":8235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":575125,"byte_end":575138,"line_start":269,"line_end":269,"column_start":6,"column_end":19},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":8259},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576750,"byte_end":576766,"line_start":331,"line_end":331,"column_start":6,"column_end":22},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":8283},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":576878,"byte_end":576894,"line_start":337,"line_end":337,"column_start":19,"column_end":35},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":8283},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":577207,"byte_end":577224,"line_start":349,"line_end":349,"column_start":20,"column_end":37},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":8287},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/sample.rs","byte_start":577633,"byte_end":577641,"line_start":368,"line_end":368,"column_start":6,"column_end":14},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":8276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":584435,"byte_end":584446,"line_start":45,"line_end":45,"column_start":29,"column_end":40},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":8292},"to":{"krate":1,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":584537,"byte_end":584548,"line_start":51,"line_end":51,"column_start":18,"column_end":29},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":8292},"to":{"krate":1,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":586776,"byte_end":586781,"line_start":118,"line_end":118,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2050},"to":{"krate":0,"index":2176}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":586789,"byte_end":586794,"line_start":118,"line_end":118,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":6599},"to":{"krate":0,"index":2176}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":586977,"byte_end":586983,"line_start":125,"line_end":125,"column_start":28,"column_end":34},"kind":{"Impl":{"id":334}},"from":{"krate":5,"index":5501},"to":{"krate":0,"index":2176}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":587161,"byte_end":587164,"line_start":133,"line_end":133,"column_start":28,"column_end":31},"kind":{"Impl":{"id":335}},"from":{"krate":5,"index":4754},"to":{"krate":0,"index":2176}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.9.4/src/string.rs","byte_start":591781,"byte_end":591791,"line_start":282,"line_end":282,"column_start":52,"column_end":62},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":2203},"to":{"krate":1,"index":5304}}]}