{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1","program":"/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","ena","/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=e3ceccd4259c015a","-C","extra-filename=-e3ceccd4259c015a","--out-dir","/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","-L","dependency=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","--extern","log=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/liblog-da34158c634c799b.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libena-e3ceccd4259c015a.rmeta"},"prelude":{"crate_id":{"name":"ena","disambiguator":[13144800139407249106,4652648976298980245]},"crate_root":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src","external_crates":[{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3710194649008989715,14559669089861450418]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9392975149979234998,17049149762166397483]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16512841426258775062,11665789721448774207]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10630307797325716480,16523273723520132349]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3264716338318844693,12681592148182797578]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[140397795414171834,1910274434865169512]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5557669672741662647,10322216614238315513]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14339503364484872598,13531520383629478599]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14161909693946419124,17554770295131960960]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9716880057120631437,4575334529379688610]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17190292700912465587,13293574150729131089]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[16973425767318922457,5762286362994384933]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[3049460603833016674,5895625007283919048]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[8971705811930800565,4802059752817986136]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[7414259369911982492,16117941559470048194]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":16,"id":{"name":"log","disambiguator":[14672335122730529813,15102547447802631915]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":17,"id":{"name":"cfg_if","disambiguator":[13347268434212277074,12294355231220403985]}}],"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","byte_start":467,"byte_end":719,"line_start":11,"line_end":23,"column_start":1,"column_end":15}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":238},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13205,"byte_end":13212,"line_start":39,"line_end":39,"column_start":29,"column_end":36},"alias_span":null,"name":"InPlace","value":"","parent":{"krate":0,"index":77}},{"kind":"Use","ref_id":{"krate":0,"index":93},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13214,"byte_end":13230,"line_start":39,"line_end":39,"column_start":38,"column_end":54},"alias_span":null,"name":"UnificationStore","value":"","parent":{"krate":0,"index":77}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","byte_start":467,"byte_end":719,"line_start":11,"line_end":23,"column_start":1,"column_end":15},"name":"","qualname":"::","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":77}],"decl_id":null,"docs":" An implementation of union-find. See the `unify` module for more\n details.\n","sig":null,"attributes":[{"value":"/ An implementation of union-find. See the `unify` module for more","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","byte_start":467,"byte_end":535,"line_start":11,"line_end":11,"column_start":1,"column_end":69}},{"value":"/ details.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","byte_start":536,"byte_end":548,"line_start":12,"line_end":12,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"snapshot_vec","qualname":"::snapshot_vec","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":223},{"krate":0,"index":235},{"krate":0,"index":9},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":48},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73}],"decl_id":null,"docs":" A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits\n you to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either\n to rollback to the start of the snapshot or commit those changes.","sig":null,"attributes":[{"value":"/ A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":1188,"byte_end":1287,"line_start":11,"line_end":11,"column_start":1,"column_end":100}},{"value":"/ you to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":1288,"byte_end":1387,"line_start":12,"line_end":12,"column_start":1,"column_end":100}},{"value":"/ to rollback to the start of the snapshot or commit those changes.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":1388,"byte_end":1457,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":1458,"byte_end":1461,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This vector is intended to be used as part of an abstraction, not serve as a complete","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":1462,"byte_end":1551,"line_start":15,"line_end":15,"column_start":1,"column_end":90}},{"value":"/ abstraction on its own. As such, while it will roll back most changes on its own, it also","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":1552,"byte_end":1645,"line_start":16,"line_end":16,"column_start":1,"column_end":94}},{"value":"/ supports a `get_mut` operation that gives you an arbitrary mutable pointer into the vector. To","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":1646,"byte_end":1744,"line_start":17,"line_end":17,"column_start":1,"column_end":99}},{"value":"/ ensure that any changes you make this with this pointer are rolled back, you must invoke","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":1745,"byte_end":1837,"line_start":18,"line_end":18,"column_start":1,"column_end":93}},{"value":"/ `record` to record any changes you make and also supplying a delegate capable of reversing","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":1838,"byte_end":1932,"line_start":19,"line_end":19,"column_start":1,"column_end":95}},{"value":"/ those changes.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":1933,"byte_end":1951,"line_start":20,"line_end":20,"column_start":1,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":225},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2134,"byte_end":2141,"line_start":31,"line_end":31,"column_start":5,"column_end":12},"name":"NewElem","qualname":"::snapshot_vec::UndoLog::NewElem","value":"UndoLog::NewElem(usize)","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" New variable with given index was created.\n","sig":null,"attributes":[{"value":"/ New variable with given index was created.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2083,"byte_end":2129,"line_start":30,"line_end":30,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":228},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2225,"byte_end":2232,"line_start":34,"line_end":34,"column_start":5,"column_end":12},"name":"SetElem","qualname":"::snapshot_vec::UndoLog::SetElem","value":"UndoLog::SetElem(usize, D::Value)","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" Variable with given index was changed *from* the given value.\n","sig":null,"attributes":[{"value":"/ Variable with given index was changed *from* the given value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2155,"byte_end":2220,"line_start":33,"line_end":33,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":232},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2290,"byte_end":2295,"line_start":37,"line_end":37,"column_start":5,"column_end":10},"name":"Other","qualname":"::snapshot_vec::UndoLog::Other","value":"UndoLog::Other(D::Undo)","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" Extensible set of actions\n","sig":null,"attributes":[{"value":"/ Extensible set of actions","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2256,"byte_end":2285,"line_start":36,"line_end":36,"column_start":5,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":223},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2045,"byte_end":2052,"line_start":29,"line_end":29,"column_start":10,"column_end":17},"name":"UndoLog","qualname":"::snapshot_vec::UndoLog","value":"pub enum UndoLog<D: SnapshotVecDelegate> {\n\n    /// New variable with given index was created.\n    NewElem(usize),\n\n    /// Variable with given index was changed *from* the given value.\n    SetElem(usize, D::Value),\n\n    /// Extensible set of actions\n    Other(D::Undo),\n}","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":228},{"krate":0,"index":232}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2320,"byte_end":2331,"line_start":40,"line_end":40,"column_start":12,"column_end":23},"name":"SnapshotVec","qualname":"::snapshot_vec::SnapshotVec","value":"SnapshotVec {  }","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2981,"byte_end":2989,"line_start":62,"line_end":62,"column_start":12,"column_end":20},"name":"Snapshot","qualname":"::snapshot_vec::Snapshot","value":"Snapshot {  }","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":20},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3187,"byte_end":3206,"line_start":69,"line_end":69,"column_start":11,"column_end":30},"name":"SnapshotVecDelegate","qualname":"::snapshot_vec::SnapshotVecDelegate","value":"SnapshotVecDelegate","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":21},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3218,"byte_end":3223,"line_start":70,"line_end":70,"column_start":10,"column_end":15},"name":"Value","qualname":"::snapshot_vec::SnapshotVecDelegate::Value","value":"type Value;","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":22},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3234,"byte_end":3238,"line_start":71,"line_end":71,"column_start":10,"column_end":14},"name":"Undo","qualname":"::snapshot_vec::SnapshotVecDelegate::Undo","value":"type Undo;","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3248,"byte_end":3255,"line_start":73,"line_end":73,"column_start":8,"column_end":15},"name":"reverse","qualname":"::snapshot_vec::SnapshotVecDelegate::reverse","value":"pub fn reverse(&mut Vec<Self::Value>, Self::Undo)","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3653,"byte_end":3656,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"new","qualname":"<SnapshotVec<D>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3711,"byte_end":3724,"line_start":92,"line_end":92,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<SnapshotVec<D>>::with_capacity","value":"pub fn with_capacity(usize) -> SnapshotVec<D>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3996,"byte_end":4002,"line_start":104,"line_end":104,"column_start":12,"column_end":18},"name":"record","qualname":"<SnapshotVec<D>>::record","value":"pub fn record(&mut Self, D::Undo)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":4140,"byte_end":4143,"line_start":110,"line_end":110,"column_start":12,"column_end":15},"name":"len","qualname":"<SnapshotVec<D>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":4206,"byte_end":4210,"line_start":114,"line_end":114,"column_start":12,"column_end":16},"name":"push","qualname":"<SnapshotVec<D>>::push","value":"pub fn push(&mut Self, D::Value) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":4438,"byte_end":4441,"line_start":125,"line_end":125,"column_start":12,"column_end":15},"name":"get","qualname":"<SnapshotVec<D>>::get","value":"pub fn get(&Self, usize) -> &D::Value","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":4589,"byte_end":4596,"line_start":130,"line_end":130,"column_start":12,"column_end":19},"name":"reserve","qualname":"<SnapshotVec<D>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve space for new values, just like an ordinary vec.\n","sig":null,"attributes":[{"value":"/ Reserve space for new values, just like an ordinary vec.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":4517,"byte_end":4577,"line_start":129,"line_end":129,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":4951,"byte_end":4958,"line_start":138,"line_end":138,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<SnapshotVec<D>>::get_mut","value":"pub fn get_mut(&mut Self, usize) -> &mut D::Value","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\n automatically, so you should be sure call `record()` with some sort of suitable undo\n action.\n","sig":null,"attributes":[{"value":"/ Returns a mutable pointer into the vec; whatever changes you make here cannot be undone","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":4739,"byte_end":4830,"line_start":135,"line_end":135,"column_start":5,"column_end":96}},{"value":"/ automatically, so you should be sure call `record()` with some sort of suitable undo","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":4835,"byte_end":4923,"line_start":136,"line_end":136,"column_start":5,"column_end":93}},{"value":"/ action.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":4928,"byte_end":4939,"line_start":137,"line_end":137,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":5182,"byte_end":5185,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"set","qualname":"<SnapshotVec<D>>::set","value":"pub fn set(&mut Self, usize, D::Value)","parent":null,"children":[],"decl_id":null,"docs":" Updates the element at the given index. The old value will saved (and perhaps restored) if\n a snapshot is active.\n","sig":null,"attributes":[{"value":"/ Updates the element at the given index. The old value will saved (and perhaps restored) if","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":5046,"byte_end":5140,"line_start":142,"line_end":142,"column_start":5,"column_end":99}},{"value":"/ a snapshot is active.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":5145,"byte_end":5170,"line_start":143,"line_end":143,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":5555,"byte_end":5562,"line_start":153,"line_end":153,"column_start":12,"column_end":19},"name":"set_all","qualname":"<SnapshotVec<D>>::set_all","value":"pub fn set_all<impl FnMut(usize) -> D::Value: FnMut(usize) ->\n               D::Value>(&mut Self, impl FnMut(usize) -> D::Value)","parent":null,"children":[],"decl_id":null,"docs":" Updates all elements. Potentially more efficient -- but\n otherwise equivalent to -- invoking `set` for each element.\n","sig":null,"attributes":[{"value":"/ Updates all elements. Potentially more efficient -- but","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":5416,"byte_end":5475,"line_start":151,"line_end":151,"column_start":5,"column_end":64}},{"value":"/ otherwise equivalent to -- invoking `set` for each element.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":5480,"byte_end":5543,"line_start":152,"line_end":152,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":5927,"byte_end":5933,"line_start":165,"line_end":165,"column_start":12,"column_end":18},"name":"update","qualname":"<SnapshotVec<D>>::update","value":"pub fn update<OP>(&mut Self, usize, OP) where OP: FnOnce(&mut D::Value) -> (),\nD::Value: Clone","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":6257,"byte_end":6271,"line_start":177,"line_end":177,"column_start":12,"column_end":26},"name":"start_snapshot","qualname":"<SnapshotVec<D>>::start_snapshot","value":"pub fn start_snapshot(&mut Self) -> Snapshot","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":6469,"byte_end":6491,"line_start":185,"line_end":185,"column_start":12,"column_end":34},"name":"actions_since_snapshot","qualname":"<SnapshotVec<D>>::actions_since_snapshot","value":"pub fn actions_since_snapshot(&Self, &Snapshot) -> &[UndoLog<D>]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":6849,"byte_end":6860,"line_start":195,"line_end":195,"column_start":12,"column_end":23},"name":"rollback_to","qualname":"<SnapshotVec<D>>::rollback_to","value":"pub fn rollback_to(&mut Self, Snapshot)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":7653,"byte_end":7659,"line_start":222,"line_end":222,"column_start":12,"column_end":18},"name":"commit","qualname":"<SnapshotVec<D>>::commit","value":"pub fn commit(&mut Self, Snapshot)","parent":null,"children":[],"decl_id":null,"docs":" Commits all changes since the last snapshot. Of course, they\n can still be undone if there is a snapshot further out.\n","sig":null,"attributes":[{"value":"/ Commits all changes since the last snapshot. Of course, they","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":7513,"byte_end":7577,"line_start":220,"line_end":220,"column_start":5,"column_end":69}},{"value":"/ can still be undone if there is a snapshot further out.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":7582,"byte_end":7641,"line_start":221,"line_end":221,"column_start":5,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":77},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unify","qualname":"::unify","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":300},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":259},{"krate":0,"index":261},{"krate":0,"index":263},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":271},{"krate":0,"index":268},{"krate":0,"index":280},{"krate":0,"index":289},{"krate":0,"index":286},{"krate":0,"index":283},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":161},{"krate":0,"index":169},{"krate":0,"index":192},{"krate":0,"index":216},{"krate":0,"index":219}],"decl_id":null,"docs":" Union-find implementation. The main type is `UnificationTable`.","sig":null,"attributes":[{"value":"/ Union-find implementation. The main type is `UnificationTable`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":11993,"byte_end":12060,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12061,"byte_end":12064,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ You can define your own type for the *keys* in the table, but you","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12065,"byte_end":12134,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"/ must implement `UnifyKey` for that type. The assumption is that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12135,"byte_end":12202,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ keys will be newtyped integers, hence we require that they","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12203,"byte_end":12265,"line_start":15,"line_end":15,"column_start":1,"column_end":63}},{"value":"/ implement `Copy`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12266,"byte_end":12287,"line_start":16,"line_end":16,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12288,"byte_end":12291,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Keys can have values associated with them. The assumption is that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12292,"byte_end":12361,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/ these values are cheaply cloneable (ideally, `Copy`), and some of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12362,"byte_end":12431,"line_start":19,"line_end":19,"column_start":1,"column_end":70}},{"value":"/ the interfaces are oriented around that assumption. If you just","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12432,"byte_end":12499,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/ want the classical \"union-find\" algorithm where you group things","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12500,"byte_end":12568,"line_start":21,"line_end":21,"column_start":1,"column_end":69}},{"value":"/ into sets, use the `Value` type of `()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12569,"byte_end":12613,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12614,"byte_end":12617,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ When you have keys with non-trivial values, you must also define","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12618,"byte_end":12686,"line_start":24,"line_end":24,"column_start":1,"column_end":69}},{"value":"/ how those values can be merged. As part of doing this, you can","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12687,"byte_end":12753,"line_start":25,"line_end":25,"column_start":1,"column_end":67}},{"value":"/ define the \"error\" type to return on error; if errors are not","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12754,"byte_end":12819,"line_start":26,"line_end":26,"column_start":1,"column_end":66}},{"value":"/ possible, use `NoError` (an uninstantiable struct). Using this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12820,"byte_end":12886,"line_start":27,"line_end":27,"column_start":1,"column_end":67}},{"value":"/ type also unlocks various more ergonomic methods (e.g., `union()`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12887,"byte_end":12956,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/ in place of `unify_var_var()`).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12957,"byte_end":12992,"line_start":29,"line_end":29,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12993,"byte_end":12996,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ The best way to see how it is used is to read the `tests.rs` file;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":12997,"byte_end":13067,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ search for e.g. `UnitKey`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13068,"byte_end":13098,"line_start":32,"line_end":32,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":93},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32107,"byte_end":32123,"line_start":16,"line_end":16,"column_start":11,"column_end":27},"name":"UnificationStore","qualname":"::unify::backing_vec::UnificationStore","value":"UnificationStore: ops::Index<usize, Output = VarValue<Key<Self>>> + Clone + Default","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":108}],"decl_id":null,"docs":" Largely internal trait implemented by the unification table\n backing store types. The most common such type is `InPlace`,\n which indicates a standard, mutable unification table.\n","sig":null,"attributes":[{"value":"/ Largely internal trait implemented by the unification table","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":31909,"byte_end":31972,"line_start":13,"line_end":13,"column_start":1,"column_end":64}},{"value":"/ backing store types. The most common such type is `InPlace`,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":31973,"byte_end":32037,"line_start":14,"line_end":14,"column_start":1,"column_end":65}},{"value":"/ which indicates a standard, mutable unification table.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32038,"byte_end":32096,"line_start":15,"line_end":15,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":94},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32206,"byte_end":32209,"line_start":19,"line_end":19,"column_start":10,"column_end":13},"name":"Key","qualname":"::unify::backing_vec::UnificationStore::Key","value":"type Key: UnifyKey<Value = Self::Value>;","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":95},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32251,"byte_end":32256,"line_start":20,"line_end":20,"column_start":10,"column_end":15},"name":"Value","qualname":"::unify::backing_vec::UnificationStore::Value","value":"type Value: UnifyValue;","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":96},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32279,"byte_end":32287,"line_start":21,"line_end":21,"column_start":10,"column_end":18},"name":"Snapshot","qualname":"::unify::backing_vec::UnificationStore::Snapshot","value":"type Snapshot;","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32297,"byte_end":32311,"line_start":23,"line_end":23,"column_start":8,"column_end":22},"name":"start_snapshot","qualname":"::unify::backing_vec::UnificationStore::start_snapshot","value":"pub fn start_snapshot(&mut Self) -> Self::Snapshot","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32350,"byte_end":32361,"line_start":25,"line_end":25,"column_start":8,"column_end":19},"name":"rollback_to","qualname":"::unify::backing_vec::UnificationStore::rollback_to","value":"pub fn rollback_to(&mut Self, Self::Snapshot)","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32408,"byte_end":32414,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"commit","qualname":"::unify::backing_vec::UnificationStore::commit","value":"pub fn commit(&mut Self, Self::Snapshot)","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32461,"byte_end":32482,"line_start":29,"line_end":29,"column_start":8,"column_end":29},"name":"values_since_snapshot","qualname":"::unify::backing_vec::UnificationStore::values_since_snapshot","value":"pub fn values_since_snapshot(&Self, &Self::Snapshot) -> Range<usize>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32542,"byte_end":32560,"line_start":31,"line_end":31,"column_start":8,"column_end":26},"name":"reset_unifications","qualname":"::unify::backing_vec::UnificationStore::reset_unifications","value":"pub fn reset_unifications<impl FnMut(u32) -> VarValue<Self::Key>: FnMut(u32)\n                          ->\n                          VarValue<Self::Key>>(&mut Self,\n                                               impl FnMut(u32) -> VarValue<Self::Key>)","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32651,"byte_end":32654,"line_start":36,"line_end":36,"column_start":8,"column_end":11},"name":"len","qualname":"::unify::backing_vec::UnificationStore::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32680,"byte_end":32684,"line_start":38,"line_end":38,"column_start":8,"column_end":12},"name":"push","qualname":"::unify::backing_vec::UnificationStore::push","value":"pub fn push(&mut Self, VarValue<Self::Key>)","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32733,"byte_end":32740,"line_start":40,"line_end":40,"column_start":8,"column_end":15},"name":"reserve","qualname":"::unify::backing_vec::UnificationStore::reserve","value":"pub fn reserve(&mut Self, usize)","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32784,"byte_end":32790,"line_start":42,"line_end":42,"column_start":8,"column_end":14},"name":"update","qualname":"::unify::backing_vec::UnificationStore::update","value":"pub fn update<F>(&mut Self, usize, F) where\nF: FnOnce(&mut VarValue<Self::Key>) -> ()","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32885,"byte_end":32888,"line_start":45,"line_end":45,"column_start":8,"column_end":11},"name":"tag","qualname":"::unify::backing_vec::UnificationStore::tag","value":"pub fn tag() -> &'static str","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":238},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":33064,"byte_end":33071,"line_start":53,"line_end":53,"column_start":12,"column_end":19},"name":"InPlace","qualname":"::unify::backing_vec::InPlace","value":"InPlace {  }","parent":null,"children":[{"krate":0,"index":240}],"decl_id":null,"docs":" Backing store for an in-place unification table.\n Not typically used directly.\n","sig":null,"attributes":[{"value":"/ Backing store for an in-place unification table.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32943,"byte_end":32995,"line_start":50,"line_end":50,"column_start":1,"column_end":53}},{"value":"/ Not typically used directly.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32996,"byte_end":33028,"line_start":51,"line_end":51,"column_start":1,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":141},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13867,"byte_end":13875,"line_start":59,"line_end":59,"column_start":11,"column_end":19},"name":"UnifyKey","qualname":"::unify::UnifyKey","value":"UnifyKey: Copy + Clone + Debug + PartialEq","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146}],"decl_id":null,"docs":" This trait is implemented by any type that can serve as a type\n variable. We call such variables *unification keys*. For example,\n this trait is implemented by `IntVid`, which represents integral\n variables.","sig":null,"attributes":[{"value":"/ This trait is implemented by any type that can serve as a type","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13331,"byte_end":13397,"line_start":48,"line_end":48,"column_start":1,"column_end":67}},{"value":"/ variable. We call such variables *unification keys*. For example,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13398,"byte_end":13467,"line_start":49,"line_end":49,"column_start":1,"column_end":70}},{"value":"/ this trait is implemented by `IntVid`, which represents integral","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13468,"byte_end":13536,"line_start":50,"line_end":50,"column_start":1,"column_end":69}},{"value":"/ variables.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13537,"byte_end":13551,"line_start":51,"line_end":51,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13552,"byte_end":13555,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ Each key type has an associated value type `V`. For example, for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13556,"byte_end":13624,"line_start":53,"line_end":53,"column_start":1,"column_end":69}},{"value":"/ `IntVid`, this is `Option<IntVarValue>`, representing some","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13625,"byte_end":13687,"line_start":54,"line_end":54,"column_start":1,"column_end":63}},{"value":"/ (possibly not yet known) sort of integer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13688,"byte_end":13733,"line_start":55,"line_end":55,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13734,"byte_end":13737,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Clients are expected to provide implementations of this trait; you","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13738,"byte_end":13808,"line_start":57,"line_end":57,"column_start":1,"column_end":71}},{"value":"/ can see some examples in the `test` module.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13809,"byte_end":13856,"line_start":58,"line_end":58,"column_start":1,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":142},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13921,"byte_end":13926,"line_start":60,"line_end":60,"column_start":10,"column_end":15},"name":"Value","qualname":"::unify::UnifyKey::Value","value":"type Value: UnifyValue;","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13948,"byte_end":13953,"line_start":62,"line_end":62,"column_start":8,"column_end":13},"name":"index","qualname":"::unify::UnifyKey::index","value":"pub fn index(&Self) -> u32","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13977,"byte_end":13987,"line_start":64,"line_end":64,"column_start":8,"column_end":18},"name":"from_index","qualname":"::unify::UnifyKey::from_index","value":"pub fn from_index(u32) -> Self","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14013,"byte_end":14016,"line_start":66,"line_end":66,"column_start":8,"column_end":11},"name":"tag","qualname":"::unify::UnifyKey::tag","value":"pub fn tag() -> &'static str","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14824,"byte_end":14835,"line_start":82,"line_end":82,"column_start":8,"column_end":19},"name":"order_roots","qualname":"::unify::UnifyKey::order_roots","value":"pub fn order_roots(Self, &Self::Value, Self, &Self::Value)\n-> Option<(Self, Self)>","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" If true, then `self` should be preferred as root to `other`.\n Note that we assume a consistent partial ordering, so\n returning true implies that `other.prefer_as_root_to(self)`\n would return false.  If there is no ordering between two keys\n (i.e., `a.prefer_as_root_to(b)` and `b.prefer_as_root_to(a)`\n both return false) then the rank will be used to determine the\n root in an optimal way.","sig":null,"attributes":[{"value":"/ If true, then `self` should be preferred as root to `other`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14041,"byte_end":14105,"line_start":68,"line_end":68,"column_start":5,"column_end":69}},{"value":"/ Note that we assume a consistent partial ordering, so","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14110,"byte_end":14167,"line_start":69,"line_end":69,"column_start":5,"column_end":62}},{"value":"/ returning true implies that `other.prefer_as_root_to(self)`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14172,"byte_end":14235,"line_start":70,"line_end":70,"column_start":5,"column_end":68}},{"value":"/ would return false.  If there is no ordering between two keys","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14240,"byte_end":14305,"line_start":71,"line_end":71,"column_start":5,"column_end":70}},{"value":"/ (i.e., `a.prefer_as_root_to(b)` and `b.prefer_as_root_to(a)`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14310,"byte_end":14374,"line_start":72,"line_end":72,"column_start":5,"column_end":69}},{"value":"/ both return false) then the rank will be used to determine the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14379,"byte_end":14445,"line_start":73,"line_end":73,"column_start":5,"column_end":71}},{"value":"/ root in an optimal way.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14450,"byte_end":14477,"line_start":74,"line_end":74,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14482,"byte_end":14485,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ NB. The only reason to implement this method is if you want to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14490,"byte_end":14556,"line_start":76,"line_end":76,"column_start":5,"column_end":71}},{"value":"/ control what value is returned from `find()`. In general, it","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14561,"byte_end":14625,"line_start":77,"line_end":77,"column_start":5,"column_end":69}},{"value":"/ is better to let the unification table determine the root,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14630,"byte_end":14692,"line_start":78,"line_end":78,"column_start":5,"column_end":67}},{"value":"/ since overriding the rank can cause execution time to increase","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14697,"byte_end":14763,"line_start":79,"line_end":79,"column_start":5,"column_end":71}},{"value":"/ dramatically.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14768,"byte_end":14785,"line_start":80,"line_end":80,"column_start":5,"column_end":22}},{"value":"allow(unused_variables)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14790,"byte_end":14816,"line_start":81,"line_end":81,"column_start":5,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":147},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15718,"byte_end":15728,"line_start":106,"line_end":106,"column_start":11,"column_end":21},"name":"UnifyValue","qualname":"::unify::UnifyValue","value":"UnifyValue: Clone + Debug","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149}],"decl_id":null,"docs":" Trait implemented for **values** associated with a unification\n key. This trait defines how to merge the values from two keys that\n are unioned together. This merging can be fallible. If you attempt\n to union two keys whose values cannot be merged, then the error is\n propagated up and the two keys are not unioned.","sig":null,"attributes":[{"value":"/ Trait implemented for **values** associated with a unification","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14987,"byte_end":15053,"line_start":92,"line_end":92,"column_start":1,"column_end":67}},{"value":"/ key. This trait defines how to merge the values from two keys that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15054,"byte_end":15124,"line_start":93,"line_end":93,"column_start":1,"column_end":71}},{"value":"/ are unioned together. This merging can be fallible. If you attempt","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15125,"byte_end":15195,"line_start":94,"line_end":94,"column_start":1,"column_end":71}},{"value":"/ to union two keys whose values cannot be merged, then the error is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15196,"byte_end":15266,"line_start":95,"line_end":95,"column_start":1,"column_end":71}},{"value":"/ propagated up and the two keys are not unioned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15267,"byte_end":15318,"line_start":96,"line_end":96,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15319,"byte_end":15322,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ This crate provides implementations of `UnifyValue` for `()`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15323,"byte_end":15387,"line_start":98,"line_end":98,"column_start":1,"column_end":65}},{"value":"/ (which is infallible) and `Option<T>` (where `T: UnifyValue`). The","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15388,"byte_end":15458,"line_start":99,"line_end":99,"column_start":1,"column_end":71}},{"value":"/ option implementation merges two sum-values using the `UnifyValue`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15459,"byte_end":15529,"line_start":100,"line_end":100,"column_start":1,"column_end":71}},{"value":"/ implementation of `T`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15530,"byte_end":15556,"line_start":101,"line_end":101,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15557,"byte_end":15560,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ See also `EqUnifyValue`, which is a convenience trait for cases","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15561,"byte_end":15628,"line_start":103,"line_end":103,"column_start":1,"column_end":68}},{"value":"/ where the \"merge\" operation succeeds only if the two values are","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15629,"byte_end":15696,"line_start":104,"line_end":104,"column_start":1,"column_end":68}},{"value":"/ equal.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15697,"byte_end":15707,"line_start":105,"line_end":105,"column_start":1,"column_end":11}}]},{"kind":"Type","id":{"krate":0,"index":148},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16000,"byte_end":16005,"line_start":111,"line_end":111,"column_start":10,"column_end":15},"name":"Error","qualname":"::unify::UnifyValue::Error","value":"type Error;","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" Defines the type to return when merging of two values fails.\n If merging is infallible, use the special struct `NoError`\n found in this crate, which unlocks various more convenient\n methods on the unification table.\n","sig":null,"attributes":[{"value":"/ Defines the type to return when merging of two values fails.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15750,"byte_end":15814,"line_start":107,"line_end":107,"column_start":5,"column_end":69}},{"value":"/ If merging is infallible, use the special struct `NoError`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15819,"byte_end":15881,"line_start":108,"line_end":108,"column_start":5,"column_end":67}},{"value":"/ found in this crate, which unlocks various more convenient","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15886,"byte_end":15948,"line_start":109,"line_end":109,"column_start":5,"column_end":67}},{"value":"/ methods on the unification table.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15953,"byte_end":15990,"line_start":110,"line_end":110,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16132,"byte_end":16144,"line_start":115,"line_end":115,"column_start":8,"column_end":20},"name":"unify_values","qualname":"::unify::UnifyValue::unify_values","value":"pub fn unify_values(&Self, &Self) -> Result<Self, Self::Error>","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" Given two values, produce a new value that combines them.\n If that is not possible, produce an error.\n","sig":null,"attributes":[{"value":"/ Given two values, produce a new value that combines them.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16012,"byte_end":16073,"line_start":113,"line_end":113,"column_start":5,"column_end":66}},{"value":"/ If that is not possible, produce an error.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16078,"byte_end":16124,"line_start":114,"line_end":114,"column_start":5,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":150},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16816,"byte_end":16828,"line_start":129,"line_end":129,"column_start":11,"column_end":23},"name":"EqUnifyValue","qualname":"::unify::EqUnifyValue","value":"EqUnifyValue: Eq + Clone + Debug","parent":null,"children":[],"decl_id":null,"docs":" A convenient helper for unification values which must be equal or\n else an error occurs. For example, if you are unifying types in a\n simple functional language, this may be appropriate, since (e.g.)\n you can't unify a type variable bound to `int` with one bound to\n `float` (but you can unify two type variables both bound to\n `int`).","sig":null,"attributes":[{"value":"/ A convenient helper for unification values which must be equal or","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16208,"byte_end":16277,"line_start":118,"line_end":118,"column_start":1,"column_end":70}},{"value":"/ else an error occurs. For example, if you are unifying types in a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16278,"byte_end":16347,"line_start":119,"line_end":119,"column_start":1,"column_end":70}},{"value":"/ simple functional language, this may be appropriate, since (e.g.)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16348,"byte_end":16417,"line_start":120,"line_end":120,"column_start":1,"column_end":70}},{"value":"/ you can't unify a type variable bound to `int` with one bound to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16418,"byte_end":16486,"line_start":121,"line_end":121,"column_start":1,"column_end":69}},{"value":"/ `float` (but you can unify two type variables both bound to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16487,"byte_end":16550,"line_start":122,"line_end":122,"column_start":1,"column_end":64}},{"value":"/ `int`).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16551,"byte_end":16562,"line_start":123,"line_end":123,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16563,"byte_end":16566,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ Any type which implements `EqUnifyValue` automatially implements","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16567,"byte_end":16635,"line_start":125,"line_end":125,"column_start":1,"column_end":69}},{"value":"/ `UnifyValue`; if the two values are equal, merging is permitted.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16636,"byte_end":16704,"line_start":126,"line_end":126,"column_start":1,"column_end":69}},{"value":"/ Otherwise, the error `(v1, v2)` is returned, where `v1` and `v2`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16705,"byte_end":16773,"line_start":127,"line_end":127,"column_start":1,"column_end":69}},{"value":"/ are the two unequal values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16774,"byte_end":16805,"line_start":128,"line_end":128,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":259},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":17272,"byte_end":17279,"line_start":146,"line_end":146,"column_start":12,"column_end":19},"name":"NoError","qualname":"::unify::NoError","value":"NoError {  }","parent":null,"children":[{"krate":0,"index":260}],"decl_id":null,"docs":" A struct which can never be instantiated. Used\n for the error type for infallible cases.\n","sig":null,"attributes":[{"value":"/ A struct which can never be instantiated. Used","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":17148,"byte_end":17198,"line_start":143,"line_end":143,"column_start":1,"column_end":51}},{"value":"/ for the error type for infallible cases.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":17199,"byte_end":17243,"line_start":144,"line_end":144,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":263},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":17888,"byte_end":17896,"line_start":159,"line_end":159,"column_start":12,"column_end":20},"name":"VarValue","qualname":"::unify::VarValue","value":"VarValue {  }","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267}],"decl_id":null,"docs":" Value of a unification key. We implement Tarjan's union-find\n algorithm: when two keys are unified, one of them is converted\n into a \"redirect\" pointing at the other. These redirects form a\n DAG: the roots of the DAG (nodes that are not redirected) are each\n associated with a value of type `V` and a rank. The rank is used\n to keep the DAG relatively balanced, which helps keep the running\n time of the algorithm under control. For more information, see\n <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>.\n","sig":null,"attributes":[{"value":"/ Value of a unification key. We implement Tarjan's union-find","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":17301,"byte_end":17365,"line_start":150,"line_end":150,"column_start":1,"column_end":65}},{"value":"/ algorithm: when two keys are unified, one of them is converted","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":17366,"byte_end":17432,"line_start":151,"line_end":151,"column_start":1,"column_end":67}},{"value":"/ into a \"redirect\" pointing at the other. These redirects form a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":17433,"byte_end":17500,"line_start":152,"line_end":152,"column_start":1,"column_end":68}},{"value":"/ DAG: the roots of the DAG (nodes that are not redirected) are each","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":17501,"byte_end":17571,"line_start":153,"line_end":153,"column_start":1,"column_end":71}},{"value":"/ associated with a value of type `V` and a rank. The rank is used","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":17572,"byte_end":17640,"line_start":154,"line_end":154,"column_start":1,"column_end":69}},{"value":"/ to keep the DAG relatively balanced, which helps keep the running","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":17641,"byte_end":17710,"line_start":155,"line_end":155,"column_start":1,"column_end":70}},{"value":"/ time of the algorithm under control. For more information, see","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":17711,"byte_end":17777,"line_start":156,"line_end":156,"column_start":1,"column_end":67}},{"value":"/ <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":17778,"byte_end":17841,"line_start":157,"line_end":157,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":280},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":18938,"byte_end":18954,"line_start":179,"line_end":179,"column_start":12,"column_end":28},"name":"UnificationTable","qualname":"::unify::UnificationTable","value":"UnificationTable {  }","parent":null,"children":[{"krate":0,"index":282}],"decl_id":null,"docs":" Table of unification keys and their values. You must define a key type K\n that implements the `UnifyKey` trait. Unification tables can be used in two-modes:","sig":null,"attributes":[{"value":"/ Table of unification keys and their values. You must define a key type K","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":18094,"byte_end":18170,"line_start":165,"line_end":165,"column_start":1,"column_end":77}},{"value":"/ that implements the `UnifyKey` trait. Unification tables can be used in two-modes:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":18171,"byte_end":18257,"line_start":166,"line_end":166,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":18258,"byte_end":18261,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ - in-place (`UnificationTable<InPlace<K>>` or `InPlaceUnificationTable<K>`):","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":18262,"byte_end":18342,"line_start":168,"line_end":168,"column_start":1,"column_end":81}},{"value":"/   - This is the standard mutable mode, where the array is modified","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":18343,"byte_end":18413,"line_start":169,"line_end":169,"column_start":1,"column_end":71}},{"value":"/     in place.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":18414,"byte_end":18431,"line_start":170,"line_end":170,"column_start":1,"column_end":18}},{"value":"/   - To do backtracking, you can employ the `snapshot` and `rollback_to`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":18432,"byte_end":18507,"line_start":171,"line_end":171,"column_start":1,"column_end":76}},{"value":"/     methods.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":18508,"byte_end":18524,"line_start":172,"line_end":172,"column_start":1,"column_end":17}},{"value":"/ - persistent (`UnificationTable<Persistent<K>>` or `PersistentUnificationTable<K>`):","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":18525,"byte_end":18613,"line_start":173,"line_end":173,"column_start":1,"column_end":89}},{"value":"/   - In this mode, we use a persistent vector to store the data, so that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":18614,"byte_end":18689,"line_start":174,"line_end":174,"column_start":1,"column_end":76}},{"value":"/     cloning the table is an O(1) operation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":18690,"byte_end":18737,"line_start":175,"line_end":175,"column_start":1,"column_end":48}},{"value":"/   - This implies that ordinary operations are quite a bit slower though.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":18738,"byte_end":18814,"line_start":176,"line_end":176,"column_start":1,"column_end":77}},{"value":"/   - Requires the `persistent` feature be selected in your Cargo.toml file.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":18815,"byte_end":18893,"line_start":177,"line_end":177,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":155},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":19138,"byte_end":19161,"line_start":186,"line_end":186,"column_start":10,"column_end":33},"name":"InPlaceUnificationTable","qualname":"::unify::InPlaceUnificationTable","value":"UnificationTable<InPlace<K>>","parent":null,"children":[],"decl_id":null,"docs":" A unification table that uses an \"in-place\" vector.\n","sig":null,"attributes":[{"value":"/ A unification table that uses an \"in-place\" vector.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":19045,"byte_end":19100,"line_start":184,"line_end":184,"column_start":1,"column_end":56}},{"value":"allow(type_alias_bounds)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":19101,"byte_end":19128,"line_start":185,"line_end":185,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":157},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":19563,"byte_end":19571,"line_start":195,"line_end":195,"column_start":12,"column_end":20},"name":"Snapshot","qualname":"::unify::Snapshot","value":"Snapshot {  }","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160}],"decl_id":null,"docs":" At any time, users may snapshot a unification table.  The changes\n made during the snapshot may either be *committed* or *rolled back*.\n","sig":null,"attributes":[{"value":"/ At any time, users may snapshot a unification table.  The changes","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":19409,"byte_end":19478,"line_start":193,"line_end":193,"column_start":1,"column_end":70}},{"value":"/ made during the snapshot may either be *committed* or *rolled back*.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":19479,"byte_end":19551,"line_start":194,"line_end":194,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":20770,"byte_end":20773,"line_start":242,"line_end":242,"column_start":12,"column_end":15},"name":"new","qualname":"<UnificationTable<S>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":20948,"byte_end":20956,"line_start":248,"line_end":248,"column_start":12,"column_end":20},"name":"snapshot","qualname":"<UnificationTable<S>>::snapshot","value":"pub fn snapshot(&mut Self) -> Snapshot<S>","parent":null,"children":[],"decl_id":null,"docs":" Starts a new snapshot. Each snapshot must be either\n rolled back or committed in a \"LIFO\" (stack) order.\n","sig":null,"attributes":[{"value":"/ Starts a new snapshot. Each snapshot must be either","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":20821,"byte_end":20876,"line_start":246,"line_end":246,"column_start":5,"column_end":60}},{"value":"/ rolled back or committed in a \"LIFO\" (stack) order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":20881,"byte_end":20936,"line_start":247,"line_end":247,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":21249,"byte_end":21260,"line_start":257,"line_end":257,"column_start":12,"column_end":23},"name":"rollback_to","qualname":"<UnificationTable<S>>::rollback_to","value":"pub fn rollback_to(&mut Self, Snapshot<S>)","parent":null,"children":[],"decl_id":null,"docs":" Reverses all changes since the last snapshot. Also\n removes any keys that have been created since then.\n","sig":null,"attributes":[{"value":"/ Reverses all changes since the last snapshot. Also","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":21123,"byte_end":21177,"line_start":255,"line_end":255,"column_start":5,"column_end":59}},{"value":"/ removes any keys that have been created since then.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":21182,"byte_end":21237,"line_start":256,"line_end":256,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":21547,"byte_end":21553,"line_start":264,"line_end":264,"column_start":12,"column_end":18},"name":"commit","qualname":"<UnificationTable<S>>::commit","value":"pub fn commit(&mut Self, Snapshot<S>)","parent":null,"children":[],"decl_id":null,"docs":" Commits all changes since the last snapshot. Of course, they\n can still be undone if there is a snapshot further out.\n","sig":null,"attributes":[{"value":"/ Commits all changes since the last snapshot. Of course, they","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":21407,"byte_end":21471,"line_start":262,"line_end":262,"column_start":5,"column_end":69}},{"value":"/ can still be undone if there is a snapshot further out.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":21476,"byte_end":21535,"line_start":263,"line_end":263,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":21747,"byte_end":21754,"line_start":270,"line_end":270,"column_start":12,"column_end":19},"name":"new_key","qualname":"<UnificationTable<S>>::new_key","value":"pub fn new_key(&mut Self, S::Value) -> S::Key","parent":null,"children":[],"decl_id":null,"docs":" Creates a fresh key with the given value.\n","sig":null,"attributes":[{"value":"/ Creates a fresh key with the given value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":21690,"byte_end":21735,"line_start":269,"line_end":269,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":22175,"byte_end":22182,"line_start":280,"line_end":280,"column_start":12,"column_end":19},"name":"reserve","qualname":"<UnificationTable<S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve memory for `num_new_keys` to be created. Does not\n actually create the new keys; you must then invoke `new_key`.\n","sig":null,"attributes":[{"value":"/ Reserve memory for `num_new_keys` to be created. Does not","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":22032,"byte_end":22093,"line_start":278,"line_end":278,"column_start":5,"column_end":66}},{"value":"/ actually create the new keys; you must then invoke `new_key`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":22098,"byte_end":22163,"line_start":279,"line_end":279,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":22438,"byte_end":22456,"line_start":287,"line_end":287,"column_start":12,"column_end":30},"name":"reset_unifications","qualname":"<UnificationTable<S>>::reset_unifications","value":"pub fn reset_unifications<impl FnMut(S::Key) -> S::Value: FnMut(S::Key) ->\n                          S::Value>(&mut Self, impl FnMut(S::Key) -> S::Value)","parent":null,"children":[],"decl_id":null,"docs":" Clears all unifications that have been performed, resetting to\n the initial state. The values of each variable are given by\n the closure.\n","sig":null,"attributes":[{"value":"/ Clears all unifications that have been performed, resetting to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":22271,"byte_end":22337,"line_start":284,"line_end":284,"column_start":5,"column_end":71}},{"value":"/ the initial state. The values of each variable are given by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":22342,"byte_end":22405,"line_start":285,"line_end":285,"column_start":5,"column_end":68}},{"value":"/ the closure.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":22410,"byte_end":22426,"line_start":286,"line_end":286,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":22794,"byte_end":22797,"line_start":299,"line_end":299,"column_start":12,"column_end":15},"name":"len","qualname":"<UnificationTable<S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of keys created so far.\n","sig":null,"attributes":[{"value":"/ Returns the number of keys created so far.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":22736,"byte_end":22782,"line_start":298,"line_end":298,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":22932,"byte_end":22951,"line_start":304,"line_end":304,"column_start":12,"column_end":31},"name":"vars_since_snapshot","qualname":"<UnificationTable<S>>::vars_since_snapshot","value":"pub fn vars_since_snapshot(&Self, &Snapshot<S>) -> Range<S::Key>","parent":null,"children":[],"decl_id":null,"docs":" Returns the keys of all variables created since the `snapshot`.\n","sig":null,"attributes":[{"value":"/ Returns the keys of all variables created since the `snapshot`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":22853,"byte_end":22920,"line_start":303,"line_end":303,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":28100,"byte_end":28105,"line_start":445,"line_end":445,"column_start":12,"column_end":17},"name":"union","qualname":"<UnificationTable<S>>::union","value":"pub fn union<K1, K2>(&mut Self, K1, K2) where K1: Into<K>, K2: Into<K>,\nV: UnifyValue<Error = NoError>","parent":null,"children":[],"decl_id":null,"docs":" Unions two keys without the possibility of failure; only\n applicable when unify values use `NoError` as their error\n type.\n","sig":null,"attributes":[{"value":"/ Unions two keys without the possibility of failure; only","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":27948,"byte_end":28008,"line_start":442,"line_end":442,"column_start":5,"column_end":65}},{"value":"/ applicable when unify values use `NoError` as their error","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":28013,"byte_end":28074,"line_start":443,"line_end":443,"column_start":5,"column_end":66}},{"value":"/ type.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":28079,"byte_end":28088,"line_start":444,"line_end":444,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":28464,"byte_end":28475,"line_start":457,"line_end":457,"column_start":12,"column_end":23},"name":"union_value","qualname":"<UnificationTable<S>>::union_value","value":"pub fn union_value<K1>(&mut Self, K1, V) where K1: Into<K>,\nV: UnifyValue<Error = NoError>","parent":null,"children":[],"decl_id":null,"docs":" Unions a key and a value without the possibility of failure;\n only applicable when unify values use `NoError` as their error\n type.\n","sig":null,"attributes":[{"value":"/ Unions a key and a value without the possibility of failure;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":28303,"byte_end":28367,"line_start":454,"line_end":454,"column_start":5,"column_end":69}},{"value":"/ only applicable when unify values use `NoError` as their error","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":28372,"byte_end":28438,"line_start":455,"line_end":455,"column_start":5,"column_end":71}},{"value":"/ type.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":28443,"byte_end":28452,"line_start":456,"line_end":456,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":28729,"byte_end":28736,"line_start":466,"line_end":466,"column_start":12,"column_end":19},"name":"unioned","qualname":"<UnificationTable<S>>::unioned","value":"pub fn unioned<K1, K2>(&mut Self, K1, K2) -> bool where K1: Into<K>,\nK2: Into<K>","parent":null,"children":[],"decl_id":null,"docs":" Given two keys, indicates whether they have been unioned together.\n","sig":null,"attributes":[{"value":"/ Given two keys, indicates whether they have been unioned together.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":28647,"byte_end":28717,"line_start":465,"line_end":465,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":28956,"byte_end":28960,"line_start":475,"line_end":475,"column_start":12,"column_end":16},"name":"find","qualname":"<UnificationTable<S>>::find","value":"pub fn find<K1>(&mut Self, K1) -> K where K1: Into<K>","parent":null,"children":[],"decl_id":null,"docs":" Given a key, returns the (current) root key.\n","sig":null,"attributes":[{"value":"/ Given a key, returns the (current) root key.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":28896,"byte_end":28944,"line_start":474,"line_end":474,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":29273,"byte_end":29286,"line_start":486,"line_end":486,"column_start":12,"column_end":25},"name":"unify_var_var","qualname":"<UnificationTable<S>>::unify_var_var","value":"pub fn unify_var_var<K1, K2>(&mut Self, K1, K2) -> Result<(), V::Error> where\nK1: Into<K>, K2: Into<K>","parent":null,"children":[],"decl_id":null,"docs":" Unions together two variables, merging their values. If\n merging the values fails, the error is propagated and this\n method has no effect.\n","sig":null,"attributes":[{"value":"/ Unions together two variables, merging their values. If","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":29105,"byte_end":29164,"line_start":483,"line_end":483,"column_start":5,"column_end":64}},{"value":"/ merging the values fails, the error is propagated and this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":29169,"byte_end":29231,"line_start":484,"line_end":484,"column_start":5,"column_end":67}},{"value":"/ method has no effect.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":29236,"byte_end":29261,"line_start":485,"line_end":485,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":29925,"byte_end":29940,"line_start":508,"line_end":508,"column_start":12,"column_end":27},"name":"unify_var_value","qualname":"<UnificationTable<S>>::unify_var_value","value":"pub fn unify_var_value<K1>(&mut Self, K1, V) -> Result<(), V::Error> where\nK1: Into<K>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the key `a_id` to `b`, attempting to merge\n with the previous value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the key `a_id` to `b`, attempting to merge","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":29816,"byte_end":29880,"line_start":506,"line_end":506,"column_start":5,"column_end":69}},{"value":"/ with the previous value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":29885,"byte_end":29913,"line_start":507,"line_end":507,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":30423,"byte_end":30434,"line_start":521,"line_end":521,"column_start":12,"column_end":23},"name":"probe_value","qualname":"<UnificationTable<S>>::probe_value","value":"pub fn probe_value<K1>(&mut Self, K1) -> V where K1: Into<K>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current value for the given key. If the key has\n been union'd, this will give the value from the current root.\n","sig":null,"attributes":[{"value":"/ Returns the current value for the given key. If the key has","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":30278,"byte_end":30341,"line_start":519,"line_end":519,"column_start":5,"column_end":68}},{"value":"/ been union'd, this will give the value from the current root.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":30346,"byte_end":30411,"line_start":520,"line_end":520,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":30647,"byte_end":30666,"line_start":530,"line_end":530,"column_start":12,"column_end":31},"name":"inlined_probe_value","qualname":"<UnificationTable<S>>::inlined_probe_value","value":"pub fn inlined_probe_value<K1>(&mut Self, K1) -> V where K1: Into<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":30618,"byte_end":30635,"line_start":529,"line_end":529,"column_start":5,"column_end":22}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2473,"byte_end":2484,"line_start":46,"line_end":46,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3410,"byte_end":3421,"line_start":77,"line_end":77,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3625,"byte_end":3636,"line_start":87,"line_end":87,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8186,"byte_end":8197,"line_start":239,"line_end":239,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8348,"byte_end":8359,"line_start":246,"line_end":246,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8500,"byte_end":8511,"line_start":252,"line_end":252,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8681,"byte_end":8692,"line_start":259,"line_end":259,"column_start":55,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8846,"byte_end":8857,"line_start":265,"line_end":265,"column_start":51,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":9263,"byte_end":9274,"line_start":280,"line_end":280,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":9580,"byte_end":9587,"line_start":294,"line_end":294,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":33219,"byte_end":33226,"line_start":58,"line_end":58,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":33358,"byte_end":33365,"line_start":64,"line_end":64,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":34605,"byte_end":34612,"line_start":119,"line_end":119,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":34873,"byte_end":34881,"line_start":131,"line_end":131,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16890,"byte_end":16891,"line_start":131,"line_end":131,"column_start":38,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":19743,"byte_end":19751,"line_start":201,"line_end":201,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":20737,"byte_end":20753,"line_start":241,"line_end":241,"column_start":27,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":27824,"byte_end":27840,"line_start":436,"line_end":436,"column_start":15,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":199},{"krate":0,"index":201},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":31104,"byte_end":31110,"line_start":551,"line_end":551,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","byte_start":691,"byte_end":703,"line_start":22,"line_end":22,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","byte_start":713,"byte_end":718,"line_start":23,"line_end":23,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":77}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2473,"byte_end":2484,"line_start":46,"line_end":46,"column_start":24,"column_end":35},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":9},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3410,"byte_end":3421,"line_start":77,"line_end":77,"column_start":42,"column_end":53},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":9},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3625,"byte_end":3636,"line_start":87,"line_end":87,"column_start":30,"column_end":41},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":9},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8186,"byte_end":8197,"line_start":239,"line_end":239,"column_start":45,"column_end":56},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":9},"to":{"krate":2,"index":2242}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8348,"byte_end":8359,"line_start":246,"line_end":246,"column_start":48,"column_end":59},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":9},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8500,"byte_end":8511,"line_start":252,"line_end":252,"column_start":52,"column_end":63},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":9},"to":{"krate":2,"index":2323}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8681,"byte_end":8692,"line_start":259,"line_end":259,"column_start":55,"column_end":66},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":9},"to":{"krate":2,"index":2327}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8846,"byte_end":8857,"line_start":265,"line_end":265,"column_start":51,"column_end":62},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":9},"to":{"krate":2,"index":5219}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":9263,"byte_end":9274,"line_start":280,"line_end":280,"column_start":40,"column_end":51},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":9},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":9580,"byte_end":9587,"line_start":294,"line_end":294,"column_start":40,"column_end":47},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":223},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32134,"byte_end":32139,"line_start":17,"line_end":17,"column_start":10,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":2323},"to":{"krate":0,"index":93}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32179,"byte_end":32184,"line_start":17,"line_end":17,"column_start":55,"column_end":60},"kind":"SuperTrait","from":{"krate":2,"index":1742},"to":{"krate":0,"index":93}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32187,"byte_end":32194,"line_start":17,"line_end":17,"column_start":63,"column_end":70},"kind":"SuperTrait","from":{"krate":2,"index":2033},"to":{"krate":0,"index":93}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":33219,"byte_end":33226,"line_start":58,"line_end":58,"column_start":31,"column_end":38},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":238},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":33358,"byte_end":33365,"line_start":64,"line_end":64,"column_start":40,"column_end":47},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":238},"to":{"krate":0,"index":93}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":34605,"byte_end":34612,"line_start":119,"line_end":119,"column_start":31,"column_end":38},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":238},"to":{"krate":2,"index":2323}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":34873,"byte_end":34881,"line_start":131,"line_end":131,"column_start":47,"column_end":55},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":247},"to":{"krate":0,"index":20}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13877,"byte_end":13881,"line_start":59,"line_end":59,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":2055},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13884,"byte_end":13889,"line_start":59,"line_end":59,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":1742},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13892,"byte_end":13897,"line_start":59,"line_end":59,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":6599},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13900,"byte_end":13909,"line_start":59,"line_end":59,"column_start":44,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":1770},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15730,"byte_end":15735,"line_start":106,"line_end":106,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":1742},"to":{"krate":0,"index":147}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15738,"byte_end":15743,"line_start":106,"line_end":106,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":6599},"to":{"krate":0,"index":147}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16830,"byte_end":16832,"line_start":129,"line_end":129,"column_start":25,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":1775},"to":{"krate":0,"index":150}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16835,"byte_end":16840,"line_start":129,"line_end":129,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1742},"to":{"krate":0,"index":150}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16843,"byte_end":16848,"line_start":129,"line_end":129,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":6599},"to":{"krate":0,"index":150}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16890,"byte_end":16891,"line_start":131,"line_end":131,"column_start":38,"column_end":39},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":152},"to":{"krate":0,"index":147}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":19743,"byte_end":19751,"line_start":201,"line_end":201,"column_start":19,"column_end":27},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":20737,"byte_end":20753,"line_start":241,"line_end":241,"column_start":27,"column_end":43},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":27824,"byte_end":27840,"line_start":436,"line_end":436,"column_start":15,"column_end":31},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":31104,"byte_end":31110,"line_start":551,"line_end":551,"column_start":36,"column_end":42},"kind":{"Impl":{"id":19}},"from":{"krate":2,"index":32315},"to":{"krate":0,"index":147}}]}