{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir","program":"/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","chalk_ir","--edition=2018","/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=1e5e89b3cc5185bc","-C","extra-filename=-1e5e89b3cc5185bc","--out-dir","/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","-L","dependency=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","--extern","chalk_derive=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libchalk_derive-4b249154da61241e.dylib","--extern","chalk_engine=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libchalk_engine-7a7af3c5ed075380.rmeta","--extern","chalk_macros=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libchalk_macros-522621076c03809f.rmeta","--extern","lalrpop_intern=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/liblalrpop_intern-5f9f083371716a9c.rmeta","--cap-lints","allow","-L","native=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/build/stacker-6b8b89857712dd33/out","--error-format=json","--sysroot","/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libchalk_ir-1e5e89b3cc5185bc.rmeta"},"prelude":{"crate_id":{"name":"chalk_ir","disambiguator":[8687016659245799572,18068387536485845382]},"crate_root":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src","external_crates":[{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3710194649008989715,14559669089861450418]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9392975149979234998,17049149762166397483]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16512841426258775062,11665789721448774207]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10630307797325716480,16523273723520132349]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3264716338318844693,12681592148182797578]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[140397795414171834,1910274434865169512]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5557669672741662647,10322216614238315513]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14339503364484872598,13531520383629478599]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14161909693946419124,17554770295131960960]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9716880057120631437,4575334529379688610]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17190292700912465587,13293574150729131089]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[16973425767318922457,5762286362994384933]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[3049460603833016674,5895625007283919048]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[8971705811930800565,4802059752817986136]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[7414259369911982492,16117941559470048194]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":16,"id":{"name":"chalk_engine","disambiguator":[5209660885642139136,14615587430389361100]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":17,"id":{"name":"chalk_macros","disambiguator":[2603500555905971854,3241400604075703882]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":18,"id":{"name":"lazy_static","disambiguator":[8622471236171398951,7375813736511945278]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":19,"id":{"name":"stacker","disambiguator":[11270618004102534773,1134865246925311322]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":20,"id":{"name":"cfg_if","disambiguator":[13347268434212277074,12294355231220403985]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":21,"id":{"name":"libc","disambiguator":[9237417759301744298,10325578486291660160]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":22,"id":{"name":"rustc_hash","disambiguator":[3456451224187360230,12806063198043075384]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":23,"id":{"name":"byteorder","disambiguator":[7786802486158187971,17904586164133949077]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":24,"id":{"name":"lalrpop_intern","disambiguator":[1262538648943620944,9338744506893008660]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","num":25,"id":{"name":"chalk_derive","disambiguator":[538635478023077110,229961810911492659]}}],"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":0,"byte_end":37829,"line_start":1,"line_end":1195,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":178},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":50843,"byte_end":50848,"line_start":14,"line_end":14,"column_start":22,"column_end":27},"alias_span":null,"name":"Subst","value":"","parent":{"krate":0,"index":125}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":0,"byte_end":37829,"line_start":1,"line_end":1195,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":2824},{"krate":0,"index":926},{"krate":0,"index":943},{"krate":0,"index":942},{"krate":0,"index":940},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":932},{"krate":0,"index":930},{"krate":0,"index":927},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":32},{"krate":0,"index":125},{"krate":0,"index":379},{"krate":0,"index":487},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":572},{"krate":0,"index":710},{"krate":0,"index":730},{"krate":0,"index":1189},{"krate":0,"index":1225},{"krate":0,"index":1219},{"krate":0,"index":1221},{"krate":0,"index":1214},{"krate":0,"index":1216},{"krate":0,"index":1210},{"krate":0,"index":1203},{"krate":0,"index":1200},{"krate":0,"index":1195},{"krate":0,"index":1192},{"krate":0,"index":731},{"krate":0,"index":1228},{"krate":0,"index":1271},{"krate":0,"index":1268},{"krate":0,"index":1262},{"krate":0,"index":1264},{"krate":0,"index":1257},{"krate":0,"index":1259},{"krate":0,"index":1253},{"krate":0,"index":1242},{"krate":0,"index":1239},{"krate":0,"index":1232},{"krate":0,"index":736},{"krate":0,"index":742},{"krate":0,"index":1274},{"krate":0,"index":1306},{"krate":0,"index":1304},{"krate":0,"index":1300},{"krate":0,"index":1301},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1291},{"krate":0,"index":1289},{"krate":0,"index":1286},{"krate":0,"index":1307},{"krate":0,"index":1329},{"krate":0,"index":1327},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1314},{"krate":0,"index":1312},{"krate":0,"index":1309},{"krate":0,"index":745},{"krate":0,"index":1330},{"krate":0,"index":1353},{"krate":0,"index":1351},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1338},{"krate":0,"index":1336},{"krate":0,"index":1333},{"krate":0,"index":1354},{"krate":0,"index":1377},{"krate":0,"index":1375},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1362},{"krate":0,"index":1360},{"krate":0,"index":1357},{"krate":0,"index":1378},{"krate":0,"index":1401},{"krate":0,"index":1399},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1386},{"krate":0,"index":1384},{"krate":0,"index":1381},{"krate":0,"index":1402},{"krate":0,"index":1425},{"krate":0,"index":1423},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1410},{"krate":0,"index":1408},{"krate":0,"index":1405},{"krate":0,"index":1426},{"krate":0,"index":1449},{"krate":0,"index":1447},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1434},{"krate":0,"index":1432},{"krate":0,"index":1429},{"krate":0,"index":1450},{"krate":0,"index":1452},{"krate":0,"index":1454},{"krate":0,"index":1484},{"krate":0,"index":1482},{"krate":0,"index":1478},{"krate":0,"index":1479},{"krate":0,"index":1475},{"krate":0,"index":1476},{"krate":0,"index":1469},{"krate":0,"index":1467},{"krate":0,"index":1464},{"krate":0,"index":750},{"krate":0,"index":1485},{"krate":0,"index":1487},{"krate":0,"index":1489},{"krate":0,"index":1491},{"krate":0,"index":1513},{"krate":0,"index":1511},{"krate":0,"index":1507},{"krate":0,"index":1508},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1498},{"krate":0,"index":1496},{"krate":0,"index":1493},{"krate":0,"index":1514},{"krate":0,"index":1536},{"krate":0,"index":1534},{"krate":0,"index":1532},{"krate":0,"index":1529},{"krate":0,"index":1530},{"krate":0,"index":1526},{"krate":0,"index":1527},{"krate":0,"index":1524},{"krate":0,"index":1522},{"krate":0,"index":1519},{"krate":0,"index":1537},{"krate":0,"index":1568},{"krate":0,"index":1562},{"krate":0,"index":1564},{"krate":0,"index":1557},{"krate":0,"index":1559},{"krate":0,"index":1553},{"krate":0,"index":1546},{"krate":0,"index":1543},{"krate":0,"index":1540},{"krate":0,"index":752},{"krate":0,"index":1571},{"krate":0,"index":1622},{"krate":0,"index":1616},{"krate":0,"index":1618},{"krate":0,"index":1611},{"krate":0,"index":1613},{"krate":0,"index":1607},{"krate":0,"index":1600},{"krate":0,"index":1597},{"krate":0,"index":1594},{"krate":0,"index":763},{"krate":0,"index":1625},{"krate":0,"index":1647},{"krate":0,"index":1645},{"krate":0,"index":1641},{"krate":0,"index":1642},{"krate":0,"index":1638},{"krate":0,"index":1639},{"krate":0,"index":1635},{"krate":0,"index":1629},{"krate":0,"index":1627},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":1648},{"krate":0,"index":1684},{"krate":0,"index":1678},{"krate":0,"index":1680},{"krate":0,"index":1673},{"krate":0,"index":1675},{"krate":0,"index":1669},{"krate":0,"index":1658},{"krate":0,"index":1655},{"krate":0,"index":1652},{"krate":0,"index":1687},{"krate":0,"index":1721},{"krate":0,"index":1718},{"krate":0,"index":1712},{"krate":0,"index":1714},{"krate":0,"index":1707},{"krate":0,"index":1709},{"krate":0,"index":1703},{"krate":0,"index":1696},{"krate":0,"index":1693},{"krate":0,"index":1690},{"krate":0,"index":774},{"krate":0,"index":1723},{"krate":0,"index":1770},{"krate":0,"index":1767},{"krate":0,"index":1761},{"krate":0,"index":1763},{"krate":0,"index":1756},{"krate":0,"index":1758},{"krate":0,"index":1752},{"krate":0,"index":1741},{"krate":0,"index":1738},{"krate":0,"index":781},{"krate":0,"index":1772},{"krate":0,"index":1799},{"krate":0,"index":1797},{"krate":0,"index":1793},{"krate":0,"index":1794},{"krate":0,"index":1790},{"krate":0,"index":1791},{"krate":0,"index":1780},{"krate":0,"index":1778},{"krate":0,"index":1775},{"krate":0,"index":784},{"krate":0,"index":1800},{"krate":0,"index":1836},{"krate":0,"index":1830},{"krate":0,"index":1832},{"krate":0,"index":1825},{"krate":0,"index":1827},{"krate":0,"index":1821},{"krate":0,"index":1810},{"krate":0,"index":1807},{"krate":0,"index":1804},{"krate":0,"index":789},{"krate":0,"index":1839},{"krate":0,"index":1884},{"krate":0,"index":1880},{"krate":0,"index":1872},{"krate":0,"index":1875},{"krate":0,"index":1865},{"krate":0,"index":1868},{"krate":0,"index":1860},{"krate":0,"index":1852},{"krate":0,"index":1848},{"krate":0,"index":798},{"krate":0,"index":804},{"krate":0,"index":1887},{"krate":0,"index":1919},{"krate":0,"index":1913},{"krate":0,"index":1915},{"krate":0,"index":1908},{"krate":0,"index":1910},{"krate":0,"index":1904},{"krate":0,"index":1897},{"krate":0,"index":1894},{"krate":0,"index":1891},{"krate":0,"index":813},{"krate":0,"index":1922},{"krate":0,"index":1963},{"krate":0,"index":1957},{"krate":0,"index":1959},{"krate":0,"index":1952},{"krate":0,"index":1954},{"krate":0,"index":1948},{"krate":0,"index":1937},{"krate":0,"index":1934},{"krate":0,"index":1929},{"krate":0,"index":1926},{"krate":0,"index":821},{"krate":0,"index":1966},{"krate":0,"index":2007},{"krate":0,"index":2001},{"krate":0,"index":2003},{"krate":0,"index":1996},{"krate":0,"index":1998},{"krate":0,"index":1992},{"krate":0,"index":1981},{"krate":0,"index":1978},{"krate":0,"index":1973},{"krate":0,"index":1970},{"krate":0,"index":824},{"krate":0,"index":2010},{"krate":0,"index":2051},{"krate":0,"index":2045},{"krate":0,"index":2047},{"krate":0,"index":2040},{"krate":0,"index":2042},{"krate":0,"index":2036},{"krate":0,"index":2029},{"krate":0,"index":2026},{"krate":0,"index":2021},{"krate":0,"index":2018},{"krate":0,"index":2054},{"krate":0,"index":2095},{"krate":0,"index":2089},{"krate":0,"index":2091},{"krate":0,"index":2084},{"krate":0,"index":2086},{"krate":0,"index":2080},{"krate":0,"index":2073},{"krate":0,"index":2070},{"krate":0,"index":2065},{"krate":0,"index":2062},{"krate":0,"index":2098},{"krate":0,"index":2139},{"krate":0,"index":2133},{"krate":0,"index":2135},{"krate":0,"index":2128},{"krate":0,"index":2130},{"krate":0,"index":2124},{"krate":0,"index":2117},{"krate":0,"index":2114},{"krate":0,"index":2109},{"krate":0,"index":2106},{"krate":0,"index":2142},{"krate":0,"index":2207},{"krate":0,"index":2201},{"krate":0,"index":2203},{"krate":0,"index":2196},{"krate":0,"index":2198},{"krate":0,"index":2192},{"krate":0,"index":2185},{"krate":0,"index":2182},{"krate":0,"index":2177},{"krate":0,"index":2174},{"krate":0,"index":833},{"krate":0,"index":835},{"krate":0,"index":839},{"krate":0,"index":845},{"krate":0,"index":2210},{"krate":0,"index":2248},{"krate":0,"index":2242},{"krate":0,"index":2244},{"krate":0,"index":2237},{"krate":0,"index":2239},{"krate":0,"index":2233},{"krate":0,"index":2226},{"krate":0,"index":2223},{"krate":0,"index":2218},{"krate":0,"index":2251},{"krate":0,"index":2289},{"krate":0,"index":2283},{"krate":0,"index":2285},{"krate":0,"index":2278},{"krate":0,"index":2280},{"krate":0,"index":2274},{"krate":0,"index":2263},{"krate":0,"index":2260},{"krate":0,"index":2255},{"krate":0,"index":2292},{"krate":0,"index":2330},{"krate":0,"index":2324},{"krate":0,"index":2326},{"krate":0,"index":2319},{"krate":0,"index":2321},{"krate":0,"index":2315},{"krate":0,"index":2304},{"krate":0,"index":2301},{"krate":0,"index":2296},{"krate":0,"index":2333},{"krate":0,"index":2371},{"krate":0,"index":2365},{"krate":0,"index":2367},{"krate":0,"index":2360},{"krate":0,"index":2362},{"krate":0,"index":2356},{"krate":0,"index":2345},{"krate":0,"index":2342},{"krate":0,"index":2337},{"krate":0,"index":848},{"krate":0,"index":2374},{"krate":0,"index":2407},{"krate":0,"index":2401},{"krate":0,"index":2403},{"krate":0,"index":2396},{"krate":0,"index":2398},{"krate":0,"index":2392},{"krate":0,"index":2381},{"krate":0,"index":2378},{"krate":0,"index":851},{"krate":0,"index":854},{"krate":0,"index":868},{"krate":0,"index":872},{"krate":0,"index":879},{"krate":0,"index":884},{"krate":0,"index":888},{"krate":0,"index":2410},{"krate":0,"index":2451},{"krate":0,"index":2445},{"krate":0,"index":2447},{"krate":0,"index":2440},{"krate":0,"index":2442},{"krate":0,"index":2429},{"krate":0,"index":2426},{"krate":0,"index":2422},{"krate":0,"index":2417},{"krate":0,"index":2414},{"krate":0,"index":2454},{"krate":0,"index":2492},{"krate":0,"index":2486},{"krate":0,"index":2488},{"krate":0,"index":2481},{"krate":0,"index":2483},{"krate":0,"index":2474},{"krate":0,"index":2471},{"krate":0,"index":2467},{"krate":0,"index":2462},{"krate":0,"index":893},{"krate":0,"index":2495},{"krate":0,"index":2531},{"krate":0,"index":2528},{"krate":0,"index":2522},{"krate":0,"index":2524},{"krate":0,"index":2517},{"krate":0,"index":2519},{"krate":0,"index":2506},{"krate":0,"index":2503},{"krate":0,"index":2499},{"krate":0,"index":2534},{"krate":0,"index":2570},{"krate":0,"index":2567},{"krate":0,"index":2561},{"krate":0,"index":2563},{"krate":0,"index":2556},{"krate":0,"index":2558},{"krate":0,"index":2545},{"krate":0,"index":2542},{"krate":0,"index":2538},{"krate":0,"index":896},{"krate":0,"index":2573},{"krate":0,"index":2641},{"krate":0,"index":2635},{"krate":0,"index":2637},{"krate":0,"index":2630},{"krate":0,"index":2632},{"krate":0,"index":2626},{"krate":0,"index":2607},{"krate":0,"index":2604},{"krate":0,"index":2599},{"krate":0,"index":2596},{"krate":0,"index":900},{"krate":0,"index":2644},{"krate":0,"index":2666},{"krate":0,"index":2664},{"krate":0,"index":2662},{"krate":0,"index":2659},{"krate":0,"index":2660},{"krate":0,"index":2656},{"krate":0,"index":2657},{"krate":0,"index":2653},{"krate":0,"index":2651},{"krate":0,"index":2649},{"krate":0,"index":2667},{"krate":0,"index":2710},{"krate":0,"index":2704},{"krate":0,"index":2706},{"krate":0,"index":2699},{"krate":0,"index":2701},{"krate":0,"index":2695},{"krate":0,"index":2684},{"krate":0,"index":2681},{"krate":0,"index":2676},{"krate":0,"index":2673},{"krate":0,"index":2713},{"krate":0,"index":2744},{"krate":0,"index":2738},{"krate":0,"index":2740},{"krate":0,"index":2733},{"krate":0,"index":2735},{"krate":0,"index":2726},{"krate":0,"index":2723},{"krate":0,"index":2719},{"krate":0,"index":2716},{"krate":0,"index":907},{"krate":0,"index":912},{"krate":0,"index":915},{"krate":0,"index":918},{"krate":0,"index":923},{"krate":0,"index":2747},{"krate":0,"index":2791},{"krate":0,"index":2788},{"krate":0,"index":2782},{"krate":0,"index":2784},{"krate":0,"index":2777},{"krate":0,"index":2779},{"krate":0,"index":2766},{"krate":0,"index":2763},{"krate":0,"index":2759},{"krate":0,"index":2754},{"krate":0,"index":2751}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":926},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":462,"byte_end":466,"line_start":15,"line_end":15,"column_start":10,"column_end":14},"name":"Void","qualname":"::Void","value":"pub enum Void { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":32},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"zip","qualname":"::zip","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":2828},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":43},{"krate":0,"index":51},{"krate":0,"index":55},{"krate":0,"index":61},{"krate":0,"index":65},{"krate":0,"index":70},{"krate":0,"index":75},{"krate":0,"index":80},{"krate":0,"index":85},{"krate":0,"index":91},{"krate":0,"index":95},{"krate":0,"index":99},{"krate":0,"index":945},{"krate":0,"index":949},{"krate":0,"index":953},{"krate":0,"index":957},{"krate":0,"index":961},{"krate":0,"index":965},{"krate":0,"index":969},{"krate":0,"index":973},{"krate":0,"index":977},{"krate":0,"index":981},{"krate":0,"index":986},{"krate":0,"index":990},{"krate":0,"index":994},{"krate":0,"index":998},{"krate":0,"index":1002},{"krate":0,"index":1006},{"krate":0,"index":106},{"krate":0,"index":1010},{"krate":0,"index":1014},{"krate":0,"index":1018},{"krate":0,"index":1022},{"krate":0,"index":1026},{"krate":0,"index":1030},{"krate":0,"index":111},{"krate":0,"index":115},{"krate":0,"index":121}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":1115,"byte_end":1127,"line_start":47,"line_end":47,"column_start":1,"column_end":13}}]},{"kind":"Trait","id":{"krate":0,"index":37},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40840,"byte_end":40846,"line_start":22,"line_end":22,"column_start":11,"column_end":17},"name":"Zipper","qualname":"::zip::Zipper","value":"Zipper<TF: TypeFamily>","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"decl_id":null,"docs":" When we zip types, we basically traverse the structure, ensuring\n that it matches.  When we come to types/lifetimes, we invoke the\n callback methods in the zipper to match them up. Primarily used\n during unification or similar operations.","sig":null,"attributes":[{"value":"/ When we zip types, we basically traverse the structure, ensuring","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":39992,"byte_end":40060,"line_start":6,"line_end":6,"column_start":1,"column_end":69}},{"value":"/ that it matches.  When we come to types/lifetimes, we invoke the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40061,"byte_end":40129,"line_start":7,"line_end":7,"column_start":1,"column_end":69}},{"value":"/ callback methods in the zipper to match them up. Primarily used","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40130,"byte_end":40197,"line_start":8,"line_end":8,"column_start":1,"column_end":68}},{"value":"/ during unification or similar operations.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40198,"byte_end":40243,"line_start":9,"line_end":9,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40244,"byte_end":40247,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ So e.g. if you had `A: Eq<B>` zipped with `X: Eq<Y>`, then the zipper","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40248,"byte_end":40321,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ would get two callbacks, one pairing `A` and `X`, and the other pairing","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40322,"byte_end":40397,"line_start":12,"line_end":12,"column_start":1,"column_end":76}},{"value":"/ `B` and `Y`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40398,"byte_end":40414,"line_start":13,"line_end":13,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40415,"byte_end":40418,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ For things other than types/lifetimes, the zip impls will","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40419,"byte_end":40480,"line_start":15,"line_end":15,"column_start":1,"column_end":62}},{"value":"/ guarantee equality. So e.g. if you have `A: Eq<B>` zipped with `X:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40481,"byte_end":40551,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/ Ord<Y>`, you would wind up with an error, no matter what zipper","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40552,"byte_end":40619,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ you are using. This is because the traits `Eq` and `Ord` are","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40620,"byte_end":40684,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"/ represented by two distinct `ItemId` values, and the impl for","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40685,"byte_end":40750,"line_start":19,"line_end":19,"column_start":1,"column_end":66}},{"value":"/ `ItemId` requires that all `ItemId` in the two zipped values match","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40751,"byte_end":40821,"line_start":20,"line_end":20,"column_start":1,"column_end":71}},{"value":"/ up.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40822,"byte_end":40829,"line_start":21,"line_end":21,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40996,"byte_end":41003,"line_start":25,"line_end":25,"column_start":8,"column_end":15},"name":"zip_tys","qualname":"::zip::Zipper::zip_tys","value":"pub fn zip_tys(&mut Self, &Ty<TF>, &Ty<TF>) -> Fallible<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Indicates that the two types `a` and `b` were found in\n matching spots, beneath `binders` levels of binders.\n","sig":null,"attributes":[{"value":"/ Indicates that the two types `a` and `b` were found in","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40869,"byte_end":40927,"line_start":23,"line_end":23,"column_start":5,"column_end":63}},{"value":"/ matching spots, beneath `binders` levels of binders.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":40932,"byte_end":40988,"line_start":24,"line_end":24,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":41192,"byte_end":41205,"line_start":29,"line_end":29,"column_start":8,"column_end":21},"name":"zip_lifetimes","qualname":"::zip::Zipper::zip_lifetimes","value":"pub fn zip_lifetimes(&mut Self, &Lifetime<TF>, &Lifetime<TF>) -> Fallible<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Indicates that the two lifetimes `a` and `b` were found in\n matching spots, beneath `binders` levels of binders.\n","sig":null,"attributes":[{"value":"/ Indicates that the two lifetimes `a` and `b` were found in","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":41061,"byte_end":41123,"line_start":27,"line_end":27,"column_start":5,"column_end":67}},{"value":"/ matching spots, beneath `binders` levels of binders.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":41128,"byte_end":41184,"line_start":28,"line_end":28,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":41329,"byte_end":41340,"line_start":32,"line_end":32,"column_start":8,"column_end":19},"name":"zip_binders","qualname":"::zip::Zipper::zip_binders","value":"pub fn zip_binders<T>(&mut Self, &Binders<T>, &Binders<T>) -> Fallible<()>\nwhere T: Zip<TF> + Fold<TF, TF, Result = T>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Zips two values appearing beneath binders.\n","sig":null,"attributes":[{"value":"/ Zips two values appearing beneath binders.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":41275,"byte_end":41321,"line_start":31,"line_end":31,"column_start":5,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":51},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":42287,"byte_end":42290,"line_start":65,"line_end":65,"column_start":11,"column_end":14},"name":"Zip","qualname":"::zip::Zip","value":"Zip<TF>: Debug","parent":null,"children":[{"krate":0,"index":53}],"decl_id":null,"docs":" The `Zip` trait walks two values, invoking the `Zipper` methods where\n appropriate, but otherwise requiring strict equality.","sig":null,"attributes":[{"value":"/ The `Zip` trait walks two values, invoking the `Zipper` methods where","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":41975,"byte_end":42048,"line_start":58,"line_end":58,"column_start":1,"column_end":74}},{"value":"/ appropriate, but otherwise requiring strict equality.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":42049,"byte_end":42106,"line_start":59,"line_end":59,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":42107,"byte_end":42110,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ See `Zipper` trait for more details.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":42111,"byte_end":42151,"line_start":61,"line_end":61,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":42152,"byte_end":42155,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ To implement the trait, typically you would use one of the macros","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":42156,"byte_end":42225,"line_start":63,"line_end":63,"column_start":1,"column_end":70}},{"value":"/ like `eq_zip!`, `struct_zip!`, or `enum_zip!`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":42226,"byte_end":42276,"line_start":64,"line_end":64,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":42337,"byte_end":42345,"line_start":69,"line_end":69,"column_start":8,"column_end":16},"name":"zip_with","qualname":"::zip::Zip::zip_with","value":"pub fn zip_with<Z: Zipper<TF>>(&mut Z, &Self, &Self) -> Fallible<()>","parent":{"krate":0,"index":51},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":125},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fold","qualname":"::fold","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":2842},{"krate":0,"index":134},{"krate":0,"index":2844},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":175},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":208},{"krate":0,"index":213},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":224},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":235},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":246},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":262},{"krate":0,"index":267},{"krate":0,"index":274},{"krate":0,"index":281},{"krate":0,"index":287},{"krate":0,"index":1034},{"krate":0,"index":1041},{"krate":0,"index":1049},{"krate":0,"index":1058},{"krate":0,"index":294},{"krate":0,"index":300},{"krate":0,"index":303},{"krate":0,"index":308},{"krate":0,"index":313},{"krate":0,"index":318},{"krate":0,"index":323},{"krate":0,"index":329},{"krate":0,"index":335},{"krate":0,"index":338},{"krate":0,"index":343},{"krate":0,"index":1068},{"krate":0,"index":1073},{"krate":0,"index":1078},{"krate":0,"index":1083},{"krate":0,"index":1088},{"krate":0,"index":1093},{"krate":0,"index":1098},{"krate":0,"index":1103},{"krate":0,"index":1108},{"krate":0,"index":1113},{"krate":0,"index":1118},{"krate":0,"index":1123},{"krate":0,"index":349},{"krate":0,"index":354},{"krate":0,"index":361},{"krate":0,"index":367},{"krate":0,"index":373}],"decl_id":null,"docs":" Traits for transforming bits of IR.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":1142,"byte_end":1154,"line_start":50,"line_end":50,"column_start":1,"column_end":13}},{"value":"/ Traits for transforming bits of IR.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":50551,"byte_end":50590,"line_start":1,"line_end":1,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":136},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"shift","qualname":"::fold::shift","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":2854},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":148},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":173},{"krate":0,"index":174}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":144},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":73976,"byte_end":73981,"line_start":8,"line_end":8,"column_start":11,"column_end":16},"name":"Shift","qualname":"::fold::shift::Shift","value":"Shift<TF: TypeFamily>: Fold<TF, TF>","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147}],"decl_id":null,"docs":" Methods for converting debruijn indices to move values into or out\n of binders.\n","sig":null,"attributes":[{"value":"/ Methods for converting debruijn indices to move values into or out","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":73879,"byte_end":73949,"line_start":6,"line_end":6,"column_start":1,"column_end":71}},{"value":"/ of binders.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":73950,"byte_end":73965,"line_start":7,"line_end":7,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75067,"byte_end":75077,"line_start":38,"line_end":38,"column_start":8,"column_end":18},"name":"shifted_in","qualname":"::fold::shift::Shift::shifted_in","value":"pub fn shifted_in(&Self, usize) -> Self::Result","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Shifts debruijn indices in `self` **up**, which is used when a\n value is being placed under additional levels of binders.","sig":null,"attributes":[{"value":"/ Shifts debruijn indices in `self` **up**, which is used when a","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74018,"byte_end":74084,"line_start":9,"line_end":9,"column_start":5,"column_end":71}},{"value":"/ value is being placed under additional levels of binders.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74089,"byte_end":74150,"line_start":10,"line_end":10,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74155,"byte_end":74158,"line_start":11,"line_end":11,"column_start":5,"column_end":8}},{"value":"/ For example, if we had some goal","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74163,"byte_end":74199,"line_start":12,"line_end":12,"column_start":5,"column_end":41}},{"value":"/ like:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74204,"byte_end":74213,"line_start":13,"line_end":13,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74218,"byte_end":74221,"line_start":14,"line_end":14,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74226,"byte_end":74240,"line_start":15,"line_end":15,"column_start":5,"column_end":19}},{"value":"/ T: Trait<?X>","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74245,"byte_end":74261,"line_start":16,"line_end":16,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74266,"byte_end":74273,"line_start":17,"line_end":17,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74278,"byte_end":74281,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ where `?X` refers to some inference variable (and hence has depth 3),","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74286,"byte_end":74359,"line_start":19,"line_end":19,"column_start":5,"column_end":78}},{"value":"/ we might use `up_shift` when constructing a goal like:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74364,"byte_end":74422,"line_start":20,"line_end":20,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74427,"byte_end":74430,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74435,"byte_end":74449,"line_start":22,"line_end":22,"column_start":5,"column_end":19}},{"value":"/ exists<U> { T = U, T: Trait<?X> }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74454,"byte_end":74491,"line_start":23,"line_end":23,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74496,"byte_end":74503,"line_start":24,"line_end":24,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74508,"byte_end":74511,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ This is because, internally, the inference variable `?X` (as","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74516,"byte_end":74580,"line_start":26,"line_end":26,"column_start":5,"column_end":69}},{"value":"/ well as the new quantified variable `U`) are going to be","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74585,"byte_end":74645,"line_start":27,"line_end":27,"column_start":5,"column_end":65}},{"value":"/ represented by debruijn indices. So if the index of `X` is","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74650,"byte_end":74712,"line_start":28,"line_end":28,"column_start":5,"column_end":67}},{"value":"/ zero, then while originally we might have had `T: Trait<?0>`,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74717,"byte_end":74782,"line_start":29,"line_end":29,"column_start":5,"column_end":70}},{"value":"/ inside the `exists` we want to represent `X` with `?1`, to","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74787,"byte_end":74849,"line_start":30,"line_end":30,"column_start":5,"column_end":67}},{"value":"/ account for the binder:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74854,"byte_end":74881,"line_start":31,"line_end":31,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74886,"byte_end":74889,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74894,"byte_end":74908,"line_start":33,"line_end":33,"column_start":5,"column_end":19}},{"value":"/     exists { T = ?0, T: Trait<?1> }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74913,"byte_end":74952,"line_start":34,"line_end":34,"column_start":5,"column_end":44}},{"value":"/                  ^^           ^^ refers to `?X`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":74957,"byte_end":75008,"line_start":35,"line_end":35,"column_start":5,"column_end":56}},{"value":"/                  refers to `U`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75013,"byte_end":75047,"line_start":36,"line_end":36,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75052,"byte_end":75059,"line_start":37,"line_end":37,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75970,"byte_end":75981,"line_start":61,"line_end":61,"column_start":8,"column_end":19},"name":"shifted_out","qualname":"::fold::shift::Shift::shifted_out","value":"pub fn shifted_out(&Self, usize) -> Fallible<Self::Result>","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Shifts debruijn indices in `self` **down**, hence **removing**\n a value from binders. This will fail with `Err(NoSolution)` in\n the case that the value refers to something from one of those\n binders.","sig":null,"attributes":[{"value":"/ Shifts debruijn indices in `self` **down**, hence **removing**","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75126,"byte_end":75192,"line_start":40,"line_end":40,"column_start":5,"column_end":71}},{"value":"/ a value from binders. This will fail with `Err(NoSolution)` in","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75197,"byte_end":75263,"line_start":41,"line_end":41,"column_start":5,"column_end":71}},{"value":"/ the case that the value refers to something from one of those","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75268,"byte_end":75333,"line_start":42,"line_end":42,"column_start":5,"column_end":70}},{"value":"/ binders.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75338,"byte_end":75350,"line_start":43,"line_end":43,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75355,"byte_end":75358,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ Consider the final example from `up_shift`:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75363,"byte_end":75410,"line_start":45,"line_end":45,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75415,"byte_end":75418,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75423,"byte_end":75437,"line_start":47,"line_end":47,"column_start":5,"column_end":19}},{"value":"/     exists { T = ?0, T: Trait<?1> }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75442,"byte_end":75481,"line_start":48,"line_end":48,"column_start":5,"column_end":44}},{"value":"/                  ^^           ^^ refers to `?X`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75486,"byte_end":75537,"line_start":49,"line_end":49,"column_start":5,"column_end":56}},{"value":"/                  refers to `U`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75542,"byte_end":75576,"line_start":50,"line_end":50,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75581,"byte_end":75588,"line_start":51,"line_end":51,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75593,"byte_end":75596,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ If we `down_shift` the `T: Trait<?1>` goal by 1,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75601,"byte_end":75653,"line_start":53,"line_end":53,"column_start":5,"column_end":57}},{"value":"/ we will get `T: Trait<?0>`, which is what we started with.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75658,"byte_end":75720,"line_start":54,"line_end":54,"column_start":5,"column_end":67}},{"value":"/ In other words, we will have extracted it from the `exists`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75725,"byte_end":75788,"line_start":55,"line_end":55,"column_start":5,"column_end":68}},{"value":"/ binder.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75793,"byte_end":75804,"line_start":56,"line_end":56,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75809,"byte_end":75812,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ But if we try to `down_shift` the `T = ?0` goal by 1, we will","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75817,"byte_end":75882,"line_start":58,"line_end":58,"column_start":5,"column_end":70}},{"value":"/ get `Err`, because it refers to the type bound by the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75887,"byte_end":75944,"line_start":59,"line_end":59,"column_start":5,"column_end":62}},{"value":"/ `exists`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":75949,"byte_end":75962,"line_start":60,"line_end":60,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":178},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/subst.rs","byte_start":78947,"byte_end":78952,"line_start":4,"line_end":4,"column_start":12,"column_end":17},"name":"Subst","qualname":"::fold::subst::Subst","value":"Subst {  }","parent":null,"children":[{"krate":0,"index":181}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/subst.rs","byte_start":79266,"byte_end":79271,"line_start":12,"line_end":12,"column_start":12,"column_end":17},"name":"apply","qualname":"<Subst>::apply","value":"pub fn apply<T: Fold<TF, TF>>(&[Parameter<TF>], &T) -> T::Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/subst.rs","byte_start":79468,"byte_end":79478,"line_start":18,"line_end":18,"column_start":12,"column_end":22},"name":"substitute","qualname":"<QuantifiedTy<TF>>::substitute","value":"pub fn substitute(&Self, &[Parameter<TF>]) -> Ty<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":205},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53027,"byte_end":53033,"line_start":67,"line_end":67,"column_start":11,"column_end":17},"name":"Folder","qualname":"::fold::Folder","value":"Folder<TF: TypeFamily, TTF: TypeFamily>: FreeVarFolder<TTF> + InferenceFolder<TTF> + PlaceholderFolder<TTF> +\nTypeFolder<TF, TTF>","parent":null,"children":[],"decl_id":null,"docs":" A \"folder\" is a transformer that can be used to make a copy of\n some term -- that is, some bit of IR, such as a `Goal` -- with\n certain changes applied. The idea is that it contains methods that\n let you swap types/lifetimes for new types/lifetimes; meanwhile,\n each bit of IR implements the `Fold` trait which, given a\n `Folder`, will reconstruct itself, invoking the folder's methods\n to transform each of the types/lifetimes embedded within.","sig":null,"attributes":[{"value":"/ A \"folder\" is a transformer that can be used to make a copy of","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":50851,"byte_end":50917,"line_start":16,"line_end":16,"column_start":1,"column_end":67}},{"value":"/ some term -- that is, some bit of IR, such as a `Goal` -- with","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":50918,"byte_end":50984,"line_start":17,"line_end":17,"column_start":1,"column_end":67}},{"value":"/ certain changes applied. The idea is that it contains methods that","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":50985,"byte_end":51055,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/ let you swap types/lifetimes for new types/lifetimes; meanwhile,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51056,"byte_end":51124,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/ each bit of IR implements the `Fold` trait which, given a","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51125,"byte_end":51186,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"/ `Folder`, will reconstruct itself, invoking the folder's methods","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51187,"byte_end":51255,"line_start":21,"line_end":21,"column_start":1,"column_end":69}},{"value":"/ to transform each of the types/lifetimes embedded within.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51256,"byte_end":51317,"line_start":22,"line_end":22,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51318,"byte_end":51321,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Type families","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51322,"byte_end":51341,"line_start":24,"line_end":24,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51342,"byte_end":51345,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The Folder trait has two type parameters, `TF` and `TTF`:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51346,"byte_end":51407,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51408,"byte_end":51411,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ * `TF` is the \"source type family\" that we are folding *from*","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51412,"byte_end":51477,"line_start":28,"line_end":28,"column_start":1,"column_end":66}},{"value":"/ * `TTF` is the \"target type family\" that we are folding *into*","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51478,"byte_end":51544,"line_start":29,"line_end":29,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51545,"byte_end":51548,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Often, both are the same.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51549,"byte_end":51578,"line_start":31,"line_end":31,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51579,"byte_end":51582,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Usage patterns","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51583,"byte_end":51603,"line_start":33,"line_end":33,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51604,"byte_end":51607,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Substituting for free variables","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51608,"byte_end":51646,"line_start":35,"line_end":35,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51647,"byte_end":51650,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Most of the time, though, we are not interested in adjust","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51651,"byte_end":51712,"line_start":37,"line_end":37,"column_start":1,"column_end":62}},{"value":"/ arbitrary types/lifetimes, but rather just free variables (even","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51713,"byte_end":51780,"line_start":38,"line_end":38,"column_start":1,"column_end":68}},{"value":"/ more often, just free existential variables) that appear within","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51781,"byte_end":51848,"line_start":39,"line_end":39,"column_start":1,"column_end":68}},{"value":"/ the term.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51849,"byte_end":51862,"line_start":40,"line_end":40,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51863,"byte_end":51866,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ For this reason, the `Folder` trait extends two other traits that","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51867,"byte_end":51936,"line_start":42,"line_end":42,"column_start":1,"column_end":70}},{"value":"/ contain methods that are invoked when just those particular","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":51937,"byte_end":52000,"line_start":43,"line_end":43,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52001,"byte_end":52004,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ In particular, folders can intercept references to free variables","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52005,"byte_end":52074,"line_start":45,"line_end":45,"column_start":1,"column_end":70}},{"value":"/ (either existentially or universally quantified) and replace them","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52075,"byte_end":52144,"line_start":46,"line_end":46,"column_start":1,"column_end":70}},{"value":"/ with other types/lifetimes as appropriate.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52145,"byte_end":52191,"line_start":47,"line_end":47,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52192,"byte_end":52195,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ To create a folder `F`, one never implements `Folder` directly, but instead","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52196,"byte_end":52275,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/ implements one of each of these three sub-traits:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52276,"byte_end":52329,"line_start":50,"line_end":50,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52330,"byte_end":52333,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ - `FreeVarFolder` -- folds `BoundVar` instances that appear free","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52334,"byte_end":52402,"line_start":52,"line_end":52,"column_start":1,"column_end":69}},{"value":"/   in the term being folded (use `DefaultFreeVarFolder` to","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52403,"byte_end":52464,"line_start":53,"line_end":53,"column_start":1,"column_end":62}},{"value":"/   ignore/forbid these altogether)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52465,"byte_end":52502,"line_start":54,"line_end":54,"column_start":1,"column_end":38}},{"value":"/ - `InferenceFolder` -- folds existential `InferenceVar` instances","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52503,"byte_end":52572,"line_start":55,"line_end":55,"column_start":1,"column_end":70}},{"value":"/   that appear in the term being folded (use","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52573,"byte_end":52620,"line_start":56,"line_end":56,"column_start":1,"column_end":48}},{"value":"/   `DefaultInferenceFolder` to ignore/forbid these altogether)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52621,"byte_end":52686,"line_start":57,"line_end":57,"column_start":1,"column_end":66}},{"value":"/ - `PlaceholderFolder` -- folds universal `Placeholder` instances","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52687,"byte_end":52755,"line_start":58,"line_end":58,"column_start":1,"column_end":69}},{"value":"/   that appear in the term being folded (use","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52756,"byte_end":52803,"line_start":59,"line_end":59,"column_start":1,"column_end":48}},{"value":"/   `DefaultPlaceholderFolder` to ignore/forbid these altogether)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52804,"byte_end":52871,"line_start":60,"line_end":60,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52872,"byte_end":52875,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ To **apply** a folder, use the `Fold::fold_with` method, like so","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52876,"byte_end":52944,"line_start":62,"line_end":62,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52945,"byte_end":52948,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52949,"byte_end":52967,"line_start":64,"line_end":64,"column_start":1,"column_end":19}},{"value":"/ let x = x.fold_with(&mut folder, 0);","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":52968,"byte_end":53008,"line_start":65,"line_end":65,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53009,"byte_end":53016,"line_start":66,"line_end":66,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":208},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53176,"byte_end":53186,"line_start":72,"line_end":72,"column_start":11,"column_end":21},"name":"TypeFolder","qualname":"::fold::TypeFolder","value":"TypeFolder<TF: TypeFamily, TTF: TypeFamily = TF>","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53234,"byte_end":53241,"line_start":73,"line_end":73,"column_start":8,"column_end":15},"name":"fold_ty","qualname":"::fold::TypeFolder::fold_ty","value":"pub fn fold_ty(&mut Self, &Ty<TF>, usize) -> Fallible<Ty<TTF>>","parent":{"krate":0,"index":208},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53311,"byte_end":53324,"line_start":74,"line_end":74,"column_start":8,"column_end":21},"name":"fold_lifetime","qualname":"::fold::TypeFolder::fold_lifetime","value":"pub fn fold_lifetime(&mut Self, &Lifetime<TF>, usize)\n-> Fallible<Lifetime<TTF>>","parent":{"krate":0,"index":208},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":217},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53917,"byte_end":53934,"line_start":91,"line_end":91,"column_start":11,"column_end":28},"name":"DefaultTypeFolder","qualname":"::fold::DefaultTypeFolder","value":"DefaultTypeFolder","parent":null,"children":[],"decl_id":null,"docs":" A convenience trait that indicates that this folder doesn't take\n any action on types in particular, but just recursively folds\n their contents (note that free variables that are encountered in\n that process may still be substituted). The vast majority of\n folders implement this trait.\n","sig":null,"attributes":[{"value":"/ A convenience trait that indicates that this folder doesn't take","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53604,"byte_end":53672,"line_start":86,"line_end":86,"column_start":1,"column_end":69}},{"value":"/ any action on types in particular, but just recursively folds","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53673,"byte_end":53738,"line_start":87,"line_end":87,"column_start":1,"column_end":66}},{"value":"/ their contents (note that free variables that are encountered in","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53739,"byte_end":53807,"line_start":88,"line_end":88,"column_start":1,"column_end":69}},{"value":"/ that process may still be substituted). The vast majority of","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53808,"byte_end":53872,"line_start":89,"line_end":89,"column_start":1,"column_end":65}},{"value":"/ folders implement this trait.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53873,"byte_end":53906,"line_start":90,"line_end":90,"column_start":1,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":224},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":54686,"byte_end":54699,"line_start":116,"line_end":116,"column_start":11,"column_end":24},"name":"FreeVarFolder","qualname":"::fold::FreeVarFolder","value":"FreeVarFolder<TTF: TypeFamily>","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227}],"decl_id":null,"docs":" The methods for folding **free variables**. These are `BoundVar`\n instances where the binder is not something we folded over.  This\n is used when you are instantiating previously bound things with some\n replacement.\n","sig":null,"attributes":[{"value":"/ The methods for folding **free variables**. These are `BoundVar`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":54447,"byte_end":54515,"line_start":112,"line_end":112,"column_start":1,"column_end":69}},{"value":"/ instances where the binder is not something we folded over.  This","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":54516,"byte_end":54585,"line_start":113,"line_end":113,"column_start":1,"column_end":70}},{"value":"/ is used when you are instantiating previously bound things with some","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":54586,"byte_end":54658,"line_start":114,"line_end":114,"column_start":1,"column_end":73}},{"value":"/ replacement.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":54659,"byte_end":54675,"line_start":115,"line_end":115,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":55114,"byte_end":55130,"line_start":125,"line_end":125,"column_start":8,"column_end":24},"name":"fold_free_var_ty","qualname":"::fold::FreeVarFolder::fold_free_var_ty","value":"pub fn fold_free_var_ty(&mut Self, usize, usize) -> Fallible<Ty<TTF>>","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" Invoked for `TyData::BoundVar` instances that are not bound within the type being folded\n over:","sig":null,"attributes":[{"value":"/ Invoked for `TyData::BoundVar` instances that are not bound within the type being folded","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":54723,"byte_end":54815,"line_start":117,"line_end":117,"column_start":5,"column_end":97}},{"value":"/ over:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":54820,"byte_end":54829,"line_start":118,"line_end":118,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":54834,"byte_end":54837,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ - `depth` is the depth of the `TyData::BoundVar`; this has been adjusted to account for binders","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":54842,"byte_end":54941,"line_start":120,"line_end":120,"column_start":5,"column_end":104}},{"value":"/   in scope.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":54946,"byte_end":54961,"line_start":121,"line_end":121,"column_start":5,"column_end":20}},{"value":"/ - `binders` is the number of binders in scope.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":54966,"byte_end":55016,"line_start":122,"line_end":122,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":55021,"byte_end":55024,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ This should return a type suitable for a context with `binders` in scope.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":55029,"byte_end":55106,"line_start":124,"line_end":124,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":55252,"byte_end":55274,"line_start":128,"line_end":128,"column_start":8,"column_end":30},"name":"fold_free_var_lifetime","qualname":"::fold::FreeVarFolder::fold_free_var_lifetime","value":"pub fn fold_free_var_lifetime(&mut Self, usize, usize)\n-> Fallible<Lifetime<TTF>>","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" As `fold_free_var_ty`, but for lifetimes.\n","sig":null,"attributes":[{"value":"/ As `fold_free_var_ty`, but for lifetimes.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":55199,"byte_end":55244,"line_start":127,"line_end":127,"column_start":5,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":228},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":55645,"byte_end":55665,"line_start":137,"line_end":137,"column_start":11,"column_end":31},"name":"DefaultFreeVarFolder","qualname":"::fold::DefaultFreeVarFolder","value":"DefaultFreeVarFolder","parent":null,"children":[{"krate":0,"index":229}],"decl_id":null,"docs":" A convenience trait. If you implement this, you get an\n implementation of `FreeVarFolder` for free that simply ignores\n free values (that is, it replaces them with themselves).","sig":null,"attributes":[{"value":"/ A convenience trait. If you implement this, you get an","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":55347,"byte_end":55405,"line_start":131,"line_end":131,"column_start":1,"column_end":59}},{"value":"/ implementation of `FreeVarFolder` for free that simply ignores","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":55406,"byte_end":55472,"line_start":132,"line_end":132,"column_start":1,"column_end":67}},{"value":"/ free values (that is, it replaces them with themselves).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":55473,"byte_end":55533,"line_start":133,"line_end":133,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":55534,"byte_end":55537,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ You can make it panic if a free-variable is found by overriding","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":55538,"byte_end":55605,"line_start":135,"line_end":135,"column_start":1,"column_end":68}},{"value":"/ `forbid` to return true.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":55606,"byte_end":55634,"line_start":136,"line_end":136,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":55675,"byte_end":55681,"line_start":138,"line_end":138,"column_start":8,"column_end":14},"name":"forbid","qualname":"::fold::DefaultFreeVarFolder::forbid","value":"pub fn forbid() -> bool","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":235},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":56391,"byte_end":56408,"line_start":161,"line_end":161,"column_start":11,"column_end":28},"name":"PlaceholderFolder","qualname":"::fold::PlaceholderFolder","value":"PlaceholderFolder<TTF: TypeFamily>","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":56804,"byte_end":56828,"line_start":169,"line_end":169,"column_start":8,"column_end":32},"name":"fold_free_placeholder_ty","qualname":"::fold::PlaceholderFolder::fold_free_placeholder_ty","value":"pub fn fold_free_placeholder_ty(&mut Self, PlaceholderIndex, usize)\n-> Fallible<Ty<TTF>>","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Invoked for each occurrence of a placeholder type; these are\n used when we instantiate binders universally. Returns a type\n to use instead, which should be suitably shifted to account\n for `binders`.","sig":null,"attributes":[{"value":"/ Invoked for each occurrence of a placeholder type; these are","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":56432,"byte_end":56496,"line_start":162,"line_end":162,"column_start":5,"column_end":69}},{"value":"/ used when we instantiate binders universally. Returns a type","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":56501,"byte_end":56565,"line_start":163,"line_end":163,"column_start":5,"column_end":69}},{"value":"/ to use instead, which should be suitably shifted to account","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":56570,"byte_end":56633,"line_start":164,"line_end":164,"column_start":5,"column_end":68}},{"value":"/ for `binders`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":56638,"byte_end":56656,"line_start":165,"line_end":165,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":56661,"byte_end":56664,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ - `universe` is the universe of the `TypeName::ForAll` that was found","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":56669,"byte_end":56742,"line_start":167,"line_end":167,"column_start":5,"column_end":78}},{"value":"/ - `binders` is the number of binders in scope","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":56747,"byte_end":56796,"line_start":168,"line_end":168,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":57008,"byte_end":57038,"line_start":176,"line_end":176,"column_start":8,"column_end":38},"name":"fold_free_placeholder_lifetime","qualname":"::fold::PlaceholderFolder::fold_free_placeholder_lifetime","value":"pub fn fold_free_placeholder_lifetime(&mut Self, PlaceholderIndex, usize)\n-> Fallible<Lifetime<TTF>>","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" As with `fold_free_placeholder_ty`, but for lifetimes.\n","sig":null,"attributes":[{"value":"/ As with `fold_free_placeholder_ty`, but for lifetimes.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":56942,"byte_end":57000,"line_start":175,"line_end":175,"column_start":5,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":239},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":57465,"byte_end":57489,"line_start":189,"line_end":189,"column_start":11,"column_end":35},"name":"DefaultPlaceholderFolder","qualname":"::fold::DefaultPlaceholderFolder","value":"DefaultPlaceholderFolder","parent":null,"children":[{"krate":0,"index":240}],"decl_id":null,"docs":" A convenience trait. If you implement this, you get an\n implementation of `PlaceholderFolder` for free that simply ignores\n placeholder values (that is, it replaces them with themselves).","sig":null,"attributes":[{"value":"/ A convenience trait. If you implement this, you get an","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":57156,"byte_end":57214,"line_start":183,"line_end":183,"column_start":1,"column_end":59}},{"value":"/ implementation of `PlaceholderFolder` for free that simply ignores","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":57215,"byte_end":57285,"line_start":184,"line_end":184,"column_start":1,"column_end":71}},{"value":"/ placeholder values (that is, it replaces them with themselves).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":57286,"byte_end":57353,"line_start":185,"line_end":185,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":57354,"byte_end":57357,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ You can make it panic if a free-variable is found by overriding","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":57358,"byte_end":57425,"line_start":187,"line_end":187,"column_start":1,"column_end":68}},{"value":"/ `forbid` to return true.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":57426,"byte_end":57454,"line_start":188,"line_end":188,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":57499,"byte_end":57505,"line_start":190,"line_end":190,"column_start":8,"column_end":14},"name":"forbid","qualname":"::fold::DefaultPlaceholderFolder::forbid","value":"pub fn forbid() -> bool","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":246},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":58273,"byte_end":58288,"line_start":221,"line_end":221,"column_start":11,"column_end":26},"name":"InferenceFolder","qualname":"::fold::InferenceFolder","value":"InferenceFolder<TTF: TypeFamily>","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":58682,"byte_end":58699,"line_start":229,"line_end":229,"column_start":8,"column_end":25},"name":"fold_inference_ty","qualname":"::fold::InferenceFolder::fold_inference_ty","value":"pub fn fold_inference_ty(&mut Self, InferenceVar, usize) -> Fallible<Ty<TTF>>","parent":{"krate":0,"index":246},"children":[],"decl_id":null,"docs":" Invoked for each occurrence of a inference type; these are\n used when we instantiate binders universally. Returns a type\n to use instead, which should be suitably shifted to account\n for `binders`.","sig":null,"attributes":[{"value":"/ Invoked for each occurrence of a inference type; these are","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":58312,"byte_end":58374,"line_start":222,"line_end":222,"column_start":5,"column_end":67}},{"value":"/ used when we instantiate binders universally. Returns a type","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":58379,"byte_end":58443,"line_start":223,"line_end":223,"column_start":5,"column_end":69}},{"value":"/ to use instead, which should be suitably shifted to account","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":58448,"byte_end":58511,"line_start":224,"line_end":224,"column_start":5,"column_end":68}},{"value":"/ for `binders`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":58516,"byte_end":58534,"line_start":225,"line_end":225,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":58539,"byte_end":58542,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ - `universe` is the universe of the `TypeName::ForAll` that was found","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":58547,"byte_end":58620,"line_start":227,"line_end":227,"column_start":5,"column_end":78}},{"value":"/ - `binders` is the number of binders in scope","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":58625,"byte_end":58674,"line_start":228,"line_end":228,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":58837,"byte_end":58860,"line_start":232,"line_end":232,"column_start":8,"column_end":31},"name":"fold_inference_lifetime","qualname":"::fold::InferenceFolder::fold_inference_lifetime","value":"pub fn fold_inference_lifetime(&mut Self, InferenceVar, usize)\n-> Fallible<Lifetime<TTF>>","parent":{"krate":0,"index":246},"children":[],"decl_id":null,"docs":" As with `fold_free_inference_ty`, but for lifetimes.\n","sig":null,"attributes":[{"value":"/ As with `fold_free_inference_ty`, but for lifetimes.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":58773,"byte_end":58829,"line_start":231,"line_end":231,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":250},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":59274,"byte_end":59296,"line_start":245,"line_end":245,"column_start":11,"column_end":33},"name":"DefaultInferenceFolder","qualname":"::fold::DefaultInferenceFolder","value":"DefaultInferenceFolder","parent":null,"children":[{"krate":0,"index":251}],"decl_id":null,"docs":" A convenience trait. If you implement this, you get an\n implementation of `InferenceFolder` for free that simply ignores\n inference values (that is, it replaces them with themselves).","sig":null,"attributes":[{"value":"/ A convenience trait. If you implement this, you get an","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":58969,"byte_end":59027,"line_start":239,"line_end":239,"column_start":1,"column_end":59}},{"value":"/ implementation of `InferenceFolder` for free that simply ignores","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":59028,"byte_end":59096,"line_start":240,"line_end":240,"column_start":1,"column_end":69}},{"value":"/ inference values (that is, it replaces them with themselves).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":59097,"byte_end":59162,"line_start":241,"line_end":241,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":59163,"byte_end":59166,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ You can make it panic if a free-variable is found by overriding","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":59167,"byte_end":59234,"line_start":243,"line_end":243,"column_start":1,"column_end":68}},{"value":"/ `forbid` to return true.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":59235,"byte_end":59263,"line_start":244,"line_end":244,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":59306,"byte_end":59312,"line_start":246,"line_end":246,"column_start":8,"column_end":14},"name":"forbid","qualname":"::fold::DefaultInferenceFolder::forbid","value":"pub fn forbid() -> bool","parent":{"krate":0,"index":250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":257},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":59990,"byte_end":60003,"line_start":273,"line_end":273,"column_start":11,"column_end":24},"name":"ReflexiveFold","qualname":"::fold::ReflexiveFold","value":"ReflexiveFold<TF: TypeFamily>: Fold<TF, TF, Result = Self> + Sized","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":262},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60809,"byte_end":60813,"line_start":297,"line_end":297,"column_start":11,"column_end":15},"name":"Fold","qualname":"::fold::Fold","value":"Fold<TF: TypeFamily, TTF: TypeFamily = TF>: Debug","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266}],"decl_id":null,"docs":" Applies the given `Folder` to a value, producing a folded result\n of type `Self::Result`. The result is in the type family\n `TTF`. The result type is typically the same as the source type\n (modulo type family), but in some cases we convert from borrowed\n to owned as well (e.g., the folder for `&T` will fold to a fresh\n `T`; well, actually `T::Result`).","sig":null,"attributes":[{"value":"/ Applies the given `Folder` to a value, producing a folded result","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60164,"byte_end":60232,"line_start":282,"line_end":282,"column_start":1,"column_end":69}},{"value":"/ of type `Self::Result`. The result is in the type family","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60233,"byte_end":60293,"line_start":283,"line_end":283,"column_start":1,"column_end":61}},{"value":"/ `TTF`. The result type is typically the same as the source type","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60294,"byte_end":60361,"line_start":284,"line_end":284,"column_start":1,"column_end":68}},{"value":"/ (modulo type family), but in some cases we convert from borrowed","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60362,"byte_end":60430,"line_start":285,"line_end":285,"column_start":1,"column_end":69}},{"value":"/ to owned as well (e.g., the folder for `&T` will fold to a fresh","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60431,"byte_end":60499,"line_start":286,"line_end":286,"column_start":1,"column_end":69}},{"value":"/ `T`; well, actually `T::Result`).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60500,"byte_end":60537,"line_start":287,"line_end":287,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60538,"byte_end":60541,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ # Type families","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60542,"byte_end":60561,"line_start":289,"line_end":289,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60562,"byte_end":60565,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ The `Fold` trait has two type parameters, `TF` and `TTF`:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60566,"byte_end":60627,"line_start":291,"line_end":291,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60628,"byte_end":60631,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ * `TF` is the \"source type family\" that we are folding *from*","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60632,"byte_end":60697,"line_start":293,"line_end":293,"column_start":1,"column_end":66}},{"value":"/ * `TTF` is the \"target type family\" that we are folding *into*","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60698,"byte_end":60764,"line_start":294,"line_end":294,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60765,"byte_end":60768,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ Often, both are the same.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60769,"byte_end":60798,"line_start":296,"line_end":296,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":265},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":61187,"byte_end":61193,"line_start":303,"line_end":303,"column_start":10,"column_end":16},"name":"Result","qualname":"::fold::Fold::Result","value":"type Result;","parent":{"krate":0,"index":262},"children":[],"decl_id":null,"docs":" The type of value that will be produced once folding is done.\n Typically this is `Self`, unless `Self` contains borrowed\n values, in which case owned values are produced (for example,\n one can fold over a `&T` value where `T: Fold`, in which case\n you get back a `T`, not a `&T`).\n","sig":null,"attributes":[{"value":"/ The type of value that will be produced once folding is done.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60865,"byte_end":60930,"line_start":298,"line_end":298,"column_start":5,"column_end":70}},{"value":"/ Typically this is `Self`, unless `Self` contains borrowed","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60935,"byte_end":60996,"line_start":299,"line_end":299,"column_start":5,"column_end":66}},{"value":"/ values, in which case owned values are produced (for example,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":61001,"byte_end":61066,"line_start":300,"line_end":300,"column_start":5,"column_end":70}},{"value":"/ one can fold over a `&T` value where `T: Fold`, in which case","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":61071,"byte_end":61136,"line_start":301,"line_end":301,"column_start":5,"column_end":70}},{"value":"/ you get back a `T`, not a `&T`).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":61141,"byte_end":61177,"line_start":302,"line_end":302,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":61485,"byte_end":61494,"line_start":310,"line_end":310,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::fold::Fold::fold_with","value":"pub fn fold_with(&Self, &mut Folder<TF, TTF>, usize) -> Fallible<Self::Result>","parent":{"krate":0,"index":262},"children":[],"decl_id":null,"docs":" Apply the given folder `folder` to `self`; `binders` is the\n number of binders that are in scope when beginning the\n folder. Typically `binders` starts as 0, but is adjusted when\n we encounter `Binders<T>` in the IR or other similar\n constructs.\n","sig":null,"attributes":[{"value":"/ Apply the given folder `folder` to `self`; `binders` is the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":61200,"byte_end":61263,"line_start":305,"line_end":305,"column_start":5,"column_end":68}},{"value":"/ number of binders that are in scope when beginning the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":61268,"byte_end":61326,"line_start":306,"line_end":306,"column_start":5,"column_end":63}},{"value":"/ folder. Typically `binders` starts as 0, but is adjusted when","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":61331,"byte_end":61396,"line_start":307,"line_end":307,"column_start":5,"column_end":70}},{"value":"/ we encounter `Binders<T>` in the IR or other similar","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":61401,"byte_end":61457,"line_start":308,"line_end":308,"column_start":5,"column_end":61}},{"value":"/ constructs.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":61462,"byte_end":61477,"line_start":309,"line_end":309,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":300},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":63826,"byte_end":63839,"line_start":390,"line_end":390,"column_start":8,"column_end":21},"name":"super_fold_ty","qualname":"::fold::super_fold_ty","value":"pub fn super_fold_ty<TF, TTF>(&mut Folder<TF, TTF>, &Ty<TF>, usize)\n-> Fallible<Ty<TTF>> where TF: TypeFamily, TTF: TypeFamily","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":335},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":68053,"byte_end":68072,"line_start":538,"line_end":538,"column_start":8,"column_end":27},"name":"super_fold_lifetime","qualname":"::fold::super_fold_lifetime","value":"pub fn super_fold_lifetime<TF: TypeFamily,\n                           TTF: TypeFamily>(&mut Folder<TF, TTF>,\n                                            &Lifetime<TF>, usize)\n-> Fallible<Lifetime<TTF>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":379},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cast","qualname":"::cast","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":2862},{"krate":0,"index":382},{"krate":0,"index":385},{"krate":0,"index":387},{"krate":0,"index":1128},{"krate":0,"index":1131},{"krate":0,"index":1134},{"krate":0,"index":1137},{"krate":0,"index":1140},{"krate":0,"index":1143},{"krate":0,"index":1146},{"krate":0,"index":391},{"krate":0,"index":394},{"krate":0,"index":397},{"krate":0,"index":401},{"krate":0,"index":405},{"krate":0,"index":409},{"krate":0,"index":412},{"krate":0,"index":415},{"krate":0,"index":418},{"krate":0,"index":421},{"krate":0,"index":426},{"krate":0,"index":429},{"krate":0,"index":432},{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":442},{"krate":0,"index":447},{"krate":0,"index":450},{"krate":0,"index":1149},{"krate":0,"index":1154},{"krate":0,"index":1160},{"krate":0,"index":454},{"krate":0,"index":458},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":467},{"krate":0,"index":470},{"krate":0,"index":475},{"krate":0,"index":482},{"krate":0,"index":485}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":382},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":82087,"byte_end":82091,"line_start":40,"line_end":40,"column_start":11,"column_end":15},"name":"Cast","qualname":"::cast::Cast","value":"Cast: Sized","parent":null,"children":[{"krate":0,"index":383}],"decl_id":null,"docs":" The `Cast` trait is used to make annoying upcasts between\n logically equivalent types that imply wrappers. For example, one\n could convert a `DomainGoal` into a `Goal` by doing:","sig":null,"attributes":[{"value":"/ The `Cast` trait is used to make annoying upcasts between","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":80875,"byte_end":80936,"line_start":4,"line_end":4,"column_start":1,"column_end":62}},{"value":"/ logically equivalent types that imply wrappers. For example, one","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":80937,"byte_end":81005,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ could convert a `DomainGoal` into a `Goal` by doing:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81006,"byte_end":81062,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81063,"byte_end":81066,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81067,"byte_end":81080,"line_start":8,"line_end":8,"column_start":1,"column_end":14}},{"value":"/ let goal: Goal = domain_goal.cast();","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81081,"byte_end":81121,"line_start":9,"line_end":9,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81122,"byte_end":81129,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81130,"byte_end":81133,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This is equivalent to the more explicit:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81134,"byte_end":81178,"line_start":12,"line_end":12,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81179,"byte_end":81182,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81183,"byte_end":81196,"line_start":14,"line_end":14,"column_start":1,"column_end":14}},{"value":"/ let goal: Goal = Goal::DomainGoal(domain_goal)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81197,"byte_end":81247,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81248,"byte_end":81255,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81256,"byte_end":81259,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Another useful trick is the `casted()` iterator adapter, which","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81260,"byte_end":81326,"line_start":18,"line_end":18,"column_start":1,"column_end":67}},{"value":"/ casts each element in the iterator as it is produced (you must","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81327,"byte_end":81393,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/ have the `Caster` trait in scope for that).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81394,"byte_end":81441,"line_start":20,"line_end":20,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81442,"byte_end":81445,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Invariant","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81446,"byte_end":81461,"line_start":22,"line_end":22,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81462,"byte_end":81465,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ `Cast` imposes a key invariant. You can only implement `T:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81466,"byte_end":81528,"line_start":24,"line_end":24,"column_start":1,"column_end":63}},{"value":"/ Cast<U>` if both `T` and `U` have the same semantic meaning. Also,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81529,"byte_end":81599,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/ as part of this, they should always use the same set of free","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81600,"byte_end":81664,"line_start":26,"line_end":26,"column_start":1,"column_end":65}},{"value":"/ variables (the `Canonical` implementation, for example, relies on","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81665,"byte_end":81734,"line_start":27,"line_end":27,"column_start":1,"column_end":70}},{"value":"/ that).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81735,"byte_end":81745,"line_start":28,"line_end":28,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81746,"byte_end":81749,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Iterators","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81750,"byte_end":81765,"line_start":30,"line_end":30,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81766,"byte_end":81769,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ If you import the `Caster` trait, you can also write `.casted()` on an","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81770,"byte_end":81844,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/ iterator chain to cast every instance within.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81845,"byte_end":81894,"line_start":33,"line_end":33,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81895,"byte_end":81898,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Implementing Cast","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81899,"byte_end":81922,"line_start":35,"line_end":35,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81923,"byte_end":81926,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Do not implement `Cast` directly. Instead, implement `CastTo`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81927,"byte_end":81993,"line_start":37,"line_end":37,"column_start":1,"column_end":67}},{"value":"/ This split setup allows us to write `foo.cast::<T>()` to mean","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":81994,"byte_end":82059,"line_start":38,"line_end":38,"column_start":1,"column_end":66}},{"value":"/ \"cast to T\".","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":82060,"byte_end":82076,"line_start":39,"line_end":39,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":82108,"byte_end":82112,"line_start":41,"line_end":41,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast::Cast::cast","value":"pub fn cast<U>(Self) -> U where Self: CastTo<U>","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":387},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":82444,"byte_end":82450,"line_start":55,"line_end":55,"column_start":11,"column_end":17},"name":"CastTo","qualname":"::cast::CastTo","value":"CastTo<T>: Sized","parent":null,"children":[{"krate":0,"index":389}],"decl_id":null,"docs":" The \"helper\" trait for `cast` that actually implements the\n transformations. You can also use this if you want to have\n functions that take (e.g.) an `impl CastTo<Goal<_>>` or something\n like that.\n","sig":null,"attributes":[{"value":"/ The \"helper\" trait for `cast` that actually implements the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":82223,"byte_end":82285,"line_start":51,"line_end":51,"column_start":1,"column_end":63}},{"value":"/ transformations. You can also use this if you want to have","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":82286,"byte_end":82348,"line_start":52,"line_end":52,"column_start":1,"column_end":63}},{"value":"/ functions that take (e.g.) an `impl CastTo<Goal<_>>` or something","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":82349,"byte_end":82418,"line_start":53,"line_end":53,"column_start":1,"column_end":70}},{"value":"/ like that.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":82419,"byte_end":82433,"line_start":54,"line_end":54,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":82470,"byte_end":82477,"line_start":56,"line_end":56,"column_start":8,"column_end":15},"name":"cast_to","qualname":"::cast::CastTo::cast_to","value":"pub fn cast_to(Self) -> T","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":470},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":88227,"byte_end":88233,"line_start":294,"line_end":294,"column_start":12,"column_end":18},"name":"Casted","qualname":"::cast::Casted","value":"Casted {  }","parent":null,"children":[{"krate":0,"index":473},{"krate":0,"index":474}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":482},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":88697,"byte_end":88703,"line_start":316,"line_end":316,"column_start":11,"column_end":17},"name":"Caster","qualname":"::cast::Caster","value":"Caster: Iterator + Sized","parent":null,"children":[{"krate":0,"index":483}],"decl_id":null,"docs":" An iterator adapter that casts each element we are iterating over\n to some other type.\n","sig":null,"attributes":[{"value":"/ An iterator adapter that casts each element we are iterating over","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":88593,"byte_end":88662,"line_start":314,"line_end":314,"column_start":1,"column_end":70}},{"value":"/ to some other type.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":88663,"byte_end":88686,"line_start":315,"line_end":315,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":88731,"byte_end":88737,"line_start":317,"line_end":317,"column_start":8,"column_end":14},"name":"casted","qualname":"::cast::Caster::casted","value":"pub fn casted<U>(Self) -> Casted<Self, U> where Self::Item: CastTo<U>","parent":{"krate":0,"index":482},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":487},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"family","qualname":"::family","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":2864},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":2880},{"krate":0,"index":498},{"krate":0,"index":2882},{"krate":0,"index":499},{"krate":0,"index":2884},{"krate":0,"index":500},{"krate":0,"index":508},{"krate":0,"index":1166},{"krate":0,"index":1183},{"krate":0,"index":1182},{"krate":0,"index":1180},{"krate":0,"index":1177},{"krate":0,"index":1175},{"krate":0,"index":1173},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":510},{"krate":0,"index":519},{"krate":0,"index":521},{"krate":0,"index":524},{"krate":0,"index":527},{"krate":0,"index":530},{"krate":0,"index":533},{"krate":0,"index":536},{"krate":0,"index":541}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":500},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90076,"byte_end":90086,"line_start":27,"line_end":27,"column_start":11,"column_end":21},"name":"TypeFamily","qualname":"::family::TypeFamily","value":"TypeFamily: Debug + Copy + Eq + Ord + Hash","parent":null,"children":[{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507}],"decl_id":null,"docs":" A \"type family\" encapsulates the concrete representation of\n certain \"core types\" from chalk-ir. All the types in chalk-ir are\n parameterized by a `TF: TypeFamily`, and so (e.g.) if they want to\n store a type, they don't store a `Ty<TF>` instance directly, but\n rather prefer a `Ty<TF>`. You can think of `TF::Type` as the\n interned representation (and, indeed, it may well be an interned\n pointer, e.g. in rustc).","sig":null,"attributes":[{"value":"/ A \"type family\" encapsulates the concrete representation of","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":89207,"byte_end":89270,"line_start":12,"line_end":12,"column_start":1,"column_end":64}},{"value":"/ certain \"core types\" from chalk-ir. All the types in chalk-ir are","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":89271,"byte_end":89340,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"/ parameterized by a `TF: TypeFamily`, and so (e.g.) if they want to","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":89341,"byte_end":89411,"line_start":14,"line_end":14,"column_start":1,"column_end":71}},{"value":"/ store a type, they don't store a `Ty<TF>` instance directly, but","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":89412,"byte_end":89480,"line_start":15,"line_end":15,"column_start":1,"column_end":69}},{"value":"/ rather prefer a `Ty<TF>`. You can think of `TF::Type` as the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":89481,"byte_end":89545,"line_start":16,"line_end":16,"column_start":1,"column_end":65}},{"value":"/ interned representation (and, indeed, it may well be an interned","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":89546,"byte_end":89614,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ pointer, e.g. in rustc).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":89615,"byte_end":89643,"line_start":18,"line_end":18,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":89644,"byte_end":89647,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Type families allow chalk to be embedded in different contexts","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":89648,"byte_end":89714,"line_start":20,"line_end":20,"column_start":1,"column_end":67}},{"value":"/ where the concrete representation of core types varies. They also","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":89715,"byte_end":89784,"line_start":21,"line_end":21,"column_start":1,"column_end":70}},{"value":"/ allow us to write generic code that reasons about multiple","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":89785,"byte_end":89847,"line_start":22,"line_end":22,"column_start":1,"column_end":63}},{"value":"/ distinct sets of types by using distinct generic type parameters","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":89848,"byte_end":89916,"line_start":23,"line_end":23,"column_start":1,"column_end":69}},{"value":"/ (e.g., `SourceTF` and `TargetTF`) -- even if those type parameters","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":89917,"byte_end":89987,"line_start":24,"line_end":24,"column_start":1,"column_end":71}},{"value":"/ wind up being mapped to the same underlying type families in the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":89988,"byte_end":90056,"line_start":25,"line_end":25,"column_start":1,"column_end":69}},{"value":"/ end.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90057,"byte_end":90065,"line_start":26,"line_end":26,"column_start":1,"column_end":9}}]},{"kind":"Type","id":{"krate":0,"index":501},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90246,"byte_end":90258,"line_start":30,"line_end":30,"column_start":10,"column_end":22},"name":"InternedType","qualname":"::family::TypeFamily::InternedType","value":"type InternedType: Debug + Clone + Eq + Ord + Hash;","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" \"Interned\" representation of types. You can use the `Lookup`\n trait to convert this to a `Ty<Self>`.\n","sig":null,"attributes":[{"value":"/ \"Interned\" representation of types. You can use the `Lookup`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90125,"byte_end":90189,"line_start":28,"line_end":28,"column_start":5,"column_end":69}},{"value":"/ trait to convert this to a `Ty<Self>`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90194,"byte_end":90236,"line_start":29,"line_end":29,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":502},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90429,"byte_end":90445,"line_start":34,"line_end":34,"column_start":10,"column_end":26},"name":"InternedLifetime","qualname":"::family::TypeFamily::InternedLifetime","value":"type InternedLifetime: Debug + Clone + Eq + Ord + Hash;","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" \"Interned\" representation of lifetimes. You can use the\n `Lookup` trait to convert this to a `Lifetime<Self>`.\n","sig":null,"attributes":[{"value":"/ \"Interned\" representation of lifetimes. You can use the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90298,"byte_end":90357,"line_start":32,"line_end":32,"column_start":5,"column_end":64}},{"value":"/ `Lookup` trait to convert this to a `Lifetime<Self>`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90362,"byte_end":90419,"line_start":33,"line_end":33,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90720,"byte_end":90736,"line_start":40,"line_end":40,"column_start":8,"column_end":24},"name":"debug_projection","qualname":"::family::TypeFamily::debug_projection","value":"pub fn debug_projection(&ProjectionTy<Self>, &mut fmt::Formatter)\n-> fmt::Result","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Prints the debug representation of a projection. To get good\n results, this requires inspecting TLS, and is difficult to\n code without reference to a specific type-family (and hence\n fully known types).\n","sig":null,"attributes":[{"value":"/ Prints the debug representation of a projection. To get good","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90485,"byte_end":90549,"line_start":36,"line_end":36,"column_start":5,"column_end":69}},{"value":"/ results, this requires inspecting TLS, and is difficult to","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90554,"byte_end":90616,"line_start":37,"line_end":37,"column_start":5,"column_end":67}},{"value":"/ code without reference to a specific type-family (and hence","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90621,"byte_end":90684,"line_start":38,"line_end":38,"column_start":5,"column_end":68}},{"value":"/ fully known types).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90689,"byte_end":90712,"line_start":39,"line_end":39,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91026,"byte_end":91035,"line_start":48,"line_end":48,"column_start":8,"column_end":17},"name":"intern_ty","qualname":"::family::TypeFamily::intern_ty","value":"pub fn intern_ty(TyData<Self>) -> Self::InternedType","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Create an \"interned\" type from `ty`. This is not normally\n invoked directly; instead, you invoke `TyData::intern` (which\n will ultimately call this method).\n","sig":null,"attributes":[{"value":"/ Create an \"interned\" type from `ty`. This is not normally","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90844,"byte_end":90905,"line_start":45,"line_end":45,"column_start":5,"column_end":66}},{"value":"/ invoked directly; instead, you invoke `TyData::intern` (which","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90910,"byte_end":90975,"line_start":46,"line_end":46,"column_start":5,"column_end":70}},{"value":"/ will ultimately call this method).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90980,"byte_end":91018,"line_start":47,"line_end":47,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91136,"byte_end":91143,"line_start":51,"line_end":51,"column_start":8,"column_end":15},"name":"ty_data","qualname":"::family::TypeFamily::ty_data","value":"pub fn ty_data(&Self::InternedType) -> &TyData<Self>","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Lookup the `TyData` from an interned type.\n","sig":null,"attributes":[{"value":"/ Lookup the `TyData` from an interned type.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91082,"byte_end":91128,"line_start":50,"line_end":50,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91398,"byte_end":91413,"line_start":57,"line_end":57,"column_start":8,"column_end":23},"name":"intern_lifetime","qualname":"::family::TypeFamily::intern_lifetime","value":"pub fn intern_lifetime(LifetimeData<Self>) -> Self::InternedLifetime","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Create an \"interned\" lifetime from `lifetime`. This is not\n normally invoked directly; instead, you invoke\n `LifetimeData::intern` (which will ultimately call this\n method).\n","sig":null,"attributes":[{"value":"/ Create an \"interned\" lifetime from `lifetime`. This is not","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91192,"byte_end":91254,"line_start":53,"line_end":53,"column_start":5,"column_end":67}},{"value":"/ normally invoked directly; instead, you invoke","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91259,"byte_end":91309,"line_start":54,"line_end":54,"column_start":5,"column_end":55}},{"value":"/ `LifetimeData::intern` (which will ultimately call this","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91314,"byte_end":91373,"line_start":55,"line_end":55,"column_start":5,"column_end":64}},{"value":"/ method).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91378,"byte_end":91390,"line_start":56,"line_end":56,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91479,"byte_end":91492,"line_start":59,"line_end":59,"column_start":8,"column_end":21},"name":"lifetime_data","qualname":"::family::TypeFamily::lifetime_data","value":"pub fn lifetime_data(&Self::InternedLifetime) -> &LifetimeData<Self>","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":508},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91924,"byte_end":91937,"line_start":69,"line_end":69,"column_start":11,"column_end":24},"name":"HasTypeFamily","qualname":"::family::HasTypeFamily","value":"HasTypeFamily","parent":null,"children":[{"krate":0,"index":509}],"decl_id":null,"docs":" Implemented by types that have an associated type family (which\n are virtually all of the types in chalk-ir, for example).\n This lets us map from a type like `Ty<TF>` to the parameter `TF`.","sig":null,"attributes":[{"value":"/ Implemented by types that have an associated type family (which","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91555,"byte_end":91622,"line_start":62,"line_end":62,"column_start":1,"column_end":68}},{"value":"/ are virtually all of the types in chalk-ir, for example).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91623,"byte_end":91684,"line_start":63,"line_end":63,"column_start":1,"column_end":62}},{"value":"/ This lets us map from a type like `Ty<TF>` to the parameter `TF`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91685,"byte_end":91754,"line_start":64,"line_end":64,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91755,"byte_end":91758,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ It's particularly useful for writing `Fold` impls for generic","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91759,"byte_end":91824,"line_start":66,"line_end":66,"column_start":1,"column_end":66}},{"value":"/ types like `Binder<T>`, since it allows us to figure out the type","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91825,"byte_end":91894,"line_start":67,"line_end":67,"column_start":1,"column_end":70}},{"value":"/ family of `T`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91895,"byte_end":91913,"line_start":68,"line_end":68,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":509},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91949,"byte_end":91959,"line_start":70,"line_end":70,"column_start":10,"column_end":20},"name":"TypeFamily","qualname":"::family::HasTypeFamily::TypeFamily","value":"type TypeFamily: TypeFamily;","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1166},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":92182,"byte_end":92189,"line_start":76,"line_end":76,"column_start":12,"column_end":19},"name":"ChalkIr","qualname":"::family::ChalkIr","value":"ChalkIr {  }","parent":null,"children":[],"decl_id":null,"docs":" The default \"type family\" and the only type family used by chalk\n itself. In this family, no interning actually occurs.\n","sig":null,"attributes":[{"value":"/ The default \"type family\" and the only type family used by chalk","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":91976,"byte_end":92044,"line_start":73,"line_end":73,"column_start":1,"column_end":69}},{"value":"/ itself. In this family, no interning actually occurs.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":92045,"byte_end":92102,"line_start":74,"line_end":74,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":547},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/could_match.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"could_match","qualname":"::could_match","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/could_match.rs","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":556},{"krate":0,"index":569}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":553},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/could_match.rs","byte_start":94092,"byte_end":94102,"line_start":6,"line_end":6,"column_start":11,"column_end":21},"name":"CouldMatch","qualname":"::could_match::CouldMatch","value":"CouldMatch<T: ?Sized>","parent":null,"children":[{"krate":0,"index":555}],"decl_id":null,"docs":" A fast check to see whether two things could ever possibly match.\n","sig":null,"attributes":[{"value":"/ A fast check to see whether two things could ever possibly match.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/could_match.rs","byte_start":94012,"byte_end":94081,"line_start":5,"line_end":5,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/could_match.rs","byte_start":94123,"byte_end":94134,"line_start":7,"line_end":7,"column_start":8,"column_end":19},"name":"could_match","qualname":"::could_match::CouldMatch::could_match","value":"pub fn could_match(&Self, &T) -> bool","parent":{"krate":0,"index":553},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":572},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"debug","qualname":"::debug","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","parent":null,"children":[{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":2896},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":2900},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":581},{"krate":0,"index":583},{"krate":0,"index":586},{"krate":0,"index":589},{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":598},{"krate":0,"index":601},{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":609},{"krate":0,"index":612},{"krate":0,"index":615},{"krate":0,"index":617},{"krate":0,"index":620},{"krate":0,"index":626},{"krate":0,"index":629},{"krate":0,"index":634},{"krate":0,"index":637},{"krate":0,"index":640},{"krate":0,"index":645},{"krate":0,"index":649},{"krate":0,"index":652},{"krate":0,"index":655},{"krate":0,"index":658},{"krate":0,"index":661},{"krate":0,"index":664},{"krate":0,"index":667},{"krate":0,"index":670},{"krate":0,"index":673},{"krate":0,"index":676},{"krate":0,"index":679},{"krate":0,"index":682},{"krate":0,"index":685},{"krate":0,"index":688},{"krate":0,"index":691},{"krate":0,"index":695},{"krate":0,"index":698},{"krate":0,"index":701},{"krate":0,"index":704},{"krate":0,"index":707}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":100465,"byte_end":100472,"line_start":138,"line_end":138,"column_start":12,"column_end":19},"name":"with_as","qualname":"<TraitRef<TF>>::with_as","value":"pub fn with_as(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns a \"Debuggable\" type that prints like `P0 as Trait<P1..>`\n","sig":null,"attributes":[{"value":"/ Returns a \"Debuggable\" type that prints like `P0 as Trait<P1..>`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":100385,"byte_end":100453,"line_start":137,"line_end":137,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":100698,"byte_end":100708,"line_start":146,"line_end":146,"column_start":12,"column_end":22},"name":"with_colon","qualname":"<TraitRef<TF>>::with_colon","value":"pub fn with_colon(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns a \"Debuggable\" type that prints like `P0: Trait<P1..>`\n","sig":null,"attributes":[{"value":"/ Returns a \"Debuggable\" type that prints like `P0: Trait<P1..>`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":100620,"byte_end":100686,"line_start":145,"line_end":145,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":640},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":101653,"byte_end":101658,"line_start":184,"line_end":184,"column_start":12,"column_end":17},"name":"Angle","qualname":"::debug::Angle","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":644},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":101670,"byte_end":101681,"line_start":184,"line_end":184,"column_start":29,"column_end":40},"name":"0","qualname":"::debug::Angle::0","value":"&'a [T]","parent":{"krate":0,"index":640},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":710},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/tls.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tls","qualname":"::tls","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/tls.rs","parent":null,"children":[{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":1185},{"krate":0,"index":718},{"krate":0,"index":721},{"krate":0,"index":725}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":718},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/tls.rs","byte_start":110207,"byte_end":110219,"line_start":11,"line_end":11,"column_start":11,"column_end":23},"name":"DebugContext","qualname":"::tls::DebugContext","value":"DebugContext","parent":null,"children":[{"krate":0,"index":719},{"krate":0,"index":720}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/tls.rs","byte_start":110229,"byte_end":110247,"line_start":12,"line_end":12,"column_start":8,"column_end":26},"name":"debug_type_kind_id","qualname":"::tls::DebugContext::debug_type_kind_id","value":"pub fn debug_type_kind_id(&Self, TypeKindId, &mut fmt::Formatter)\n-> Result<(), fmt::Error>","parent":{"krate":0,"index":718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/tls.rs","byte_start":110363,"byte_end":110379,"line_start":18,"line_end":18,"column_start":8,"column_end":24},"name":"debug_projection","qualname":"::tls::DebugContext::debug_projection","value":"pub fn debug_projection(&Self, &ProjectionTy<ChalkIr>, &mut fmt::Formatter)\n-> Result<(), fmt::Error>","parent":{"krate":0,"index":718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":721},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/tls.rs","byte_start":110517,"byte_end":110537,"line_start":25,"line_end":25,"column_start":8,"column_end":28},"name":"with_current_program","qualname":"::tls::with_current_program","value":"pub fn with_current_program<R,\n                            impl FnOnce(Option<&Arc<dyn DebugContext>>) -> R: FnOnce(Option<&Arc<DebugContext>>)\n                            ->\n                            R>(impl FnOnce(Option<&Arc<dyn DebugContext>>) -> R)\n-> R","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":725},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/tls.rs","byte_start":110709,"byte_end":110728,"line_start":32,"line_end":32,"column_start":8,"column_end":27},"name":"set_current_program","qualname":"::tls::set_current_program","value":"pub fn set_current_program<OP, R, impl DebugContext + 'static: DebugContext +\n                           'static>(&Arc<impl DebugContext + 'static>, OP)\n-> R where OP: FnOnce() -> R","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":730},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":1302,"byte_end":1312,"line_start":62,"line_end":62,"column_start":10,"column_end":20},"name":"Identifier","qualname":"::Identifier","value":"InternedString","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1189},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":1540,"byte_end":1551,"line_start":67,"line_end":67,"column_start":12,"column_end":23},"name":"Environment","qualname":"::Environment","value":"Environment { clauses }","parent":null,"children":[{"krate":0,"index":1191}],"decl_id":null,"docs":" The set of assumptions we've made so far, and the current number of\n universal (forall) quantifiers we're within.\n","sig":null,"attributes":[{"value":"/ The set of assumptions we've made so far, and the current number of","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":1408,"byte_end":1479,"line_start":65,"line_end":65,"column_start":1,"column_end":72}},{"value":"/ universal (forall) quantifiers we're within.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":1480,"byte_end":1528,"line_start":66,"line_end":66,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":1191},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":1578,"byte_end":1585,"line_start":68,"line_end":68,"column_start":9,"column_end":16},"name":"clauses","qualname":"::Environment::clauses","value":"std::vec::Vec<ProgramClause<TF>>","parent":{"krate":0,"index":1189},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":1664,"byte_end":1667,"line_start":72,"line_end":72,"column_start":12,"column_end":15},"name":"new","qualname":"<Environment<TF>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":1738,"byte_end":1749,"line_start":76,"line_end":76,"column_start":12,"column_end":23},"name":"add_clauses","qualname":"<Environment<TF>>::add_clauses","value":"pub fn add_clauses<I>(&Self, I) -> Self where I: IntoIterator<Item =\nProgramClause<TF>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1228},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":2129,"byte_end":2142,"line_start":88,"line_end":88,"column_start":12,"column_end":25},"name":"InEnvironment","qualname":"::InEnvironment","value":"InEnvironment { environment, goal }","parent":null,"children":[{"krate":0,"index":1230},{"krate":0,"index":1231}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1230},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":2171,"byte_end":2182,"line_start":89,"line_end":89,"column_start":9,"column_end":20},"name":"environment","qualname":"::InEnvironment::environment","value":"Environment<<G as family::HasTypeFamily>::TypeFamily>","parent":{"krate":0,"index":1228},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1231},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":2220,"byte_end":2224,"line_start":90,"line_end":90,"column_start":9,"column_end":13},"name":"goal","qualname":"::InEnvironment::goal","value":"G","parent":{"krate":0,"index":1228},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":2285,"byte_end":2288,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"new","qualname":"<InEnvironment<G>>::new","value":"pub fn new(&Environment<G::TypeFamily>, G) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":2466,"byte_end":2469,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"map","qualname":"<InEnvironment<G>>::map","value":"pub fn map<OP, H>(Self, OP) -> InEnvironment<H> where OP: FnOnce(G) -> H,\nH: HasTypeFamily<TypeFamily = G::TypeFamily>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1275},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":2942,"byte_end":2952,"line_start":120,"line_end":120,"column_start":5,"column_end":15},"name":"TypeKindId","qualname":"::TypeName::TypeKindId","value":"TypeName::TypeKindId(TypeKindId)","parent":{"krate":0,"index":1274},"children":[],"decl_id":null,"docs":" a type like `Vec<T>`\n","sig":null,"attributes":[{"value":"/ a type like `Vec<T>`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":2913,"byte_end":2937,"line_start":119,"line_end":119,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1278},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":3129,"byte_end":3140,"line_start":125,"line_end":125,"column_start":5,"column_end":16},"name":"Placeholder","qualname":"::TypeName::Placeholder","value":"TypeName::Placeholder(PlaceholderIndex)","parent":{"krate":0,"index":1274},"children":[],"decl_id":null,"docs":" instantiated form a universally quantified type, e.g., from\n `forall<T> { .. }`. Stands in as a representative of \"some\n unknown type\".\n","sig":null,"attributes":[{"value":"/ instantiated form a universally quantified type, e.g., from","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":2971,"byte_end":3034,"line_start":122,"line_end":122,"column_start":5,"column_end":68}},{"value":"/ `forall<T> { .. }`. Stands in as a representative of \"some","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":3039,"byte_end":3101,"line_start":123,"line_end":123,"column_start":5,"column_end":67}},{"value":"/ unknown type\".","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":3106,"byte_end":3124,"line_start":124,"line_end":124,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1281},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":3248,"byte_end":3262,"line_start":128,"line_end":128,"column_start":5,"column_end":19},"name":"AssociatedType","qualname":"::TypeName::AssociatedType","value":"TypeName::AssociatedType(TypeId)","parent":{"krate":0,"index":1274},"children":[],"decl_id":null,"docs":" an associated type like `Iterator::Item`; see `AssociatedType` for details\n","sig":null,"attributes":[{"value":"/ an associated type like `Iterator::Item`; see `AssociatedType` for details","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":3165,"byte_end":3243,"line_start":127,"line_end":127,"column_start":5,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1284},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":3441,"byte_end":3446,"line_start":132,"line_end":132,"column_start":5,"column_end":10},"name":"Error","qualname":"::TypeName::Error","value":"TypeName::Error","parent":{"krate":0,"index":1274},"children":[],"decl_id":null,"docs":" This can be used to represent an error, e.g. during name resolution of a type.\n Chalk itself will not produce this, just pass it through when given.\n","sig":null,"attributes":[{"value":"/ This can be used to represent an error, e.g. during name resolution of a type.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":3277,"byte_end":3359,"line_start":130,"line_end":130,"column_start":5,"column_end":87}},{"value":"/ Chalk itself will not produce this, just pass it through when given.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":3364,"byte_end":3436,"line_start":131,"line_end":131,"column_start":5,"column_end":77}}]},{"kind":"Enum","id":{"krate":0,"index":1274},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":2898,"byte_end":2906,"line_start":118,"line_end":118,"column_start":10,"column_end":18},"name":"TypeName","qualname":"::TypeName","value":"pub enum TypeName {\n\n    /// a type like `Vec<T>`\n    TypeKindId(TypeKindId),\n\n    /// instantiated form a universally quantified type, e.g., from\n    /// `forall<T> { .. }`. Stands in as a representative of \"some\n    /// unknown type\".\n    Placeholder(PlaceholderIndex),\n\n    /// an associated type like `Iterator::Item`; see `AssociatedType` for details\n    AssociatedType(TypeId),\n\n    /// This can be used to represent an error, e.g. during name resolution of a type.\n    /// Chalk itself will not produce this, just pass it through when given.\n    Error,\n}","parent":null,"children":[{"krate":0,"index":1275},{"krate":0,"index":1278},{"krate":0,"index":1281},{"krate":0,"index":1284}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1307},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":4028,"byte_end":4041,"line_start":143,"line_end":143,"column_start":12,"column_end":25},"name":"UniverseIndex","qualname":"::UniverseIndex","value":"UniverseIndex { counter }","parent":null,"children":[{"krate":0,"index":1308}],"decl_id":null,"docs":" An universe index is how a universally quantified parameter is\n represented when it's binder is moved into the environment.\n An example chain of transformations would be:\n `forall<T> { Goal(T) }` (syntactical representation)\n `forall { Goal(?0) }` (used a DeBruijn index)\n `Goal(!U1)` (the quantifier was moved to the environment and replaced with a universe index)\n See https://rust-lang.github.io/rustc-guide/borrow_check/region_inference.html#placeholders-and-universes for more.\n","sig":null,"attributes":[{"value":"/ An universe index is how a universally quantified parameter is","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":3451,"byte_end":3517,"line_start":135,"line_end":135,"column_start":1,"column_end":67}},{"value":"/ represented when it's binder is moved into the environment.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":3518,"byte_end":3581,"line_start":136,"line_end":136,"column_start":1,"column_end":64}},{"value":"/ An example chain of transformations would be:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":3582,"byte_end":3631,"line_start":137,"line_end":137,"column_start":1,"column_end":50}},{"value":"/ `forall<T> { Goal(T) }` (syntactical representation)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":3632,"byte_end":3688,"line_start":138,"line_end":138,"column_start":1,"column_end":57}},{"value":"/ `forall { Goal(?0) }` (used a DeBruijn index)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":3689,"byte_end":3738,"line_start":139,"line_end":139,"column_start":1,"column_end":50}},{"value":"/ `Goal(!U1)` (the quantifier was moved to the environment and replaced with a universe index)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":3739,"byte_end":3835,"line_start":140,"line_end":140,"column_start":1,"column_end":97}},{"value":"/ See https://rust-lang.github.io/rustc-guide/borrow_check/region_inference.html#placeholders-and-universes for more.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":3836,"byte_end":3955,"line_start":141,"line_end":141,"column_start":1,"column_end":120}}]},{"kind":"Field","id":{"krate":0,"index":1308},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":4052,"byte_end":4059,"line_start":144,"line_end":144,"column_start":9,"column_end":16},"name":"counter","qualname":"::UniverseIndex::counter","value":"usize","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":746},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":4106,"byte_end":4110,"line_start":148,"line_end":148,"column_start":15,"column_end":19},"name":"ROOT","qualname":"::UniverseIndex::ROOT","value":"UniverseIndex","parent":{"krate":0,"index":745},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":747},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":4170,"byte_end":4174,"line_start":150,"line_end":150,"column_start":12,"column_end":16},"name":"root","qualname":"<UniverseIndex>::root","value":"pub fn root() -> UniverseIndex","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":4233,"byte_end":4240,"line_start":154,"line_end":154,"column_start":12,"column_end":19},"name":"can_see","qualname":"<UniverseIndex>::can_see","value":"pub fn can_see(Self, UniverseIndex) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":4329,"byte_end":4333,"line_start":158,"line_end":158,"column_start":12,"column_end":16},"name":"next","qualname":"<UniverseIndex>::next","value":"pub fn next(Self) -> UniverseIndex","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1330},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":4513,"byte_end":4521,"line_start":166,"line_end":166,"column_start":12,"column_end":20},"name":"StructId","qualname":"::StructId","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1332},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":4522,"byte_end":4531,"line_start":166,"line_end":166,"column_start":21,"column_end":30},"name":"0","qualname":"::StructId::0","value":"RawId","parent":{"krate":0,"index":1330},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1354},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":4607,"byte_end":4614,"line_start":169,"line_end":169,"column_start":12,"column_end":19},"name":"TraitId","qualname":"::TraitId","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1356},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":4615,"byte_end":4624,"line_start":169,"line_end":169,"column_start":20,"column_end":29},"name":"0","qualname":"::TraitId::0","value":"RawId","parent":{"krate":0,"index":1354},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1378},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":4700,"byte_end":4706,"line_start":172,"line_end":172,"column_start":12,"column_end":18},"name":"ImplId","qualname":"::ImplId","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1380},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":4707,"byte_end":4716,"line_start":172,"line_end":172,"column_start":19,"column_end":28},"name":"0","qualname":"::ImplId::0","value":"RawId","parent":{"krate":0,"index":1378},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1402},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":4792,"byte_end":4800,"line_start":175,"line_end":175,"column_start":12,"column_end":20},"name":"ClauseId","qualname":"::ClauseId","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1404},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":4801,"byte_end":4810,"line_start":175,"line_end":175,"column_start":21,"column_end":30},"name":"0","qualname":"::ClauseId::0","value":"RawId","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1426},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":4886,"byte_end":4892,"line_start":178,"line_end":178,"column_start":12,"column_end":18},"name":"TypeId","qualname":"::TypeId","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1428},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":4893,"byte_end":4902,"line_start":178,"line_end":178,"column_start":19,"column_end":28},"name":"0","qualname":"::TypeId::0","value":"RawId","parent":{"krate":0,"index":1426},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1455},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":5026,"byte_end":5032,"line_start":184,"line_end":184,"column_start":5,"column_end":11},"name":"TypeId","qualname":"::TypeKindId::TypeId","value":"TypeKindId::TypeId(TypeId)","parent":{"krate":0,"index":1454},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1458},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":5046,"byte_end":5053,"line_start":185,"line_end":185,"column_start":5,"column_end":12},"name":"TraitId","qualname":"::TypeKindId::TraitId","value":"TypeKindId::TraitId(TraitId)","parent":{"krate":0,"index":1454},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1461},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":5068,"byte_end":5076,"line_start":186,"line_end":186,"column_start":5,"column_end":13},"name":"StructId","qualname":"::TypeKindId::StructId","value":"TypeKindId::StructId(StructId)","parent":{"krate":0,"index":1454},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1454},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":5009,"byte_end":5019,"line_start":183,"line_end":183,"column_start":10,"column_end":20},"name":"TypeKindId","qualname":"::TypeKindId","value":"pub enum TypeKindId { TypeId(TypeId), TraitId(TraitId), StructId(StructId), }","parent":null,"children":[{"krate":0,"index":1455},{"krate":0,"index":1458},{"krate":0,"index":1461}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":5120,"byte_end":5126,"line_start":190,"line_end":190,"column_start":12,"column_end":18},"name":"raw_id","qualname":"<TypeKindId>::raw_id","value":"pub fn raw_id(&Self) -> RawId","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1491},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":5476,"byte_end":5481,"line_start":203,"line_end":203,"column_start":12,"column_end":17},"name":"RawId","qualname":"::RawId","value":"RawId { index }","parent":null,"children":[{"krate":0,"index":1492}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":5434,"byte_end":5464,"line_start":202,"line_end":202,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1492},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":5492,"byte_end":5497,"line_start":204,"line_end":204,"column_start":9,"column_end":14},"name":"index","qualname":"::RawId::index","value":"u32","parent":{"krate":0,"index":1491},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1515},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":5599,"byte_end":5605,"line_start":209,"line_end":209,"column_start":5,"column_end":11},"name":"Struct","qualname":"::TypeSort::Struct","value":"TypeSort::Struct","parent":{"krate":0,"index":1514},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1517},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":5611,"byte_end":5616,"line_start":210,"line_end":210,"column_start":5,"column_end":10},"name":"Trait","qualname":"::TypeSort::Trait","value":"TypeSort::Trait","parent":{"krate":0,"index":1514},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1514},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":5584,"byte_end":5592,"line_start":208,"line_end":208,"column_start":10,"column_end":18},"name":"TypeSort","qualname":"::TypeSort","value":"pub enum TypeSort { Struct, Trait, }","parent":null,"children":[{"krate":0,"index":1515},{"krate":0,"index":1517}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1537},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":5702,"byte_end":5704,"line_start":214,"line_end":214,"column_start":12,"column_end":14},"name":"Ty","qualname":"::Ty","value":"Ty {  }","parent":null,"children":[{"krate":0,"index":1539}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":5799,"byte_end":5802,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"new","qualname":"<Ty<TF>>::new","value":"pub fn new<impl CastTo<TyData<TF>>: CastTo<TyData<TF>>>(impl CastTo<TyData<TF>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":5935,"byte_end":5939,"line_start":225,"line_end":225,"column_start":12,"column_end":16},"name":"data","qualname":"<Ty<TF>>::data","value":"pub fn data(&Self) -> &TyData<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":6018,"byte_end":6026,"line_start":229,"line_end":229,"column_start":12,"column_end":20},"name":"from_env","qualname":"<Ty<TF>>::from_env","value":"pub fn from_env(&Self) -> FromEnv<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":6103,"byte_end":6114,"line_start":233,"line_end":233,"column_start":12,"column_end":23},"name":"well_formed","qualname":"<Ty<TF>>::well_formed","value":"pub fn well_formed(&Self) -> WellFormed<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":6272,"byte_end":6277,"line_start":238,"line_end":238,"column_start":12,"column_end":17},"name":"bound","qualname":"<Ty<TF>>::bound","value":"pub fn bound(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" If this is a `TyData::BoundVar(d)`, returns `Some(d)` else `None`.\n","sig":null,"attributes":[{"value":"/ If this is a `TyData::BoundVar(d)`, returns `Some(d)` else `None`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":6190,"byte_end":6260,"line_start":237,"line_end":237,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":6525,"byte_end":6538,"line_start":247,"line_end":247,"column_start":12,"column_end":25},"name":"inference_var","qualname":"<Ty<TF>>::inference_var","value":"pub fn inference_var(&Self) -> Option<InferenceVar>","parent":null,"children":[],"decl_id":null,"docs":" If this is a `TyData::InferenceVar(d)`, returns `Some(d)` else `None`.\n","sig":null,"attributes":[{"value":"/ If this is a `TyData::InferenceVar(d)`, returns `Some(d)` else `None`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":6439,"byte_end":6513,"line_start":246,"line_end":246,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":6718,"byte_end":6731,"line_start":255,"line_end":255,"column_start":12,"column_end":25},"name":"is_projection","qualname":"<Ty<TF>>::is_projection","value":"pub fn is_projection(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":7084,"byte_end":7095,"line_start":265,"line_end":265,"column_start":12,"column_end":23},"name":"needs_shift","qualname":"<Ty<TF>>::needs_shift","value":"pub fn needs_shift(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if this type contains \"bound\" types/lifetimes, and hence\n needs to be shifted across binders. This is a very inefficient\n check, intended only for debug assertions, because I am lazy.\n","sig":null,"attributes":[{"value":"/ True if this type contains \"bound\" types/lifetimes, and hence","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":6866,"byte_end":6931,"line_start":262,"line_end":262,"column_start":5,"column_end":70}},{"value":"/ needs to be shifted across binders. This is a very inefficient","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":6936,"byte_end":7002,"line_start":263,"line_end":263,"column_start":5,"column_end":71}},{"value":"/ check, intended only for debug assertions, because I am lazy.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":7007,"byte_end":7072,"line_start":264,"line_end":264,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1573},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":7593,"byte_end":7598,"line_start":278,"line_end":278,"column_start":5,"column_end":10},"name":"Apply","qualname":"::TyData::Apply","value":"TyData::Apply(ApplicationTy<TF>)","parent":{"krate":0,"index":1571},"children":[],"decl_id":null,"docs":" An \"application\" type is one that applies the set of type\n arguments to some base type. For example, `Vec<u32>` would be\n \"applying\" the parameters `[u32]` to the code type `Vec`.\n This type is also used for base types like `u32` (which just apply\n an empty list).\n","sig":null,"attributes":[{"value":"/ An \"application\" type is one that applies the set of type","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":7292,"byte_end":7353,"line_start":273,"line_end":273,"column_start":5,"column_end":66}},{"value":"/ arguments to some base type. For example, `Vec<u32>` would be","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":7358,"byte_end":7423,"line_start":274,"line_end":274,"column_start":5,"column_end":70}},{"value":"/ \"applying\" the parameters `[u32]` to the code type `Vec`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":7428,"byte_end":7489,"line_start":275,"line_end":275,"column_start":5,"column_end":66}},{"value":"/ This type is also used for base types like `u32` (which just apply","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":7494,"byte_end":7564,"line_start":276,"line_end":276,"column_start":5,"column_end":75}},{"value":"/ an empty list).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":7569,"byte_end":7588,"line_start":277,"line_end":277,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1576},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":7986,"byte_end":7989,"line_start":287,"line_end":287,"column_start":5,"column_end":8},"name":"Dyn","qualname":"::TyData::Dyn","value":"TyData::Dyn(Binders<Vec<QuantifiedWhereClause<TF>>>)","parent":{"krate":0,"index":1571},"children":[],"decl_id":null,"docs":" A \"dyn\" type is a trait object type created via the \"dyn Trait\" syntax.\n In the chalk parser, the traits that the object represents is parsed as\n a QuantifiedInlineBound, and is then changed to a list of where clauses\n during lowering.","sig":null,"attributes":[{"value":"/ A \"dyn\" type is a trait object type created via the \"dyn Trait\" syntax.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":7624,"byte_end":7699,"line_start":280,"line_end":280,"column_start":5,"column_end":80}},{"value":"/ In the chalk parser, the traits that the object represents is parsed as","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":7704,"byte_end":7779,"line_start":281,"line_end":281,"column_start":5,"column_end":80}},{"value":"/ a QuantifiedInlineBound, and is then changed to a list of where clauses","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":7784,"byte_end":7859,"line_start":282,"line_end":282,"column_start":5,"column_end":80}},{"value":"/ during lowering.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":7864,"byte_end":7884,"line_start":283,"line_end":283,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":7889,"byte_end":7892,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ See the `Opaque` variant for a discussion about the use of","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":7897,"byte_end":7959,"line_start":285,"line_end":285,"column_start":5,"column_end":67}},{"value":"/ binders here.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":7964,"byte_end":7981,"line_start":286,"line_end":286,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1579},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":9063,"byte_end":9069,"line_start":313,"line_end":313,"column_start":5,"column_end":11},"name":"Opaque","qualname":"::TyData::Opaque","value":"TyData::Opaque(Binders<Vec<QuantifiedWhereClause<TF>>>)","parent":{"krate":0,"index":1571},"children":[],"decl_id":null,"docs":" An \"opaque\" type is one that is created via the \"impl Trait\" syntax.\n They are named so because the concrete type implementing the trait\n is unknown, and hence the type is opaque to us. The only information\n that we know of is that this type implements the traits listed by the\n user.","sig":null,"attributes":[{"value":"/ An \"opaque\" type is one that is created via the \"impl Trait\" syntax.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8037,"byte_end":8109,"line_start":289,"line_end":289,"column_start":5,"column_end":77}},{"value":"/ They are named so because the concrete type implementing the trait","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8114,"byte_end":8184,"line_start":290,"line_end":290,"column_start":5,"column_end":75}},{"value":"/ is unknown, and hence the type is opaque to us. The only information","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8189,"byte_end":8261,"line_start":291,"line_end":291,"column_start":5,"column_end":77}},{"value":"/ that we know of is that this type implements the traits listed by the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8266,"byte_end":8339,"line_start":292,"line_end":292,"column_start":5,"column_end":78}},{"value":"/ user.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8344,"byte_end":8353,"line_start":293,"line_end":293,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8358,"byte_end":8361,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ The \"binder\" here represents the unknown self type. So, a type like","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8366,"byte_end":8437,"line_start":295,"line_end":295,"column_start":5,"column_end":76}},{"value":"/ `impl for<'a> Fn(&'a u32)` would be represented with two-levels of","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8442,"byte_end":8512,"line_start":296,"line_end":296,"column_start":5,"column_end":75}},{"value":"/ binder, as \"depicted\" here:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8517,"byte_end":8548,"line_start":297,"line_end":297,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8553,"byte_end":8556,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8561,"byte_end":8575,"line_start":299,"line_end":299,"column_start":5,"column_end":19}},{"value":"/ exists<type> {","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8580,"byte_end":8598,"line_start":300,"line_end":300,"column_start":5,"column_end":23}},{"value":"/    vec![","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8603,"byte_end":8615,"line_start":301,"line_end":301,"column_start":5,"column_end":17}},{"value":"/        // A QuantifiedWhereClause:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8620,"byte_end":8658,"line_start":302,"line_end":302,"column_start":5,"column_end":43}},{"value":"/        forall<region> { ^1: Fn(&^0 u32) }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8663,"byte_end":8708,"line_start":303,"line_end":303,"column_start":5,"column_end":50}},{"value":"/    ]","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8713,"byte_end":8721,"line_start":304,"line_end":304,"column_start":5,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8726,"byte_end":8731,"line_start":305,"line_end":305,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8736,"byte_end":8743,"line_start":306,"line_end":306,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8748,"byte_end":8751,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ The outer `exists<type>` binder indicates that there exists","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8756,"byte_end":8819,"line_start":308,"line_end":308,"column_start":5,"column_end":68}},{"value":"/ some type that meets the criteria within, but that type is not","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8824,"byte_end":8890,"line_start":309,"line_end":309,"column_start":5,"column_end":71}},{"value":"/ known. It is referenced within the type using `^1`, indicating","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8895,"byte_end":8961,"line_start":310,"line_end":310,"column_start":5,"column_end":71}},{"value":"/ a bound type with debruijn index 1 (i.e., skipping through one","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":8966,"byte_end":9032,"line_start":311,"line_end":311,"column_start":5,"column_end":71}},{"value":"/ level of binder).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":9037,"byte_end":9058,"line_start":312,"line_end":312,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1582},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":9300,"byte_end":9310,"line_start":318,"line_end":318,"column_start":5,"column_end":15},"name":"Projection","qualname":"::TyData::Projection","value":"TyData::Projection(ProjectionTy<TF>)","parent":{"krate":0,"index":1571},"children":[],"decl_id":null,"docs":" A \"projection\" type corresponds to an (unnormalized)\n projection like `<P0 as Trait<P1..Pn>>::Foo`. Note that the\n trait and all its parameters are fully known.\n","sig":null,"attributes":[{"value":"/ A \"projection\" type corresponds to an (unnormalized)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":9117,"byte_end":9173,"line_start":315,"line_end":315,"column_start":5,"column_end":61}},{"value":"/ projection like `<P0 as Trait<P1..Pn>>::Foo`. Note that the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":9178,"byte_end":9241,"line_start":316,"line_end":316,"column_start":5,"column_end":68}},{"value":"/ trait and all its parameters are fully known.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":9246,"byte_end":9295,"line_start":317,"line_end":317,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1585},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":9767,"byte_end":9773,"line_start":327,"line_end":327,"column_start":5,"column_end":11},"name":"ForAll","qualname":"::TyData::ForAll","value":"TyData::ForAll(Box<QuantifiedTy<TF>>)","parent":{"krate":0,"index":1571},"children":[],"decl_id":null,"docs":" A \"higher-ranked\" type. In the Rust surface syntax, this can\n only be a function type (e.g., `for<'a> fn(&'a u32)`) or a dyn\n type (e.g., `dyn for<'a> SomeTrait<&'a u32>`). However, in\n Chalk's representation, we separate out the `for<'a>` part\n from the underlying type, so technically we can represent\n things like `for<'a> SomeStruct<'a>`, although that has no\n meaning in Rust.\n","sig":null,"attributes":[{"value":"/ A \"higher-ranked\" type. In the Rust surface syntax, this can","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":9335,"byte_end":9399,"line_start":320,"line_end":320,"column_start":5,"column_end":69}},{"value":"/ only be a function type (e.g., `for<'a> fn(&'a u32)`) or a dyn","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":9404,"byte_end":9470,"line_start":321,"line_end":321,"column_start":5,"column_end":71}},{"value":"/ type (e.g., `dyn for<'a> SomeTrait<&'a u32>`). However, in","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":9475,"byte_end":9537,"line_start":322,"line_end":322,"column_start":5,"column_end":67}},{"value":"/ Chalk's representation, we separate out the `for<'a>` part","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":9542,"byte_end":9604,"line_start":323,"line_end":323,"column_start":5,"column_end":67}},{"value":"/ from the underlying type, so technically we can represent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":9609,"byte_end":9670,"line_start":324,"line_end":324,"column_start":5,"column_end":66}},{"value":"/ things like `for<'a> SomeStruct<'a>`, although that has no","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":9675,"byte_end":9737,"line_start":325,"line_end":325,"column_start":5,"column_end":67}},{"value":"/ meaning in Rust.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":9742,"byte_end":9762,"line_start":326,"line_end":326,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1588},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10290,"byte_end":10298,"line_start":337,"line_end":337,"column_start":5,"column_end":13},"name":"BoundVar","qualname":"::TyData::BoundVar","value":"TyData::BoundVar(usize)","parent":{"krate":0,"index":1571},"children":[],"decl_id":null,"docs":" References the binding at the given depth. The index is a [de\n Bruijn index], so it counts back through the in-scope binders,\n with 0 being the innermost binder. This is used in impls and\n the like. For example, if we had a rule like `for<T> { (T:\n Clone) :- (T: Copy) }`, then `T` would be represented as a\n `BoundVar(0)` (as the `for` is the innermost binder).","sig":null,"attributes":[{"value":"/ References the binding at the given depth. The index is a [de","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":9803,"byte_end":9868,"line_start":329,"line_end":329,"column_start":5,"column_end":70}},{"value":"/ Bruijn index], so it counts back through the in-scope binders,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":9873,"byte_end":9939,"line_start":330,"line_end":330,"column_start":5,"column_end":71}},{"value":"/ with 0 being the innermost binder. This is used in impls and","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":9944,"byte_end":10008,"line_start":331,"line_end":331,"column_start":5,"column_end":69}},{"value":"/ the like. For example, if we had a rule like `for<T> { (T:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10013,"byte_end":10075,"line_start":332,"line_end":332,"column_start":5,"column_end":67}},{"value":"/ Clone) :- (T: Copy) }`, then `T` would be represented as a","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10080,"byte_end":10142,"line_start":333,"line_end":333,"column_start":5,"column_end":67}},{"value":"/ `BoundVar(0)` (as the `for` is the innermost binder).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10147,"byte_end":10204,"line_start":334,"line_end":334,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10209,"byte_end":10212,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ [de Bruijn index]: https://en.wikipedia.org/wiki/De_Bruijn_index","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10217,"byte_end":10285,"line_start":336,"line_end":336,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1591},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10381,"byte_end":10393,"line_start":340,"line_end":340,"column_start":5,"column_end":17},"name":"InferenceVar","qualname":"::TyData::InferenceVar","value":"TyData::InferenceVar(InferenceVar)","parent":{"krate":0,"index":1571},"children":[],"decl_id":null,"docs":" Inference variable defined in the current inference context.\n","sig":null,"attributes":[{"value":"/ Inference variable defined in the current inference context.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10312,"byte_end":10376,"line_start":339,"line_end":339,"column_start":5,"column_end":69}}]},{"kind":"Enum","id":{"krate":0,"index":1571},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":7263,"byte_end":7269,"line_start":272,"line_end":272,"column_start":10,"column_end":16},"name":"TyData","qualname":"::TyData","value":"pub enum TyData<TF: TypeFamily> {\n\n    /// An \"application\" type is one that applies the set of type\n    /// arguments to some base type. For example, `Vec<u32>` would be\n    /// \"applying\" the parameters `[u32]` to the code type `Vec`.\n    /// This type is also used for base types like `u32` (which just apply\n    /// an empty list).\n    Apply(ApplicationTy<TF>),\n\n    /// A \"dyn\" type is a trait object type created via the \"dyn Trait\" syntax.\n    /// In the chalk parser, the traits that the object represents is parsed as\n    /// a QuantifiedInlineBound, and is then changed to a list of where clauses\n    /// during lowering.\n    ///\n    /// See the `Opaque` variant for a discussion about the use of\n    /// binders here.\n    Dyn(Binders<Vec<QuantifiedWhereClause<TF>>>),\n\n    /// An \"opaque\" type is one that is created via the \"impl Trait\" syntax.\n    /// They are named so because the concrete type implementing the trait\n    /// is unknown, and hence the type is opaque to us. The only information\n    /// that we know of is that this type implements the traits listed by the\n    /// user.\n    ///\n    /// The \"binder\" here represents the unknown self type. So, a type like\n    /// `impl for<'a> Fn(&'a u32)` would be represented with two-levels of\n    /// binder, as \"depicted\" here:\n    ///\n    /// ```notrust\n    /// exists<type> {\n    ///    vec![\n    ///        // A QuantifiedWhereClause:\n    ///        forall<region> { ^1: Fn(&^0 u32) }\n    ///    ]\n    /// }\n    /// ```\n    ///\n    /// The outer `exists<type>` binder indicates that there exists\n    /// some type that meets the criteria within, but that type is not\n    /// known. It is referenced within the type using `^1`, indicating\n    /// a bound type with debruijn index 1 (i.e., skipping through one\n    /// level of binder).\n    Opaque(Binders<Vec<QuantifiedWhereClause<TF>>>),\n\n    /// A \"projection\" type corresponds to an (unnormalized)\n    /// projection like `<P0 as Trait<P1..Pn>>::Foo`. Note that the\n    /// trait and all its parameters are fully known.\n    Projection(ProjectionTy<TF>),\n\n    /// A \"higher-ranked\" type. In the Rust surface syntax, this can\n    /// only be a function type (e.g., `for<'a> fn(&'a u32)`) or a dyn\n    /// type (e.g., `dyn for<'a> SomeTrait<&'a u32>`). However, in\n    /// Chalk's representation, we separate out the `for<'a>` part\n    /// from the underlying type, so technically we can represent\n    /// things like `for<'a> SomeStruct<'a>`, although that has no\n    /// meaning in Rust.\n    ForAll(Box<QuantifiedTy<TF>>),\n\n    /// References the binding at the given depth. The index is a [de\n    /// Bruijn index], so it counts back through the in-scope binders,\n    /// with 0 being the innermost binder. This is used in impls and\n    /// the like. For example, if we had a rule like `for<T> { (T:\n    /// Clone) :- (T: Copy) }`, then `T` would be represented as a\n    /// `BoundVar(0)` (as the `for` is the innermost binder).\n    ///\n    /// [de Bruijn index]: https://en.wikipedia.org/wiki/De_Bruijn_index\n    BoundVar(usize),\n\n    /// Inference variable defined in the current inference context.\n    InferenceVar(InferenceVar),\n}","parent":null,"children":[{"krate":0,"index":1573},{"krate":0,"index":1576},{"krate":0,"index":1579},{"krate":0,"index":1582},{"krate":0,"index":1585},{"krate":0,"index":1588},{"krate":0,"index":1591}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10457,"byte_end":10463,"line_start":344,"line_end":344,"column_start":12,"column_end":18},"name":"intern","qualname":"<TyData<TF>>::intern","value":"pub fn intern(Self) -> Ty<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1625},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10585,"byte_end":10597,"line_start":350,"line_end":350,"column_start":12,"column_end":24},"name":"InferenceVar","qualname":"::InferenceVar","value":"InferenceVar {  }","parent":null,"children":[{"krate":0,"index":1626}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10766,"byte_end":10771,"line_start":361,"line_end":361,"column_start":12,"column_end":17},"name":"index","qualname":"<InferenceVar>::index","value":"pub fn index(Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10824,"byte_end":10829,"line_start":365,"line_end":365,"column_start":12,"column_end":17},"name":"to_ty","qualname":"<InferenceVar>::to_ty","value":"pub fn to_ty<TF: TypeFamily>(Self) -> Ty<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10932,"byte_end":10943,"line_start":369,"line_end":369,"column_start":12,"column_end":23},"name":"to_lifetime","qualname":"<InferenceVar>::to_lifetime","value":"pub fn to_lifetime<TF: TypeFamily>(Self) -> Lifetime<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1648},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":11239,"byte_end":11251,"line_start":377,"line_end":377,"column_start":12,"column_end":24},"name":"QuantifiedTy","qualname":"::QuantifiedTy","value":"QuantifiedTy { num_binders, ty }","parent":null,"children":[{"krate":0,"index":1650},{"krate":0,"index":1651}],"decl_id":null,"docs":" for<'a...'z> X -- all binders are instantiated at once,\n and we use deBruijn indices within `self.ty`\n","sig":null,"attributes":[{"value":"/ for<'a...'z> X -- all binders are instantiated at once,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":11049,"byte_end":11108,"line_start":374,"line_end":374,"column_start":1,"column_end":60}},{"value":"/ and we use deBruijn indices within `self.ty`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":11109,"byte_end":11157,"line_start":375,"line_end":375,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":1650},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":11278,"byte_end":11289,"line_start":378,"line_end":378,"column_start":9,"column_end":20},"name":"num_binders","qualname":"::QuantifiedTy::num_binders","value":"usize","parent":{"krate":0,"index":1648},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1651},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":11306,"byte_end":11308,"line_start":379,"line_end":379,"column_start":9,"column_end":11},"name":"ty","qualname":"::QuantifiedTy::ty","value":"Ty<TF>","parent":{"krate":0,"index":1648},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1687},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":11408,"byte_end":11416,"line_start":383,"line_end":383,"column_start":12,"column_end":20},"name":"Lifetime","qualname":"::Lifetime","value":"Lifetime {  }","parent":null,"children":[{"krate":0,"index":1689}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":11521,"byte_end":11524,"line_start":388,"line_end":388,"column_start":12,"column_end":15},"name":"new","qualname":"<Lifetime<TF>>::new","value":"pub fn new<impl CastTo<LifetimeData<TF>>: CastTo<LifetimeData<TF>>>(impl CastTo<LifetimeData<TF>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":11675,"byte_end":11679,"line_start":394,"line_end":394,"column_start":12,"column_end":16},"name":"data","qualname":"<Lifetime<TF>>::data","value":"pub fn data(&Self) -> &LifetimeData<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":11851,"byte_end":11864,"line_start":399,"line_end":399,"column_start":12,"column_end":25},"name":"inference_var","qualname":"<Lifetime<TF>>::inference_var","value":"pub fn inference_var(&Self) -> Option<InferenceVar>","parent":null,"children":[],"decl_id":null,"docs":" If this is a `Lifetime::InferenceVar(d)`, returns `Some(d)` else `None`.\n","sig":null,"attributes":[{"value":"/ If this is a `Lifetime::InferenceVar(d)`, returns `Some(d)` else `None`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":11763,"byte_end":11839,"line_start":398,"line_end":398,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":12185,"byte_end":12196,"line_start":409,"line_end":409,"column_start":12,"column_end":23},"name":"needs_shift","qualname":"<Lifetime<TF>>::needs_shift","value":"pub fn needs_shift(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if this lifetime is a \"bound\" lifetime, and hence\n needs to be shifted across binders. Meant for debug assertions.\n","sig":null,"attributes":[{"value":"/ True if this lifetime is a \"bound\" lifetime, and hence","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":12043,"byte_end":12101,"line_start":407,"line_end":407,"column_start":5,"column_end":63}},{"value":"/ needs to be shifted across binders. Meant for debug assertions.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":12106,"byte_end":12173,"line_start":408,"line_end":408,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1725},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":12601,"byte_end":12609,"line_start":422,"line_end":422,"column_start":5,"column_end":13},"name":"BoundVar","qualname":"::LifetimeData::BoundVar","value":"LifetimeData::BoundVar(usize)","parent":{"krate":0,"index":1723},"children":[],"decl_id":null,"docs":" See TyData::Var(_).\n","sig":null,"attributes":[{"value":"/ See TyData::Var(_).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":12573,"byte_end":12596,"line_start":421,"line_end":421,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1728},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":12622,"byte_end":12634,"line_start":423,"line_end":423,"column_start":5,"column_end":17},"name":"InferenceVar","qualname":"::LifetimeData::InferenceVar","value":"LifetimeData::InferenceVar(InferenceVar)","parent":{"krate":0,"index":1723},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1731},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":12654,"byte_end":12665,"line_start":424,"line_end":424,"column_start":5,"column_end":16},"name":"Placeholder","qualname":"::LifetimeData::Placeholder","value":"LifetimeData::Placeholder(PlaceholderIndex)","parent":{"krate":0,"index":1723},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1734},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":12689,"byte_end":12696,"line_start":425,"line_end":425,"column_start":5,"column_end":12},"name":"Phantom","qualname":"::LifetimeData::Phantom","value":"LifetimeData::Phantom(Void, PhantomData<TF>)","parent":{"krate":0,"index":1723},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1723},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":12538,"byte_end":12550,"line_start":420,"line_end":420,"column_start":10,"column_end":22},"name":"LifetimeData","qualname":"::LifetimeData","value":"pub enum LifetimeData<TF: TypeFamily> {\n\n    /// See TyData::Var(_).\n    BoundVar(usize),\n    InferenceVar(InferenceVar),\n    Placeholder(PlaceholderIndex),\n    Phantom(Void, PhantomData<TF>),\n}","parent":null,"children":[{"krate":0,"index":1725},{"krate":0,"index":1728},{"krate":0,"index":1731},{"krate":0,"index":1734}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":783},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":12775,"byte_end":12781,"line_start":429,"line_end":429,"column_start":12,"column_end":18},"name":"intern","qualname":"<LifetimeData<TF>>::intern","value":"pub fn intern(Self) -> Lifetime<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1772},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":13093,"byte_end":13109,"line_start":438,"line_end":438,"column_start":12,"column_end":28},"name":"PlaceholderIndex","qualname":"::PlaceholderIndex","value":"PlaceholderIndex { ui, idx }","parent":null,"children":[{"krate":0,"index":1773},{"krate":0,"index":1774}],"decl_id":null,"docs":" Index of an universally quantified parameter in the environment.\n Two indexes are required, the one of the universe itself\n and the relative index inside the universe.\n","sig":null,"attributes":[{"value":"/ Index of an universally quantified parameter in the environment.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":12843,"byte_end":12911,"line_start":434,"line_end":434,"column_start":1,"column_end":69}},{"value":"/ Two indexes are required, the one of the universe itself","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":12912,"byte_end":12972,"line_start":435,"line_end":435,"column_start":1,"column_end":61}},{"value":"/ and the relative index inside the universe.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":12973,"byte_end":13020,"line_start":436,"line_end":436,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":1773},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":13153,"byte_end":13155,"line_start":440,"line_end":440,"column_start":9,"column_end":11},"name":"ui","qualname":"::PlaceholderIndex::ui","value":"UniverseIndex","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":" Index *of* the universe.\n","sig":null,"attributes":[{"value":"/ Index *of* the universe.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":13116,"byte_end":13144,"line_start":439,"line_end":439,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":1774},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":13213,"byte_end":13216,"line_start":442,"line_end":442,"column_start":9,"column_end":12},"name":"idx","qualname":"::PlaceholderIndex::idx","value":"usize","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":" Index *in* the universe.\n","sig":null,"attributes":[{"value":"/ Index *in* the universe.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":13176,"byte_end":13204,"line_start":441,"line_end":441,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":13263,"byte_end":13274,"line_start":446,"line_end":446,"column_start":12,"column_end":23},"name":"to_lifetime","qualname":"<PlaceholderIndex>::to_lifetime","value":"pub fn to_lifetime<TF: TypeFamily>(Self) -> Lifetime<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":13388,"byte_end":13393,"line_start":450,"line_end":450,"column_start":12,"column_end":17},"name":"to_ty","qualname":"<PlaceholderIndex>::to_ty","value":"pub fn to_ty<TF: TypeFamily>(Self) -> Ty<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1800},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":13726,"byte_end":13739,"line_start":461,"line_end":461,"column_start":12,"column_end":25},"name":"ApplicationTy","qualname":"::ApplicationTy","value":"ApplicationTy { name, parameters }","parent":null,"children":[{"krate":0,"index":1802},{"krate":0,"index":1803}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1802},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":13766,"byte_end":13770,"line_start":462,"line_end":462,"column_start":9,"column_end":13},"name":"name","qualname":"::ApplicationTy::name","value":"TypeName","parent":{"krate":0,"index":1800},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1803},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":13790,"byte_end":13800,"line_start":463,"line_end":463,"column_start":9,"column_end":19},"name":"parameters","qualname":"::ApplicationTy::parameters","value":"std::vec::Vec<Parameter<TF>>","parent":{"krate":0,"index":1800},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":13877,"byte_end":13883,"line_start":467,"line_end":467,"column_start":12,"column_end":18},"name":"intern","qualname":"<ApplicationTy<TF>>::intern","value":"pub fn intern(Self) -> Ty<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":13942,"byte_end":13957,"line_start":471,"line_end":471,"column_start":12,"column_end":27},"name":"type_parameters","qualname":"<ApplicationTy<TF>>::type_parameters","value":"pub fn type_parameters<'a>(&'a Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":14092,"byte_end":14112,"line_start":475,"line_end":475,"column_start":12,"column_end":32},"name":"first_type_parameter","qualname":"<ApplicationTy<TF>>::first_type_parameter","value":"pub fn first_type_parameter(&Self) -> Option<Ty<TF>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":14196,"byte_end":14215,"line_start":479,"line_end":479,"column_start":12,"column_end":31},"name":"len_type_parameters","qualname":"<ApplicationTy<TF>>::len_type_parameters","value":"pub fn len_type_parameters(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1842},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":14382,"byte_end":14384,"line_start":486,"line_end":486,"column_start":5,"column_end":7},"name":"Ty","qualname":"::ParameterKind::Ty","value":"ParameterKind::Ty(T)","parent":{"krate":0,"index":1839},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1845},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":14393,"byte_end":14401,"line_start":487,"line_end":487,"column_start":5,"column_end":13},"name":"Lifetime","qualname":"::ParameterKind::Lifetime","value":"ParameterKind::Lifetime(L)","parent":{"krate":0,"index":1839},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1839},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":14352,"byte_end":14365,"line_start":485,"line_end":485,"column_start":10,"column_end":23},"name":"ParameterKind","qualname":"::ParameterKind","value":"pub enum ParameterKind<T, L = T> { Ty(T), Lifetime(L), }","parent":null,"children":[{"krate":0,"index":1842},{"krate":0,"index":1845}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":14447,"byte_end":14457,"line_start":491,"line_end":491,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ParameterKind<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":801},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":14604,"byte_end":14607,"line_start":498,"line_end":498,"column_start":12,"column_end":15},"name":"map","qualname":"<ParameterKind<T>>::map","value":"pub fn map<OP, U>(Self, OP) -> ParameterKind<U> where OP: FnOnce(T) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":14913,"byte_end":14926,"line_start":510,"line_end":510,"column_start":12,"column_end":25},"name":"assert_ty_ref","qualname":"<ParameterKind<T, L>>::assert_ty_ref","value":"pub fn assert_ty_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":14996,"byte_end":15015,"line_start":514,"line_end":514,"column_start":12,"column_end":31},"name":"assert_lifetime_ref","qualname":"<ParameterKind<T, L>>::assert_lifetime_ref","value":"pub fn assert_lifetime_ref(&Self) -> &L","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":15091,"byte_end":15097,"line_start":518,"line_end":518,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<ParameterKind<T, L>>::as_ref","value":"pub fn as_ref(&Self) -> ParameterKind<&T, &L>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":15318,"byte_end":15323,"line_start":525,"line_end":525,"column_start":12,"column_end":17},"name":"is_ty","qualname":"<ParameterKind<T, L>>::is_ty","value":"pub fn is_ty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":15481,"byte_end":15483,"line_start":532,"line_end":532,"column_start":12,"column_end":14},"name":"ty","qualname":"<ParameterKind<T, L>>::ty","value":"pub fn ty(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":15622,"byte_end":15630,"line_start":539,"line_end":539,"column_start":12,"column_end":20},"name":"lifetime","qualname":"<ParameterKind<T, L>>::lifetime","value":"pub fn lifetime(Self) -> Option<L>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1887},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":15847,"byte_end":15856,"line_start":548,"line_end":548,"column_start":12,"column_end":21},"name":"Parameter","qualname":"::Parameter","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1890},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":15873,"byte_end":15912,"line_start":548,"line_end":548,"column_start":38,"column_end":77},"name":"0","qualname":"::Parameter::0","value":"ParameterKind<Ty<TF>, Lifetime<TF>>","parent":{"krate":0,"index":1887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":15964,"byte_end":15977,"line_start":551,"line_end":551,"column_start":12,"column_end":25},"name":"assert_ty_ref","qualname":"<Parameter<TF>>::assert_ty_ref","value":"pub fn assert_ty_ref(&Self) -> &Ty<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":16052,"byte_end":16071,"line_start":555,"line_end":555,"column_start":12,"column_end":31},"name":"assert_lifetime_ref","qualname":"<Parameter<TF>>::assert_lifetime_ref","value":"pub fn assert_lifetime_ref(&Self) -> &Lifetime<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":16158,"byte_end":16164,"line_start":559,"line_end":559,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<Parameter<TF>>::as_ref","value":"pub fn as_ref(&Self) -> ParameterKind<&Ty<TF>, &Lifetime<TF>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":16395,"byte_end":16400,"line_start":566,"line_end":566,"column_start":12,"column_end":17},"name":"is_ty","qualname":"<Parameter<TF>>::is_ty","value":"pub fn is_ty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":16560,"byte_end":16562,"line_start":573,"line_end":573,"column_start":12,"column_end":14},"name":"ty","qualname":"<Parameter<TF>>::ty","value":"pub fn ty(Self) -> Option<Ty<TF>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":16708,"byte_end":16716,"line_start":580,"line_end":580,"column_start":12,"column_end":20},"name":"lifetime","qualname":"<Parameter<TF>>::lifetime","value":"pub fn lifetime(Self) -> Option<Lifetime<TF>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1922},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":16952,"byte_end":16964,"line_start":589,"line_end":589,"column_start":12,"column_end":24},"name":"ProjectionTy","qualname":"::ProjectionTy","value":"ProjectionTy { associated_ty_id, parameters }","parent":null,"children":[{"krate":0,"index":1924},{"krate":0,"index":1925}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1924},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":16991,"byte_end":17007,"line_start":590,"line_end":590,"column_start":9,"column_end":25},"name":"associated_ty_id","qualname":"::ProjectionTy::associated_ty_id","value":"TypeId","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1925},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":17025,"byte_end":17035,"line_start":591,"line_end":591,"column_start":9,"column_end":19},"name":"parameters","qualname":"::ProjectionTy::parameters","value":"std::vec::Vec<Parameter<TF>>","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":17111,"byte_end":17117,"line_start":595,"line_end":595,"column_start":12,"column_end":18},"name":"intern","qualname":"<ProjectionTy<TF>>::intern","value":"pub fn intern(Self) -> Ty<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1966},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":17254,"byte_end":17262,"line_start":601,"line_end":601,"column_start":12,"column_end":20},"name":"TraitRef","qualname":"::TraitRef","value":"TraitRef { trait_id, parameters }","parent":null,"children":[{"krate":0,"index":1968},{"krate":0,"index":1969}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1968},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":17289,"byte_end":17297,"line_start":602,"line_end":602,"column_start":9,"column_end":17},"name":"trait_id","qualname":"::TraitRef::trait_id","value":"TraitId","parent":{"krate":0,"index":1966},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1969},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":17316,"byte_end":17326,"line_start":603,"line_end":603,"column_start":9,"column_end":19},"name":"parameters","qualname":"::TraitRef::parameters","value":"std::vec::Vec<Parameter<TF>>","parent":{"krate":0,"index":1966},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":17398,"byte_end":17413,"line_start":607,"line_end":607,"column_start":12,"column_end":27},"name":"type_parameters","qualname":"<TraitRef<TF>>::type_parameters","value":"pub fn type_parameters<'a>(&'a Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":17548,"byte_end":17567,"line_start":611,"line_end":611,"column_start":12,"column_end":31},"name":"self_type_parameter","qualname":"<TraitRef<TF>>::self_type_parameter","value":"pub fn self_type_parameter(&Self) -> Option<Ty<TF>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":17651,"byte_end":17659,"line_start":615,"line_end":615,"column_start":12,"column_end":20},"name":"from_env","qualname":"<TraitRef<TF>>::from_env","value":"pub fn from_env(Self) -> FromEnv<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":17730,"byte_end":17741,"line_start":619,"line_end":619,"column_start":12,"column_end":23},"name":"well_formed","qualname":"<TraitRef<TF>>::well_formed","value":"pub fn well_formed(Self) -> WellFormed<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2012},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":17988,"byte_end":17999,"line_start":627,"line_end":627,"column_start":5,"column_end":16},"name":"Implemented","qualname":"::WhereClause::Implemented","value":"WhereClause::Implemented(TraitRef<TF>)","parent":{"krate":0,"index":2010},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2015},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18019,"byte_end":18031,"line_start":628,"line_end":628,"column_start":5,"column_end":17},"name":"ProjectionEq","qualname":"::WhereClause::ProjectionEq","value":"WhereClause::ProjectionEq(ProjectionEq<TF>)","parent":{"krate":0,"index":2010},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2010},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":17954,"byte_end":17965,"line_start":626,"line_end":626,"column_start":10,"column_end":21},"name":"WhereClause","qualname":"::WhereClause","value":"pub enum WhereClause<TF: TypeFamily> {\n    Implemented(TraitRef<TF>),\n    ProjectionEq(ProjectionEq<TF>),\n}","parent":null,"children":[{"krate":0,"index":2012},{"krate":0,"index":2015}],"decl_id":null,"docs":" Where clauses that can be written by a Rust programmer.\n","sig":null,"attributes":[{"value":"/ Where clauses that can be written by a Rust programmer.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":17809,"byte_end":17868,"line_start":624,"line_end":624,"column_start":1,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2056},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18573,"byte_end":18578,"line_start":646,"line_end":646,"column_start":5,"column_end":10},"name":"Trait","qualname":"::WellFormed::Trait","value":"WellFormed::Trait(TraitRef<TF>)","parent":{"krate":0,"index":2054},"children":[],"decl_id":null,"docs":" A predicate which is true is some trait ref is well-formed.\n For example, given the following trait definitions:","sig":null,"attributes":[{"value":"/ A predicate which is true is some trait ref is well-formed.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18172,"byte_end":18235,"line_start":633,"line_end":633,"column_start":5,"column_end":68}},{"value":"/ For example, given the following trait definitions:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18240,"byte_end":18295,"line_start":634,"line_end":634,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18300,"byte_end":18303,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18308,"byte_end":18322,"line_start":636,"line_end":636,"column_start":5,"column_end":19}},{"value":"/ trait Clone { ... }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18327,"byte_end":18350,"line_start":637,"line_end":637,"column_start":5,"column_end":28}},{"value":"/ trait Copy where Self: Clone { ... }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18355,"byte_end":18395,"line_start":638,"line_end":638,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18400,"byte_end":18407,"line_start":639,"line_end":639,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18412,"byte_end":18415,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ then we have the following rule:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18420,"byte_end":18456,"line_start":641,"line_end":641,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18461,"byte_end":18464,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18469,"byte_end":18483,"line_start":643,"line_end":643,"column_start":5,"column_end":19}},{"value":"/ WellFormed(?Self: Copy) :- ?Self: Copy, WellFormed(?Self: Clone)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18488,"byte_end":18556,"line_start":644,"line_end":644,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18561,"byte_end":18568,"line_start":645,"line_end":645,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2059},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18920,"byte_end":18922,"line_start":658,"line_end":658,"column_start":5,"column_end":7},"name":"Ty","qualname":"::WellFormed::Ty","value":"WellFormed::Ty(Ty<TF>)","parent":{"krate":0,"index":2054},"children":[],"decl_id":null,"docs":" A predicate which is true is some type is well-formed.\n For example, given the following type definition:","sig":null,"attributes":[{"value":"/ A predicate which is true is some type is well-formed.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18599,"byte_end":18657,"line_start":648,"line_end":648,"column_start":5,"column_end":63}},{"value":"/ For example, given the following type definition:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18662,"byte_end":18715,"line_start":649,"line_end":649,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18720,"byte_end":18723,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18728,"byte_end":18742,"line_start":651,"line_end":651,"column_start":5,"column_end":19}},{"value":"/ struct Set<K> where K: Hash {","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18747,"byte_end":18780,"line_start":652,"line_end":652,"column_start":5,"column_end":38}},{"value":"/     ...","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18785,"byte_end":18796,"line_start":653,"line_end":653,"column_start":5,"column_end":16}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18801,"byte_end":18806,"line_start":654,"line_end":654,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18811,"byte_end":18818,"line_start":655,"line_end":655,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18823,"byte_end":18826,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ then we have the following rule: `WellFormedTy(Set<K>) :- Implemented(K: Hash)`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18831,"byte_end":18915,"line_start":657,"line_end":657,"column_start":5,"column_end":89}}]},{"kind":"Enum","id":{"krate":0,"index":2054},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":18139,"byte_end":18149,"line_start":632,"line_end":632,"column_start":10,"column_end":20},"name":"WellFormed","qualname":"::WellFormed","value":"pub enum WellFormed<TF: TypeFamily> {\n\n    /// A predicate which is true is some trait ref is well-formed.\n    /// For example, given the following trait definitions:\n    ///\n    /// ```notrust\n    /// trait Clone { ... }\n    /// trait Copy where Self: Clone { ... }\n    /// ```\n    ///\n    /// then we have the following rule:\n    ///\n    /// ```notrust\n    /// WellFormed(?Self: Copy) :- ?Self: Copy, WellFormed(?Self: Clone)\n    /// ```\n    Trait(TraitRef<TF>),\n\n    /// A predicate which is true is some type is well-formed.\n    /// For example, given the following type definition:\n    ///\n    /// ```notrust\n    /// struct Set<K> where K: Hash {\n    ///     ...\n    /// }\n    /// ```\n    ///\n    /// then we have the following rule: `WellFormedTy(Set<K>) :- Implemented(K: Hash)`.\n    Ty(Ty<TF>),\n}","parent":null,"children":[{"krate":0,"index":2056},{"krate":0,"index":2059}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2100},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19447,"byte_end":19452,"line_start":674,"line_end":674,"column_start":5,"column_end":10},"name":"Trait","qualname":"::FromEnv::Trait","value":"FromEnv::Trait(TraitRef<TF>)","parent":{"krate":0,"index":2098},"children":[],"decl_id":null,"docs":" A predicate which enables deriving everything which should be true if we *know* that\n some trait ref is well-formed. For example given the above trait definitions, we can use\n `FromEnv(T: Copy)` to derive that `T: Clone`, like in:","sig":null,"attributes":[{"value":"/ A predicate which enables deriving everything which should be true if we *know* that","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19050,"byte_end":19138,"line_start":663,"line_end":663,"column_start":5,"column_end":93}},{"value":"/ some trait ref is well-formed. For example given the above trait definitions, we can use","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19143,"byte_end":19235,"line_start":664,"line_end":664,"column_start":5,"column_end":97}},{"value":"/ `FromEnv(T: Copy)` to derive that `T: Clone`, like in:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19240,"byte_end":19298,"line_start":665,"line_end":665,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19303,"byte_end":19306,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19311,"byte_end":19325,"line_start":667,"line_end":667,"column_start":5,"column_end":19}},{"value":"/ forall<T> {","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19330,"byte_end":19345,"line_start":668,"line_end":668,"column_start":5,"column_end":20}},{"value":"/     if (FromEnv(T: Copy)) {","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19350,"byte_end":19381,"line_start":669,"line_end":669,"column_start":5,"column_end":36}},{"value":"/         T: Clone","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19386,"byte_end":19406,"line_start":670,"line_end":670,"column_start":5,"column_end":25}},{"value":"/     }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19411,"byte_end":19420,"line_start":671,"line_end":671,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19425,"byte_end":19430,"line_start":672,"line_end":672,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19435,"byte_end":19442,"line_start":673,"line_end":673,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2103},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19859,"byte_end":19861,"line_start":687,"line_end":687,"column_start":5,"column_end":7},"name":"Ty","qualname":"::FromEnv::Ty","value":"FromEnv::Ty(Ty<TF>)","parent":{"krate":0,"index":2098},"children":[],"decl_id":null,"docs":" A predicate which enables deriving everything which should be true if we *know* that\n some type is well-formed. For example given the above type definition, we can use\n `FromEnv(Set<K>)` to derive that `K: Hash`, like in:","sig":null,"attributes":[{"value":"/ A predicate which enables deriving everything which should be true if we *know* that","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19473,"byte_end":19561,"line_start":676,"line_end":676,"column_start":5,"column_end":93}},{"value":"/ some type is well-formed. For example given the above type definition, we can use","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19566,"byte_end":19651,"line_start":677,"line_end":677,"column_start":5,"column_end":90}},{"value":"/ `FromEnv(Set<K>)` to derive that `K: Hash`, like in:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19656,"byte_end":19712,"line_start":678,"line_end":678,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19717,"byte_end":19720,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19725,"byte_end":19739,"line_start":680,"line_end":680,"column_start":5,"column_end":19}},{"value":"/ forall<K> {","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19744,"byte_end":19759,"line_start":681,"line_end":681,"column_start":5,"column_end":20}},{"value":"/     if (FromEnv(Set<K>)) {","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19764,"byte_end":19794,"line_start":682,"line_end":682,"column_start":5,"column_end":35}},{"value":"/         K: Hash","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19799,"byte_end":19818,"line_start":683,"line_end":683,"column_start":5,"column_end":24}},{"value":"/     }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19823,"byte_end":19832,"line_start":684,"line_end":684,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19837,"byte_end":19842,"line_start":685,"line_end":685,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19847,"byte_end":19854,"line_start":686,"line_end":686,"column_start":5,"column_end":12}}]},{"kind":"Enum","id":{"krate":0,"index":2098},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19020,"byte_end":19027,"line_start":662,"line_end":662,"column_start":10,"column_end":17},"name":"FromEnv","qualname":"::FromEnv","value":"pub enum FromEnv<TF: TypeFamily> {\n\n    /// A predicate which enables deriving everything which should be true if we *know* that\n    /// some trait ref is well-formed. For example given the above trait definitions, we can use\n    /// `FromEnv(T: Copy)` to derive that `T: Clone`, like in:\n    ///\n    /// ```notrust\n    /// forall<T> {\n    ///     if (FromEnv(T: Copy)) {\n    ///         T: Clone\n    ///     }\n    /// }\n    /// ```\n    Trait(TraitRef<TF>),\n\n    /// A predicate which enables deriving everything which should be true if we *know* that\n    /// some type is well-formed. For example given the above type definition, we can use\n    /// `FromEnv(Set<K>)` to derive that `K: Hash`, like in:\n    ///\n    /// ```notrust\n    /// forall<K> {\n    ///     if (FromEnv(Set<K>)) {\n    ///         K: Hash\n    ///     }\n    /// }\n    /// ```\n    Ty(Ty<TF>),\n}","parent":null,"children":[{"krate":0,"index":2100},{"krate":0,"index":2103}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2144},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":20210,"byte_end":20215,"line_start":695,"line_end":695,"column_start":5,"column_end":10},"name":"Holds","qualname":"::DomainGoal::Holds","value":"DomainGoal::Holds(WhereClause<TF>)","parent":{"krate":0,"index":2142},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":20239,"byte_end":20249,"line_start":697,"line_end":697,"column_start":5,"column_end":15},"name":"WellFormed","qualname":"::DomainGoal::WellFormed","value":"DomainGoal::WellFormed(WellFormed<TF>)","parent":{"krate":0,"index":2142},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2150},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":20272,"byte_end":20279,"line_start":699,"line_end":699,"column_start":5,"column_end":12},"name":"FromEnv","qualname":"::DomainGoal::FromEnv","value":"DomainGoal::FromEnv(FromEnv<TF>)","parent":{"krate":0,"index":2142},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2153},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":20299,"byte_end":20308,"line_start":701,"line_end":701,"column_start":5,"column_end":14},"name":"Normalize","qualname":"::DomainGoal::Normalize","value":"DomainGoal::Normalize(Normalize<TF>)","parent":{"krate":0,"index":2142},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2156},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":20584,"byte_end":20591,"line_start":706,"line_end":706,"column_start":5,"column_end":12},"name":"IsLocal","qualname":"::DomainGoal::IsLocal","value":"DomainGoal::IsLocal(Ty<TF>)","parent":{"krate":0,"index":2142},"children":[],"decl_id":null,"docs":" True if a type is considered to have been \"defined\" by the current crate. This is true for\n a `struct Foo { }` but false for a `#[upstream] struct Foo { }`. However, for fundamental types\n like `Box<T>`, it is true if `T` is local.\n","sig":null,"attributes":[{"value":"/ True if a type is considered to have been \"defined\" by the current crate. This is true for","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":20330,"byte_end":20424,"line_start":703,"line_end":703,"column_start":5,"column_end":99}},{"value":"/ a `struct Foo { }` but false for a `#[upstream] struct Foo { }`. However, for fundamental types","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":20429,"byte_end":20528,"line_start":704,"line_end":704,"column_start":5,"column_end":104}},{"value":"/ like `Box<T>`, it is true if `T` is local.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":20533,"byte_end":20579,"line_start":705,"line_end":705,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2159},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":20869,"byte_end":20879,"line_start":711,"line_end":711,"column_start":5,"column_end":15},"name":"IsUpstream","qualname":"::DomainGoal::IsUpstream","value":"DomainGoal::IsUpstream(Ty<TF>)","parent":{"krate":0,"index":2142},"children":[],"decl_id":null,"docs":" True if a type is *not* considered to have been \"defined\" by the current crate. This is\n false for a `struct Foo { }` but true for a `#[upstream] struct Foo { }`. However, for\n fundamental types like `Box<T>`, it is true if `T` is upstream.\n","sig":null,"attributes":[{"value":"/ True if a type is *not* considered to have been \"defined\" by the current crate. This is","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":20606,"byte_end":20697,"line_start":708,"line_end":708,"column_start":5,"column_end":96}},{"value":"/ false for a `struct Foo { }` but true for a `#[upstream] struct Foo { }`. However, for","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":20702,"byte_end":20792,"line_start":709,"line_end":709,"column_start":5,"column_end":95}},{"value":"/ fundamental types like `Box<T>`, it is true if `T` is upstream.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":20797,"byte_end":20864,"line_start":710,"line_end":710,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2162},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21407,"byte_end":21421,"line_start":726,"line_end":726,"column_start":5,"column_end":19},"name":"IsFullyVisible","qualname":"::DomainGoal::IsFullyVisible","value":"DomainGoal::IsFullyVisible(Ty<TF>)","parent":{"krate":0,"index":2142},"children":[],"decl_id":null,"docs":" True if a type and its input types are fully visible, known types. That is, there are no\n unknown type parameters anywhere in this type.","sig":null,"attributes":[{"value":"/ True if a type and its input types are fully visible, known types. That is, there are no","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":20894,"byte_end":20986,"line_start":713,"line_end":713,"column_start":5,"column_end":97}},{"value":"/ unknown type parameters anywhere in this type.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":20991,"byte_end":21041,"line_start":714,"line_end":714,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21046,"byte_end":21049,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ More formally, for each struct S<P0..Pn>:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21054,"byte_end":21099,"line_start":716,"line_end":716,"column_start":5,"column_end":50}},{"value":"/ forall<P0..Pn> {","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21104,"byte_end":21124,"line_start":717,"line_end":717,"column_start":5,"column_end":25}},{"value":"/     IsFullyVisible(S<P0...Pn>) :-","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21129,"byte_end":21166,"line_start":718,"line_end":718,"column_start":5,"column_end":42}},{"value":"/         IsFullyVisible(P0),","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21171,"byte_end":21202,"line_start":719,"line_end":719,"column_start":5,"column_end":36}},{"value":"/         ...","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21207,"byte_end":21222,"line_start":720,"line_end":720,"column_start":5,"column_end":20}},{"value":"/         IsFullyVisible(Pn)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21227,"byte_end":21257,"line_start":721,"line_end":721,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21262,"byte_end":21267,"line_start":722,"line_end":722,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21272,"byte_end":21275,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ Note that any of these types can have lifetimes in their parameters too, but we only","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21280,"byte_end":21368,"line_start":724,"line_end":724,"column_start":5,"column_end":93}},{"value":"/ consider type parameters.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21373,"byte_end":21402,"line_start":725,"line_end":725,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2165},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21932,"byte_end":21948,"line_start":735,"line_end":735,"column_start":5,"column_end":21},"name":"LocalImplAllowed","qualname":"::DomainGoal::LocalImplAllowed","value":"DomainGoal::LocalImplAllowed(TraitRef<TF>)","parent":{"krate":0,"index":2142},"children":[],"decl_id":null,"docs":" Used to dictate when trait impls are allowed in the current (local) crate based on the\n orphan rules.","sig":null,"attributes":[{"value":"/ Used to dictate when trait impls are allowed in the current (local) crate based on the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21436,"byte_end":21526,"line_start":728,"line_end":728,"column_start":5,"column_end":95}},{"value":"/ orphan rules.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21531,"byte_end":21548,"line_start":729,"line_end":729,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21553,"byte_end":21556,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ `LocalImplAllowed(T: Trait)` is true if the type T is allowed to impl trait Trait in","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21561,"byte_end":21649,"line_start":731,"line_end":731,"column_start":5,"column_end":93}},{"value":"/ the current crate. Under the current rules, this is unconditionally true for all types if","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21654,"byte_end":21747,"line_start":732,"line_end":732,"column_start":5,"column_end":98}},{"value":"/ the Trait is considered to be \"defined\" in the current crate. If that is not the case, then","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21752,"byte_end":21847,"line_start":733,"line_end":733,"column_start":5,"column_end":100}},{"value":"/ `LocalImplAllowed(T: Trait)` can still be true if `IsLocal(T)` is true.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21852,"byte_end":21927,"line_start":734,"line_end":734,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2168},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22270,"byte_end":22280,"line_start":742,"line_end":742,"column_start":5,"column_end":15},"name":"Compatible","qualname":"::DomainGoal::Compatible","value":"DomainGoal::Compatible(())","parent":{"krate":0,"index":2142},"children":[],"decl_id":null,"docs":" Used to activate the \"compatible modality\" rules. Rules that introduce predicates that have\n to do with \"all compatible universes\" should depend on this clause so that they only apply\n if this is present.","sig":null,"attributes":[{"value":"/ Used to activate the \"compatible modality\" rules. Rules that introduce predicates that have","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":21969,"byte_end":22064,"line_start":737,"line_end":737,"column_start":5,"column_end":100}},{"value":"/ to do with \"all compatible universes\" should depend on this clause so that they only apply","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22069,"byte_end":22163,"line_start":738,"line_end":738,"column_start":5,"column_end":99}},{"value":"/ if this is present.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22168,"byte_end":22191,"line_start":739,"line_end":739,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22196,"byte_end":22199,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ (HACK: Having `()` makes some of our macros work better.)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22204,"byte_end":22265,"line_start":741,"line_end":741,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2171},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22783,"byte_end":22797,"line_start":753,"line_end":753,"column_start":5,"column_end":19},"name":"DownstreamType","qualname":"::DomainGoal::DownstreamType","value":"DomainGoal::DownstreamType(Ty<TF>)","parent":{"krate":0,"index":2142},"children":[],"decl_id":null,"docs":" Used to indicate that a given type is in a downstream crate. Downstream crates contain the\n current crate at some level of their dependencies.","sig":null,"attributes":[{"value":"/ Used to indicate that a given type is in a downstream crate. Downstream crates contain the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22291,"byte_end":22385,"line_start":744,"line_end":744,"column_start":5,"column_end":99}},{"value":"/ current crate at some level of their dependencies.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22390,"byte_end":22444,"line_start":745,"line_end":745,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22449,"byte_end":22452,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ Since chalk does not actually see downstream types, this is usually introduced with","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22457,"byte_end":22544,"line_start":747,"line_end":747,"column_start":5,"column_end":92}},{"value":"/ implication on a fresh, universally quantified type.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22549,"byte_end":22605,"line_start":748,"line_end":748,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22610,"byte_end":22613,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ forall<T> { if (DownstreamType(T)) { /* ... */ } }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22618,"byte_end":22672,"line_start":750,"line_end":750,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22677,"byte_end":22680,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ This makes a new type `T` available and makes `DownstreamType(T)` provable for that type.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22685,"byte_end":22778,"line_start":752,"line_end":752,"column_start":5,"column_end":98}}]},{"kind":"Enum","id":{"krate":0,"index":2142},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":20177,"byte_end":20187,"line_start":694,"line_end":694,"column_start":10,"column_end":20},"name":"DomainGoal","qualname":"::DomainGoal","value":"pub enum DomainGoal<TF: TypeFamily> {\n    Holds(WhereClause<TF>),\n    WellFormed(WellFormed<TF>),\n    FromEnv(FromEnv<TF>),\n    Normalize(Normalize<TF>),\n\n    /// True if a type is considered to have been \"defined\" by the current crate. This is true for\n    /// a `struct Foo { }` but false for a `#[upstream] struct Foo { }`. However, for fundamental types\n    /// like `Box<T>`, it is true if `T` is local.\n    IsLocal(Ty<TF>),\n\n    /// True if a type is *not* considered to have been \"defined\" by the current crate. This is\n    /// false for a `struct Foo { }` but true for a `#[upstream] struct Foo { }`. However, for\n    /// fundamental types like `Box<T>`, it is true if `T` is upstream.\n    IsUpstream(Ty<TF>),\n\n    /// True if a type and its input types are fully visible, known types. That is, there are no\n    /// unknown type parameters anywhere in this type.\n    ///\n    /// More formally, for each struct S<P0..Pn>:\n    /// forall<P0..Pn> {\n    ///     IsFullyVisible(S<P0...Pn>) :-\n    ///         IsFullyVisible(P0),\n    ///         ...\n    ///         IsFullyVisible(Pn)\n    /// }\n    ///\n    /// Note that any of these types can have lifetimes in their parameters too, but we only\n    /// consider type parameters.\n    IsFullyVisible(Ty<TF>),\n\n    /// Used to dictate when trait impls are allowed in the current (local) crate based on the\n    /// orphan rules.\n    ///\n    /// `LocalImplAllowed(T: Trait)` is true if the type T is allowed to impl trait Trait in\n    /// the current crate. Under the current rules, this is unconditionally true for all types if\n    /// the Trait is considered to be \"defined\" in the current crate. If that is not the case, then\n    /// `LocalImplAllowed(T: Trait)` can still be true if `IsLocal(T)` is true.\n    LocalImplAllowed(TraitRef<TF>),\n\n    /// Used to activate the \"compatible modality\" rules. Rules that introduce predicates that have\n    /// to do with \"all compatible universes\" should depend on this clause so that they only apply\n    /// if this is present.\n    ///\n    /// (HACK: Having `()` makes some of our macros work better.)\n    Compatible(()),\n\n    /// Used to indicate that a given type is in a downstream crate. Downstream crates contain the\n    /// current crate at some level of their dependencies.\n    ///\n    /// Since chalk does not actually see downstream types, this is usually introduced with\n    /// implication on a fresh, universally quantified type.\n    ///\n    /// forall<T> { if (DownstreamType(T)) { /* ... */ } }\n    ///\n    /// This makes a new type `T` available and makes `DownstreamType(T)` provable for that type.\n    DownstreamType(Ty<TF>),\n}","parent":null,"children":[{"krate":0,"index":2144},{"krate":0,"index":2147},{"krate":0,"index":2150},{"krate":0,"index":2153},{"krate":0,"index":2156},{"krate":0,"index":2159},{"krate":0,"index":2162},{"krate":0,"index":2165},{"krate":0,"index":2168},{"krate":0,"index":2171}],"decl_id":null,"docs":" A \"domain goal\" is a goal that is directly about Rust, rather than a pure\n logical statement. As much as possible, the Chalk solver should avoid\n decomposing this enum, and instead treat its values opaquely.\n","sig":null,"attributes":[{"value":"/ A \"domain goal\" is a goal that is directly about Rust, rather than a pure","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19874,"byte_end":19951,"line_start":690,"line_end":690,"column_start":1,"column_end":78}},{"value":"/ logical statement. As much as possible, the Chalk solver should avoid","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":19952,"byte_end":20025,"line_start":691,"line_end":691,"column_start":1,"column_end":74}},{"value":"/ decomposing this enum, and instead treat its values opaquely.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":20026,"byte_end":20091,"line_start":692,"line_end":692,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":833},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22819,"byte_end":22840,"line_start":756,"line_end":756,"column_start":10,"column_end":31},"name":"QuantifiedWhereClause","qualname":"::QuantifiedWhereClause","value":"Binders<WhereClause<TF>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":23189,"byte_end":23210,"line_start":763,"line_end":763,"column_start":12,"column_end":33},"name":"into_well_formed_goal","qualname":"<WhereClause<TF>>::into_well_formed_goal","value":"pub fn into_well_formed_goal(Self) -> DomainGoal<TF>","parent":null,"children":[],"decl_id":null,"docs":" Turn a where clause into the WF version of it i.e.:\n * `Implemented(T: Trait)` maps to `WellFormed(T: Trait)`\n * `ProjectionEq(<T as Trait>::Item = Foo)` maps to `WellFormed(<T as Trait>::Item = Foo)`\n * any other clause maps to itself\n","sig":null,"attributes":[{"value":"/ Turn a where clause into the WF version of it i.e.:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22917,"byte_end":22972,"line_start":759,"line_end":759,"column_start":5,"column_end":60}},{"value":"/ * `Implemented(T: Trait)` maps to `WellFormed(T: Trait)`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22977,"byte_end":23037,"line_start":760,"line_end":760,"column_start":5,"column_end":65}},{"value":"/ * `ProjectionEq(<T as Trait>::Item = Foo)` maps to `WellFormed(<T as Trait>::Item = Foo)`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":23042,"byte_end":23135,"line_start":761,"line_end":761,"column_start":5,"column_end":98}},{"value":"/ * any other clause maps to itself","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":23140,"byte_end":23177,"line_start":762,"line_end":762,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":23501,"byte_end":23519,"line_start":771,"line_end":771,"column_start":12,"column_end":30},"name":"into_from_env_goal","qualname":"<WhereClause<TF>>::into_from_env_goal","value":"pub fn into_from_env_goal(Self) -> DomainGoal<TF>","parent":null,"children":[],"decl_id":null,"docs":" Same as `into_well_formed_goal` but with the `FromEnv` predicate instead of `WellFormed`.\n","sig":null,"attributes":[{"value":"/ Same as `into_well_formed_goal` but with the `FromEnv` predicate instead of `WellFormed`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":23396,"byte_end":23489,"line_start":770,"line_end":770,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":23974,"byte_end":23995,"line_start":784,"line_end":784,"column_start":12,"column_end":33},"name":"into_well_formed_goal","qualname":"<QuantifiedWhereClause<TF>>::into_well_formed_goal","value":"pub fn into_well_formed_goal(Self) -> Binders<DomainGoal<TF>>","parent":null,"children":[],"decl_id":null,"docs":" As with `WhereClause::into_well_formed_goal`, but for a\n quantified where clause. For example, `forall<T> {\n Implemented(T: Trait)}` would map to `forall<T> {\n WellFormed(T: Trait) }`.\n","sig":null,"attributes":[{"value":"/ As with `WhereClause::into_well_formed_goal`, but for a","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":23753,"byte_end":23812,"line_start":780,"line_end":780,"column_start":5,"column_end":64}},{"value":"/ quantified where clause. For example, `forall<T> {","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":23817,"byte_end":23871,"line_start":781,"line_end":781,"column_start":5,"column_end":59}},{"value":"/ Implemented(T: Trait)}` would map to `forall<T> {","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":23876,"byte_end":23929,"line_start":782,"line_end":782,"column_start":5,"column_end":58}},{"value":"/ WellFormed(T: Trait) }`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":23934,"byte_end":23962,"line_start":783,"line_end":783,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":24301,"byte_end":24319,"line_start":792,"line_end":792,"column_start":12,"column_end":30},"name":"into_from_env_goal","qualname":"<QuantifiedWhereClause<TF>>::into_from_env_goal","value":"pub fn into_from_env_goal(Self) -> Binders<DomainGoal<TF>>","parent":null,"children":[],"decl_id":null,"docs":" As with `WhereClause::into_from_env_goal`, but mapped over any\n binders. For example, `forall<T> {\n Implemented(T: Trait)}` would map to `forall<T> {\n FromEnv(T: Trait) }`.\n","sig":null,"attributes":[{"value":"/ As with `WhereClause::into_from_env_goal`, but mapped over any","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":24092,"byte_end":24158,"line_start":788,"line_end":788,"column_start":5,"column_end":71}},{"value":"/ binders. For example, `forall<T> {","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":24163,"byte_end":24201,"line_start":789,"line_end":789,"column_start":5,"column_end":43}},{"value":"/ Implemented(T: Trait)}` would map to `forall<T> {","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":24206,"byte_end":24259,"line_start":790,"line_end":790,"column_start":5,"column_end":58}},{"value":"/ FromEnv(T: Trait) }`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":24264,"byte_end":24289,"line_start":791,"line_end":791,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":24557,"byte_end":24575,"line_start":800,"line_end":800,"column_start":12,"column_end":30},"name":"into_from_env_goal","qualname":"<DomainGoal<TF>>::into_from_env_goal","value":"pub fn into_from_env_goal(Self) -> DomainGoal<TF>","parent":null,"children":[],"decl_id":null,"docs":" Convert `Implemented(...)` into `FromEnv(...)`, but leave other\n goals unchanged.\n","sig":null,"attributes":[{"value":"/ Convert `Implemented(...)` into `FromEnv(...)`, but leave other","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":24453,"byte_end":24520,"line_start":798,"line_end":798,"column_start":5,"column_end":72}},{"value":"/ goals unchanged.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":24525,"byte_end":24545,"line_start":799,"line_end":799,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2212},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":25016,"byte_end":25022,"line_start":813,"line_end":813,"column_start":5,"column_end":11},"name":"EqGoal","qualname":"::LeafGoal::EqGoal","value":"LeafGoal::EqGoal(EqGoal<TF>)","parent":{"krate":0,"index":2210},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2215},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":25040,"byte_end":25050,"line_start":814,"line_end":814,"column_start":5,"column_end":15},"name":"DomainGoal","qualname":"::LeafGoal::DomainGoal","value":"LeafGoal::DomainGoal(DomainGoal<TF>)","parent":{"krate":0,"index":2210},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2210},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":24985,"byte_end":24993,"line_start":812,"line_end":812,"column_start":10,"column_end":18},"name":"LeafGoal","qualname":"::LeafGoal","value":"pub enum LeafGoal<TF: TypeFamily> {\n    EqGoal(EqGoal<TF>),\n    DomainGoal(DomainGoal<TF>),\n}","parent":null,"children":[{"krate":0,"index":2212},{"krate":0,"index":2215}],"decl_id":null,"docs":" A goal that does not involve any logical connectives. Equality is treated\n specially by the logic (as with most first-order logics), since it interacts\n with unification etc.\n","sig":null,"attributes":[{"value":"/ A goal that does not involve any logical connectives. Equality is treated","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":24791,"byte_end":24868,"line_start":809,"line_end":809,"column_start":1,"column_end":78}},{"value":"/ specially by the logic (as with most first-order logics), since it interacts","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":24869,"byte_end":24949,"line_start":810,"line_end":810,"column_start":1,"column_end":81}},{"value":"/ with unification etc.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":24950,"byte_end":24975,"line_start":811,"line_end":811,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":2251},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":25143,"byte_end":25149,"line_start":818,"line_end":818,"column_start":12,"column_end":18},"name":"EqGoal","qualname":"::EqGoal","value":"EqGoal { a, b }","parent":null,"children":[{"krate":0,"index":2253},{"krate":0,"index":2254}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2253},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":25176,"byte_end":25177,"line_start":819,"line_end":819,"column_start":9,"column_end":10},"name":"a","qualname":"::EqGoal::a","value":"Parameter<TF>","parent":{"krate":0,"index":2251},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2254},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":25202,"byte_end":25203,"line_start":820,"line_end":820,"column_start":9,"column_end":10},"name":"b","qualname":"::EqGoal::b","value":"Parameter<TF>","parent":{"krate":0,"index":2251},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2292},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":25511,"byte_end":25520,"line_start":828,"line_end":828,"column_start":12,"column_end":21},"name":"Normalize","qualname":"::Normalize","value":"Normalize { projection, ty }","parent":null,"children":[{"krate":0,"index":2294},{"krate":0,"index":2295}],"decl_id":null,"docs":" Proves that the given projection **normalizes** to the given\n type. A projection `T::Foo` normalizes to the type `U` if we can\n **match it to an impl** and that impl has a `type Foo = V` where\n `U = V`.\n","sig":null,"attributes":[{"value":"/ Proves that the given projection **normalizes** to the given","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":25223,"byte_end":25287,"line_start":823,"line_end":823,"column_start":1,"column_end":65}},{"value":"/ type. A projection `T::Foo` normalizes to the type `U` if we can","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":25288,"byte_end":25356,"line_start":824,"line_end":824,"column_start":1,"column_end":69}},{"value":"/ **match it to an impl** and that impl has a `type Foo = V` where","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":25357,"byte_end":25425,"line_start":825,"line_end":825,"column_start":1,"column_end":69}},{"value":"/ `U = V`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":25426,"byte_end":25438,"line_start":826,"line_end":826,"column_start":1,"column_end":13}}]},{"kind":"Field","id":{"krate":0,"index":2294},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":25547,"byte_end":25557,"line_start":829,"line_end":829,"column_start":9,"column_end":19},"name":"projection","qualname":"::Normalize::projection","value":"ProjectionTy<TF>","parent":{"krate":0,"index":2292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2295},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":25585,"byte_end":25587,"line_start":830,"line_end":830,"column_start":9,"column_end":11},"name":"ty","qualname":"::Normalize::ty","value":"Ty<TF>","parent":{"krate":0,"index":2292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2333},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":25869,"byte_end":25881,"line_start":837,"line_end":837,"column_start":12,"column_end":24},"name":"ProjectionEq","qualname":"::ProjectionEq","value":"ProjectionEq { projection, ty }","parent":null,"children":[{"krate":0,"index":2335},{"krate":0,"index":2336}],"decl_id":null,"docs":" Proves **equality** between a projection `T::Foo` and a type\n `U`. Equality can be proven via normalization, but we can also\n prove that `T::Foo = V::Foo` if `T = V` without normalizing.\n","sig":null,"attributes":[{"value":"/ Proves **equality** between a projection `T::Foo` and a type","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":25600,"byte_end":25664,"line_start":833,"line_end":833,"column_start":1,"column_end":65}},{"value":"/ `U`. Equality can be proven via normalization, but we can also","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":25665,"byte_end":25731,"line_start":834,"line_end":834,"column_start":1,"column_end":67}},{"value":"/ prove that `T::Foo = V::Foo` if `T = V` without normalizing.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":25732,"byte_end":25796,"line_start":835,"line_end":835,"column_start":1,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":2335},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":25908,"byte_end":25918,"line_start":838,"line_end":838,"column_start":9,"column_end":19},"name":"projection","qualname":"::ProjectionEq::projection","value":"ProjectionTy<TF>","parent":{"krate":0,"index":2333},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2336},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":25946,"byte_end":25948,"line_start":839,"line_end":839,"column_start":9,"column_end":11},"name":"ty","qualname":"::ProjectionEq::ty","value":"Ty<TF>","parent":{"krate":0,"index":2333},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2374},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":26475,"byte_end":26482,"line_start":854,"line_end":854,"column_start":12,"column_end":19},"name":"Binders","qualname":"::Binders","value":"Binders { binders, value }","parent":null,"children":[{"krate":0,"index":2376},{"krate":0,"index":2377}],"decl_id":null,"docs":" Indicates that the `value` is universally quantified over `N`\n parameters of the given kinds, where `N == self.binders.len()`. A\n variable with depth `i < N` refers to the value at\n `self.binders[i]`. Variables with depth `>= N` are free.","sig":null,"attributes":[{"value":"/ Indicates that the `value` is universally quantified over `N`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":26048,"byte_end":26113,"line_start":846,"line_end":846,"column_start":1,"column_end":66}},{"value":"/ parameters of the given kinds, where `N == self.binders.len()`. A","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":26114,"byte_end":26183,"line_start":847,"line_end":847,"column_start":1,"column_end":70}},{"value":"/ variable with depth `i < N` refers to the value at","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":26184,"byte_end":26238,"line_start":848,"line_end":848,"column_start":1,"column_end":55}},{"value":"/ `self.binders[i]`. Variables with depth `>= N` are free.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":26239,"byte_end":26299,"line_start":849,"line_end":849,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":26300,"byte_end":26303,"line_start":850,"line_end":850,"column_start":1,"column_end":4}},{"value":"/ (IOW, we use deBruijn indices, where binders are introduced in reverse order","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":26304,"byte_end":26384,"line_start":851,"line_end":851,"column_start":1,"column_end":81}},{"value":"/ of `self.binders`.)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":26385,"byte_end":26408,"line_start":852,"line_end":852,"column_start":1,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":2376},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":26496,"byte_end":26503,"line_start":855,"line_end":855,"column_start":9,"column_end":16},"name":"binders","qualname":"::Binders::binders","value":"std::vec::Vec<ParameterKind<()>>","parent":{"krate":0,"index":2374},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2377},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":26537,"byte_end":26542,"line_start":856,"line_end":856,"column_start":9,"column_end":14},"name":"value","qualname":"::Binders::value","value":"T","parent":{"krate":0,"index":2374},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":26676,"byte_end":26679,"line_start":864,"line_end":864,"column_start":12,"column_end":15},"name":"map","qualname":"<Binders<T>>::map","value":"pub fn map<U, OP>(Self, OP) -> Binders<U> where OP: FnOnce(T) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":26895,"byte_end":26902,"line_start":875,"line_end":875,"column_start":12,"column_end":19},"name":"map_ref","qualname":"<Binders<T>>::map_ref","value":"pub fn map_ref<'a, U, OP>(&'a Self, OP) -> Binders<U> where OP: FnOnce(&'a T)\n-> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":27383,"byte_end":27402,"line_start":890,"line_end":890,"column_start":12,"column_end":31},"name":"with_fresh_type_var","qualname":"<Binders<T>>::with_fresh_type_var","value":"pub fn with_fresh_type_var<U, TF,\n                           impl FnOnce(<T as Fold<TF, TF>>::Result, Ty<TF>) -> U: FnOnce(<T\n                                                                                         as\n                                                                                         Fold<TF,\n                                                                                              TF>>::Result,\n                                                                                         Ty<TF>)\n                           ->\n                           U>(Self,\n                              impl FnOnce(<T as Fold<TF, TF>>::Result, Ty<TF>) -> U)\n-> Binders<U> where TF: TypeFamily, T: Shift<TF>","parent":null,"children":[],"decl_id":null,"docs":" Introduces a fresh type variable at the start of the binders and returns new Binders with\n the result of the operator function applied.","sig":null,"attributes":[{"value":"/ Introduces a fresh type variable at the start of the binders and returns new Binders with","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":27132,"byte_end":27225,"line_start":886,"line_end":886,"column_start":5,"column_end":98}},{"value":"/ the result of the operator function applied.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":27230,"byte_end":27278,"line_start":887,"line_end":887,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":27283,"byte_end":27286,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ forall<?0, ?1> will become forall<?0, ?1, ?2> where ?0 is the fresh variable","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":27291,"byte_end":27371,"line_start":889,"line_end":889,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":27981,"byte_end":27984,"line_start":909,"line_end":909,"column_start":12,"column_end":15},"name":"len","qualname":"<Binders<T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":28381,"byte_end":28391,"line_start":923,"line_end":923,"column_start":12,"column_end":22},"name":"substitute","qualname":"<Binders<T>>::substitute","value":"pub fn substitute(&Self, &[Parameter<TF>]) -> T::Result","parent":null,"children":[],"decl_id":null,"docs":" Substitute `parameters` for the variables introduced by these\n binders. So if the binders represent (e.g.) `<X, Y> { T }` and\n parameters is the slice `[A, B]`, then returns `[X => A, Y =>\n B] T`.\n","sig":null,"attributes":[{"value":"/ Substitute `parameters` for the variables introduced by these","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":28148,"byte_end":28213,"line_start":919,"line_end":919,"column_start":5,"column_end":70}},{"value":"/ binders. So if the binders represent (e.g.) `<X, Y> { T }` and","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":28218,"byte_end":28284,"line_start":920,"line_end":920,"column_start":5,"column_end":71}},{"value":"/ parameters is the slice `[A, B]`, then returns `[X => A, Y =>","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":28289,"byte_end":28354,"line_start":921,"line_end":921,"column_start":5,"column_end":70}},{"value":"/ B] T`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":28359,"byte_end":28369,"line_start":922,"line_end":922,"column_start":5,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":884},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":29409,"byte_end":29428,"line_start":958,"line_end":958,"column_start":12,"column_end":31},"name":"BindersIntoIterator","qualname":"::BindersIntoIterator","value":"BindersIntoIterator {  }","parent":null,"children":[{"krate":0,"index":886},{"krate":0,"index":887}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2410},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":30071,"byte_end":30095,"line_start":977,"line_end":977,"column_start":12,"column_end":36},"name":"ProgramClauseImplication","qualname":"::ProgramClauseImplication","value":"ProgramClauseImplication { consequence, conditions }","parent":null,"children":[{"krate":0,"index":2412},{"krate":0,"index":2413}],"decl_id":null,"docs":" Represents one clause of the form `consequence :- conditions` where\n `conditions = cond_1 && cond_2 && ...` is the conjunction of the individual\n conditions.\n","sig":null,"attributes":[{"value":"/ Represents one clause of the form `consequence :- conditions` where","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":29816,"byte_end":29887,"line_start":973,"line_end":973,"column_start":1,"column_end":72}},{"value":"/ `conditions = cond_1 && cond_2 && ...` is the conjunction of the individual","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":29888,"byte_end":29967,"line_start":974,"line_end":974,"column_start":1,"column_end":80}},{"value":"/ conditions.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":29968,"byte_end":29983,"line_start":975,"line_end":975,"column_start":1,"column_end":16}}]},{"kind":"Field","id":{"krate":0,"index":2412},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":30122,"byte_end":30133,"line_start":978,"line_end":978,"column_start":9,"column_end":20},"name":"consequence","qualname":"::ProgramClauseImplication::consequence","value":"DomainGoal<TF>","parent":{"krate":0,"index":2410},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2413},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":30159,"byte_end":30169,"line_start":979,"line_end":979,"column_start":9,"column_end":19},"name":"conditions","qualname":"::ProgramClauseImplication::conditions","value":"std::vec::Vec<Goal<TF>>","parent":{"krate":0,"index":2410},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2456},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":30295,"byte_end":30302,"line_start":984,"line_end":984,"column_start":5,"column_end":12},"name":"Implies","qualname":"::ProgramClause::Implies","value":"ProgramClause::Implies(ProgramClauseImplication<TF>)","parent":{"krate":0,"index":2454},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2459},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":30338,"byte_end":30344,"line_start":985,"line_end":985,"column_start":5,"column_end":11},"name":"ForAll","qualname":"::ProgramClause::ForAll","value":"ProgramClause::ForAll(Binders<ProgramClauseImplication<TF>>)","parent":{"krate":0,"index":2454},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2454},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":30259,"byte_end":30272,"line_start":983,"line_end":983,"column_start":10,"column_end":23},"name":"ProgramClause","qualname":"::ProgramClause","value":"pub enum ProgramClause<TF: TypeFamily> {\n    Implies(ProgramClauseImplication<TF>),\n    ForAll(Binders<ProgramClauseImplication<TF>>),\n}","parent":null,"children":[{"krate":0,"index":2456},{"krate":0,"index":2459}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":30440,"byte_end":30460,"line_start":989,"line_end":989,"column_start":12,"column_end":32},"name":"into_from_env_clause","qualname":"<ProgramClause<TF>>::into_from_env_clause","value":"pub fn into_from_env_clause(Self) -> ProgramClause<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2495},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31321,"byte_end":31330,"line_start":1012,"line_end":1012,"column_start":12,"column_end":21},"name":"Canonical","qualname":"::Canonical","value":"Canonical { value, binders }","parent":null,"children":[{"krate":0,"index":2497},{"krate":0,"index":2498}],"decl_id":null,"docs":" Wraps a \"canonicalized item\". Items are canonicalized as follows:","sig":null,"attributes":[{"value":"/ Wraps a \"canonicalized item\". Items are canonicalized as follows:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31001,"byte_end":31070,"line_start":1006,"line_end":1006,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31071,"byte_end":31074,"line_start":1007,"line_end":1007,"column_start":1,"column_end":4}},{"value":"/ All unresolved existential variables are \"renumbered\" according to their","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31075,"byte_end":31151,"line_start":1008,"line_end":1008,"column_start":1,"column_end":77}},{"value":"/ first appearance; the kind/universe of the variable is recorded in the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31152,"byte_end":31226,"line_start":1009,"line_end":1009,"column_start":1,"column_end":75}},{"value":"/ `binders` field.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31227,"byte_end":31247,"line_start":1010,"line_end":1010,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":2497},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31344,"byte_end":31349,"line_start":1013,"line_end":1013,"column_start":9,"column_end":14},"name":"value","qualname":"::Canonical::value","value":"T","parent":{"krate":0,"index":2495},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2498},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31362,"byte_end":31369,"line_start":1014,"line_end":1014,"column_start":9,"column_end":16},"name":"binders","qualname":"::Canonical::binders","value":"std::vec::Vec<ParameterKind<UniverseIndex>>","parent":{"krate":0,"index":2495},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2534},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31756,"byte_end":31766,"line_start":1024,"line_end":1024,"column_start":12,"column_end":22},"name":"UCanonical","qualname":"::UCanonical","value":"UCanonical { canonical, universes }","parent":null,"children":[{"krate":0,"index":2536},{"krate":0,"index":2537}],"decl_id":null,"docs":" A \"universe canonical\" value. This is a wrapper around a\n `Canonical`, indicating that the universes within have been\n \"renumbered\" to start from 0 and collapse unimportant\n distinctions.","sig":null,"attributes":[{"value":"/ A \"universe canonical\" value. This is a wrapper around a","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31409,"byte_end":31469,"line_start":1017,"line_end":1017,"column_start":1,"column_end":61}},{"value":"/ `Canonical`, indicating that the universes within have been","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31470,"byte_end":31533,"line_start":1018,"line_end":1018,"column_start":1,"column_end":64}},{"value":"/ \"renumbered\" to start from 0 and collapse unimportant","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31534,"byte_end":31591,"line_start":1019,"line_end":1019,"column_start":1,"column_end":58}},{"value":"/ distinctions.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31592,"byte_end":31609,"line_start":1020,"line_end":1020,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31610,"byte_end":31613,"line_start":1021,"line_end":1021,"column_start":1,"column_end":4}},{"value":"/ To produce one of these values, use the `u_canonicalize` method.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31614,"byte_end":31682,"line_start":1022,"line_end":1022,"column_start":1,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":2536},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31780,"byte_end":31789,"line_start":1025,"line_end":1025,"column_start":9,"column_end":18},"name":"canonical","qualname":"::UCanonical::canonical","value":"Canonical<T>","parent":{"krate":0,"index":2534},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2537},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31813,"byte_end":31822,"line_start":1026,"line_end":1026,"column_start":9,"column_end":18},"name":"universes","qualname":"::UCanonical::universes","value":"usize","parent":{"krate":0,"index":2534},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31869,"byte_end":31892,"line_start":1030,"line_end":1030,"column_start":12,"column_end":35},"name":"is_trivial_substitution","qualname":"<UCanonical<T>>::is_trivial_substitution","value":"pub fn is_trivial_substitution<TF: TypeFamily>(&Self,\n                                               &Canonical<ConstrainedSubst<TF>>)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2575},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":32452,"byte_end":32462,"line_start":1045,"line_end":1045,"column_start":5,"column_end":15},"name":"Quantified","qualname":"::Goal::Quantified","value":"Goal::Quantified(QuantifierKind, Binders<Box<Goal<TF>>>)","parent":{"krate":0,"index":2573},"children":[],"decl_id":null,"docs":" Introduces a binding at depth 0, shifting other bindings up\n (deBruijn index).\n","sig":null,"attributes":[{"value":"/ Introduces a binding at depth 0, shifting other bindings up","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":32358,"byte_end":32421,"line_start":1043,"line_end":1043,"column_start":5,"column_end":68}},{"value":"/ (deBruijn index).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":32426,"byte_end":32447,"line_start":1044,"line_end":1044,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2579},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":32508,"byte_end":32515,"line_start":1046,"line_end":1046,"column_start":5,"column_end":12},"name":"Implies","qualname":"::Goal::Implies","value":"Goal::Implies(Vec<ProgramClause<TF>>, Box<Goal<TF>>)","parent":{"krate":0,"index":2573},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2583},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":32560,"byte_end":32563,"line_start":1047,"line_end":1047,"column_start":5,"column_end":8},"name":"And","qualname":"::Goal::And","value":"Goal::And(Box<Goal<TF>>, Box<Goal<TF>>)","parent":{"krate":0,"index":2573},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2587},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":32599,"byte_end":32602,"line_start":1048,"line_end":1048,"column_start":5,"column_end":8},"name":"Not","qualname":"::Goal::Not","value":"Goal::Not(Box<Goal<TF>>)","parent":{"krate":0,"index":2573},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2590},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":32623,"byte_end":32627,"line_start":1049,"line_end":1049,"column_start":5,"column_end":9},"name":"Leaf","qualname":"::Goal::Leaf","value":"Goal::Leaf(LeafGoal<TF>)","parent":{"krate":0,"index":2573},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2593},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":33173,"byte_end":33184,"line_start":1060,"line_end":1060,"column_start":5,"column_end":16},"name":"CannotProve","qualname":"::Goal::CannotProve","value":"Goal::CannotProve(())","parent":{"krate":0,"index":2573},"children":[],"decl_id":null,"docs":" Indicates something that cannot be proven to be true or false\n definitively. This can occur with overflow but also with\n unifications of skolemized variables like `forall<X,Y> { X = Y\n }`. Of course, that statement is false, as there exist types\n X, Y where `X = Y` is not true. But we treat it as \"cannot\n prove\" so that `forall<X,Y> { not { X = Y } }` also winds up\n as cannot prove.","sig":null,"attributes":[{"value":"/ Indicates something that cannot be proven to be true or false","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":32648,"byte_end":32713,"line_start":1051,"line_end":1051,"column_start":5,"column_end":70}},{"value":"/ definitively. This can occur with overflow but also with","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":32718,"byte_end":32778,"line_start":1052,"line_end":1052,"column_start":5,"column_end":65}},{"value":"/ unifications of skolemized variables like `forall<X,Y> { X = Y","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":32783,"byte_end":32849,"line_start":1053,"line_end":1053,"column_start":5,"column_end":71}},{"value":"/ }`. Of course, that statement is false, as there exist types","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":32854,"byte_end":32918,"line_start":1054,"line_end":1054,"column_start":5,"column_end":69}},{"value":"/ X, Y where `X = Y` is not true. But we treat it as \"cannot","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":32923,"byte_end":32985,"line_start":1055,"line_end":1055,"column_start":5,"column_end":67}},{"value":"/ prove\" so that `forall<X,Y> { not { X = Y } }` also winds up","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":32990,"byte_end":33054,"line_start":1056,"line_end":1056,"column_start":5,"column_end":69}},{"value":"/ as cannot prove.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":33059,"byte_end":33079,"line_start":1057,"line_end":1057,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":33084,"byte_end":33087,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ (TOTAL HACK: Having a unit result makes some of our macros work better.)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":33092,"byte_end":33168,"line_start":1059,"line_end":1059,"column_start":5,"column_end":81}}]},{"kind":"Enum","id":{"krate":0,"index":2573},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":32331,"byte_end":32335,"line_start":1042,"line_end":1042,"column_start":10,"column_end":14},"name":"Goal","qualname":"::Goal","value":"pub enum Goal<TF: TypeFamily> {\n\n    /// Introduces a binding at depth 0, shifting other bindings up\n    /// (deBruijn index).\n    Quantified(QuantifierKind, Binders<Box<Goal<TF>>>),\n    Implies(Vec<ProgramClause<TF>>, Box<Goal<TF>>),\n    And(Box<Goal<TF>>, Box<Goal<TF>>),\n    Not(Box<Goal<TF>>),\n    Leaf(LeafGoal<TF>),\n\n    /// Indicates something that cannot be proven to be true or false\n    /// definitively. This can occur with overflow but also with\n    /// unifications of skolemized variables like `forall<X,Y> { X = Y\n    /// }`. Of course, that statement is false, as there exist types\n    /// X, Y where `X = Y` is not true. But we treat it as \"cannot\n    /// prove\" so that `forall<X,Y> { not { X = Y } }` also winds up\n    /// as cannot prove.\n    ///\n    /// (TOTAL HACK: Having a unit result makes some of our macros work better.)\n    CannotProve(()),\n}","parent":null,"children":[{"krate":0,"index":2575},{"krate":0,"index":2579},{"krate":0,"index":2583},{"krate":0,"index":2587},{"krate":0,"index":2590},{"krate":0,"index":2593}],"decl_id":null,"docs":" A general goal; this is the full range of questions you can pose to Chalk.\n","sig":null,"attributes":[{"value":"/ A general goal; this is the full range of questions you can pose to Chalk.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":32243,"byte_end":32321,"line_start":1041,"line_end":1041,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":33236,"byte_end":33244,"line_start":1064,"line_end":1064,"column_start":12,"column_end":20},"name":"quantify","qualname":"<Goal<TF>>::quantify","value":"pub fn quantify(Self, QuantifierKind, Vec<ParameterKind<()>>) -> Goal<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":33548,"byte_end":33554,"line_start":1075,"line_end":1075,"column_start":12,"column_end":18},"name":"negate","qualname":"<Goal<TF>>::negate","value":"pub fn negate(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Takes a goal `G` and turns it into `not { G }`\n","sig":null,"attributes":[{"value":"/ Takes a goal `G` and turns it into `not { G }`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":33486,"byte_end":33536,"line_start":1074,"line_end":1074,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":33685,"byte_end":33695,"line_start":1080,"line_end":1080,"column_start":12,"column_end":22},"name":"compatible","qualname":"<Goal<TF>>::compatible","value":"pub fn compatible(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Takes a goal `G` and turns it into `compatible { G }`\n","sig":null,"attributes":[{"value":"/ Takes a goal `G` and turns it into `compatible { G }`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":33616,"byte_end":33673,"line_start":1079,"line_end":1079,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":34430,"byte_end":34440,"line_start":1101,"line_end":1101,"column_start":12,"column_end":22},"name":"implied_by","qualname":"<Goal<TF>>::implied_by","value":"pub fn implied_by(Self, Vec<ProgramClause<TF>>) -> Goal<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2645},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":34654,"byte_end":34660,"line_start":1108,"line_end":1108,"column_start":5,"column_end":11},"name":"ForAll","qualname":"::QuantifierKind::ForAll","value":"QuantifierKind::ForAll","parent":{"krate":0,"index":2644},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2647},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":34666,"byte_end":34672,"line_start":1109,"line_end":1109,"column_start":5,"column_end":11},"name":"Exists","qualname":"::QuantifierKind::Exists","value":"QuantifierKind::Exists","parent":{"krate":0,"index":2644},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2644},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":34633,"byte_end":34647,"line_start":1107,"line_end":1107,"column_start":10,"column_end":24},"name":"QuantifierKind","qualname":"::QuantifierKind","value":"pub enum QuantifierKind { ForAll, Exists, }","parent":null,"children":[{"krate":0,"index":2645},{"krate":0,"index":2647}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2669},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35095,"byte_end":35105,"line_start":1120,"line_end":1120,"column_start":5,"column_end":15},"name":"LifetimeEq","qualname":"::Constraint::LifetimeEq","value":"Constraint::LifetimeEq(Lifetime<TF>, Lifetime<TF>)","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2667},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35062,"byte_end":35072,"line_start":1119,"line_end":1119,"column_start":10,"column_end":20},"name":"Constraint","qualname":"::Constraint","value":"pub enum Constraint<TF: TypeFamily> {\n    LifetimeEq(Lifetime<TF>, Lifetime<TF>),\n}","parent":null,"children":[{"krate":0,"index":2669}],"decl_id":null,"docs":" A constraint on lifetimes.","sig":null,"attributes":[{"value":"/ A constraint on lifetimes.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":34677,"byte_end":34707,"line_start":1112,"line_end":1112,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":34708,"byte_end":34711,"line_start":1113,"line_end":1113,"column_start":1,"column_end":4}},{"value":"/ When we search for solutions within the trait system, we essentially ignore","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":34712,"byte_end":34791,"line_start":1114,"line_end":1114,"column_start":1,"column_end":80}},{"value":"/ lifetime constraints, instead gathering them up to return with our solution","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":34792,"byte_end":34871,"line_start":1115,"line_end":1115,"column_start":1,"column_end":80}},{"value":"/ for later checking. This allows for decoupling between type and region","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":34872,"byte_end":34946,"line_start":1116,"line_end":1116,"column_start":1,"column_end":75}},{"value":"/ checking in the compiler.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":34947,"byte_end":34976,"line_start":1117,"line_end":1117,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2713},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35283,"byte_end":35295,"line_start":1125,"line_end":1125,"column_start":12,"column_end":24},"name":"Substitution","qualname":"::Substitution","value":"Substitution { parameters }","parent":null,"children":[{"krate":0,"index":2715}],"decl_id":null,"docs":" A mapping of inference variables to instantiations thereof.\n","sig":null,"attributes":[{"value":"/ A mapping of inference variables to instantiations thereof.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35138,"byte_end":35201,"line_start":1123,"line_end":1123,"column_start":1,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":2715},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35490,"byte_end":35500,"line_start":1129,"line_end":1129,"column_start":9,"column_end":19},"name":"parameters","qualname":"::Substitution::parameters","value":"std::vec::Vec<Parameter<TF>>","parent":{"krate":0,"index":2713},"children":[],"decl_id":null,"docs":" Map free variable with given index to the value with the same\n index. Naturally, the kind of the variable must agree with\n the kind of the value.\n","sig":null,"attributes":[{"value":"/ Map free variable with given index to the value with the same","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35318,"byte_end":35383,"line_start":1126,"line_end":1126,"column_start":5,"column_end":70}},{"value":"/ index. Naturally, the kind of the variable must agree with","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35388,"byte_end":35450,"line_start":1127,"line_end":1127,"column_start":5,"column_end":67}},{"value":"/ the kind of the value.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35455,"byte_end":35481,"line_start":1128,"line_end":1128,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35576,"byte_end":35584,"line_start":1133,"line_end":1133,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Substitution<TF>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35938,"byte_end":35955,"line_start":1149,"line_end":1149,"column_start":12,"column_end":29},"name":"is_identity_subst","qualname":"<Substitution<TF>>::is_identity_subst","value":"pub fn is_identity_subst(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" A substitution is an **identity substitution** if it looks\n like this","sig":null,"attributes":[{"value":"/ A substitution is an **identity substitution** if it looks","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35648,"byte_end":35710,"line_start":1137,"line_end":1137,"column_start":5,"column_end":67}},{"value":"/ like this","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35715,"byte_end":35728,"line_start":1138,"line_end":1138,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35733,"byte_end":35736,"line_start":1139,"line_end":1139,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35741,"byte_end":35752,"line_start":1140,"line_end":1140,"column_start":5,"column_end":16}},{"value":"/ ?0 := ?0","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35757,"byte_end":35769,"line_start":1141,"line_end":1141,"column_start":5,"column_end":17}},{"value":"/ ?1 := ?1","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35774,"byte_end":35786,"line_start":1142,"line_end":1142,"column_start":5,"column_end":17}},{"value":"/ ?2 := ?2","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35791,"byte_end":35803,"line_start":1143,"line_end":1143,"column_start":5,"column_end":17}},{"value":"/ ...","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35808,"byte_end":35815,"line_start":1144,"line_end":1144,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35820,"byte_end":35827,"line_start":1145,"line_end":1145,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35832,"byte_end":35835,"line_start":1146,"line_end":1146,"column_start":5,"column_end":8}},{"value":"/ Basically, each value is mapped to a type or lifetime with its","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35840,"byte_end":35906,"line_start":1147,"line_end":1147,"column_start":5,"column_end":71}},{"value":"/ same index.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35911,"byte_end":35926,"line_start":1148,"line_end":1148,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2747},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":37619,"byte_end":37635,"line_start":1192,"line_end":1192,"column_start":12,"column_end":28},"name":"ConstrainedSubst","qualname":"::ConstrainedSubst","value":"ConstrainedSubst { subst, constraints }","parent":null,"children":[{"krate":0,"index":2749},{"krate":0,"index":2750}],"decl_id":null,"docs":" Combines a substitution (`subst`) with a set of region constraints\n (`constraints`). This represents the result of a query; the\n substitution stores the values for the query's unknown variables,\n and the constraints represents any region constraints that must\n additionally be solved.\n","sig":null,"attributes":[{"value":"/ Combines a substitution (`subst`) with a set of region constraints","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":37224,"byte_end":37294,"line_start":1186,"line_end":1186,"column_start":1,"column_end":71}},{"value":"/ (`constraints`). This represents the result of a query; the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":37295,"byte_end":37358,"line_start":1187,"line_end":1187,"column_start":1,"column_end":64}},{"value":"/ substitution stores the values for the query's unknown variables,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":37359,"byte_end":37428,"line_start":1188,"line_end":1188,"column_start":1,"column_end":70}},{"value":"/ and the constraints represents any region constraints that must","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":37429,"byte_end":37496,"line_start":1189,"line_end":1189,"column_start":1,"column_end":68}},{"value":"/ additionally be solved.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":37497,"byte_end":37524,"line_start":1190,"line_end":1190,"column_start":1,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":2749},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":37662,"byte_end":37667,"line_start":1193,"line_end":1193,"column_start":9,"column_end":14},"name":"subst","qualname":"::ConstrainedSubst::subst","value":"Substitution<TF>","parent":{"krate":0,"index":2747},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2750},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":37779,"byte_end":37790,"line_start":1194,"line_end":1194,"column_start":9,"column_end":20},"name":"constraints","qualname":"::ConstrainedSubst::constraints","value":"std::vec::Vec<InEnvironment<Constraint<TF>>>","parent":{"krate":0,"index":2747},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":42811,"byte_end":42814,"line_start":84,"line_end":84,"column_start":46,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":43360,"byte_end":43363,"line_start":104,"line_end":104,"column_start":46,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":43555,"byte_end":43558,"line_start":110,"line_end":110,"column_start":46,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":44001,"byte_end":44003,"line_start":124,"line_end":124,"column_start":34,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":44166,"byte_end":44174,"line_start":130,"line_end":130,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":44382,"byte_end":44389,"line_start":136,"line_end":136,"column_start":73,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":46608,"byte_end":46619,"line_start":206,"line_end":206,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":48497,"byte_end":48501,"line_start":258,"line_end":258,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":49881,"byte_end":49894,"line_start":289,"line_end":289,"column_start":58,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":50399,"byte_end":50408,"line_start":301,"line_end":301,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":76095,"byte_end":76096,"line_start":64,"line_end":64,"column_start":58,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":76483,"byte_end":76490,"line_start":80,"line_end":80,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":76796,"byte_end":76803,"line_start":89,"line_end":89,"column_start":28,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":76851,"byte_end":76858,"line_start":91,"line_end":91,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":77249,"byte_end":77256,"line_start":101,"line_end":101,"column_start":35,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":77293,"byte_end":77300,"line_start":103,"line_end":103,"column_start":33,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":77570,"byte_end":77581,"line_start":114,"line_end":114,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":78363,"byte_end":78374,"line_start":131,"line_end":131,"column_start":28,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":78422,"byte_end":78433,"line_start":133,"line_end":133,"column_start":44,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":78826,"byte_end":78837,"line_start":143,"line_end":143,"column_start":35,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":78874,"byte_end":78885,"line_start":145,"line_end":145,"column_start":33,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/subst.rs","byte_start":79239,"byte_end":79244,"line_start":11,"line_end":11,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/subst.rs","byte_start":79438,"byte_end":79450,"line_start":17,"line_end":17,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/subst.rs","byte_start":79683,"byte_end":79688,"line_start":24,"line_end":24,"column_start":48,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/subst.rs","byte_start":79748,"byte_end":79753,"line_start":26,"line_end":26,"column_start":48,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/subst.rs","byte_start":80742,"byte_end":80747,"line_start":50,"line_end":50,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/subst.rs","byte_start":80812,"byte_end":80817,"line_start":52,"line_end":52,"column_start":53,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53453,"byte_end":53454,"line_start":78,"line_end":78,"column_start":38,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53980,"byte_end":53981,"line_start":93,"line_end":93,"column_start":42,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":55787,"byte_end":55788,"line_start":143,"line_end":143,"column_start":71,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":57619,"byte_end":57620,"line_start":195,"line_end":195,"column_start":79,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":59422,"byte_end":59423,"line_start":251,"line_end":251,"column_start":75,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60095,"byte_end":60096,"line_start":275,"line_end":275,"column_start":35,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":61965,"byte_end":61968,"line_start":325,"line_end":325,"column_start":75,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":62292,"byte_end":62295,"line_start":336,"line_end":336,"column_start":75,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":62610,"byte_end":62613,"line_start":347,"line_end":347,"column_start":75,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":63503,"byte_end":63509,"line_start":376,"line_end":376,"column_start":75,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":64936,"byte_end":64938,"line_start":420,"line_end":420,"column_start":57,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":65209,"byte_end":65217,"line_start":432,"line_end":432,"column_start":57,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":65500,"byte_end":65513,"line_start":444,"line_end":444,"column_start":57,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":66434,"byte_end":66446,"line_start":473,"line_end":473,"column_start":57,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":66906,"byte_end":66913,"line_start":491,"line_end":491,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":67479,"byte_end":67488,"line_start":514,"line_end":514,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":68852,"byte_end":68864,"line_start":559,"line_end":559,"column_start":57,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":69216,"byte_end":69225,"line_start":571,"line_end":571,"column_start":57,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":70296,"byte_end":70307,"line_start":612,"line_end":612,"column_start":57,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":70607,"byte_end":70620,"line_start":624,"line_end":624,"column_start":63,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":359},{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":71199,"byte_end":71207,"line_start":645,"line_end":645,"column_start":69,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":72356,"byte_end":72373,"line_start":679,"line_end":679,"column_start":69,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":73251,"byte_end":73258,"line_start":705,"line_end":705,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":82217,"byte_end":82218,"line_start":49,"line_end":49,"column_start":18,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":83237,"byte_end":83245,"line_start":84,"line_end":84,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":83391,"byte_end":83403,"line_start":90,"line_end":90,"column_start":50,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":83540,"byte_end":83541,"line_start":96,"line_end":96,"column_start":40,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":83740,"byte_end":83741,"line_start":106,"line_end":106,"column_start":50,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":83916,"byte_end":83917,"line_start":115,"line_end":115,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":84079,"byte_end":84088,"line_start":124,"line_end":124,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":84229,"byte_end":84239,"line_start":130,"line_end":130,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":84381,"byte_end":84388,"line_start":136,"line_end":136,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":84525,"byte_end":84531,"line_start":142,"line_end":142,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":84680,"byte_end":84687,"line_start":148,"line_end":148,"column_start":64,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":85017,"byte_end":85030,"line_start":161,"line_end":161,"column_start":45,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":85155,"byte_end":85167,"line_start":167,"line_end":167,"column_start":45,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":85300,"byte_end":85302,"line_start":173,"line_end":173,"column_start":48,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":85448,"byte_end":85456,"line_start":179,"line_end":179,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":85603,"byte_end":85604,"line_start":185,"line_end":185,"column_start":43,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":85898,"byte_end":85905,"line_start":198,"line_end":198,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":86360,"byte_end":86384,"line_start":215,"line_end":215,"column_start":52,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":86532,"byte_end":86539,"line_start":221,"line_end":221,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":87240,"byte_end":87249,"line_start":245,"line_end":245,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":87720,"byte_end":87723,"line_start":261,"line_end":261,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":87867,"byte_end":87875,"line_start":270,"line_end":270,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":87988,"byte_end":87989,"line_start":276,"line_end":276,"column_start":30,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":88323,"byte_end":88329,"line_start":299,"line_end":299,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":88928,"byte_end":88929,"line_start":328,"line_end":328,"column_start":20,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":92214,"byte_end":92221,"line_start":78,"line_end":78,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":93160,"byte_end":93167,"line_start":114,"line_end":114,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":93332,"byte_end":93335,"line_start":122,"line_end":122,"column_start":42,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":93422,"byte_end":93425,"line_start":126,"line_end":126,"column_start":42,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":93605,"byte_end":93616,"line_start":134,"line_end":134,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":93878,"byte_end":93886,"line_start":147,"line_end":147,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/could_match.rs","byte_start":94195,"byte_end":94196,"line_start":10,"line_end":10,"column_start":31,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/could_match.rs","byte_start":94473,"byte_end":94484,"line_start":20,"line_end":20,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/could_match.rs","byte_start":95665,"byte_end":95678,"line_start":57,"line_end":57,"column_start":53,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":96052,"byte_end":96057,"line_start":5,"line_end":5,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":96243,"byte_end":96253,"line_start":13,"line_end":13,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":96565,"byte_end":96571,"line_start":23,"line_end":23,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":96865,"byte_end":96872,"line_start":32,"line_end":32,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":97168,"byte_end":97176,"line_start":41,"line_end":41,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":97476,"byte_end":97489,"line_start":50,"line_end":50,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":97619,"byte_end":97632,"line_start":56,"line_end":56,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":97762,"byte_end":97770,"line_start":62,"line_end":62,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":98180,"byte_end":98182,"line_start":72,"line_end":72,"column_start":32,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":98332,"byte_end":98338,"line_start":78,"line_end":78,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":98942,"byte_end":98954,"line_start":92,"line_end":92,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":99098,"byte_end":99110,"line_start":98,"line_end":98,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":99394,"byte_end":99402,"line_start":106,"line_end":106,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":99552,"byte_end":99564,"line_start":112,"line_end":112,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":99969,"byte_end":99985,"line_start":123,"line_end":123,"column_start":16,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":100186,"byte_end":100199,"line_start":130,"line_end":130,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":100366,"byte_end":100374,"line_start":136,"line_end":136,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":622},{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":100883,"byte_end":100891,"line_start":154,"line_end":154,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":101151,"byte_end":101168,"line_start":165,"line_end":165,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":101512,"byte_end":101524,"line_start":178,"line_end":178,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":101714,"byte_end":101719,"line_start":186,"line_end":186,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":102195,"byte_end":102204,"line_start":203,"line_end":203,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":651}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":102386,"byte_end":102398,"line_start":209,"line_end":209,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":102582,"byte_end":102593,"line_start":215,"line_end":215,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":102896,"byte_end":102903,"line_start":224,"line_end":224,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":103185,"byte_end":103195,"line_start":233,"line_end":233,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":103489,"byte_end":103499,"line_start":242,"line_end":242,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":104526,"byte_end":104534,"line_start":265,"line_end":265,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":104811,"byte_end":104817,"line_start":274,"line_end":274,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":104979,"byte_end":104983,"line_start":280,"line_end":280,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":106055,"byte_end":106062,"line_start":305,"line_end":305,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":106760,"byte_end":106773,"line_start":328,"line_end":328,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":107046,"byte_end":107070,"line_start":337,"line_end":337,"column_start":32,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":107523,"byte_end":107534,"line_start":354,"line_end":354,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":687}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":107688,"byte_end":107697,"line_start":360,"line_end":360,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":108252,"byte_end":108265,"line_start":383,"line_end":383,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":108556,"byte_end":108565,"line_start":392,"line_end":392,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":697}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":108834,"byte_end":108844,"line_start":401,"line_end":401,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":700}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":109065,"byte_end":109081,"line_start":409,"line_end":409,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":109380,"byte_end":109392,"line_start":421,"line_end":421,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":109531,"byte_end":109543,"line_start":427,"line_end":427,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":1635,"byte_end":1646,"line_start":71,"line_end":71,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":733},{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":2255,"byte_end":2268,"line_start":93,"line_end":93,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":738},{"krate":0,"index":739}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":2769,"byte_end":2782,"line_start":113,"line_end":113,"column_start":42,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":4076,"byte_end":4089,"line_start":147,"line_end":147,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":5096,"byte_end":5106,"line_start":189,"line_end":189,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":5779,"byte_end":5781,"line_start":218,"line_end":218,"column_start":22,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10433,"byte_end":10439,"line_start":343,"line_end":343,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10638,"byte_end":10650,"line_start":354,"line_end":354,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10740,"byte_end":10752,"line_start":360,"line_end":360,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":11495,"byte_end":11503,"line_start":387,"line_end":387,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":12745,"byte_end":12757,"line_start":428,"line_end":428,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":783}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":13233,"byte_end":13249,"line_start":445,"line_end":445,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":785},{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":13846,"byte_end":13859,"line_start":466,"line_end":466,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":796},{"krate":0,"index":797}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":14417,"byte_end":14430,"line_start":490,"line_end":490,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":800},{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":14880,"byte_end":14893,"line_start":509,"line_end":509,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":15937,"byte_end":15946,"line_start":550,"line_end":550,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":17081,"byte_end":17093,"line_start":594,"line_end":594,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":17372,"byte_end":17380,"line_start":606,"line_end":606,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":826},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22895,"byte_end":22906,"line_start":758,"line_end":758,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":23721,"byte_end":23742,"line_start":779,"line_end":779,"column_start":22,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":24432,"byte_end":24442,"line_start":797,"line_end":797,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":26000,"byte_end":26012,"line_start":842,"line_end":842,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":26591,"byte_end":26598,"line_start":859,"line_end":859,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":26652,"byte_end":26659,"line_start":863,"line_end":863,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":856},{"krate":0,"index":859},{"krate":0,"index":863},{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":28051,"byte_end":28058,"line_start":914,"line_end":914,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":29119,"byte_end":29126,"line_start":946,"line_end":946,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":29564,"byte_end":29583,"line_start":963,"line_end":963,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":30409,"byte_end":30422,"line_start":988,"line_end":988,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":895}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31842,"byte_end":31852,"line_start":1029,"line_end":1029,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":33214,"byte_end":33218,"line_start":1063,"line_end":1063,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35546,"byte_end":35558,"line_start":1132,"line_end":1132,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":909},{"krate":0,"index":910}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":1136,"byte_end":1139,"line_start":48,"line_end":48,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":32}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":1163,"byte_end":1167,"line_start":51,"line_end":51,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":125}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":50803,"byte_end":50808,"line_start":11,"line_end":11,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":136}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":1178,"byte_end":1182,"line_start":53,"line_end":53,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":379}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":1193,"byte_end":1199,"line_start":55,"line_end":55,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":487}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":1251,"byte_end":1262,"line_start":58,"line_end":58,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":547}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":1272,"byte_end":1277,"line_start":59,"line_end":59,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":572}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":1287,"byte_end":1290,"line_start":60,"line_end":60,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":710}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":42296,"byte_end":42301,"line_start":65,"line_end":65,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":6599},"to":{"krate":0,"index":51}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":42811,"byte_end":42814,"line_start":84,"line_end":84,"column_start":46,"column_end":49},"kind":{"Impl":{"id":0}},"from":{"krate":5,"index":4754},"to":{"krate":0,"index":51}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":43360,"byte_end":43363,"line_start":104,"line_end":104,"column_start":46,"column_end":49},"kind":{"Impl":{"id":1}},"from":{"krate":5,"index":4415},"to":{"krate":0,"index":51}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":43555,"byte_end":43558,"line_start":110,"line_end":110,"column_start":46,"column_end":49},"kind":{"Impl":{"id":2}},"from":{"krate":5,"index":93},"to":{"krate":0,"index":51}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":44001,"byte_end":44003,"line_start":124,"line_end":124,"column_start":34,"column_end":36},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1537},"to":{"krate":0,"index":51}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":44166,"byte_end":44174,"line_start":130,"line_end":130,"column_start":34,"column_end":42},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1687},"to":{"krate":0,"index":51}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":44382,"byte_end":44389,"line_start":136,"line_end":136,"column_start":73,"column_end":80},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2374},"to":{"krate":0,"index":51}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":46608,"byte_end":46619,"line_start":206,"line_end":206,"column_start":34,"column_end":45},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1189},"to":{"krate":0,"index":51}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":48497,"byte_end":48501,"line_start":258,"line_end":258,"column_start":34,"column_end":38},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":2573},"to":{"krate":0,"index":51}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":49881,"byte_end":49894,"line_start":289,"line_end":289,"column_start":58,"column_end":71},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1839},"to":{"krate":0,"index":51}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/zip.rs","byte_start":50399,"byte_end":50408,"line_start":301,"line_end":301,"column_start":34,"column_end":43},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1887},"to":{"krate":0,"index":51}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":73999,"byte_end":74003,"line_start":8,"line_end":8,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":262},"to":{"krate":0,"index":144}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":76095,"byte_end":76096,"line_start":64,"line_end":64,"column_start":58,"column_end":59},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":149},"to":{"krate":0,"index":144}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":76483,"byte_end":76490,"line_start":80,"line_end":80,"column_start":6,"column_end":13},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":153},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":76796,"byte_end":76803,"line_start":89,"line_end":89,"column_start":28,"column_end":35},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":153},"to":{"krate":0,"index":217}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":76851,"byte_end":76858,"line_start":91,"line_end":91,"column_start":44,"column_end":51},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":153},"to":{"krate":0,"index":224}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":77249,"byte_end":77256,"line_start":101,"line_end":101,"column_start":35,"column_end":42},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":153},"to":{"krate":0,"index":239}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":77293,"byte_end":77300,"line_start":103,"line_end":103,"column_start":33,"column_end":40},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":153},"to":{"krate":0,"index":250}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":77570,"byte_end":77581,"line_start":114,"line_end":114,"column_start":6,"column_end":17},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":78363,"byte_end":78374,"line_start":131,"line_end":131,"column_start":28,"column_end":39},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":164},"to":{"krate":0,"index":217}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":78422,"byte_end":78433,"line_start":133,"line_end":133,"column_start":44,"column_end":55},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":164},"to":{"krate":0,"index":224}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":78826,"byte_end":78837,"line_start":143,"line_end":143,"column_start":35,"column_end":46},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":164},"to":{"krate":0,"index":239}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/shift.rs","byte_start":78874,"byte_end":78885,"line_start":145,"line_end":145,"column_start":33,"column_end":44},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":164},"to":{"krate":0,"index":250}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/subst.rs","byte_start":79239,"byte_end":79244,"line_start":11,"line_end":11,"column_start":26,"column_end":31},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":178},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/subst.rs","byte_start":79438,"byte_end":79450,"line_start":17,"line_end":17,"column_start":22,"column_end":34},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1648},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/subst.rs","byte_start":79683,"byte_end":79688,"line_start":24,"line_end":24,"column_start":48,"column_end":53},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":178},"to":{"krate":0,"index":217}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/subst.rs","byte_start":79748,"byte_end":79753,"line_start":26,"line_end":26,"column_start":48,"column_end":53},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":178},"to":{"krate":0,"index":224}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/subst.rs","byte_start":80742,"byte_end":80747,"line_start":50,"line_end":50,"column_start":55,"column_end":60},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":178},"to":{"krate":0,"index":239}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold/subst.rs","byte_start":80812,"byte_end":80817,"line_start":52,"line_end":52,"column_start":53,"column_end":58},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":178},"to":{"krate":0,"index":250}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53072,"byte_end":53085,"line_start":68,"line_end":68,"column_start":5,"column_end":18},"kind":"SuperTrait","from":{"krate":0,"index":224},"to":{"krate":0,"index":205}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53093,"byte_end":53108,"line_start":68,"line_end":68,"column_start":26,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":246},"to":{"krate":0,"index":205}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53116,"byte_end":53133,"line_start":68,"line_end":68,"column_start":49,"column_end":66},"kind":"SuperTrait","from":{"krate":0,"index":235},"to":{"krate":0,"index":205}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53141,"byte_end":53151,"line_start":68,"line_end":68,"column_start":74,"column_end":84},"kind":"SuperTrait","from":{"krate":0,"index":208},"to":{"krate":0,"index":205}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53453,"byte_end":53454,"line_start":78,"line_end":78,"column_start":38,"column_end":39},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":214},"to":{"krate":0,"index":205}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":53980,"byte_end":53981,"line_start":93,"line_end":93,"column_start":42,"column_end":43},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":219},"to":{"krate":0,"index":208}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":55787,"byte_end":55788,"line_start":143,"line_end":143,"column_start":71,"column_end":72},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":231},"to":{"krate":0,"index":224}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":57619,"byte_end":57620,"line_start":195,"line_end":195,"column_start":79,"column_end":80},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":242},"to":{"krate":0,"index":235}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":59422,"byte_end":59423,"line_start":251,"line_end":251,"column_start":75,"column_end":76},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":253},"to":{"krate":0,"index":246}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60021,"byte_end":60025,"line_start":273,"line_end":273,"column_start":42,"column_end":46},"kind":"SuperTrait","from":{"krate":0,"index":262},"to":{"krate":0,"index":257}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60051,"byte_end":60056,"line_start":273,"line_end":273,"column_start":72,"column_end":77},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":257}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60095,"byte_end":60096,"line_start":275,"line_end":275,"column_start":35,"column_end":36},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":260},"to":{"krate":0,"index":257}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":60853,"byte_end":60858,"line_start":297,"line_end":297,"column_start":55,"column_end":60},"kind":"SuperTrait","from":{"krate":2,"index":6599},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":61965,"byte_end":61968,"line_start":325,"line_end":325,"column_start":75,"column_end":78},"kind":{"Impl":{"id":55}},"from":{"krate":5,"index":4754},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":62292,"byte_end":62295,"line_start":336,"line_end":336,"column_start":75,"column_end":78},"kind":{"Impl":{"id":56}},"from":{"krate":5,"index":93},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":62610,"byte_end":62613,"line_start":347,"line_end":347,"column_start":75,"column_end":78},"kind":{"Impl":{"id":57}},"from":{"krate":5,"index":4415},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":63503,"byte_end":63509,"line_start":376,"line_end":376,"column_start":75,"column_end":81},"kind":{"Impl":{"id":58}},"from":{"krate":2,"index":32315},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":64936,"byte_end":64938,"line_start":420,"line_end":420,"column_start":57,"column_end":59},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1537},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":65209,"byte_end":65217,"line_start":432,"line_end":432,"column_start":57,"column_end":65},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1687},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":65500,"byte_end":65513,"line_start":444,"line_end":444,"column_start":57,"column_end":70},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1800},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":66434,"byte_end":66446,"line_start":473,"line_end":473,"column_start":57,"column_end":69},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1648},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":66906,"byte_end":66913,"line_start":491,"line_end":491,"column_start":60,"column_end":67},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2374},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":67479,"byte_end":67488,"line_start":514,"line_end":514,"column_start":36,"column_end":45},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2495},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":68852,"byte_end":68864,"line_start":559,"line_end":559,"column_start":57,"column_end":69},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2713},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":69216,"byte_end":69225,"line_start":571,"line_end":571,"column_start":57,"column_end":66},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1887},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":70296,"byte_end":70307,"line_start":612,"line_end":612,"column_start":57,"column_end":68},"kind":{"Impl":{"id":78}},"from":{"krate":2,"index":2063},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":70607,"byte_end":70620,"line_start":624,"line_end":624,"column_start":63,"column_end":76},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1839},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":71199,"byte_end":71207,"line_start":645,"line_end":645,"column_start":69,"column_end":77},"kind":{"Impl":{"id":80}},"from":{"krate":16,"index":709},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":72356,"byte_end":72373,"line_start":679,"line_end":679,"column_start":69,"column_end":86},"kind":{"Impl":{"id":81}},"from":{"krate":16,"index":765},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/fold.rs","byte_start":73251,"byte_end":73258,"line_start":705,"line_end":705,"column_start":69,"column_end":76},"kind":{"Impl":{"id":82}},"from":{"krate":16,"index":853},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":82093,"byte_end":82098,"line_start":40,"line_end":40,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":382}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":82217,"byte_end":82218,"line_start":49,"line_end":49,"column_start":18,"column_end":19},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":386},"to":{"krate":0,"index":382}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":82455,"byte_end":82460,"line_start":55,"line_end":55,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":83237,"byte_end":83245,"line_start":84,"line_end":84,"column_start":50,"column_end":58},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1966},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":83391,"byte_end":83403,"line_start":90,"line_end":90,"column_start":50,"column_end":62},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2333},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":83540,"byte_end":83541,"line_start":96,"line_end":96,"column_start":40,"column_end":41},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":398},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":83740,"byte_end":83741,"line_start":106,"line_end":106,"column_start":50,"column_end":51},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":402},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":83916,"byte_end":83917,"line_start":115,"line_end":115,"column_start":46,"column_end":47},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":406},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":84079,"byte_end":84088,"line_start":124,"line_end":124,"column_start":49,"column_end":58},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2292},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":84229,"byte_end":84239,"line_start":130,"line_end":130,"column_start":49,"column_end":59},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2054},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":84381,"byte_end":84388,"line_start":136,"line_end":136,"column_start":49,"column_end":56},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2098},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":84525,"byte_end":84531,"line_start":142,"line_end":142,"column_start":47,"column_end":53},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2251},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":84680,"byte_end":84687,"line_start":148,"line_end":148,"column_start":64,"column_end":71},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2374},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":85017,"byte_end":85030,"line_start":161,"line_end":161,"column_start":45,"column_end":58},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1800},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":85155,"byte_end":85167,"line_start":167,"line_end":167,"column_start":45,"column_end":57},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1922},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":85300,"byte_end":85302,"line_start":173,"line_end":173,"column_start":48,"column_end":50},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1537},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":85448,"byte_end":85456,"line_start":179,"line_end":179,"column_start":48,"column_end":56},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1687},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":85603,"byte_end":85604,"line_start":185,"line_end":185,"column_start":43,"column_end":44},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":439},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":85898,"byte_end":85905,"line_start":198,"line_end":198,"column_start":43,"column_end":50},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2374},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":86360,"byte_end":86384,"line_start":215,"line_end":215,"column_start":52,"column_end":76},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2410},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":86532,"byte_end":86539,"line_start":221,"line_end":221,"column_start":52,"column_end":59},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2374},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":87240,"byte_end":87249,"line_start":245,"line_end":245,"column_start":37,"column_end":46},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2495},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":87720,"byte_end":87723,"line_start":261,"line_end":261,"column_start":31,"column_end":34},"kind":{"Impl":{"id":113}},"from":{"krate":5,"index":4754},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":87867,"byte_end":87875,"line_start":270,"line_end":270,"column_start":29,"column_end":37},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1330},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":87988,"byte_end":87989,"line_start":276,"line_end":276,"column_start":30,"column_end":31},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":465},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":88323,"byte_end":88329,"line_start":299,"line_end":299,"column_start":35,"column_end":41},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":470},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":88705,"byte_end":88713,"line_start":316,"line_end":316,"column_start":19,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":5304},"to":{"krate":0,"index":482}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":88716,"byte_end":88721,"line_start":316,"line_end":316,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":482}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/cast.rs","byte_start":88928,"byte_end":88929,"line_start":328,"line_end":328,"column_start":20,"column_end":21},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":486},"to":{"krate":0,"index":482}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90088,"byte_end":90093,"line_start":27,"line_end":27,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":6599},"to":{"krate":0,"index":500}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90096,"byte_end":90100,"line_start":27,"line_end":27,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2055},"to":{"krate":0,"index":500}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90103,"byte_end":90105,"line_start":27,"line_end":27,"column_start":38,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":1775},"to":{"krate":0,"index":500}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90108,"byte_end":90111,"line_start":27,"line_end":27,"column_start":43,"column_end":46},"kind":"SuperTrait","from":{"krate":2,"index":1796},"to":{"krate":0,"index":500}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":90114,"byte_end":90118,"line_start":27,"line_end":27,"column_start":49,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":6787},"to":{"krate":0,"index":500}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":92214,"byte_end":92221,"line_start":78,"line_end":78,"column_start":21,"column_end":28},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1166},"to":{"krate":0,"index":500}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":93160,"byte_end":93167,"line_start":114,"line_end":114,"column_start":24,"column_end":31},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1166},"to":{"krate":0,"index":508}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":93332,"byte_end":93335,"line_start":122,"line_end":122,"column_start":42,"column_end":45},"kind":{"Impl":{"id":120}},"from":{"krate":5,"index":4754},"to":{"krate":0,"index":508}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":93422,"byte_end":93425,"line_start":126,"line_end":126,"column_start":42,"column_end":45},"kind":{"Impl":{"id":121}},"from":{"krate":5,"index":93},"to":{"krate":0,"index":508}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":93605,"byte_end":93616,"line_start":134,"line_end":134,"column_start":40,"column_end":51},"kind":{"Impl":{"id":122}},"from":{"krate":2,"index":2063},"to":{"krate":0,"index":508}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/family.rs","byte_start":93878,"byte_end":93886,"line_start":147,"line_end":147,"column_start":52,"column_end":60},"kind":{"Impl":{"id":123}},"from":{"krate":16,"index":709},"to":{"krate":0,"index":508}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/could_match.rs","byte_start":94195,"byte_end":94196,"line_start":10,"line_end":10,"column_start":31,"column_end":32},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":557},"to":{"krate":0,"index":553}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/could_match.rs","byte_start":94473,"byte_end":94484,"line_start":20,"line_end":20,"column_start":45,"column_end":56},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":560},"to":{"krate":0,"index":37}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/could_match.rs","byte_start":95665,"byte_end":95678,"line_start":57,"line_end":57,"column_start":53,"column_end":66},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2454},"to":{"krate":0,"index":553}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":96052,"byte_end":96057,"line_start":5,"line_end":5,"column_start":16,"column_end":21},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1491},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":96243,"byte_end":96253,"line_start":13,"line_end":13,"column_start":16,"column_end":26},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1454},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":96565,"byte_end":96571,"line_start":23,"line_end":23,"column_start":16,"column_end":22},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1426},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":96865,"byte_end":96872,"line_start":32,"line_end":32,"column_start":16,"column_end":23},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1354},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":97168,"byte_end":97176,"line_start":41,"line_end":41,"column_start":16,"column_end":24},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1330},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":97476,"byte_end":97489,"line_start":50,"line_end":50,"column_start":18,"column_end":31},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1307},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":97619,"byte_end":97632,"line_start":56,"line_end":56,"column_start":16,"column_end":29},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1307},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":97762,"byte_end":97770,"line_start":62,"line_end":62,"column_start":16,"column_end":24},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1274},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":98180,"byte_end":98182,"line_start":72,"line_end":72,"column_start":32,"column_end":34},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1537},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":98332,"byte_end":98338,"line_start":78,"line_end":78,"column_start":32,"column_end":38},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1571},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":98942,"byte_end":98954,"line_start":92,"line_end":92,"column_start":16,"column_end":28},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1625},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":99098,"byte_end":99110,"line_start":98,"line_end":98,"column_start":32,"column_end":44},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1648},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":99394,"byte_end":99402,"line_start":106,"line_end":106,"column_start":32,"column_end":40},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1687},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":99552,"byte_end":99564,"line_start":112,"line_end":112,"column_start":32,"column_end":44},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1723},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":99969,"byte_end":99985,"line_start":123,"line_end":123,"column_start":16,"column_end":32},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1772},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":100186,"byte_end":100199,"line_start":130,"line_end":130,"column_start":32,"column_end":45},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1800},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":100366,"byte_end":100374,"line_start":136,"line_end":136,"column_start":22,"column_end":30},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1966},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":100883,"byte_end":100891,"line_start":154,"line_end":154,"column_start":32,"column_end":40},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1966},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":101151,"byte_end":101168,"line_start":165,"line_end":165,"column_start":32,"column_end":49},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":629},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":101512,"byte_end":101524,"line_start":178,"line_end":178,"column_start":32,"column_end":44},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1922},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":101714,"byte_end":101719,"line_start":186,"line_end":186,"column_start":30,"column_end":35},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":640},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":102195,"byte_end":102204,"line_start":203,"line_end":203,"column_start":32,"column_end":41},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":2292},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":102386,"byte_end":102398,"line_start":209,"line_end":209,"column_start":32,"column_end":44},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":2333},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":102582,"byte_end":102593,"line_start":215,"line_end":215,"column_start":32,"column_end":43},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":2010},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":102896,"byte_end":102903,"line_start":224,"line_end":224,"column_start":32,"column_end":39},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":2098},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":103185,"byte_end":103195,"line_start":233,"line_end":233,"column_start":32,"column_end":42},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":2054},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":103489,"byte_end":103499,"line_start":242,"line_end":242,"column_start":32,"column_end":42},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":2142},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":104526,"byte_end":104534,"line_start":265,"line_end":265,"column_start":32,"column_end":40},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":2210},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":104811,"byte_end":104817,"line_start":274,"line_end":274,"column_start":32,"column_end":38},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":2251},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":104979,"byte_end":104983,"line_start":280,"line_end":280,"column_start":32,"column_end":36},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":2573},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":106055,"byte_end":106062,"line_start":305,"line_end":305,"column_start":26,"column_end":33},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":2374},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":106760,"byte_end":106773,"line_start":328,"line_end":328,"column_start":32,"column_end":45},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":2454},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":107046,"byte_end":107070,"line_start":337,"line_end":337,"column_start":32,"column_end":56},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":2410},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":107523,"byte_end":107534,"line_start":354,"line_end":354,"column_start":32,"column_end":43},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1189},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":107688,"byte_end":107697,"line_start":360,"line_end":360,"column_start":30,"column_end":39},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":2495},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":108252,"byte_end":108265,"line_start":383,"line_end":383,"column_start":36,"column_end":49},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1839},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":108556,"byte_end":108565,"line_start":392,"line_end":392,"column_start":32,"column_end":41},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1887},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":108834,"byte_end":108844,"line_start":401,"line_end":401,"column_start":32,"column_end":42},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":2667},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":109065,"byte_end":109081,"line_start":409,"line_end":409,"column_start":34,"column_end":50},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":2747},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":109380,"byte_end":109392,"line_start":421,"line_end":421,"column_start":32,"column_end":44},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":2713},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/debug.rs","byte_start":109531,"byte_end":109543,"line_start":427,"line_end":427,"column_start":34,"column_end":46},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":2713},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":1635,"byte_end":1646,"line_start":71,"line_end":71,"column_start":22,"column_end":33},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1189},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":2255,"byte_end":2268,"line_start":93,"line_end":93,"column_start":24,"column_end":37},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":2769,"byte_end":2782,"line_start":113,"line_end":113,"column_start":42,"column_end":55},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1228},"to":{"krate":0,"index":508}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":4076,"byte_end":4089,"line_start":147,"line_end":147,"column_start":6,"column_end":19},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1307},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":5096,"byte_end":5106,"line_start":189,"line_end":189,"column_start":6,"column_end":16},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1454},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":5779,"byte_end":5781,"line_start":218,"line_end":218,"column_start":22,"column_end":24},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1537},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10433,"byte_end":10439,"line_start":343,"line_end":343,"column_start":22,"column_end":28},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10638,"byte_end":10650,"line_start":354,"line_end":354,"column_start":20,"column_end":32},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1625},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":10740,"byte_end":10752,"line_start":360,"line_end":360,"column_start":6,"column_end":18},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1625},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":11495,"byte_end":11503,"line_start":387,"line_end":387,"column_start":22,"column_end":30},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1687},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":12745,"byte_end":12757,"line_start":428,"line_end":428,"column_start":22,"column_end":34},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1723},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":13233,"byte_end":13249,"line_start":445,"line_end":445,"column_start":6,"column_end":22},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1772},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":13846,"byte_end":13859,"line_start":466,"line_end":466,"column_start":22,"column_end":35},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1800},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":14417,"byte_end":14430,"line_start":490,"line_end":490,"column_start":9,"column_end":22},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1839},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":14880,"byte_end":14893,"line_start":509,"line_end":509,"column_start":12,"column_end":25},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1839},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":15937,"byte_end":15946,"line_start":550,"line_end":550,"column_start":22,"column_end":31},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1887},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":17081,"byte_end":17093,"line_start":594,"line_end":594,"column_start":22,"column_end":34},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1922},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":17372,"byte_end":17380,"line_start":606,"line_end":606,"column_start":22,"column_end":30},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1966},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":22895,"byte_end":22906,"line_start":758,"line_end":758,"column_start":22,"column_end":33},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":2010},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":23721,"byte_end":23742,"line_start":779,"line_end":779,"column_start":22,"column_end":43},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":833},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":24432,"byte_end":24442,"line_start":797,"line_end":797,"column_start":22,"column_end":32},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":2142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":26000,"byte_end":26012,"line_start":842,"line_end":842,"column_start":40,"column_end":52},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":2333},"to":{"krate":0,"index":508}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":26591,"byte_end":26598,"line_start":859,"line_end":859,"column_start":42,"column_end":49},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":2374},"to":{"krate":0,"index":508}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":26652,"byte_end":26659,"line_start":863,"line_end":863,"column_start":9,"column_end":16},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":2374},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":28051,"byte_end":28058,"line_start":914,"line_end":914,"column_start":13,"column_end":20},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":2374},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":29119,"byte_end":29126,"line_start":946,"line_end":946,"column_start":40,"column_end":47},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":2374},"to":{"krate":2,"index":5210}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":29564,"byte_end":29583,"line_start":963,"line_end":963,"column_start":36,"column_end":55},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":884},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":30409,"byte_end":30422,"line_start":988,"line_end":988,"column_start":22,"column_end":35},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":2454},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":31842,"byte_end":31852,"line_start":1029,"line_end":1029,"column_start":9,"column_end":19},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2534},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":33214,"byte_end":33218,"line_start":1063,"line_end":1063,"column_start":22,"column_end":26},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":2573},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-ir/src/lib.rs","byte_start":35546,"byte_end":35558,"line_start":1132,"line_end":1132,"column_start":22,"column_end":34},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":2713},"to":{"krate":4294967295,"index":4294967295}}]}