{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5","program":"/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","fst","/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=0466123520a57c00","-C","extra-filename=-0466123520a57c00","--out-dir","/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","-L","dependency=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","--extern","byteorder=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libbyteorder-156fbd7e0147e2e5.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libfst-0466123520a57c00.rmeta"},"prelude":{"crate_id":{"name":"fst","disambiguator":[14028101909532047953,6584788288529106099]},"crate_root":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src","external_crates":[{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3710194649008989715,14559669089861450418]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9392975149979234998,17049149762166397483]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16512841426258775062,11665789721448774207]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10630307797325716480,16523273723520132349]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3264716338318844693,12681592148182797578]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[140397795414171834,1910274434865169512]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5557669672741662647,10322216614238315513]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14339503364484872598,13531520383629478599]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14161909693946419124,17554770295131960960]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9716880057120631437,4575334529379688610]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17190292700912465587,13293574150729131089]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[16973425767318922457,5762286362994384933]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[3049460603833016674,5895625007283919048]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[8971705811930800565,4802059752817986136]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[7414259369911982492,16117941559470048194]}},{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","num":16,"id":{"name":"byteorder","disambiguator":[7786802486158187971,17904586164133949077]}}],"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":0,"byte_end":14001,"line_start":1,"line_end":379,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":19},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":11459,"byte_end":11468,"line_start":315,"line_end":315,"column_start":20,"column_end":29},"alias_span":null,"name":"Automaton","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1272},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":11486,"byte_end":11491,"line_start":316,"line_end":316,"column_start":17,"column_end":22},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":135},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":11493,"byte_end":11499,"line_start":316,"line_end":316,"column_start":24,"column_end":30},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":164},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":11516,"byte_end":11519,"line_start":317,"line_end":317,"column_start":15,"column_end":18},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":202},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":11521,"byte_end":11531,"line_start":317,"line_end":317,"column_start":20,"column_end":30},"alias_span":null,"name":"MapBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":975},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":11548,"byte_end":11551,"line_start":318,"line_end":318,"column_start":15,"column_end":18},"alias_span":null,"name":"Set","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1026},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":11553,"byte_end":11563,"line_start":318,"line_end":318,"column_start":20,"column_end":30},"alias_span":null,"name":"SetBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1183},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":11583,"byte_end":11595,"line_start":319,"line_end":319,"column_start":18,"column_end":30},"alias_span":null,"name":"IntoStreamer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1179},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":11597,"byte_end":11605,"line_start":319,"line_end":319,"column_start":32,"column_end":40},"alias_span":null,"name":"Streamer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":426},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68120,"byte_end":68127,"line_start":35,"line_end":35,"column_start":22,"column_end":29},"alias_span":null,"name":"Builder","value":"","parent":{"krate":0,"index":373}},{"kind":"Use","ref_id":{"krate":0,"index":511},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68150,"byte_end":68155,"line_start":36,"line_end":36,"column_start":22,"column_end":27},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":373}},{"kind":"Use","ref_id":{"krate":0,"index":1311},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68178,"byte_end":68182,"line_start":37,"line_end":37,"column_start":22,"column_end":26},"alias_span":null,"name":"Node","value":"","parent":{"krate":0,"index":373}},{"kind":"Use","ref_id":{"krate":0,"index":645},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68184,"byte_end":68195,"line_start":37,"line_end":37,"column_start":28,"column_end":39},"alias_span":null,"name":"Transitions","value":"","parent":{"krate":0,"index":373}},{"kind":"Use","ref_id":{"krate":0,"index":1376},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68308,"byte_end":68320,"line_start":41,"line_end":41,"column_start":5,"column_end":17},"alias_span":null,"name":"IndexedValue","value":"","parent":{"krate":0,"index":373}},{"kind":"Use","ref_id":{"krate":0,"index":675},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68322,"byte_end":68331,"line_start":41,"line_end":41,"column_start":19,"column_end":28},"alias_span":null,"name":"OpBuilder","value":"","parent":{"krate":0,"index":373}},{"kind":"Use","ref_id":{"krate":0,"index":721},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68337,"byte_end":68349,"line_start":42,"line_end":42,"column_start":5,"column_end":17},"alias_span":null,"name":"Intersection","value":"","parent":{"krate":0,"index":373}},{"kind":"Use","ref_id":{"krate":0,"index":711},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68351,"byte_end":68356,"line_start":42,"line_end":42,"column_start":19,"column_end":24},"alias_span":null,"name":"Union","value":"","parent":{"krate":0,"index":373}},{"kind":"Use","ref_id":{"krate":0,"index":731},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68358,"byte_end":68368,"line_start":42,"line_end":42,"column_start":26,"column_end":36},"alias_span":null,"name":"Difference","value":"","parent":{"krate":0,"index":373}},{"kind":"Use","ref_id":{"krate":0,"index":742},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68370,"byte_end":68389,"line_start":42,"line_end":42,"column_start":38,"column_end":57},"alias_span":null,"name":"SymmetricDifference","value":"","parent":{"krate":0,"index":373}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12023,"byte_end":12024,"line_start":336,"line_end":336,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"Automaton, AlwaysMatch","parent":{"krate":0,"index":1194}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12865,"byte_end":12866,"line_start":355,"line_end":355,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"Map, MapBuilder","parent":{"krate":0,"index":1196}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":13997,"byte_end":13998,"line_start":378,"line_end":378,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"Set, SetBuilder","parent":{"krate":0,"index":1198}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":0,"byte_end":14001,"line_start":1,"line_end":379,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":130},{"krate":0,"index":149},{"krate":0,"index":373},{"krate":0,"index":961},{"krate":0,"index":1178},{"krate":0,"index":1194},{"krate":0,"index":1196},{"krate":0,"index":1198}],"decl_id":null,"docs":"Crate `fst` is a library for efficiently storing and searching ordered sets or\nmaps where the keys are byte strings. A key design goal of this crate is to\nsupport storing and searching *very large* sets or maps (i.e., billions). This\nmeans that much effort has gone in to making sure that all operations are\nmemory efficient.","sig":null,"attributes":[{"value":"*\nCrate `fst` is a library for efficiently storing and searching ordered sets or\nmaps where the keys are byte strings. A key design goal of this crate is to\nsupport storing and searching *very large* sets or maps (i.e., billions). This\nmeans that much effort has gone in to making sure that all operations are\nmemory efficient.\n\nSets and maps are represented by a finite state machine, which acts as a form\nof compression on common prefixes and suffixes in the keys. Additionally,\nfinite state machines can be efficiently queried with automata (like regular\nexpressions or Levenshtein distance for fuzzy queries) or lexicographic ranges.\n\nTo read more about the mechanics of finite state transducers, including a\nbibliography for algorithms used in this crate, see the docs for the\n[`raw::Fst`](raw/struct.Fst.html) type.\n\n# Installation\n\nSimply add a corresponding entry to your `Cargo.toml` dependency list:\n\n```ignore\n[dependencies]\nfst = \"0.2\"\n```\n\nAnd add this to your crate root:\n\n```ignore\nextern crate fst;\n```\n\nThe examples in this documentation will show the rest.\n\n# Other crates\n\nThe\n[`fst-regex`](https://docs.rs/fst-regex)\nand\n[`fst-levenshtein`](https://docs.rs/fst-levenshtein)\ncrates provide regular expression matching and fuzzy searching on FSTs,\nrespectively.\n\n# Overview of types and modules\n\nThis crate provides the high level abstractions---namely sets and maps---in the\ntop-level module.\n\nThe `set` and `map` sub-modules contain types specific to sets and maps, such\nas range queries and streams.\n\nThe `raw` module permits direct interaction with finite state transducers.\nNamely, the states and transitions of a transducer can be directly accessed\nwith the `raw` module.\n\n# Example: fuzzy query\n\nThis example shows how to create a set of strings in memory, and then execute\na fuzzy query. Namely, the query looks for all keys within an edit distance\nof `1` of `foo`. (Edit distance is the number of character insertions,\ndeletions or substitutions required to get from one string to another. In this\ncase, a character is a Unicode codepoint.)\n\n```rust\nextern crate fst;\nextern crate fst_levenshtein; // the fst-levenshtein crate\n\nuse std::error::Error;\n\nuse fst::{IntoStreamer, Streamer, Set};\nuse fst_levenshtein::Levenshtein;\n\n# fn main() { example().unwrap(); }\nfn example() -> Result<(), Box<Error>> {\n    // A convenient way to create sets in memory.\n    let keys = vec![\"fa\", \"fo\", \"fob\", \"focus\", \"foo\", \"food\", \"foul\"];\n    let set = Set::from_iter(keys)?;\n\n    // Build our fuzzy query.\n    let lev = Levenshtein::new(\"foo\", 1)?;\n\n    // Apply our fuzzy query to the set we built.\n    let mut stream = set.search(lev).into_stream();\n\n    let keys = stream.into_strs()?;\n    assert_eq!(keys, vec![\"fo\", \"fob\", \"foo\", \"food\"]);\n    Ok(())\n}\n```\n\n# Example: stream a map to a file\n\nThis shows how to create a `MapBuilder` that will stream construction of the\nmap to a file. Notably, this will never store the entire transducer in memory.\nInstead, only constant memory is required.\n\n```rust,no_run\n# fn example() -> Result<(), fst::Error> {\nuse std::fs::File;\nuse std::io;\n\nuse fst::{IntoStreamer, Streamer, Map, MapBuilder};\n\n// This is where we'll write our map to.\nlet mut wtr = io::BufWriter::new(File::create(\"map.fst\")?);\n\n// Create a builder that can be used to insert new key-value pairs.\nlet mut build = MapBuilder::new(wtr)?;\nbuild.insert(\"bruce\", 1).unwrap();\nbuild.insert(\"clarence\", 2).unwrap();\nbuild.insert(\"stevie\", 3).unwrap();\n\n// Finish construction of the map and flush its contents to disk.\nbuild.finish()?;\n\n// At this point, the map has been constructed. Now we'd like to search it.\n// This creates a memory map, which enables searching the map without loading\n// all of it into memory.\nlet map = unsafe { Map::from_path(\"map.fst\") }?;\n\n// Query for keys that are greater than or equal to clarence.\nlet mut stream = map.range().ge(\"clarence\").into_stream();\n\nlet kvs = stream.into_str_vec()?;\nassert_eq!(kvs, vec![\n    (\"clarence\".to_owned(), 2),\n    (\"stevie\".to_owned(), 3),\n]);\n# Ok(())\n# }\n# example().unwrap();\n```\n\n# Example: case insensitive search\n\nWe can perform case insensitive search on a set using a regular expression.\nNote that while sets can store arbitrary byte strings, a regular expression\nwill only match valid UTF-8 encoded byte strings.\n\n```rust\nextern crate fst;\nextern crate fst_regex; // the fst-regex crate\n\nuse std::error::Error;\n\nuse fst::{IntoStreamer, Streamer, Set};\nuse fst_regex::Regex;\n\n# fn main() { example().unwrap(); }\nfn example() -> Result<(), Box<Error>> {\n    let set = Set::from_iter(&[\"FoO\", \"Foo\", \"fOO\", \"foo\"])?;\n\n    let re = Regex::new(\"(?i)foo\")?;\n    let mut stream = set.search(&re).into_stream();\n\n    let keys = stream.into_strs()?;\n    assert_eq!(keys, vec![\"FoO\", \"Foo\", \"fOO\", \"foo\"]);\n    Ok(())\n}\n```\n\n# Example: searching multiple sets efficiently\n\nSince queries can search a transducer without reading the entire data structure\ninto memory, it is possible to search *many* transducers very quickly.\n\nThis crate provides efficient set/map operations that allow one to combine\nmultiple streams of search results. Each operation only uses memory\nproportional to the number of streams.\n\nThe example below shows how to find all keys that have at least one capital\nletter that doesn't appear at the beginning of the key. The example below uses\nsets, but the same operations are available on maps too.\n\n```rust\nextern crate fst;\nextern crate fst_regex; // the fst-regex crate\n\nuse std::error::Error;\n\nuse fst::{Streamer, Set};\nuse fst::set;\nuse fst_regex::Regex;\n\n# fn main() { example().unwrap(); }\nfn example() -> Result<(), Box<Error>> {\n    let set1 = Set::from_iter(&[\"AC/DC\", \"Aerosmith\"])?;\n    let set2 = Set::from_iter(&[\"Bob Seger\", \"Bruce Springsteen\"])?;\n    let set3 = Set::from_iter(&[\"George Thorogood\", \"Golden Earring\"])?;\n    let set4 = Set::from_iter(&[\"Kansas\"])?;\n    let set5 = Set::from_iter(&[\"Metallica\"])?;\n\n    // Create the regular expression. We can reuse it to search all of the sets.\n    let re = Regex::new(r\".+\\p{Lu}.*\")?;\n\n    // Build a set operation. All we need to do is add a search result stream for\n    // each set and ask for the union. (Other operations, like intersection and\n    // difference are also available.)\n    let mut stream =\n        set::OpBuilder::new()\n        .add(set1.search(&re))\n        .add(set2.search(&re))\n        .add(set3.search(&re))\n        .add(set4.search(&re))\n        .add(set5.search(&re))\n        .union();\n\n    // Now collect all of the keys. Alternatively, you could build another set here\n    // using `SetBuilder::extend_stream`.\n    let mut keys = vec![];\n    while let Some(key) = stream.next() {\n        keys.push(key.to_vec());\n    }\n    assert_eq!(keys, vec![\n        \"AC/DC\".as_bytes(),\n        \"Bob Seger\".as_bytes(),\n        \"Bruce Springsteen\".as_bytes(),\n        \"George Thorogood\".as_bytes(),\n        \"Golden Earring\".as_bytes(),\n    ]);\n    Ok(())\n}\n```\n\n# Memory usage\n\nAn important advantage of using finite state transducers to represent sets and\nmaps is that they can compress very well depending on the distribution of keys.\nThe smaller your set/map is, the more likely it is that it will fit into\nmemory. If it's in memory, then searching it is faster. Therefore, it is\nimportant to do what we can to limit what actually needs to be in memory.\n\nThis is where automata shine, because they can be queried in their compressed\nstate without loading the entire data structure into memory. This means that\none can store a set/map created by this crate on disk and search it without\nactually reading the entire set/map into memory. This use case is served well\nby *memory maps*, which lets one assign the entire contents of a file to a\ncontiguous region of virtual memory.\n\nIndeed, this crate encourages this mode of operation. Both sets and maps have\nmethods for memory mapping a finite state transducer from disk.\n\nThis is particularly important for long running processes that use this crate,\nsince it enables the operating system to determine which regions of your\nfinite state transducers are actually in memory.\n\nOf course, there are downsides to this approach. Namely, navigating a\ntransducer during a key lookup or a search will likely follow a pattern\napproximating random access. Supporting random access when reading from disk\ncan be very slow because of how often `seek` must be called (or, in the case\nof memory maps, page faults). This is somewhat mitigated by the prevalence of\nsolid state drives where seek time is eliminated. Nevertheless, solid state\ndrives are not ubiquitous and it is possible that the OS will not be smart\nenough to keep your memory mapped transducers in the page cache. In that case,\nit is advisable to load the entire transducer into your process's memory (e.g.,\n`Set::from_bytes`).\n\n# Streams\n\nSearching a set or a map needs to provide some way to iterate over the search\nresults. Idiomatic Rust calls for something satisfying the `Iterator` trait\nto be used here. Unfortunately, this is not possible to do efficiently because\nthe `Iterator` trait does not permit values emitted by the iterator to borrow\nfrom the iterator. Borrowing from the iterator is required in our case because\nkeys and values are constructed *during iteration*.\n\nNamely, if we were to use iterators, then every key would need its own\nallocation, which could be quite costly.\n\nInstead, this crate provides a `Streamer`, which can be thought of as a\nstreaming iterator. Namely, a stream in this crate maintains a single key\nbuffer and lends it out on each iteration.\n\nFor more details, including important limitations, see the `Streamer` trait.\n\n# Quirks\n\nThere's no doubt about it, finite state transducers are a specialty data\nstructure. They have a host of restrictions that don't apply to other similar\ndata structures found in the standard library, such as `BTreeSet` and\n`BTreeMap`. Here are some of them:\n\n1. Sets can only contain keys that are byte strings.\n2. Maps can also only contain keys that are byte strings, and its values are\n   limited to unsigned 64 bit integers. (The restriction on values may be\n   relaxed some day.)\n3. Creating a set or a map requires inserting keys in lexicographic order.\n   Often, keys are not already sorted, which can make constructing large\n   sets or maps tricky. One way to do it is to sort pieces of the data and\n   build a set/map for each piece. This can be parallelized trivially. Once\n   done, they can be merged together into one big set/map if desired.\n   A somewhat simplistic example of this procedure can be seen in\n   `fst-bin/src/merge.rs` from the root of this crate's repository.\n\n# Warning: regexes and Levenshtein automatons use a lot of memory\n\nThe construction of automatons for both regular expressions and Levenshtein\nautomatons should be consider \"proof of concept\" quality. Namely, they do just\nenough to be *correct*. But they haven't had any effort put into them to be\nmemory conscious. These are important parts of this library, so they will be\nimproved.\n\nNote that whether you're using regexes or Levenshtein automatons, an error\nwill be returned if the automaton gets too big (tens of MB in heap usage).\n*/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":0,"byte_end":11193,"line_start":1,"line_end":304,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":11195,"byte_end":11217,"line_start":306,"line_end":306,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":19},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15241,"byte_end":15250,"line_start":24,"line_end":24,"column_start":11,"column_end":20},"name":"Automaton","qualname":"::inner_automaton::Automaton","value":"Automaton","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":29},{"krate":0,"index":31}],"decl_id":null,"docs":" Automaton describes types that behave as a finite automaton.","sig":null,"attributes":[{"value":"/ Automaton describes types that behave as a finite automaton.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":14042,"byte_end":14106,"line_start":3,"line_end":3,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":14107,"byte_end":14110,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ All implementors of this trait are represented by *byte based* automata.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":14111,"byte_end":14187,"line_start":5,"line_end":5,"column_start":1,"column_end":77}},{"value":"/ Stated differently, all transitions in the automata correspond to a single","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":14188,"byte_end":14266,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ byte in the input.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":14267,"byte_end":14289,"line_start":7,"line_end":7,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":14290,"byte_end":14293,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This implementation choice is important for a couple reasons:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":14294,"byte_end":14359,"line_start":9,"line_end":9,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":14360,"byte_end":14363,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ 1. The set of possible transitions in each node is small, which may make","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":14364,"byte_end":14440,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"/    efficient memory usage easier.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":14441,"byte_end":14478,"line_start":12,"line_end":12,"column_start":1,"column_end":38}},{"value":"/ 2. The finite state transducers in this crate are all byte based, so any","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":14479,"byte_end":14555,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/    automata used on them must also be byte based.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":14556,"byte_end":14609,"line_start":14,"line_end":14,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":14610,"byte_end":14613,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ In practice, this does present somewhat of a problem, for example, if","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":14614,"byte_end":14687,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/ you're storing UTF-8 encoded strings in a finite state transducer. Consider","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":14688,"byte_end":14767,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ using a `Levenshtein` automaton, which accepts a query string and an edit","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":14768,"byte_end":14845,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ distance. The edit distance should apply to some notion of *character*,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":14846,"byte_end":14921,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ which could be represented by at least 1-4 bytes in a UTF-8 encoding (for","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":14922,"byte_end":14999,"line_start":20,"line_end":20,"column_start":1,"column_end":78}},{"value":"/ some definition of \"character\"). Therefore, the automaton must have UTF-8","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15000,"byte_end":15077,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ decoding built into it. This can be tricky to implement, so you may find","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15078,"byte_end":15154,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ the [`utf8-ranges`](https://crates.io/crates/utf8-ranges) crate useful.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15155,"byte_end":15230,"line_start":23,"line_end":23,"column_start":1,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":20},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15315,"byte_end":15320,"line_start":26,"line_end":26,"column_start":10,"column_end":15},"name":"State","qualname":"::inner_automaton::Automaton::State","value":"type State;","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" The type of the state used in the automaton.\n","sig":null,"attributes":[{"value":"/ The type of the state used in the automaton.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15257,"byte_end":15305,"line_start":25,"line_end":25,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15484,"byte_end":15489,"line_start":32,"line_end":32,"column_start":8,"column_end":13},"name":"start","qualname":"::inner_automaton::Automaton::start","value":"pub fn start(&Self) -> Self::State","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Returns a single start state for this automaton.","sig":null,"attributes":[{"value":"/ Returns a single start state for this automaton.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15327,"byte_end":15379,"line_start":28,"line_end":28,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15384,"byte_end":15387,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ This method should always return the same value for each","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15392,"byte_end":15452,"line_start":30,"line_end":30,"column_start":5,"column_end":65}},{"value":"/ implementation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15457,"byte_end":15476,"line_start":31,"line_end":31,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15583,"byte_end":15591,"line_start":35,"line_end":35,"column_start":8,"column_end":16},"name":"is_match","qualname":"::inner_automaton::Automaton::is_match","value":"pub fn is_match(&Self, &Self::State) -> bool","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Returns true if and only if `state` is a match state.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if `state` is a match state.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15518,"byte_end":15575,"line_start":34,"line_end":34,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":16134,"byte_end":16143,"line_start":46,"line_end":46,"column_start":8,"column_end":17},"name":"can_match","qualname":"::inner_automaton::Automaton::can_match","value":"pub fn can_match(&Self, &Self::State) -> bool","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Returns true if and only if `state` can lead to a match in zero or more\n steps.","sig":null,"attributes":[{"value":"/ Returns true if and only if `state` can lead to a match in zero or more","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15634,"byte_end":15709,"line_start":37,"line_end":37,"column_start":5,"column_end":80}},{"value":"/ steps.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15714,"byte_end":15724,"line_start":38,"line_end":38,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15729,"byte_end":15732,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ If this returns `false`, then no sequence of inputs from this state","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15737,"byte_end":15808,"line_start":40,"line_end":40,"column_start":5,"column_end":76}},{"value":"/ should ever produce a match. If this does not follow, then those match","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15813,"byte_end":15887,"line_start":41,"line_end":41,"column_start":5,"column_end":79}},{"value":"/ states may never be reached. In other words, behavior may be incorrect.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15892,"byte_end":15967,"line_start":42,"line_end":42,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15972,"byte_end":15975,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ If this returns `true` even when no match is possible, then behavior","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":15980,"byte_end":16052,"line_start":44,"line_end":44,"column_start":5,"column_end":77}},{"value":"/ will be correct, but callers may be forced to do additional work.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":16057,"byte_end":16126,"line_start":45,"line_end":45,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":16744,"byte_end":16761,"line_start":60,"line_end":60,"column_start":8,"column_end":25},"name":"will_always_match","qualname":"::inner_automaton::Automaton::will_always_match","value":"pub fn will_always_match(&Self, &Self::State) -> bool","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Returns true if and only if `state` matches and must match no matter\n what steps are taken.","sig":null,"attributes":[{"value":"/ Returns true if and only if `state` matches and must match no matter","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":16207,"byte_end":16279,"line_start":50,"line_end":50,"column_start":5,"column_end":77}},{"value":"/ what steps are taken.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":16284,"byte_end":16309,"line_start":51,"line_end":51,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":16314,"byte_end":16317,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ If this returns `true`, then every sequence of inputs from this state","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":16322,"byte_end":16395,"line_start":53,"line_end":53,"column_start":5,"column_end":78}},{"value":"/ produces a match. If this does not follow, then those match states may","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":16400,"byte_end":16474,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ never be reached. In other words, behavior may be incorrect.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":16479,"byte_end":16543,"line_start":55,"line_end":55,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":16548,"byte_end":16551,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ If this returns `false` even when every sequence of inputs will lead to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":16556,"byte_end":16631,"line_start":57,"line_end":57,"column_start":5,"column_end":80}},{"value":"/ a match, then behavior will be correct, but callers may be forced to do","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":16636,"byte_end":16711,"line_start":58,"line_end":58,"column_start":5,"column_end":80}},{"value":"/ additional work.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":16716,"byte_end":16736,"line_start":59,"line_end":59,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":16887,"byte_end":16893,"line_start":65,"line_end":65,"column_start":8,"column_end":14},"name":"accept","qualname":"::inner_automaton::Automaton::accept","value":"pub fn accept(&Self, &Self::State, u8) -> Self::State","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Return the next state given `state` and an input.\n","sig":null,"attributes":[{"value":"/ Return the next state given `state` and an input.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":16826,"byte_end":16879,"line_start":64,"line_end":64,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":17068,"byte_end":17079,"line_start":69,"line_end":69,"column_start":8,"column_end":19},"name":"starts_with","qualname":"::inner_automaton::Automaton::starts_with","value":"pub fn starts_with(Self) -> StartsWith<Self> where Self: Sized","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Returns an automaton that matches the strings that start with something\n this automaton matches.\n","sig":null,"attributes":[{"value":"/ Returns an automaton that matches the strings that start with something","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":16953,"byte_end":17028,"line_start":67,"line_end":67,"column_start":5,"column_end":80}},{"value":"/ this automaton matches.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":17033,"byte_end":17060,"line_start":68,"line_end":68,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":17274,"byte_end":17279,"line_start":75,"line_end":75,"column_start":8,"column_end":13},"name":"union","qualname":"::inner_automaton::Automaton::union","value":"pub fn union<Rhs: Automaton>(Self, Rhs) -> Union<Self, Rhs> where Self: Sized","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Returns an automaton that matches the strings matched by either this or\n the other automaton.\n","sig":null,"attributes":[{"value":"/ Returns an automaton that matches the strings matched by either this or","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":17162,"byte_end":17237,"line_start":73,"line_end":73,"column_start":5,"column_end":80}},{"value":"/ the other automaton.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":17242,"byte_end":17266,"line_start":74,"line_end":74,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":17522,"byte_end":17534,"line_start":84,"line_end":84,"column_start":8,"column_end":20},"name":"intersection","qualname":"::inner_automaton::Automaton::intersection","value":"pub fn intersection<Rhs: Automaton>(Self, Rhs) -> Intersection<Self, Rhs>\nwhere Self: Sized","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Returns an automaton that matches the strings matched by both this and\n the other automaton.\n","sig":null,"attributes":[{"value":"/ Returns an automaton that matches the strings matched by both this and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":17411,"byte_end":17485,"line_start":82,"line_end":82,"column_start":5,"column_end":79}},{"value":"/ the other automaton.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":17490,"byte_end":17514,"line_start":83,"line_end":83,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":17776,"byte_end":17786,"line_start":93,"line_end":93,"column_start":8,"column_end":18},"name":"complement","qualname":"::inner_automaton::Automaton::complement","value":"pub fn complement(Self) -> Complement<Self> where Self: Sized","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Returns an automaton that matches the strings not matched by this\n automaton.\n","sig":null,"attributes":[{"value":"/ Returns an automaton that matches the strings not matched by this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":17680,"byte_end":17749,"line_start":91,"line_end":91,"column_start":5,"column_end":74}},{"value":"/ automaton.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":17754,"byte_end":17768,"line_start":92,"line_end":92,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1200},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":19367,"byte_end":19370,"line_start":152,"line_end":152,"column_start":12,"column_end":15},"name":"Str","qualname":"::inner_automaton::Str","value":"Str {  }","parent":null,"children":[{"krate":0,"index":1202}],"decl_id":null,"docs":" An automaton that matches if the input equals to a specific string.","sig":null,"attributes":[{"value":"/ An automaton that matches if the input equals to a specific string.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18421,"byte_end":18492,"line_start":122,"line_end":122,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18493,"byte_end":18496,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ It can be used in combination with [`StartsWith`] to search strings","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18497,"byte_end":18568,"line_start":124,"line_end":124,"column_start":1,"column_end":72}},{"value":"/ starting with a given prefix.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18569,"byte_end":18602,"line_start":125,"line_end":125,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18603,"byte_end":18606,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18607,"byte_end":18618,"line_start":127,"line_end":127,"column_start":1,"column_end":12}},{"value":"/ extern crate fst;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18619,"byte_end":18640,"line_start":128,"line_end":128,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18641,"byte_end":18644,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18645,"byte_end":18671,"line_start":130,"line_end":130,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18672,"byte_end":18675,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ use fst::{Automaton, IntoStreamer, Streamer, Set};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18676,"byte_end":18730,"line_start":132,"line_end":132,"column_start":1,"column_end":55}},{"value":"/ use fst::automaton::Str;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18731,"byte_end":18759,"line_start":133,"line_end":133,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18760,"byte_end":18763,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18764,"byte_end":18803,"line_start":135,"line_end":135,"column_start":1,"column_end":40}},{"value":"/ fn example() -> Result<(), Box<Error>> {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18804,"byte_end":18848,"line_start":136,"line_end":136,"column_start":1,"column_end":45}},{"value":"/     let paths = vec![\"/home/projects/bar\", \"/home/projects/foo\", \"/tmp/foo\"];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18849,"byte_end":18930,"line_start":137,"line_end":137,"column_start":1,"column_end":82}},{"value":"/     let set = Set::from_iter(paths)?;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18931,"byte_end":18972,"line_start":138,"line_end":138,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18973,"byte_end":18976,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/     // Build our prefix query.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":18977,"byte_end":19011,"line_start":140,"line_end":140,"column_start":1,"column_end":35}},{"value":"/     let prefix = Str::new(\"/home\").starts_with();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":19012,"byte_end":19065,"line_start":141,"line_end":141,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":19066,"byte_end":19069,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/     // Apply our query to the set we built.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":19070,"byte_end":19117,"line_start":143,"line_end":143,"column_start":1,"column_end":48}},{"value":"/     let mut stream = set.search(prefix).into_stream();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":19118,"byte_end":19176,"line_start":144,"line_end":144,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":19177,"byte_end":19180,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/     let matches = stream.into_strs()?;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":19181,"byte_end":19223,"line_start":146,"line_end":146,"column_start":1,"column_end":43}},{"value":"/     assert_eq!(matches, vec![\"/home/projects/bar\", \"/home/projects/foo\"]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":19224,"byte_end":19302,"line_start":147,"line_end":147,"column_start":1,"column_end":79}},{"value":"/     Ok(())","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":19303,"byte_end":19317,"line_start":148,"line_end":148,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":19318,"byte_end":19323,"line_start":149,"line_end":149,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":19324,"byte_end":19331,"line_start":150,"line_end":150,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":19504,"byte_end":19507,"line_start":159,"line_end":159,"column_start":12,"column_end":15},"name":"new","qualname":"<Str>::new","value":"pub fn new(&'a str) -> Str","parent":null,"children":[],"decl_id":null,"docs":" Constructs automaton that matches an exact string.\n","sig":null,"attributes":[{"value":"/ Constructs automaton that matches an exact string.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":19424,"byte_end":19478,"line_start":157,"line_end":157,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":19483,"byte_end":19492,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1209},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":21297,"byte_end":21308,"line_start":224,"line_end":224,"column_start":12,"column_end":23},"name":"Subsequence","qualname":"::inner_automaton::Subsequence","value":"Subsequence {  }","parent":null,"children":[{"krate":0,"index":1211}],"decl_id":null,"docs":" An automaton that matches if the input contains a specific subsequence.","sig":null,"attributes":[{"value":"/ An automaton that matches if the input contains a specific subsequence.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20430,"byte_end":20505,"line_start":195,"line_end":195,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20506,"byte_end":20509,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ It can be used to build a simple fuzzy-finder.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20510,"byte_end":20560,"line_start":197,"line_end":197,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20561,"byte_end":20564,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20565,"byte_end":20576,"line_start":199,"line_end":199,"column_start":1,"column_end":12}},{"value":"/ extern crate fst;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20577,"byte_end":20598,"line_start":200,"line_end":200,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20599,"byte_end":20602,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20603,"byte_end":20629,"line_start":202,"line_end":202,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20630,"byte_end":20633,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ use fst::{IntoStreamer, Streamer, Set};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20634,"byte_end":20677,"line_start":204,"line_end":204,"column_start":1,"column_end":44}},{"value":"/ use fst::automaton::Subsequence;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20678,"byte_end":20714,"line_start":205,"line_end":205,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20715,"byte_end":20718,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20719,"byte_end":20758,"line_start":207,"line_end":207,"column_start":1,"column_end":40}},{"value":"/ fn example() -> Result<(), Box<Error>> {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20759,"byte_end":20803,"line_start":208,"line_end":208,"column_start":1,"column_end":45}},{"value":"/     let paths = vec![\"/home/projects/bar\", \"/home/projects/foo\", \"/tmp/foo\"];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20804,"byte_end":20885,"line_start":209,"line_end":209,"column_start":1,"column_end":82}},{"value":"/     let set = Set::from_iter(paths)?;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20886,"byte_end":20927,"line_start":210,"line_end":210,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20928,"byte_end":20931,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/     // Build our fuzzy query.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20932,"byte_end":20965,"line_start":212,"line_end":212,"column_start":1,"column_end":34}},{"value":"/     let subseq = Subsequence::new(\"hpf\");","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":20966,"byte_end":21011,"line_start":213,"line_end":213,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":21012,"byte_end":21015,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/     // Apply our fuzzy query to the set we built.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":21016,"byte_end":21069,"line_start":215,"line_end":215,"column_start":1,"column_end":54}},{"value":"/     let mut stream = set.search(subseq).into_stream();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":21070,"byte_end":21128,"line_start":216,"line_end":216,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":21129,"byte_end":21132,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/     let matches = stream.into_strs()?;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":21133,"byte_end":21175,"line_start":218,"line_end":218,"column_start":1,"column_end":43}},{"value":"/     assert_eq!(matches, vec![\"/home/projects/foo\"]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":21176,"byte_end":21232,"line_start":219,"line_end":219,"column_start":1,"column_end":57}},{"value":"/     Ok(())","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":21233,"byte_end":21247,"line_start":220,"line_end":220,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":21248,"byte_end":21253,"line_start":221,"line_end":221,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":21254,"byte_end":21261,"line_start":222,"line_end":222,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":21485,"byte_end":21488,"line_start":232,"line_end":232,"column_start":12,"column_end":15},"name":"new","qualname":"<Subsequence>::new","value":"pub fn new(&'a str) -> Subsequence","parent":null,"children":[],"decl_id":null,"docs":" Constructs automaton that matches input containing the\n specified subsequence.\n","sig":null,"attributes":[{"value":"/ Constructs automaton that matches input containing the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":21370,"byte_end":21428,"line_start":229,"line_end":229,"column_start":5,"column_end":63}},{"value":"/ specified subsequence.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":21433,"byte_end":21459,"line_start":230,"line_end":230,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":21464,"byte_end":21473,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1218},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":22364,"byte_end":22375,"line_start":268,"line_end":268,"column_start":12,"column_end":23},"name":"AlwaysMatch","qualname":"::inner_automaton::AlwaysMatch","value":"","parent":null,"children":[],"decl_id":null,"docs":" An automaton that always matches.","sig":null,"attributes":[{"value":"/ An automaton that always matches.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":22189,"byte_end":22226,"line_start":263,"line_end":263,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":22227,"byte_end":22230,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ This is useful in a generic context as a way to express that no automaton","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":22231,"byte_end":22308,"line_start":265,"line_end":265,"column_start":1,"column_end":78}},{"value":"/ should be used.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":22309,"byte_end":22328,"line_start":266,"line_end":266,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":1224},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":22863,"byte_end":22873,"line_start":283,"line_end":283,"column_start":12,"column_end":22},"name":"StartsWith","qualname":"::inner_automaton::StartsWith","value":"","parent":null,"children":[],"decl_id":null,"docs":" An automaton that matches a string that begins with something that the\n wrapped automaton matches.\n","sig":null,"attributes":[{"value":"/ An automaton that matches a string that begins with something that the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":22722,"byte_end":22796,"line_start":280,"line_end":280,"column_start":1,"column_end":75}},{"value":"/ wrapped automaton matches.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":22797,"byte_end":22827,"line_start":281,"line_end":281,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":69},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":22940,"byte_end":22955,"line_start":286,"line_end":286,"column_start":12,"column_end":27},"name":"StartsWithState","qualname":"::inner_automaton::StartsWithState","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `Automaton` state for `StartsWith<A>`.\n","sig":null,"attributes":[{"value":"/ The `Automaton` state for `StartsWith<A>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":22882,"byte_end":22928,"line_start":285,"line_end":285,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1234},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":24577,"byte_end":24582,"line_start":351,"line_end":351,"column_start":12,"column_end":17},"name":"Union","qualname":"::inner_automaton::Union","value":"","parent":null,"children":[],"decl_id":null,"docs":" An automaton that matches when one of its component automata match.\n","sig":null,"attributes":[{"value":"/ An automaton that matches when one of its component automata match.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":24470,"byte_end":24541,"line_start":349,"line_end":349,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":88},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":24653,"byte_end":24663,"line_start":354,"line_end":354,"column_start":12,"column_end":22},"name":"UnionState","qualname":"::inner_automaton::UnionState","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `Automaton` state for `Union<A, B>`.\n","sig":null,"attributes":[{"value":"/ The `Automaton` state for `Union<A, B>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":24597,"byte_end":24641,"line_start":353,"line_end":353,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":1248},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":25681,"byte_end":25693,"line_start":389,"line_end":389,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::inner_automaton::Intersection","value":"","parent":null,"children":[],"decl_id":null,"docs":" An automaton that matches when both of its component automata match.\n","sig":null,"attributes":[{"value":"/ An automaton that matches when both of its component automata match.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":25573,"byte_end":25645,"line_start":387,"line_end":387,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":103},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":25771,"byte_end":25788,"line_start":392,"line_end":392,"column_start":12,"column_end":29},"name":"IntersectionState","qualname":"::inner_automaton::IntersectionState","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `Automaton` state for `Intersection<A, B>`.\n","sig":null,"attributes":[{"value":"/ The `Automaton` state for `Intersection<A, B>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":25708,"byte_end":25759,"line_start":391,"line_end":391,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":1262},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":26902,"byte_end":26912,"line_start":430,"line_end":430,"column_start":12,"column_end":22},"name":"Complement","qualname":"::inner_automaton::Complement","value":"","parent":null,"children":[],"decl_id":null,"docs":" An automaton that matches exactly when the automaton it wraps does not.\n","sig":null,"attributes":[{"value":"/ An automaton that matches exactly when the automaton it wraps does not.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":26791,"byte_end":26866,"line_start":428,"line_end":428,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":118},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":26979,"byte_end":26994,"line_start":433,"line_end":433,"column_start":12,"column_end":27},"name":"ComplementState","qualname":"::inner_automaton::ComplementState","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `Automaton` state for `Complement<A>`.\n","sig":null,"attributes":[{"value":"/ The `Automaton` state for `Complement<A>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":26921,"byte_end":26967,"line_start":432,"line_end":432,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":135},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/error.rs","byte_start":27826,"byte_end":27832,"line_start":8,"line_end":8,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"::std::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A `Result` type alias for this crate's `Error` type.\n","sig":null,"attributes":[{"value":"/ A `Result` type alias for this crate's `Error` type.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/error.rs","byte_start":27760,"byte_end":27816,"line_start":7,"line_end":7,"column_start":1,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1273},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/error.rs","byte_start":28067,"byte_end":28070,"line_start":15,"line_end":15,"column_start":5,"column_end":8},"name":"Fst","qualname":"::error::Error::Fst","value":"Error::Fst(raw::Error)","parent":{"krate":0,"index":1272},"children":[],"decl_id":null,"docs":" An error that occurred while reading or writing a finite state\n transducer.\n","sig":null,"attributes":[{"value":"/ An error that occurred while reading or writing a finite state","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/error.rs","byte_start":27976,"byte_end":28042,"line_start":13,"line_end":13,"column_start":5,"column_end":71}},{"value":"/ transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/error.rs","byte_start":28047,"byte_end":28062,"line_start":14,"line_end":14,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1276},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/error.rs","byte_start":28163,"byte_end":28165,"line_start":17,"line_end":17,"column_start":5,"column_end":7},"name":"Io","qualname":"::error::Error::Io","value":"Error::Io(io::Error)","parent":{"krate":0,"index":1272},"children":[],"decl_id":null,"docs":" An IO error that occurred while writing a finite state transducer.\n","sig":null,"attributes":[{"value":"/ An IO error that occurred while writing a finite state transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/error.rs","byte_start":28088,"byte_end":28158,"line_start":16,"line_end":16,"column_start":5,"column_end":75}}]},{"kind":"Enum","id":{"krate":0,"index":1272},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/error.rs","byte_start":27964,"byte_end":27969,"line_start":12,"line_end":12,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"pub enum Error {\n\n    /// An error that occurred while reading or writing a finite state\n    /// transducer.\n    Fst(raw::Error),\n\n    /// An IO error that occurred while writing a finite state transducer.\n    Io(io::Error),\n}","parent":null,"children":[{"krate":0,"index":1273},{"krate":0,"index":1276}],"decl_id":null,"docs":" An error that encapsulates all possible errors in this crate.\n","sig":null,"attributes":[{"value":"/ An error that encapsulates all possible errors in this crate.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/error.rs","byte_start":27872,"byte_end":27937,"line_start":10,"line_end":10,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":164},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":31613,"byte_end":31616,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"Map","qualname":"::inner_map::Map","value":"","parent":null,"children":[],"decl_id":null,"docs":" Map is a lexicographically ordered map from byte strings to integers.","sig":null,"attributes":[{"value":"/ Map is a lexicographically ordered map from byte strings to integers.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":29331,"byte_end":29404,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":29405,"byte_end":29408,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ A `Map` is constructed with the `MapBuilder` type. Alternatively, a `Map`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":29409,"byte_end":29486,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ can be constructed in memory from a lexicographically ordered iterator","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":29487,"byte_end":29561,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"/ of key-value pairs (`Map::from_iter`).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":29562,"byte_end":29604,"line_start":17,"line_end":17,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":29605,"byte_end":29608,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ A key feature of `Map` is that it can be serialized to disk compactly. Its","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":29609,"byte_end":29687,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ underlying representation is built such that the `Map` can be memory mapped","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":29688,"byte_end":29767,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ (`Map::from_path`) and searched without necessarily loading the entire","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":29768,"byte_end":29842,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ map into memory.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":29843,"byte_end":29863,"line_start":22,"line_end":22,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":29864,"byte_end":29867,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ It supports most common operations associated with maps, such as key","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":29868,"byte_end":29940,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/ lookup and search. It also supports set operations on its keys along with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":29941,"byte_end":30018,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/ the ability to specify how conflicting values are merged together. Maps","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30019,"byte_end":30094,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/ also support range queries and automata based searches (e.g. a regular","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30095,"byte_end":30169,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/ expression).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30170,"byte_end":30186,"line_start":28,"line_end":28,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30187,"byte_end":30190,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Maps are represented by a finite state transducer where inputs are the keys","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30191,"byte_end":30270,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"/ and outputs are the values. As such, maps have the following invariants:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30271,"byte_end":30347,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30348,"byte_end":30351,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ 1. Once constructed, a `Map` can never be modified.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30352,"byte_end":30407,"line_start":33,"line_end":33,"column_start":1,"column_end":56}},{"value":"/ 2. Maps must be constructed with lexicographically ordered byte sequences.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30408,"byte_end":30486,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/    There is no restricting on the ordering of values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30487,"byte_end":30544,"line_start":35,"line_end":35,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30545,"byte_end":30548,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ # Differences with sets","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30549,"byte_end":30576,"line_start":37,"line_end":37,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30577,"byte_end":30580,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Maps and sets are represented by the same underlying data structure: the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30581,"byte_end":30657,"line_start":39,"line_end":39,"column_start":1,"column_end":77}},{"value":"/ finite state transducer. The principal difference between them is that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30658,"byte_end":30732,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"/ sets always have their output values set to `0`. This has an impact on the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30733,"byte_end":30811,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ representation size and is reflected in the type system for convenience.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30812,"byte_end":30888,"line_start":42,"line_end":42,"column_start":1,"column_end":77}},{"value":"/ A secondary but subtle difference is that duplicate values can be added","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30889,"byte_end":30964,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/ to a set, but it is an error to do so with maps. That is, a set can have","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":30965,"byte_end":31041,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ the same key added sequentially, but a map can't.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":31042,"byte_end":31095,"line_start":45,"line_end":45,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":31096,"byte_end":31099,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # The future","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":31100,"byte_end":31116,"line_start":47,"line_end":47,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":31117,"byte_end":31120,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ It is regrettable that the output value is fixed to `u64`. Indeed, it is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":31121,"byte_end":31197,"line_start":49,"line_end":49,"column_start":1,"column_end":77}},{"value":"/ not necessary, but it was a major simplification in the implementation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":31198,"byte_end":31273,"line_start":50,"line_end":50,"column_start":1,"column_end":76}},{"value":"/ In the future, the value type may become generic to an extent (outputs must","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":31274,"byte_end":31353,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ satisfy a basic algebra).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":31354,"byte_end":31383,"line_start":52,"line_end":52,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":31384,"byte_end":31387,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Keys will always be byte strings; however, we may grow more conveniences","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":31388,"byte_end":31464,"line_start":54,"line_end":54,"column_start":1,"column_end":77}},{"value":"/ around dealing with them (such as a serialization/deserialization step,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":31465,"byte_end":31540,"line_start":55,"line_end":55,"column_start":1,"column_end":76}},{"value":"/ although it isn't clear where exactly this should live).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":31541,"byte_end":31601,"line_start":56,"line_end":56,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":32835,"byte_end":32845,"line_start":84,"line_end":84,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<Map>::from_bytes","value":"pub fn from_bytes(Vec<u8>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a map from its representation as a raw byte sequence.","sig":null,"attributes":[{"value":"/ Creates a map from its representation as a raw byte sequence.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":32393,"byte_end":32458,"line_start":76,"line_end":76,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":32463,"byte_end":32466,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ Note that this operation is very cheap (no allocations and no copies).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":32471,"byte_end":32545,"line_start":78,"line_end":78,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":32550,"byte_end":32553,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ The map must have been written with a compatible finite state","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":32558,"byte_end":32623,"line_start":80,"line_end":80,"column_start":5,"column_end":70}},{"value":"/ transducer builder (`MapBuilder` qualifies). If the format is invalid","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":32628,"byte_end":32701,"line_start":81,"line_end":81,"column_start":5,"column_end":78}},{"value":"/ or if there is a mismatch between the API version of this library","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":32706,"byte_end":32775,"line_start":82,"line_end":82,"column_start":5,"column_end":74}},{"value":"/ and the map, then an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":32780,"byte_end":32823,"line_start":83,"line_end":83,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33531,"byte_end":33548,"line_start":106,"line_end":106,"column_start":12,"column_end":29},"name":"from_static_slice","qualname":"<Map>::from_static_slice","value":"pub fn from_static_slice(&'static [u8]) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a map from its representation as a raw byte sequence.","sig":null,"attributes":[{"value":"/ Creates a map from its representation as a raw byte sequence.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":32936,"byte_end":33001,"line_start":88,"line_end":88,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33006,"byte_end":33009,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ This accepts a static byte slice, which may be useful if the FST data is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33014,"byte_end":33090,"line_start":90,"line_end":90,"column_start":5,"column_end":81}},{"value":"/ embedded into the program.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33095,"byte_end":33125,"line_start":91,"line_end":91,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33130,"byte_end":33133,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33138,"byte_end":33151,"line_start":93,"line_end":93,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33156,"byte_end":33159,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33164,"byte_end":33177,"line_start":95,"line_end":95,"column_start":5,"column_end":18}},{"value":"/ use fst::Map;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33182,"byte_end":33199,"line_start":96,"line_end":96,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33204,"byte_end":33207,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ // File written from a build script using MapBuilder.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33212,"byte_end":33269,"line_start":98,"line_end":98,"column_start":5,"column_end":62}},{"value":"/ # const IGNORE: &str = stringify! {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33274,"byte_end":33313,"line_start":99,"line_end":99,"column_start":5,"column_end":44}},{"value":"/ static FST: &[u8] = include_bytes!(concat!(env!(\"OUT_DIR\"), \"/map.fst\"));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33318,"byte_end":33395,"line_start":100,"line_end":100,"column_start":5,"column_end":82}},{"value":"/ # };","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33400,"byte_end":33408,"line_start":101,"line_end":101,"column_start":5,"column_end":13}},{"value":"/ # static FST: &[u8] = &[];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33413,"byte_end":33443,"line_start":102,"line_end":102,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33448,"byte_end":33451,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ let map = Map::from_static_slice(FST).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33456,"byte_end":33507,"line_start":104,"line_end":104,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33512,"byte_end":33519,"line_start":105,"line_end":105,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34064,"byte_end":34073,"line_start":119,"line_end":119,"column_start":12,"column_end":21},"name":"from_iter","qualname":"<Map>::from_iter","value":"pub fn from_iter<K, I>(I) -> Result<Self> where K: AsRef<[u8]>,\nI: IntoIterator<Item = (K, u64)>","parent":null,"children":[],"decl_id":null,"docs":" Create a `Map` from an iterator of lexicographically ordered byte\n strings and associated values.","sig":null,"attributes":[{"value":"/ Create a `Map` from an iterator of lexicographically ordered byte","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33652,"byte_end":33721,"line_start":110,"line_end":110,"column_start":5,"column_end":74}},{"value":"/ strings and associated values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33726,"byte_end":33760,"line_start":111,"line_end":111,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33765,"byte_end":33768,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ If the iterator does not yield unique keys in lexicographic order, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33773,"byte_end":33848,"line_start":113,"line_end":113,"column_start":5,"column_end":80}},{"value":"/ an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33853,"byte_end":33878,"line_start":114,"line_end":114,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33883,"byte_end":33886,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ Note that this is a convenience function to build a map in memory.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33891,"byte_end":33961,"line_start":116,"line_end":116,"column_start":5,"column_end":75}},{"value":"/ To build a map that streams to an arbitrary `io::Write`, use","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":33966,"byte_end":34030,"line_start":117,"line_end":117,"column_start":5,"column_end":69}},{"value":"/ `MapBuilder`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34035,"byte_end":34052,"line_start":118,"line_end":118,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34645,"byte_end":34657,"line_start":138,"line_end":138,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<Map>::contains_key","value":"pub fn contains_key<K: AsRef<[u8]>>(&Self, K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests the membership of a single key.","sig":null,"attributes":[{"value":"/ Tests the membership of a single key.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34314,"byte_end":34355,"line_start":126,"line_end":126,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34360,"byte_end":34363,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34368,"byte_end":34381,"line_start":128,"line_end":128,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34386,"byte_end":34389,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34394,"byte_end":34405,"line_start":130,"line_end":130,"column_start":5,"column_end":16}},{"value":"/ use fst::Map;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34410,"byte_end":34427,"line_start":131,"line_end":131,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34432,"byte_end":34435,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ let map = Map::from_iter(vec![(\"a\", 1), (\"b\", 2), (\"c\", 3)]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34440,"byte_end":34514,"line_start":133,"line_end":133,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34519,"byte_end":34522,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"b\"), true);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34527,"byte_end":34571,"line_start":135,"line_end":135,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(map.contains_key(\"z\"), false);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34576,"byte_end":34621,"line_start":136,"line_end":136,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34626,"byte_end":34633,"line_start":137,"line_end":137,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35131,"byte_end":35134,"line_start":156,"line_end":156,"column_start":12,"column_end":15},"name":"get","qualname":"<Map>::get","value":"pub fn get<K: AsRef<[u8]>>(&Self, K) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value associated with a key.","sig":null,"attributes":[{"value":"/ Retrieves the value associated with a key.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34743,"byte_end":34789,"line_start":142,"line_end":142,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34794,"byte_end":34797,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ If the key does not exist, then `None` is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34802,"byte_end":34857,"line_start":144,"line_end":144,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34862,"byte_end":34865,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34870,"byte_end":34883,"line_start":146,"line_end":146,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34888,"byte_end":34891,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34896,"byte_end":34907,"line_start":148,"line_end":148,"column_start":5,"column_end":16}},{"value":"/ use fst::Map;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34912,"byte_end":34929,"line_start":149,"line_end":149,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34934,"byte_end":34937,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ let map = Map::from_iter(vec![(\"a\", 1), (\"b\", 2), (\"c\", 3)]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":34942,"byte_end":35016,"line_start":151,"line_end":151,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35021,"byte_end":35024,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.get(\"b\"), Some(2));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35029,"byte_end":35067,"line_start":153,"line_end":153,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(map.get(\"z\"), None);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35072,"byte_end":35107,"line_start":154,"line_end":154,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35112,"byte_end":35119,"line_start":155,"line_end":155,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36379,"byte_end":36385,"line_start":193,"line_end":193,"column_start":12,"column_end":18},"name":"stream","qualname":"<Map>::stream","value":"pub fn stream(&Self) -> Stream","parent":null,"children":[],"decl_id":null,"docs":" Return a lexicographically ordered stream of all key-value pairs in\n this map.","sig":null,"attributes":[{"value":"/ Return a lexicographically ordered stream of all key-value pairs in","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35247,"byte_end":35318,"line_start":160,"line_end":160,"column_start":5,"column_end":76}},{"value":"/ this map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35323,"byte_end":35336,"line_start":161,"line_end":161,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35341,"byte_end":35344,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ While this is a stream, it does require heap space proportional to the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35349,"byte_end":35423,"line_start":163,"line_end":163,"column_start":5,"column_end":79}},{"value":"/ longest key in the map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35428,"byte_end":35455,"line_start":164,"line_end":164,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35460,"byte_end":35463,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ If the map is memory mapped, then no further heap space is needed.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35468,"byte_end":35538,"line_start":166,"line_end":166,"column_start":5,"column_end":75}},{"value":"/ Note though that your operating system may fill your page cache","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35543,"byte_end":35610,"line_start":167,"line_end":167,"column_start":5,"column_end":72}},{"value":"/ (which will cause the resident memory usage of the process to go up","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35615,"byte_end":35686,"line_start":168,"line_end":168,"column_start":5,"column_end":76}},{"value":"/ correspondingly).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35691,"byte_end":35712,"line_start":169,"line_end":169,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35717,"byte_end":35720,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35725,"byte_end":35738,"line_start":171,"line_end":171,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35743,"byte_end":35746,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Since streams are not iterators, the traditional `for` loop cannot be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35751,"byte_end":35824,"line_start":173,"line_end":173,"column_start":5,"column_end":78}},{"value":"/ used. `while let` is useful instead:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35829,"byte_end":35869,"line_start":174,"line_end":174,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35874,"byte_end":35877,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35882,"byte_end":35893,"line_start":176,"line_end":176,"column_start":5,"column_end":16}},{"value":"/ use fst::{IntoStreamer, Streamer, Map};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35898,"byte_end":35941,"line_start":177,"line_end":177,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35946,"byte_end":35949,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ let map = Map::from_iter(vec![(\"a\", 1), (\"b\", 2), (\"c\", 3)]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":35954,"byte_end":36028,"line_start":179,"line_end":179,"column_start":5,"column_end":79}},{"value":"/ let mut stream = map.stream();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36033,"byte_end":36067,"line_start":180,"line_end":180,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36072,"byte_end":36075,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ let mut kvs = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36080,"byte_end":36105,"line_start":182,"line_end":182,"column_start":5,"column_end":30}},{"value":"/ while let Some((k, v)) = stream.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36110,"byte_end":36154,"line_start":183,"line_end":183,"column_start":5,"column_end":49}},{"value":"/     kvs.push((k.to_vec(), v));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36159,"byte_end":36193,"line_start":184,"line_end":184,"column_start":5,"column_end":39}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36198,"byte_end":36203,"line_start":185,"line_end":185,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(kvs, vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36208,"byte_end":36233,"line_start":186,"line_end":186,"column_start":5,"column_end":30}},{"value":"/     (b\"a\".to_vec(), 1),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36238,"byte_end":36265,"line_start":187,"line_end":187,"column_start":5,"column_end":32}},{"value":"/     (b\"b\".to_vec(), 2),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36270,"byte_end":36297,"line_start":188,"line_end":188,"column_start":5,"column_end":32}},{"value":"/     (b\"c\".to_vec(), 3),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36302,"byte_end":36329,"line_start":189,"line_end":189,"column_start":5,"column_end":32}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36334,"byte_end":36341,"line_start":190,"line_end":190,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36346,"byte_end":36353,"line_start":191,"line_end":191,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36358,"byte_end":36367,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37036,"byte_end":37040,"line_start":216,"line_end":216,"column_start":12,"column_end":16},"name":"keys","qualname":"<Map>::keys","value":"pub fn keys(&Self) -> Keys","parent":null,"children":[],"decl_id":null,"docs":" Return a lexicographically ordered stream of all keys in this map.","sig":null,"attributes":[{"value":"/ Return a lexicographically ordered stream of all keys in this map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36448,"byte_end":36518,"line_start":197,"line_end":197,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36523,"byte_end":36526,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Memory requirements are the same as described on `Map::stream`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36531,"byte_end":36598,"line_start":199,"line_end":199,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36603,"byte_end":36606,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36611,"byte_end":36624,"line_start":201,"line_end":201,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36629,"byte_end":36632,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36637,"byte_end":36648,"line_start":203,"line_end":203,"column_start":5,"column_end":16}},{"value":"/ use fst::{IntoStreamer, Streamer, Map};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36653,"byte_end":36696,"line_start":204,"line_end":204,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36701,"byte_end":36704,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ let map = Map::from_iter(vec![(\"a\", 1), (\"b\", 2), (\"c\", 3)]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36709,"byte_end":36783,"line_start":206,"line_end":206,"column_start":5,"column_end":79}},{"value":"/ let mut stream = map.keys();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36788,"byte_end":36820,"line_start":207,"line_end":207,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36825,"byte_end":36828,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ let mut keys = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36833,"byte_end":36859,"line_start":209,"line_end":209,"column_start":5,"column_end":31}},{"value":"/ while let Some(k) = stream.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36864,"byte_end":36903,"line_start":210,"line_end":210,"column_start":5,"column_end":44}},{"value":"/     keys.push(k.to_vec());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36908,"byte_end":36938,"line_start":211,"line_end":211,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36943,"byte_end":36948,"line_start":212,"line_end":212,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(keys, vec![b\"a\", b\"b\", b\"c\"]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":36953,"byte_end":36998,"line_start":213,"line_end":213,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37003,"byte_end":37010,"line_start":214,"line_end":214,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37015,"byte_end":37024,"line_start":215,"line_end":215,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37721,"byte_end":37727,"line_start":240,"line_end":240,"column_start":12,"column_end":18},"name":"values","qualname":"<Map>::values","value":"pub fn values(&Self) -> Values","parent":null,"children":[],"decl_id":null,"docs":" Return a stream of all values in this map ordered lexicographically\n by each value's corresponding key.","sig":null,"attributes":[{"value":"/ Return a stream of all values in this map ordered lexicographically","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37099,"byte_end":37170,"line_start":220,"line_end":220,"column_start":5,"column_end":76}},{"value":"/ by each value's corresponding key.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37175,"byte_end":37213,"line_start":221,"line_end":221,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37218,"byte_end":37221,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Memory requirements are the same as described on `Map::stream`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37226,"byte_end":37293,"line_start":223,"line_end":223,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37298,"byte_end":37301,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37306,"byte_end":37319,"line_start":225,"line_end":225,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37324,"byte_end":37327,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37332,"byte_end":37343,"line_start":227,"line_end":227,"column_start":5,"column_end":16}},{"value":"/ use fst::{IntoStreamer, Streamer, Map};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37348,"byte_end":37391,"line_start":228,"line_end":228,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37396,"byte_end":37399,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ let map = Map::from_iter(vec![(\"a\", 1), (\"b\", 2), (\"c\", 3)]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37404,"byte_end":37478,"line_start":230,"line_end":230,"column_start":5,"column_end":79}},{"value":"/ let mut stream = map.values();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37483,"byte_end":37517,"line_start":231,"line_end":231,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37522,"byte_end":37525,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ let mut values = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37530,"byte_end":37558,"line_start":233,"line_end":233,"column_start":5,"column_end":33}},{"value":"/ while let Some(v) = stream.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37563,"byte_end":37602,"line_start":234,"line_end":234,"column_start":5,"column_end":44}},{"value":"/     values.push(v);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37607,"byte_end":37630,"line_start":235,"line_end":235,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37635,"byte_end":37640,"line_start":236,"line_end":236,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(values, vec![1, 2, 3]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37645,"byte_end":37683,"line_start":237,"line_end":237,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37688,"byte_end":37695,"line_start":238,"line_end":238,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37700,"byte_end":37709,"line_start":239,"line_end":239,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38807,"byte_end":38812,"line_start":276,"line_end":276,"column_start":12,"column_end":17},"name":"range","qualname":"<Map>::range","value":"pub fn range(&Self) -> StreamBuilder","parent":null,"children":[],"decl_id":null,"docs":" Return a builder for range queries.","sig":null,"attributes":[{"value":"/ Return a builder for range queries.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37790,"byte_end":37829,"line_start":244,"line_end":244,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37834,"byte_end":37837,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ A range query returns a subset of key-value pairs in this map in a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37842,"byte_end":37912,"line_start":246,"line_end":246,"column_start":5,"column_end":75}},{"value":"/ range given in lexicographic order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37917,"byte_end":37956,"line_start":247,"line_end":247,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37961,"byte_end":37964,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ Memory requirements are the same as described on `Map::stream`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":37969,"byte_end":38036,"line_start":249,"line_end":249,"column_start":5,"column_end":72}},{"value":"/ Notably, only the keys in the range are read; keys outside the range","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38041,"byte_end":38113,"line_start":250,"line_end":250,"column_start":5,"column_end":77}},{"value":"/ are not.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38118,"byte_end":38130,"line_start":251,"line_end":251,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38135,"byte_end":38138,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38143,"byte_end":38156,"line_start":253,"line_end":253,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38161,"byte_end":38164,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ Returns only the key-value pairs in the range given.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38169,"byte_end":38225,"line_start":255,"line_end":255,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38230,"byte_end":38233,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38238,"byte_end":38249,"line_start":257,"line_end":257,"column_start":5,"column_end":16}},{"value":"/ use fst::{IntoStreamer, Streamer, Map};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38254,"byte_end":38297,"line_start":258,"line_end":258,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38302,"byte_end":38305,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ let map = Map::from_iter(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38310,"byte_end":38344,"line_start":260,"line_end":260,"column_start":5,"column_end":39}},{"value":"/     (\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4), (\"e\", 5),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38349,"byte_end":38406,"line_start":261,"line_end":261,"column_start":5,"column_end":62}},{"value":"/ ]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38411,"byte_end":38427,"line_start":262,"line_end":262,"column_start":5,"column_end":21}},{"value":"/ let mut stream = map.range().ge(\"b\").lt(\"e\").into_stream();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38432,"byte_end":38495,"line_start":263,"line_end":263,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38500,"byte_end":38503,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ let mut kvs = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38508,"byte_end":38533,"line_start":265,"line_end":265,"column_start":5,"column_end":30}},{"value":"/ while let Some((k, v)) = stream.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38538,"byte_end":38582,"line_start":266,"line_end":266,"column_start":5,"column_end":49}},{"value":"/     kvs.push((k.to_vec(), v));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38587,"byte_end":38621,"line_start":267,"line_end":267,"column_start":5,"column_end":39}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38626,"byte_end":38631,"line_start":268,"line_end":268,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(kvs, vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38636,"byte_end":38661,"line_start":269,"line_end":269,"column_start":5,"column_end":30}},{"value":"/     (b\"b\".to_vec(), 2),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38666,"byte_end":38693,"line_start":270,"line_end":270,"column_start":5,"column_end":32}},{"value":"/     (b\"c\".to_vec(), 3),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38698,"byte_end":38725,"line_start":271,"line_end":271,"column_start":5,"column_end":32}},{"value":"/     (b\"d\".to_vec(), 4),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38730,"byte_end":38757,"line_start":272,"line_end":272,"column_start":5,"column_end":32}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38762,"byte_end":38769,"line_start":273,"line_end":273,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38774,"byte_end":38781,"line_start":274,"line_end":274,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38786,"byte_end":38795,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40305,"byte_end":40311,"line_start":323,"line_end":323,"column_start":12,"column_end":18},"name":"search","qualname":"<Map>::search","value":"pub fn search<A: Automaton>(&Self, A) -> StreamBuilder<, A>","parent":null,"children":[],"decl_id":null,"docs":" Executes an automaton on the keys of this map.","sig":null,"attributes":[{"value":"/ Executes an automaton on the keys of this map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38888,"byte_end":38938,"line_start":280,"line_end":280,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38943,"byte_end":38946,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ Note that this returns a `StreamBuilder`, which can be used to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":38951,"byte_end":39017,"line_start":282,"line_end":282,"column_start":5,"column_end":71}},{"value":"/ add a range query to the search (see the `range` method).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39022,"byte_end":39083,"line_start":283,"line_end":283,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39088,"byte_end":39091,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Memory requirements are the same as described on `Map::stream`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39096,"byte_end":39163,"line_start":285,"line_end":285,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39168,"byte_end":39171,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39176,"byte_end":39189,"line_start":287,"line_end":287,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39194,"byte_end":39197,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ An implementation of regular expressions for `Automaton` is available","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39202,"byte_end":39275,"line_start":289,"line_end":289,"column_start":5,"column_end":78}},{"value":"/ in the `fst-regex` crate, which can be used to search maps.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39280,"byte_end":39343,"line_start":290,"line_end":290,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39348,"byte_end":39351,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39356,"byte_end":39367,"line_start":292,"line_end":292,"column_start":5,"column_end":16}},{"value":"/ extern crate fst;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39372,"byte_end":39393,"line_start":293,"line_end":293,"column_start":5,"column_end":26}},{"value":"/ extern crate fst_regex;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39398,"byte_end":39425,"line_start":294,"line_end":294,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39430,"byte_end":39433,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39438,"byte_end":39464,"line_start":296,"line_end":296,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39469,"byte_end":39472,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ use fst::{IntoStreamer, Streamer, Map};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39477,"byte_end":39520,"line_start":298,"line_end":298,"column_start":5,"column_end":48}},{"value":"/ use fst_regex::Regex;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39525,"byte_end":39550,"line_start":299,"line_end":299,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39555,"byte_end":39558,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39563,"byte_end":39602,"line_start":301,"line_end":301,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<Error>> {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39607,"byte_end":39651,"line_start":302,"line_end":302,"column_start":5,"column_end":49}},{"value":"/     let map = Map::from_iter(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39656,"byte_end":39694,"line_start":303,"line_end":303,"column_start":5,"column_end":43}},{"value":"/         (\"foo\", 1), (\"foo1\", 2), (\"foo2\", 3), (\"foo3\", 4), (\"foobar\", 5),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39699,"byte_end":39776,"line_start":304,"line_end":304,"column_start":5,"column_end":82}},{"value":"/     ]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39781,"byte_end":39801,"line_start":305,"line_end":305,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39806,"byte_end":39809,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/     let re = Regex::new(\"f[a-z]+3?\").unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39814,"byte_end":39864,"line_start":307,"line_end":307,"column_start":5,"column_end":55}},{"value":"/     let mut stream = map.search(&re).into_stream();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39869,"byte_end":39924,"line_start":308,"line_end":308,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39929,"byte_end":39932,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/     let mut kvs = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39937,"byte_end":39966,"line_start":310,"line_end":310,"column_start":5,"column_end":34}},{"value":"/     while let Some((k, v)) = stream.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":39971,"byte_end":40019,"line_start":311,"line_end":311,"column_start":5,"column_end":53}},{"value":"/         kvs.push((k.to_vec(), v));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40024,"byte_end":40062,"line_start":312,"line_end":312,"column_start":5,"column_end":43}},{"value":"/     }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40067,"byte_end":40076,"line_start":313,"line_end":313,"column_start":5,"column_end":14}},{"value":"/     assert_eq!(kvs, vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40081,"byte_end":40110,"line_start":314,"line_end":314,"column_start":5,"column_end":34}},{"value":"/         (b\"foo\".to_vec(), 1),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40115,"byte_end":40148,"line_start":315,"line_end":315,"column_start":5,"column_end":38}},{"value":"/         (b\"foo3\".to_vec(), 4),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40153,"byte_end":40187,"line_start":316,"line_end":316,"column_start":5,"column_end":39}},{"value":"/         (b\"foobar\".to_vec(), 5),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40192,"byte_end":40228,"line_start":317,"line_end":317,"column_start":5,"column_end":41}},{"value":"/     ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40233,"byte_end":40244,"line_start":318,"line_end":318,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40249,"byte_end":40252,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40257,"byte_end":40271,"line_start":320,"line_end":320,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40276,"byte_end":40281,"line_start":321,"line_end":321,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40286,"byte_end":40293,"line_start":322,"line_end":322,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40489,"byte_end":40492,"line_start":329,"line_end":329,"column_start":12,"column_end":15},"name":"len","qualname":"<Map>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in this map.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in this map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40416,"byte_end":40463,"line_start":327,"line_end":327,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40468,"byte_end":40477,"line_start":328,"line_end":328,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40619,"byte_end":40627,"line_start":335,"line_end":335,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Map>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this map is empty.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this map is empty.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40543,"byte_end":40593,"line_start":333,"line_end":333,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40598,"byte_end":40607,"line_start":334,"line_end":334,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":42483,"byte_end":42485,"line_start":383,"line_end":383,"column_start":12,"column_end":14},"name":"op","qualname":"<Map>::op","value":"pub fn op(&Self) -> OpBuilder","parent":null,"children":[],"decl_id":null,"docs":" Creates a new map operation with this map added to it.","sig":null,"attributes":[{"value":"/ Creates a new map operation with this map added to it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40682,"byte_end":40740,"line_start":339,"line_end":339,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40745,"byte_end":40748,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ The `OpBuilder` type can be used to add additional map streams","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40753,"byte_end":40819,"line_start":341,"line_end":341,"column_start":5,"column_end":71}},{"value":"/ and perform set operations like union, intersection, difference and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40824,"byte_end":40895,"line_start":342,"line_end":342,"column_start":5,"column_end":76}},{"value":"/ symmetric difference on the keys of the map. These set operations also","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40900,"byte_end":40974,"line_start":343,"line_end":343,"column_start":5,"column_end":79}},{"value":"/ allow one to specify how conflicting values are merged in the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":40979,"byte_end":41052,"line_start":344,"line_end":344,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41057,"byte_end":41060,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41065,"byte_end":41078,"line_start":346,"line_end":346,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41083,"byte_end":41086,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ This example demonstrates a union on multiple map streams. Notice that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41091,"byte_end":41165,"line_start":348,"line_end":348,"column_start":5,"column_end":79}},{"value":"/ the stream returned from the union is not a sequence of key-value","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41170,"byte_end":41239,"line_start":349,"line_end":349,"column_start":5,"column_end":74}},{"value":"/ pairs, but rather a sequence of keys associated with one or more","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41244,"byte_end":41312,"line_start":350,"line_end":350,"column_start":5,"column_end":73}},{"value":"/ values. Namely, a key is associated with each value associated with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41317,"byte_end":41388,"line_start":351,"line_end":351,"column_start":5,"column_end":76}},{"value":"/ that same key in the all of the streams.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41393,"byte_end":41437,"line_start":352,"line_end":352,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41442,"byte_end":41445,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41450,"byte_end":41461,"line_start":354,"line_end":354,"column_start":5,"column_end":16}},{"value":"/ use fst::{Streamer, Map};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41466,"byte_end":41495,"line_start":355,"line_end":355,"column_start":5,"column_end":34}},{"value":"/ use fst::map::IndexedValue;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41500,"byte_end":41531,"line_start":356,"line_end":356,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41536,"byte_end":41539,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ let map1 = Map::from_iter(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41544,"byte_end":41579,"line_start":358,"line_end":358,"column_start":5,"column_end":40}},{"value":"/     (\"a\", 1), (\"b\", 2), (\"c\", 3),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41584,"byte_end":41621,"line_start":359,"line_end":359,"column_start":5,"column_end":42}},{"value":"/ ]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41626,"byte_end":41642,"line_start":360,"line_end":360,"column_start":5,"column_end":21}},{"value":"/ let map2 = Map::from_iter(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41647,"byte_end":41682,"line_start":361,"line_end":361,"column_start":5,"column_end":40}},{"value":"/     (\"a\", 10), (\"y\", 11), (\"z\", 12),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41687,"byte_end":41727,"line_start":362,"line_end":362,"column_start":5,"column_end":45}},{"value":"/ ]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41732,"byte_end":41748,"line_start":363,"line_end":363,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41753,"byte_end":41756,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ let mut union = map1.op().add(&map2).union();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41761,"byte_end":41810,"line_start":365,"line_end":365,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41815,"byte_end":41818,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ let mut kvs = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41823,"byte_end":41848,"line_start":367,"line_end":367,"column_start":5,"column_end":30}},{"value":"/ while let Some((k, vs)) = union.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41853,"byte_end":41897,"line_start":368,"line_end":368,"column_start":5,"column_end":49}},{"value":"/     kvs.push((k.to_vec(), vs.to_vec()));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41902,"byte_end":41946,"line_start":369,"line_end":369,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41951,"byte_end":41956,"line_start":370,"line_end":370,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(kvs, vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41961,"byte_end":41986,"line_start":371,"line_end":371,"column_start":5,"column_end":30}},{"value":"/     (b\"a\".to_vec(), vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":41991,"byte_end":42020,"line_start":372,"line_end":372,"column_start":5,"column_end":34}},{"value":"/         IndexedValue { index: 0, value: 1 },","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":42025,"byte_end":42073,"line_start":373,"line_end":373,"column_start":5,"column_end":53}},{"value":"/         IndexedValue { index: 1, value: 10 },","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":42078,"byte_end":42127,"line_start":374,"line_end":374,"column_start":5,"column_end":54}},{"value":"/     ]),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":42132,"byte_end":42143,"line_start":375,"line_end":375,"column_start":5,"column_end":16}},{"value":"/     (b\"b\".to_vec(), vec![IndexedValue { index: 0, value: 2 }]),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":42148,"byte_end":42215,"line_start":376,"line_end":376,"column_start":5,"column_end":72}},{"value":"/     (b\"c\".to_vec(), vec![IndexedValue { index: 0, value: 3 }]),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":42220,"byte_end":42287,"line_start":377,"line_end":377,"column_start":5,"column_end":72}},{"value":"/     (b\"y\".to_vec(), vec![IndexedValue { index: 1, value: 11 }]),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":42292,"byte_end":42360,"line_start":378,"line_end":378,"column_start":5,"column_end":73}},{"value":"/     (b\"z\".to_vec(), vec![IndexedValue { index: 1, value: 12 }]),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":42365,"byte_end":42433,"line_start":379,"line_end":379,"column_start":5,"column_end":73}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":42438,"byte_end":42445,"line_start":380,"line_end":380,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":42450,"byte_end":42457,"line_start":381,"line_end":381,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":42462,"byte_end":42471,"line_start":382,"line_end":382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":42650,"byte_end":42656,"line_start":389,"line_end":389,"column_start":12,"column_end":18},"name":"as_fst","qualname":"<Map>::as_fst","value":"pub fn as_fst(&Self) -> &raw::Fst","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying raw finite state transducer.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying raw finite state transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":42554,"byte_end":42624,"line_start":387,"line_end":387,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":42629,"byte_end":42638,"line_start":388,"line_end":388,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":202},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47516,"byte_end":47526,"line_start":536,"line_end":536,"column_start":12,"column_end":22},"name":"MapBuilder","qualname":"::inner_map::MapBuilder","value":"","parent":null,"children":[],"decl_id":null,"docs":" A builder for creating a map.","sig":null,"attributes":[{"value":"/ A builder for creating a map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":43786,"byte_end":43819,"line_start":443,"line_end":443,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":43820,"byte_end":43823,"line_start":444,"line_end":444,"column_start":1,"column_end":4}},{"value":"/ This is not your average everyday builder. It has two important qualities","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":43824,"byte_end":43901,"line_start":445,"line_end":445,"column_start":1,"column_end":78}},{"value":"/ that make it a bit unique from what you might expect:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":43902,"byte_end":43959,"line_start":446,"line_end":446,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":43960,"byte_end":43963,"line_start":447,"line_end":447,"column_start":1,"column_end":4}},{"value":"/ 1. All keys must be added in lexicographic order. Adding a key out of order","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":43964,"byte_end":44043,"line_start":448,"line_end":448,"column_start":1,"column_end":80}},{"value":"/    will result in an error. Additionally, adding a duplicate key will also","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":44044,"byte_end":44122,"line_start":449,"line_end":449,"column_start":1,"column_end":79}},{"value":"/    result in an error. That is, once a key is associated with a value,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":44123,"byte_end":44197,"line_start":450,"line_end":450,"column_start":1,"column_end":75}},{"value":"/    that association can never be modified or deleted.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":44198,"byte_end":44255,"line_start":451,"line_end":451,"column_start":1,"column_end":58}},{"value":"/ 2. The representation of a map is streamed to *any* `io::Write` as it is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":44256,"byte_end":44332,"line_start":452,"line_end":452,"column_start":1,"column_end":77}},{"value":"/    built. For an in memory representation, this can be a `Vec<u8>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":44333,"byte_end":44404,"line_start":453,"line_end":453,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":44405,"byte_end":44408,"line_start":454,"line_end":454,"column_start":1,"column_end":4}},{"value":"/ Point (2) is especially important because it means that a map can be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":44409,"byte_end":44481,"line_start":455,"line_end":455,"column_start":1,"column_end":73}},{"value":"/ constructed *without storing the entire map in memory*. Namely, since it","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":44482,"byte_end":44558,"line_start":456,"line_end":456,"column_start":1,"column_end":77}},{"value":"/ works with any `io::Write`, it can be streamed directly to a file.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":44559,"byte_end":44629,"line_start":457,"line_end":457,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":44630,"byte_end":44633,"line_start":458,"line_end":458,"column_start":1,"column_end":4}},{"value":"/ With that said, the builder does use memory, but **memory usage is bounded","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":44634,"byte_end":44712,"line_start":459,"line_end":459,"column_start":1,"column_end":79}},{"value":"/ to a constant size**. The amount of memory used trades off with the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":44713,"byte_end":44784,"line_start":460,"line_end":460,"column_start":1,"column_end":72}},{"value":"/ compression ratio. Currently, the implementation hard codes this trade off","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":44785,"byte_end":44863,"line_start":461,"line_end":461,"column_start":1,"column_end":79}},{"value":"/ which can result in about 5-20MB of heap usage during construction. (N.B.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":44864,"byte_end":44941,"line_start":462,"line_end":462,"column_start":1,"column_end":78}},{"value":"/ Guaranteeing a maximal compression ratio requires memory proportional to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":44942,"byte_end":45018,"line_start":463,"line_end":463,"column_start":1,"column_end":77}},{"value":"/ the size of the map, which defeats some of the benefit of streaming","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45019,"byte_end":45090,"line_start":464,"line_end":464,"column_start":1,"column_end":72}},{"value":"/ it to disk. In practice, a small bounded amount of memory achieves","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45091,"byte_end":45161,"line_start":465,"line_end":465,"column_start":1,"column_end":71}},{"value":"/ close-to-minimal compression ratios.)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45162,"byte_end":45203,"line_start":466,"line_end":466,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45204,"byte_end":45207,"line_start":467,"line_end":467,"column_start":1,"column_end":4}},{"value":"/ The algorithmic complexity of map construction is `O(n)` where `n` is the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45208,"byte_end":45285,"line_start":468,"line_end":468,"column_start":1,"column_end":78}},{"value":"/ number of elements added to the map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45286,"byte_end":45326,"line_start":469,"line_end":469,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45327,"byte_end":45330,"line_start":470,"line_end":470,"column_start":1,"column_end":4}},{"value":"/ # Example: build in memory","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45331,"byte_end":45361,"line_start":471,"line_end":471,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45362,"byte_end":45365,"line_start":472,"line_end":472,"column_start":1,"column_end":4}},{"value":"/ This shows how to use the builder to construct a map in memory. Note that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45366,"byte_end":45443,"line_start":473,"line_end":473,"column_start":1,"column_end":78}},{"value":"/ `Map::from_iter` provides a convenience function that achieves this same","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45444,"byte_end":45520,"line_start":474,"line_end":474,"column_start":1,"column_end":77}},{"value":"/ goal without needing to explicitly use `MapBuilder`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45521,"byte_end":45577,"line_start":475,"line_end":475,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45578,"byte_end":45581,"line_start":476,"line_end":476,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45582,"byte_end":45593,"line_start":477,"line_end":477,"column_start":1,"column_end":12}},{"value":"/ use fst::{IntoStreamer, Streamer, Map, MapBuilder};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45594,"byte_end":45649,"line_start":478,"line_end":478,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45650,"byte_end":45653,"line_start":479,"line_end":479,"column_start":1,"column_end":4}},{"value":"/ let mut build = MapBuilder::memory();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45654,"byte_end":45695,"line_start":480,"line_end":480,"column_start":1,"column_end":42}},{"value":"/ build.insert(\"bruce\", 1).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45696,"byte_end":45734,"line_start":481,"line_end":481,"column_start":1,"column_end":39}},{"value":"/ build.insert(\"clarence\", 2).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45735,"byte_end":45776,"line_start":482,"line_end":482,"column_start":1,"column_end":42}},{"value":"/ build.insert(\"stevie\", 3).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45777,"byte_end":45816,"line_start":483,"line_end":483,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45817,"byte_end":45820,"line_start":484,"line_end":484,"column_start":1,"column_end":4}},{"value":"/ // You could also call `finish()` here, but since we're building the map in","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45821,"byte_end":45900,"line_start":485,"line_end":485,"column_start":1,"column_end":80}},{"value":"/ // memory, there would be no way to get the `Vec<u8>` back.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45901,"byte_end":45964,"line_start":486,"line_end":486,"column_start":1,"column_end":64}},{"value":"/ let bytes = build.into_inner().unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":45965,"byte_end":46009,"line_start":487,"line_end":487,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46010,"byte_end":46013,"line_start":488,"line_end":488,"column_start":1,"column_end":4}},{"value":"/ // At this point, the map has been constructed, but here's how to read it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46014,"byte_end":46092,"line_start":489,"line_end":489,"column_start":1,"column_end":79}},{"value":"/ let map = Map::from_bytes(bytes).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46093,"byte_end":46139,"line_start":490,"line_end":490,"column_start":1,"column_end":47}},{"value":"/ let mut stream = map.into_stream();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46140,"byte_end":46179,"line_start":491,"line_end":491,"column_start":1,"column_end":40}},{"value":"/ let mut kvs = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46180,"byte_end":46205,"line_start":492,"line_end":492,"column_start":1,"column_end":26}},{"value":"/ while let Some((k, v)) = stream.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46206,"byte_end":46250,"line_start":493,"line_end":493,"column_start":1,"column_end":45}},{"value":"/     kvs.push((k.to_vec(), v));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46251,"byte_end":46285,"line_start":494,"line_end":494,"column_start":1,"column_end":35}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46286,"byte_end":46291,"line_start":495,"line_end":495,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(kvs, vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46292,"byte_end":46317,"line_start":496,"line_end":496,"column_start":1,"column_end":26}},{"value":"/     (b\"bruce\".to_vec(), 1),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46318,"byte_end":46349,"line_start":497,"line_end":497,"column_start":1,"column_end":32}},{"value":"/     (b\"clarence\".to_vec(), 2),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46350,"byte_end":46384,"line_start":498,"line_end":498,"column_start":1,"column_end":35}},{"value":"/     (b\"stevie\".to_vec(), 3),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46385,"byte_end":46417,"line_start":499,"line_end":499,"column_start":1,"column_end":33}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46418,"byte_end":46425,"line_start":500,"line_end":500,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46426,"byte_end":46433,"line_start":501,"line_end":501,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46434,"byte_end":46437,"line_start":502,"line_end":502,"column_start":1,"column_end":4}},{"value":"/ # Example: stream to file","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46438,"byte_end":46467,"line_start":503,"line_end":503,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46468,"byte_end":46471,"line_start":504,"line_end":504,"column_start":1,"column_end":4}},{"value":"/ This shows how to do stream construction of a map to a file.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46472,"byte_end":46536,"line_start":505,"line_end":505,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46537,"byte_end":46540,"line_start":506,"line_end":506,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46541,"byte_end":46559,"line_start":507,"line_end":507,"column_start":1,"column_end":19}},{"value":"/ use std::fs::File;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46560,"byte_end":46582,"line_start":508,"line_end":508,"column_start":1,"column_end":23}},{"value":"/ use std::io;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46583,"byte_end":46599,"line_start":509,"line_end":509,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46600,"byte_end":46603,"line_start":510,"line_end":510,"column_start":1,"column_end":4}},{"value":"/ use fst::{IntoStreamer, Streamer, Map, MapBuilder};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46604,"byte_end":46659,"line_start":511,"line_end":511,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46660,"byte_end":46663,"line_start":512,"line_end":512,"column_start":1,"column_end":4}},{"value":"/ let mut wtr = io::BufWriter::new(File::create(\"map.fst\").unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46664,"byte_end":46735,"line_start":513,"line_end":513,"column_start":1,"column_end":72}},{"value":"/ let mut build = MapBuilder::new(wtr).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46736,"byte_end":46786,"line_start":514,"line_end":514,"column_start":1,"column_end":51}},{"value":"/ build.insert(\"bruce\", 1).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46787,"byte_end":46825,"line_start":515,"line_end":515,"column_start":1,"column_end":39}},{"value":"/ build.insert(\"clarence\", 2).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46826,"byte_end":46867,"line_start":516,"line_end":516,"column_start":1,"column_end":42}},{"value":"/ build.insert(\"stevie\", 3).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46868,"byte_end":46907,"line_start":517,"line_end":517,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46908,"byte_end":46911,"line_start":518,"line_end":518,"column_start":1,"column_end":4}},{"value":"/ // If you want the writer back, then call `into_inner`. Otherwise, this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46912,"byte_end":46987,"line_start":519,"line_end":519,"column_start":1,"column_end":76}},{"value":"/ // will finish construction and call `flush`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":46988,"byte_end":47037,"line_start":520,"line_end":520,"column_start":1,"column_end":50}},{"value":"/ build.finish().unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47038,"byte_end":47066,"line_start":521,"line_end":521,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47067,"byte_end":47070,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ // At this point, the map has been constructed, but here's how to read it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47071,"byte_end":47149,"line_start":523,"line_end":523,"column_start":1,"column_end":79}},{"value":"/ let map = unsafe { Map::from_path(\"map.fst\").unwrap() };","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47150,"byte_end":47210,"line_start":524,"line_end":524,"column_start":1,"column_end":61}},{"value":"/ let mut stream = map.into_stream();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47211,"byte_end":47250,"line_start":525,"line_end":525,"column_start":1,"column_end":40}},{"value":"/ let mut kvs = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47251,"byte_end":47276,"line_start":526,"line_end":526,"column_start":1,"column_end":26}},{"value":"/ while let Some((k, v)) = stream.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47277,"byte_end":47321,"line_start":527,"line_end":527,"column_start":1,"column_end":45}},{"value":"/     kvs.push((k.to_vec(), v));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47322,"byte_end":47356,"line_start":528,"line_end":528,"column_start":1,"column_end":35}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47357,"byte_end":47362,"line_start":529,"line_end":529,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(kvs, vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47363,"byte_end":47388,"line_start":530,"line_end":530,"column_start":1,"column_end":26}},{"value":"/     (b\"bruce\".to_vec(), 1),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47389,"byte_end":47420,"line_start":531,"line_end":531,"column_start":1,"column_end":32}},{"value":"/     (b\"clarence\".to_vec(), 2),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47421,"byte_end":47455,"line_start":532,"line_end":532,"column_start":1,"column_end":35}},{"value":"/     (b\"stevie\".to_vec(), 3),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47456,"byte_end":47488,"line_start":533,"line_end":533,"column_start":1,"column_end":33}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47489,"byte_end":47496,"line_start":534,"line_end":534,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47497,"byte_end":47504,"line_start":535,"line_end":535,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47655,"byte_end":47661,"line_start":541,"line_end":541,"column_start":12,"column_end":18},"name":"memory","qualname":"<MapBuilder<Vec<u8>>>::memory","value":"pub fn memory() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a builder that builds a map in memory.\n","sig":null,"attributes":[{"value":"/ Create a builder that builds a map in memory.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47580,"byte_end":47629,"line_start":539,"line_end":539,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47634,"byte_end":47643,"line_start":540,"line_end":540,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47870,"byte_end":47873,"line_start":549,"line_end":549,"column_start":12,"column_end":15},"name":"new","qualname":"<MapBuilder<W>>::new","value":"pub fn new(W) -> Result<MapBuilder<W>>","parent":null,"children":[],"decl_id":null,"docs":" Create a builder that builds a map by writing it to `wtr` in a\n streaming fashion.\n","sig":null,"attributes":[{"value":"/ Create a builder that builds a map by writing it to `wtr` in a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47765,"byte_end":47831,"line_start":547,"line_end":547,"column_start":5,"column_end":71}},{"value":"/ streaming fashion.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47836,"byte_end":47858,"line_start":548,"line_end":548,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":48485,"byte_end":48491,"line_start":562,"line_end":562,"column_start":12,"column_end":18},"name":"insert","qualname":"<MapBuilder<W>>::insert","value":"pub fn insert<K: AsRef<[u8]>>(&mut Self, K, u64) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Insert a new key-value pair into the map.","sig":null,"attributes":[{"value":"/ Insert a new key-value pair into the map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47975,"byte_end":48020,"line_start":553,"line_end":553,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":48025,"byte_end":48028,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ Keys must be convertible to byte strings. Values must be a `u64`, which","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":48033,"byte_end":48108,"line_start":555,"line_end":555,"column_start":5,"column_end":80}},{"value":"/ is a restriction of the current implementation of finite state","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":48113,"byte_end":48179,"line_start":556,"line_end":556,"column_start":5,"column_end":71}},{"value":"/ transducers. (Values may one day be expanded to other types.)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":48184,"byte_end":48249,"line_start":557,"line_end":557,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":48254,"byte_end":48257,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ If a key is inserted that is less than or equal to any previous key","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":48262,"byte_end":48333,"line_start":559,"line_end":559,"column_start":5,"column_end":76}},{"value":"/ added, then an error is returned. Similarly, if there was a problem","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":48338,"byte_end":48409,"line_start":560,"line_end":560,"column_start":5,"column_end":76}},{"value":"/ writing to the underlying writer, an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":48414,"byte_end":48473,"line_start":561,"line_end":561,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":48997,"byte_end":49008,"line_start":574,"line_end":574,"column_start":12,"column_end":23},"name":"extend_iter","qualname":"<MapBuilder<W>>::extend_iter","value":"pub fn extend_iter<K, I>(&mut Self, I) -> Result<()> where K: AsRef<[u8]>,\nI: IntoIterator<Item = (K, u64)>","parent":null,"children":[],"decl_id":null,"docs":" Calls insert on each item in the iterator.","sig":null,"attributes":[{"value":"/ Calls insert on each item in the iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":48596,"byte_end":48642,"line_start":566,"line_end":566,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":48647,"byte_end":48650,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ If an error occurred while adding an element, processing is stopped","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":48655,"byte_end":48726,"line_start":568,"line_end":568,"column_start":5,"column_end":76}},{"value":"/ and the error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":48731,"byte_end":48761,"line_start":569,"line_end":569,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":48766,"byte_end":48769,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ If a key is inserted that is less than or equal to any previous key","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":48774,"byte_end":48845,"line_start":571,"line_end":571,"column_start":5,"column_end":76}},{"value":"/ added, then an error is returned. Similarly, if there was a problem","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":48850,"byte_end":48921,"line_start":572,"line_end":572,"column_start":5,"column_end":76}},{"value":"/ writing to the underlying writer, an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":48926,"byte_end":48985,"line_start":573,"line_end":573,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":49627,"byte_end":49640,"line_start":588,"line_end":588,"column_start":12,"column_end":25},"name":"extend_stream","qualname":"<MapBuilder<W>>::extend_stream","value":"pub fn extend_stream<'f, I, S>(&mut Self, I) -> Result<()> where\nI: for<'a> IntoStreamer<Into = S, Item = S>, S: 'f + for<'a> Streamer<Item =\n(&'a [u8], u64)>","parent":null,"children":[],"decl_id":null,"docs":" Calls insert on each item in the stream.","sig":null,"attributes":[{"value":"/ Calls insert on each item in the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":49243,"byte_end":49287,"line_start":580,"line_end":580,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":49292,"byte_end":49295,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ Note that unlike `extend_iter`, this is not generic on the items in","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":49300,"byte_end":49371,"line_start":582,"line_end":582,"column_start":5,"column_end":76}},{"value":"/ the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":49376,"byte_end":49391,"line_start":583,"line_end":583,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":49396,"byte_end":49399,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ If a key is inserted that is less than or equal to any previous key","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":49404,"byte_end":49475,"line_start":585,"line_end":585,"column_start":5,"column_end":76}},{"value":"/ added, then an error is returned. Similarly, if there was a problem","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":49480,"byte_end":49551,"line_start":586,"line_end":586,"column_start":5,"column_end":76}},{"value":"/ writing to the underlying writer, an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":49556,"byte_end":49615,"line_start":587,"line_end":587,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":50110,"byte_end":50116,"line_start":597,"line_end":597,"column_start":12,"column_end":18},"name":"finish","qualname":"<MapBuilder<W>>::finish","value":"pub fn finish(Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Finishes the construction of the map and flushes the underlying\n writer. After completion, the data written to `W` may be read using\n one of `Map`'s constructor methods.\n","sig":null,"attributes":[{"value":"/ Finishes the construction of the map and flushes the underlying","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":49911,"byte_end":49978,"line_start":594,"line_end":594,"column_start":5,"column_end":72}},{"value":"/ writer. After completion, the data written to `W` may be read using","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":49983,"byte_end":50054,"line_start":595,"line_end":595,"column_start":5,"column_end":76}},{"value":"/ one of `Map`'s constructor methods.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":50059,"byte_end":50098,"line_start":596,"line_end":596,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":50276,"byte_end":50286,"line_start":603,"line_end":603,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MapBuilder<W>>::into_inner","value":"pub fn into_inner(Self) -> Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Just like `finish`, except it returns the underlying writer after\n flushing it.\n","sig":null,"attributes":[{"value":"/ Just like `finish`, except it returns the underlying writer after","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":50174,"byte_end":50243,"line_start":601,"line_end":601,"column_start":5,"column_end":74}},{"value":"/ flushing it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":50248,"byte_end":50264,"line_start":602,"line_end":602,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":50405,"byte_end":50412,"line_start":608,"line_end":608,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MapBuilder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":50347,"byte_end":50393,"line_start":607,"line_end":607,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":50540,"byte_end":50553,"line_start":613,"line_end":613,"column_start":12,"column_end":25},"name":"bytes_written","qualname":"<MapBuilder<W>>::bytes_written","value":"pub fn bytes_written(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes written to the underlying writer\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes written to the underlying writer","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":50464,"byte_end":50528,"line_start":612,"line_end":612,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":227},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":50902,"byte_end":50908,"line_start":625,"line_end":625,"column_start":12,"column_end":18},"name":"Stream","qualname":"::inner_map::Stream","value":"","parent":null,"children":[],"decl_id":null,"docs":" A lexicographically ordered stream of key-value pairs from a map.","sig":null,"attributes":[{"value":"/ A lexicographically ordered stream of key-value pairs from a map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":50611,"byte_end":50680,"line_start":619,"line_end":619,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":50681,"byte_end":50684,"line_start":620,"line_end":620,"column_start":1,"column_end":4}},{"value":"/ The `A` type parameter corresponds to an optional automaton to filter","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":50685,"byte_end":50758,"line_start":621,"line_end":621,"column_start":1,"column_end":74}},{"value":"/ the stream. By default, no filtering is done.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":50759,"byte_end":50808,"line_start":622,"line_end":622,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":50809,"byte_end":50812,"line_start":623,"line_end":623,"column_start":1,"column_end":4}},{"value":"/ The `'m` lifetime parameter refers to the lifetime of the underlying map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":50813,"byte_end":50890,"line_start":624,"line_end":624,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":51387,"byte_end":51400,"line_start":639,"line_end":639,"column_start":12,"column_end":25},"name":"into_byte_vec","qualname":"<Stream>::into_byte_vec","value":"pub fn into_byte_vec(Self) -> Vec<(Vec<u8>, u64)>","parent":null,"children":[],"decl_id":null,"docs":" Convert this stream into a vector of byte strings and outputs.","sig":null,"attributes":[{"value":"/ Convert this stream into a vector of byte strings and outputs.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":51224,"byte_end":51290,"line_start":636,"line_end":636,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":51295,"byte_end":51298,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ Note that this creates a new allocation for every key in the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":51303,"byte_end":51375,"line_start":638,"line_end":638,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":51775,"byte_end":51787,"line_start":649,"line_end":649,"column_start":12,"column_end":24},"name":"into_str_vec","qualname":"<Stream>::into_str_vec","value":"pub fn into_str_vec(Self) -> Result<Vec<(String, u64)>>","parent":null,"children":[],"decl_id":null,"docs":" Convert this stream into a vector of Unicode strings and outputs.","sig":null,"attributes":[{"value":"/ Convert this stream into a vector of Unicode strings and outputs.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":51474,"byte_end":51543,"line_start":643,"line_end":643,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":51548,"byte_end":51551,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ If any key is not valid UTF-8, then iteration on the stream is stopped","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":51556,"byte_end":51630,"line_start":645,"line_end":645,"column_start":5,"column_end":79}},{"value":"/ and a UTF-8 decoding error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":51635,"byte_end":51678,"line_start":646,"line_end":646,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":51683,"byte_end":51686,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ Note that this creates a new allocation for every key in the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":51691,"byte_end":51763,"line_start":648,"line_end":648,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":52018,"byte_end":52032,"line_start":656,"line_end":656,"column_start":12,"column_end":26},"name":"into_byte_keys","qualname":"<Stream>::into_byte_keys","value":"pub fn into_byte_keys(Self) -> Vec<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Convert this stream into a vector of byte strings.","sig":null,"attributes":[{"value":"/ Convert this stream into a vector of byte strings.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":51867,"byte_end":51921,"line_start":653,"line_end":653,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":51926,"byte_end":51929,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ Note that this creates a new allocation for every key in the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":51934,"byte_end":52006,"line_start":655,"line_end":655,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":52389,"byte_end":52402,"line_start":666,"line_end":666,"column_start":12,"column_end":25},"name":"into_str_keys","qualname":"<Stream>::into_str_keys","value":"pub fn into_str_keys(Self) -> Result<Vec<String>>","parent":null,"children":[],"decl_id":null,"docs":" Convert this stream into a vector of Unicode strings.","sig":null,"attributes":[{"value":"/ Convert this stream into a vector of Unicode strings.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":52100,"byte_end":52157,"line_start":660,"line_end":660,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":52162,"byte_end":52165,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ If any key is not valid UTF-8, then iteration on the stream is stopped","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":52170,"byte_end":52244,"line_start":662,"line_end":662,"column_start":5,"column_end":79}},{"value":"/ and a UTF-8 decoding error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":52249,"byte_end":52292,"line_start":663,"line_end":663,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":52297,"byte_end":52300,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ Note that this creates a new allocation for every key in the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":52305,"byte_end":52377,"line_start":665,"line_end":665,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":52537,"byte_end":52548,"line_start":671,"line_end":671,"column_start":12,"column_end":23},"name":"into_values","qualname":"<Stream>::into_values","value":"pub fn into_values(Self) -> Vec<u64>","parent":null,"children":[],"decl_id":null,"docs":" Convert this stream into a vector of outputs.\n","sig":null,"attributes":[{"value":"/ Convert this stream into a vector of outputs.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":52476,"byte_end":52525,"line_start":670,"line_end":670,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":247},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":52759,"byte_end":52763,"line_start":679,"line_end":679,"column_start":12,"column_end":16},"name":"Keys","qualname":"::inner_map::Keys","value":"","parent":null,"children":[],"decl_id":null,"docs":" A lexicographically ordered stream of keys from a map.","sig":null,"attributes":[{"value":"/ A lexicographically ordered stream of keys from a map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":52607,"byte_end":52665,"line_start":676,"line_end":676,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":52666,"byte_end":52669,"line_start":677,"line_end":677,"column_start":1,"column_end":4}},{"value":"/ The `'m` lifetime parameter refers to the lifetime of the underlying map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":52670,"byte_end":52747,"line_start":678,"line_end":678,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":257},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53163,"byte_end":53169,"line_start":694,"line_end":694,"column_start":12,"column_end":18},"name":"Values","qualname":"::inner_map::Values","value":"","parent":null,"children":[],"decl_id":null,"docs":" A stream of values from a map, lexicographically ordered by each value's\n corresponding key.","sig":null,"attributes":[{"value":"/ A stream of values from a map, lexicographically ordered by each value's","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":52970,"byte_end":53046,"line_start":690,"line_end":690,"column_start":1,"column_end":77}},{"value":"/ corresponding key.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53047,"byte_end":53069,"line_start":691,"line_end":691,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53070,"byte_end":53073,"line_start":692,"line_end":692,"column_start":1,"column_end":4}},{"value":"/ The `'m` lifetime parameter refers to the lifetime of the underlying map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53074,"byte_end":53151,"line_start":693,"line_end":693,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":267},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53866,"byte_end":53879,"line_start":717,"line_end":717,"column_start":12,"column_end":25},"name":"StreamBuilder","qualname":"::inner_map::StreamBuilder","value":"","parent":null,"children":[],"decl_id":null,"docs":" A builder for constructing range queries on streams.","sig":null,"attributes":[{"value":"/ A builder for constructing range queries on streams.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53381,"byte_end":53437,"line_start":705,"line_end":705,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53438,"byte_end":53441,"line_start":706,"line_end":706,"column_start":1,"column_end":4}},{"value":"/ Once all bounds are set, one should call `into_stream` to get a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53442,"byte_end":53509,"line_start":707,"line_end":707,"column_start":1,"column_end":68}},{"value":"/ `Stream`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53510,"byte_end":53523,"line_start":708,"line_end":708,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53524,"byte_end":53527,"line_start":709,"line_end":709,"column_start":1,"column_end":4}},{"value":"/ Bounds are not additive. That is, if `ge` is called twice on the same","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53528,"byte_end":53601,"line_start":710,"line_end":710,"column_start":1,"column_end":74}},{"value":"/ builder, then the second setting wins.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53602,"byte_end":53644,"line_start":711,"line_end":711,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53645,"byte_end":53648,"line_start":712,"line_end":712,"column_start":1,"column_end":4}},{"value":"/ The `A` type parameter corresponds to an optional automaton to filter","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53649,"byte_end":53722,"line_start":713,"line_end":713,"column_start":1,"column_end":74}},{"value":"/ the stream. By default, no filtering is done.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53723,"byte_end":53772,"line_start":714,"line_end":714,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53773,"byte_end":53776,"line_start":715,"line_end":715,"column_start":1,"column_end":4}},{"value":"/ The `'m` lifetime parameter refers to the lifetime of the underlying map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53777,"byte_end":53854,"line_start":716,"line_end":716,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":54035,"byte_end":54037,"line_start":721,"line_end":721,"column_start":12,"column_end":14},"name":"ge","qualname":"<StreamBuilder>::ge","value":"pub fn ge<T: AsRef<[u8]>>(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify a greater-than-or-equal-to bound.\n","sig":null,"attributes":[{"value":"/ Specify a greater-than-or-equal-to bound.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53978,"byte_end":54023,"line_start":720,"line_end":720,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":54176,"byte_end":54178,"line_start":726,"line_end":726,"column_start":12,"column_end":14},"name":"gt","qualname":"<StreamBuilder>::gt","value":"pub fn gt<T: AsRef<[u8]>>(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify a greater-than bound.\n","sig":null,"attributes":[{"value":"/ Specify a greater-than bound.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":54131,"byte_end":54164,"line_start":725,"line_end":725,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":54326,"byte_end":54328,"line_start":731,"line_end":731,"column_start":12,"column_end":14},"name":"le","qualname":"<StreamBuilder>::le","value":"pub fn le<T: AsRef<[u8]>>(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify a less-than-or-equal-to bound.\n","sig":null,"attributes":[{"value":"/ Specify a less-than-or-equal-to bound.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":54272,"byte_end":54314,"line_start":730,"line_end":730,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":54464,"byte_end":54466,"line_start":736,"line_end":736,"column_start":12,"column_end":14},"name":"lt","qualname":"<StreamBuilder>::lt","value":"pub fn lt<T: AsRef<[u8]>>(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify a less-than bound.\n","sig":null,"attributes":[{"value":"/ Specify a less-than bound.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":54422,"byte_end":54452,"line_start":735,"line_end":735,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":290},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55654,"byte_end":55663,"line_start":767,"line_end":767,"column_start":12,"column_end":21},"name":"OpBuilder","qualname":"::inner_map::OpBuilder","value":"","parent":null,"children":[],"decl_id":null,"docs":" A builder for collecting map streams on which to perform set operations\n on the keys of maps.","sig":null,"attributes":[{"value":"/ A builder for collecting map streams on which to perform set operations","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":54781,"byte_end":54856,"line_start":750,"line_end":750,"column_start":1,"column_end":76}},{"value":"/ on the keys of maps.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":54857,"byte_end":54881,"line_start":751,"line_end":751,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":54882,"byte_end":54885,"line_start":752,"line_end":752,"column_start":1,"column_end":4}},{"value":"/ Set operations include intersection, union, difference and symmetric","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":54886,"byte_end":54958,"line_start":753,"line_end":753,"column_start":1,"column_end":73}},{"value":"/ difference. The result of each set operation is itself a stream that emits","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":54959,"byte_end":55037,"line_start":754,"line_end":754,"column_start":1,"column_end":79}},{"value":"/ pairs of keys and a sequence of each occurrence of that key in the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55038,"byte_end":55108,"line_start":755,"line_end":755,"column_start":1,"column_end":71}},{"value":"/ participating streams. This information allows one to perform set","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55109,"byte_end":55178,"line_start":756,"line_end":756,"column_start":1,"column_end":70}},{"value":"/ operations on maps and customize how conflicting output values are handled.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55179,"byte_end":55258,"line_start":757,"line_end":757,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55259,"byte_end":55262,"line_start":758,"line_end":758,"column_start":1,"column_end":4}},{"value":"/ All set operations work efficiently on an arbitrary number of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55263,"byte_end":55328,"line_start":759,"line_end":759,"column_start":1,"column_end":66}},{"value":"/ streams with memory proportional to the number of streams.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55329,"byte_end":55391,"line_start":760,"line_end":760,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55392,"byte_end":55395,"line_start":761,"line_end":761,"column_start":1,"column_end":4}},{"value":"/ The algorithmic complexity of all set operations is `O(n1 + n2 + n3 + ...)`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55396,"byte_end":55475,"line_start":762,"line_end":762,"column_start":1,"column_end":80}},{"value":"/ where `n1, n2, n3, ...` correspond to the number of elements in each","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55476,"byte_end":55548,"line_start":763,"line_end":763,"column_start":1,"column_end":73}},{"value":"/ stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55549,"byte_end":55560,"line_start":764,"line_end":764,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55561,"byte_end":55564,"line_start":765,"line_end":765,"column_start":1,"column_end":4}},{"value":"/ The `'m` lifetime parameter refers to the lifetime of the underlying set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55565,"byte_end":55642,"line_start":766,"line_end":766,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55784,"byte_end":55787,"line_start":772,"line_end":772,"column_start":12,"column_end":15},"name":"new","qualname":"<OpBuilder>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set operation builder.\n","sig":null,"attributes":[{"value":"/ Create a new set operation builder.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55719,"byte_end":55758,"line_start":770,"line_end":770,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55763,"byte_end":55772,"line_start":771,"line_end":771,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":56125,"byte_end":56128,"line_start":783,"line_end":783,"column_start":12,"column_end":15},"name":"add","qualname":"<OpBuilder>::add","value":"pub fn add<I, S>(Self, I) -> Self where I: for<'a> IntoStreamer<Into = S, Item\n= S>, S: 'm + for<'a> Streamer<Item = (&'a [u8], u64)>","parent":null,"children":[],"decl_id":null,"docs":" Add a stream to this set operation.","sig":null,"attributes":[{"value":"/ Add a stream to this set operation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55852,"byte_end":55891,"line_start":776,"line_end":776,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55896,"byte_end":55899,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ This is useful for a chaining style pattern, e.g.,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55904,"byte_end":55958,"line_start":778,"line_end":778,"column_start":5,"column_end":59}},{"value":"/ `builder.add(stream1).add(stream2).union()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55963,"byte_end":56011,"line_start":779,"line_end":779,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":56016,"byte_end":56019,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ The stream must emit a lexicographically ordered sequence of key-value","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":56024,"byte_end":56098,"line_start":781,"line_end":781,"column_start":5,"column_end":79}},{"value":"/ pairs.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":56103,"byte_end":56113,"line_start":782,"line_end":782,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":56524,"byte_end":56528,"line_start":794,"line_end":794,"column_start":12,"column_end":16},"name":"push","qualname":"<OpBuilder>::push","value":"pub fn push<I, S>(&mut Self, I) where I: for<'a> IntoStreamer<Into = S, Item =\nS>, S: 'm + for<'a> Streamer<Item = (&'a [u8], u64)>","parent":null,"children":[],"decl_id":null,"docs":" Add a stream to this set operation.","sig":null,"attributes":[{"value":"/ Add a stream to this set operation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":56371,"byte_end":56410,"line_start":790,"line_end":790,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":56415,"byte_end":56418,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ The stream must emit a lexicographically ordered sequence of key-value","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":56423,"byte_end":56497,"line_start":792,"line_end":792,"column_start":5,"column_end":79}},{"value":"/ pairs.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":56502,"byte_end":56512,"line_start":793,"line_end":793,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":58455,"byte_end":58460,"line_start":841,"line_end":841,"column_start":12,"column_end":17},"name":"union","qualname":"<OpBuilder>::union","value":"pub fn union(Self) -> Union","parent":null,"children":[],"decl_id":null,"docs":" Performs a union operation on all streams that have been added.","sig":null,"attributes":[{"value":"/ Performs a union operation on all streams that have been added.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":56781,"byte_end":56848,"line_start":800,"line_end":800,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":56853,"byte_end":56856,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ Note that this returns a stream of `(&[u8], &[IndexedValue])`. The","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":56861,"byte_end":56931,"line_start":802,"line_end":802,"column_start":5,"column_end":75}},{"value":"/ first element of the tuple is the byte string key. The second element","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":56936,"byte_end":57009,"line_start":803,"line_end":803,"column_start":5,"column_end":78}},{"value":"/ of the tuple is a list of all occurrences of that key in participating","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57014,"byte_end":57088,"line_start":804,"line_end":804,"column_start":5,"column_end":79}},{"value":"/ streams. The `IndexedValue` contains an index and the value associated","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57093,"byte_end":57167,"line_start":805,"line_end":805,"column_start":5,"column_end":79}},{"value":"/ with that key in that stream. The index uniquely identifies each","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57172,"byte_end":57240,"line_start":806,"line_end":806,"column_start":5,"column_end":73}},{"value":"/ stream, which is an integer that is auto-incremented when a stream","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57245,"byte_end":57315,"line_start":807,"line_end":807,"column_start":5,"column_end":75}},{"value":"/ is added to this operation (starting at `0`).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57320,"byte_end":57369,"line_start":808,"line_end":808,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57374,"byte_end":57377,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57382,"byte_end":57395,"line_start":810,"line_end":810,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57400,"byte_end":57403,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57408,"byte_end":57419,"line_start":812,"line_end":812,"column_start":5,"column_end":16}},{"value":"/ use fst::{IntoStreamer, Streamer, Map};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57424,"byte_end":57467,"line_start":813,"line_end":813,"column_start":5,"column_end":48}},{"value":"/ use fst::map::IndexedValue;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57472,"byte_end":57503,"line_start":814,"line_end":814,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57508,"byte_end":57511,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ let map1 = Map::from_iter(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57516,"byte_end":57551,"line_start":816,"line_end":816,"column_start":5,"column_end":40}},{"value":"/     (\"a\", 1), (\"b\", 2), (\"c\", 3),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57556,"byte_end":57593,"line_start":817,"line_end":817,"column_start":5,"column_end":42}},{"value":"/ ]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57598,"byte_end":57614,"line_start":818,"line_end":818,"column_start":5,"column_end":21}},{"value":"/ let map2 = Map::from_iter(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57619,"byte_end":57654,"line_start":819,"line_end":819,"column_start":5,"column_end":40}},{"value":"/     (\"a\", 11), (\"y\", 12), (\"z\", 13),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57659,"byte_end":57699,"line_start":820,"line_end":820,"column_start":5,"column_end":45}},{"value":"/ ]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57704,"byte_end":57720,"line_start":821,"line_end":821,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57725,"byte_end":57728,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ let mut union = map1.op().add(&map2).union();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57733,"byte_end":57782,"line_start":823,"line_end":823,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57787,"byte_end":57790,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ let mut kvs = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57795,"byte_end":57820,"line_start":825,"line_end":825,"column_start":5,"column_end":30}},{"value":"/ while let Some((k, vs)) = union.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57825,"byte_end":57869,"line_start":826,"line_end":826,"column_start":5,"column_end":49}},{"value":"/     kvs.push((k.to_vec(), vs.to_vec()));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57874,"byte_end":57918,"line_start":827,"line_end":827,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57923,"byte_end":57928,"line_start":828,"line_end":828,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(kvs, vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57933,"byte_end":57958,"line_start":829,"line_end":829,"column_start":5,"column_end":30}},{"value":"/     (b\"a\".to_vec(), vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57963,"byte_end":57992,"line_start":830,"line_end":830,"column_start":5,"column_end":34}},{"value":"/         IndexedValue { index: 0, value: 1 },","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":57997,"byte_end":58045,"line_start":831,"line_end":831,"column_start":5,"column_end":53}},{"value":"/         IndexedValue { index: 1, value: 11 },","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":58050,"byte_end":58099,"line_start":832,"line_end":832,"column_start":5,"column_end":54}},{"value":"/     ]),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":58104,"byte_end":58115,"line_start":833,"line_end":833,"column_start":5,"column_end":16}},{"value":"/     (b\"b\".to_vec(), vec![IndexedValue { index: 0, value: 2 }]),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":58120,"byte_end":58187,"line_start":834,"line_end":834,"column_start":5,"column_end":72}},{"value":"/     (b\"c\".to_vec(), vec![IndexedValue { index: 0, value: 3 }]),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":58192,"byte_end":58259,"line_start":835,"line_end":835,"column_start":5,"column_end":72}},{"value":"/     (b\"y\".to_vec(), vec![IndexedValue { index: 1, value: 12 }]),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":58264,"byte_end":58332,"line_start":836,"line_end":836,"column_start":5,"column_end":73}},{"value":"/     (b\"z\".to_vec(), vec![IndexedValue { index: 1, value: 13 }]),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":58337,"byte_end":58405,"line_start":837,"line_end":837,"column_start":5,"column_end":73}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":58410,"byte_end":58417,"line_start":838,"line_end":838,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":58422,"byte_end":58429,"line_start":839,"line_end":839,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":58434,"byte_end":58443,"line_start":840,"line_end":840,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59936,"byte_end":59948,"line_start":882,"line_end":882,"column_start":12,"column_end":24},"name":"intersection","qualname":"<OpBuilder>::intersection","value":"pub fn intersection(Self) -> Intersection","parent":null,"children":[],"decl_id":null,"docs":" Performs an intersection operation on all streams that have been added.","sig":null,"attributes":[{"value":"/ Performs an intersection operation on all streams that have been added.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":58523,"byte_end":58598,"line_start":845,"line_end":845,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":58603,"byte_end":58606,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ Note that this returns a stream of `(&[u8], &[IndexedValue])`. The","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":58611,"byte_end":58681,"line_start":847,"line_end":847,"column_start":5,"column_end":75}},{"value":"/ first element of the tuple is the byte string key. The second element","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":58686,"byte_end":58759,"line_start":848,"line_end":848,"column_start":5,"column_end":78}},{"value":"/ of the tuple is a list of all occurrences of that key in participating","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":58764,"byte_end":58838,"line_start":849,"line_end":849,"column_start":5,"column_end":79}},{"value":"/ streams. The `IndexedValue` contains an index and the value associated","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":58843,"byte_end":58917,"line_start":850,"line_end":850,"column_start":5,"column_end":79}},{"value":"/ with that key in that stream. The index uniquely identifies each","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":58922,"byte_end":58990,"line_start":851,"line_end":851,"column_start":5,"column_end":73}},{"value":"/ stream, which is an integer that is auto-incremented when a stream","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":58995,"byte_end":59065,"line_start":852,"line_end":852,"column_start":5,"column_end":75}},{"value":"/ is added to this operation (starting at `0`).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59070,"byte_end":59119,"line_start":853,"line_end":853,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59124,"byte_end":59127,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59132,"byte_end":59145,"line_start":855,"line_end":855,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59150,"byte_end":59153,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59158,"byte_end":59169,"line_start":857,"line_end":857,"column_start":5,"column_end":16}},{"value":"/ use fst::{IntoStreamer, Streamer, Map};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59174,"byte_end":59217,"line_start":858,"line_end":858,"column_start":5,"column_end":48}},{"value":"/ use fst::map::IndexedValue;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59222,"byte_end":59253,"line_start":859,"line_end":859,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59258,"byte_end":59261,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ let map1 = Map::from_iter(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59266,"byte_end":59301,"line_start":861,"line_end":861,"column_start":5,"column_end":40}},{"value":"/     (\"a\", 1), (\"b\", 2), (\"c\", 3),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59306,"byte_end":59343,"line_start":862,"line_end":862,"column_start":5,"column_end":42}},{"value":"/ ]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59348,"byte_end":59364,"line_start":863,"line_end":863,"column_start":5,"column_end":21}},{"value":"/ let map2 = Map::from_iter(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59369,"byte_end":59404,"line_start":864,"line_end":864,"column_start":5,"column_end":40}},{"value":"/     (\"a\", 11), (\"y\", 12), (\"z\", 13),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59409,"byte_end":59449,"line_start":865,"line_end":865,"column_start":5,"column_end":45}},{"value":"/ ]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59454,"byte_end":59470,"line_start":866,"line_end":866,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59475,"byte_end":59478,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ let mut intersection = map1.op().add(&map2).intersection();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59483,"byte_end":59546,"line_start":868,"line_end":868,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59551,"byte_end":59554,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ let mut kvs = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59559,"byte_end":59584,"line_start":870,"line_end":870,"column_start":5,"column_end":30}},{"value":"/ while let Some((k, vs)) = intersection.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59589,"byte_end":59640,"line_start":871,"line_end":871,"column_start":5,"column_end":56}},{"value":"/     kvs.push((k.to_vec(), vs.to_vec()));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59645,"byte_end":59689,"line_start":872,"line_end":872,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59694,"byte_end":59699,"line_start":873,"line_end":873,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(kvs, vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59704,"byte_end":59729,"line_start":874,"line_end":874,"column_start":5,"column_end":30}},{"value":"/     (b\"a\".to_vec(), vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59734,"byte_end":59763,"line_start":875,"line_end":875,"column_start":5,"column_end":34}},{"value":"/         IndexedValue { index: 0, value: 1 },","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59768,"byte_end":59816,"line_start":876,"line_end":876,"column_start":5,"column_end":53}},{"value":"/         IndexedValue { index: 1, value: 11 },","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59821,"byte_end":59870,"line_start":877,"line_end":877,"column_start":5,"column_end":54}},{"value":"/     ]),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59875,"byte_end":59886,"line_start":878,"line_end":878,"column_start":5,"column_end":16}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59891,"byte_end":59898,"line_start":879,"line_end":879,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59903,"byte_end":59910,"line_start":880,"line_end":880,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":59915,"byte_end":59924,"line_start":881,"line_end":881,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61756,"byte_end":61766,"line_start":927,"line_end":927,"column_start":12,"column_end":22},"name":"difference","qualname":"<OpBuilder>::difference","value":"pub fn difference(Self) -> Difference","parent":null,"children":[],"decl_id":null,"docs":" Performs a difference operation with respect to the first stream added.\n That is, this returns a stream of all elements in the first stream\n that don't exist in any other stream that has been added.","sig":null,"attributes":[{"value":"/ Performs a difference operation with respect to the first stream added.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":60032,"byte_end":60107,"line_start":886,"line_end":886,"column_start":5,"column_end":80}},{"value":"/ That is, this returns a stream of all elements in the first stream","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":60112,"byte_end":60182,"line_start":887,"line_end":887,"column_start":5,"column_end":75}},{"value":"/ that don't exist in any other stream that has been added.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":60187,"byte_end":60248,"line_start":888,"line_end":888,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":60253,"byte_end":60256,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ Note that this returns a stream of `(&[u8], &[IndexedValue])`. The","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":60261,"byte_end":60331,"line_start":890,"line_end":890,"column_start":5,"column_end":75}},{"value":"/ first element of the tuple is the byte string key. The second element","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":60336,"byte_end":60409,"line_start":891,"line_end":891,"column_start":5,"column_end":78}},{"value":"/ of the tuple is a list of all occurrences of that key in participating","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":60414,"byte_end":60488,"line_start":892,"line_end":892,"column_start":5,"column_end":79}},{"value":"/ streams. The `IndexedValue` contains an index and the value associated","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":60493,"byte_end":60567,"line_start":893,"line_end":893,"column_start":5,"column_end":79}},{"value":"/ with that key in that stream. The index uniquely identifies each","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":60572,"byte_end":60640,"line_start":894,"line_end":894,"column_start":5,"column_end":73}},{"value":"/ stream, which is an integer that is auto-incremented when a stream","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":60645,"byte_end":60715,"line_start":895,"line_end":895,"column_start":5,"column_end":75}},{"value":"/ is added to this operation (starting at `0`).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":60720,"byte_end":60769,"line_start":896,"line_end":896,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":60774,"byte_end":60777,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ While the interface is the same for all the operations combining multiple","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":60782,"byte_end":60859,"line_start":898,"line_end":898,"column_start":5,"column_end":82}},{"value":"/ maps, due to the nature of `difference` there's exactly one `IndexValue`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":60864,"byte_end":60940,"line_start":899,"line_end":899,"column_start":5,"column_end":81}},{"value":"/ for each yielded value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":60945,"byte_end":60972,"line_start":900,"line_end":900,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":60977,"byte_end":60980,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":60985,"byte_end":60998,"line_start":902,"line_end":902,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61003,"byte_end":61006,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61011,"byte_end":61022,"line_start":904,"line_end":904,"column_start":5,"column_end":16}},{"value":"/ use fst::{Streamer, Map};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61027,"byte_end":61056,"line_start":905,"line_end":905,"column_start":5,"column_end":34}},{"value":"/ use fst::map::IndexedValue;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61061,"byte_end":61092,"line_start":906,"line_end":906,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61097,"byte_end":61100,"line_start":907,"line_end":907,"column_start":5,"column_end":8}},{"value":"/ let map1 = Map::from_iter(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61105,"byte_end":61140,"line_start":908,"line_end":908,"column_start":5,"column_end":40}},{"value":"/     (\"a\", 1), (\"b\", 2), (\"c\", 3),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61145,"byte_end":61182,"line_start":909,"line_end":909,"column_start":5,"column_end":42}},{"value":"/ ]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61187,"byte_end":61203,"line_start":910,"line_end":910,"column_start":5,"column_end":21}},{"value":"/ let map2 = Map::from_iter(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61208,"byte_end":61243,"line_start":911,"line_end":911,"column_start":5,"column_end":40}},{"value":"/     (\"a\", 11), (\"y\", 12), (\"z\", 13),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61248,"byte_end":61288,"line_start":912,"line_end":912,"column_start":5,"column_end":45}},{"value":"/ ]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61293,"byte_end":61309,"line_start":913,"line_end":913,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61314,"byte_end":61317,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ let mut difference = map1.op().add(&map2).difference();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61322,"byte_end":61381,"line_start":915,"line_end":915,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61386,"byte_end":61389,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ let mut kvs = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61394,"byte_end":61419,"line_start":917,"line_end":917,"column_start":5,"column_end":30}},{"value":"/ while let Some((k, vs)) = difference.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61424,"byte_end":61473,"line_start":918,"line_end":918,"column_start":5,"column_end":54}},{"value":"/     kvs.push((k.to_vec(), vs.to_vec()));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61478,"byte_end":61522,"line_start":919,"line_end":919,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61527,"byte_end":61532,"line_start":920,"line_end":920,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(kvs, vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61537,"byte_end":61562,"line_start":921,"line_end":921,"column_start":5,"column_end":30}},{"value":"/     (b\"b\".to_vec(), vec![IndexedValue { index: 0, value: 2 }]),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61567,"byte_end":61634,"line_start":922,"line_end":922,"column_start":5,"column_end":72}},{"value":"/     (b\"c\".to_vec(), vec![IndexedValue { index: 0, value: 3 }]),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61639,"byte_end":61706,"line_start":923,"line_end":923,"column_start":5,"column_end":72}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61711,"byte_end":61718,"line_start":924,"line_end":924,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61723,"byte_end":61730,"line_start":925,"line_end":925,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61735,"byte_end":61744,"line_start":926,"line_end":926,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63701,"byte_end":63721,"line_start":975,"line_end":975,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<OpBuilder>::symmetric_difference","value":"pub fn symmetric_difference(Self) -> SymmetricDifference","parent":null,"children":[],"decl_id":null,"docs":" Performs a symmetric difference operation on all of the streams that\n have been added.","sig":null,"attributes":[{"value":"/ Performs a symmetric difference operation on all of the streams that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61844,"byte_end":61916,"line_start":931,"line_end":931,"column_start":5,"column_end":77}},{"value":"/ have been added.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61921,"byte_end":61941,"line_start":932,"line_end":932,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61946,"byte_end":61949,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ When there are only two streams, then the keys returned correspond to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":61954,"byte_end":62027,"line_start":934,"line_end":934,"column_start":5,"column_end":78}},{"value":"/ keys that are in either stream but *not* in both streams.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62032,"byte_end":62093,"line_start":935,"line_end":935,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62098,"byte_end":62101,"line_start":936,"line_end":936,"column_start":5,"column_end":8}},{"value":"/ More generally, for any number of streams, keys that occur in an odd","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62106,"byte_end":62178,"line_start":937,"line_end":937,"column_start":5,"column_end":77}},{"value":"/ number of streams are returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62183,"byte_end":62218,"line_start":938,"line_end":938,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62223,"byte_end":62226,"line_start":939,"line_end":939,"column_start":5,"column_end":8}},{"value":"/ Note that this returns a stream of `(&[u8], &[IndexedValue])`. The","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62231,"byte_end":62301,"line_start":940,"line_end":940,"column_start":5,"column_end":75}},{"value":"/ first element of the tuple is the byte string key. The second element","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62306,"byte_end":62379,"line_start":941,"line_end":941,"column_start":5,"column_end":78}},{"value":"/ of the tuple is a list of all occurrences of that key in participating","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62384,"byte_end":62458,"line_start":942,"line_end":942,"column_start":5,"column_end":79}},{"value":"/ streams. The `IndexedValue` contains an index and the value associated","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62463,"byte_end":62537,"line_start":943,"line_end":943,"column_start":5,"column_end":79}},{"value":"/ with that key in that stream. The index uniquely identifies each","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62542,"byte_end":62610,"line_start":944,"line_end":944,"column_start":5,"column_end":73}},{"value":"/ stream, which is an integer that is auto-incremented when a stream","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62615,"byte_end":62685,"line_start":945,"line_end":945,"column_start":5,"column_end":75}},{"value":"/ is added to this operation (starting at `0`).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62690,"byte_end":62739,"line_start":946,"line_end":946,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62744,"byte_end":62747,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62752,"byte_end":62765,"line_start":948,"line_end":948,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62770,"byte_end":62773,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62778,"byte_end":62789,"line_start":950,"line_end":950,"column_start":5,"column_end":16}},{"value":"/ use fst::{IntoStreamer, Streamer, Map};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62794,"byte_end":62837,"line_start":951,"line_end":951,"column_start":5,"column_end":48}},{"value":"/ use fst::map::IndexedValue;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62842,"byte_end":62873,"line_start":952,"line_end":952,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62878,"byte_end":62881,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ let map1 = Map::from_iter(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62886,"byte_end":62921,"line_start":954,"line_end":954,"column_start":5,"column_end":40}},{"value":"/     (\"a\", 1), (\"b\", 2), (\"c\", 3),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62926,"byte_end":62963,"line_start":955,"line_end":955,"column_start":5,"column_end":42}},{"value":"/ ]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62968,"byte_end":62984,"line_start":956,"line_end":956,"column_start":5,"column_end":21}},{"value":"/ let map2 = Map::from_iter(vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":62989,"byte_end":63024,"line_start":957,"line_end":957,"column_start":5,"column_end":40}},{"value":"/     (\"a\", 11), (\"y\", 12), (\"z\", 13),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63029,"byte_end":63069,"line_start":958,"line_end":958,"column_start":5,"column_end":45}},{"value":"/ ]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63074,"byte_end":63090,"line_start":959,"line_end":959,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63095,"byte_end":63098,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ let mut sym_difference = map1.op().add(&map2).symmetric_difference();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63103,"byte_end":63176,"line_start":961,"line_end":961,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63181,"byte_end":63184,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ let mut kvs = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63189,"byte_end":63214,"line_start":963,"line_end":963,"column_start":5,"column_end":30}},{"value":"/ while let Some((k, vs)) = sym_difference.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63219,"byte_end":63272,"line_start":964,"line_end":964,"column_start":5,"column_end":58}},{"value":"/     kvs.push((k.to_vec(), vs.to_vec()));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63277,"byte_end":63321,"line_start":965,"line_end":965,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63326,"byte_end":63331,"line_start":966,"line_end":966,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(kvs, vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63336,"byte_end":63361,"line_start":967,"line_end":967,"column_start":5,"column_end":30}},{"value":"/     (b\"b\".to_vec(), vec![IndexedValue { index: 0, value: 2 }]),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63366,"byte_end":63433,"line_start":968,"line_end":968,"column_start":5,"column_end":72}},{"value":"/     (b\"c\".to_vec(), vec![IndexedValue { index: 0, value: 3 }]),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63438,"byte_end":63505,"line_start":969,"line_end":969,"column_start":5,"column_end":72}},{"value":"/     (b\"y\".to_vec(), vec![IndexedValue { index: 1, value: 12 }]),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63510,"byte_end":63578,"line_start":970,"line_end":970,"column_start":5,"column_end":73}},{"value":"/     (b\"z\".to_vec(), vec![IndexedValue { index: 1, value: 13 }]),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63583,"byte_end":63651,"line_start":971,"line_end":971,"column_start":5,"column_end":73}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63656,"byte_end":63663,"line_start":972,"line_end":972,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63668,"byte_end":63675,"line_start":973,"line_end":973,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63680,"byte_end":63689,"line_start":974,"line_end":974,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":327},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":64643,"byte_end":64648,"line_start":1003,"line_end":1003,"column_start":12,"column_end":17},"name":"Union","qualname":"::inner_map::Union","value":"","parent":null,"children":[],"decl_id":null,"docs":" A stream of set union over multiple map streams in lexicographic order.","sig":null,"attributes":[{"value":"/ A stream of set union over multiple map streams in lexicographic order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":64474,"byte_end":64549,"line_start":1000,"line_end":1000,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":64550,"byte_end":64553,"line_start":1001,"line_end":1001,"column_start":1,"column_end":4}},{"value":"/ The `'m` lifetime parameter refers to the lifetime of the underlying map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":64554,"byte_end":64631,"line_start":1002,"line_end":1002,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":336},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":65037,"byte_end":65049,"line_start":1018,"line_end":1018,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::inner_map::Intersection","value":"","parent":null,"children":[],"decl_id":null,"docs":" A stream of set intersection over multiple map streams in lexicographic\n order.","sig":null,"attributes":[{"value":"/ A stream of set intersection over multiple map streams in lexicographic","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":64857,"byte_end":64932,"line_start":1014,"line_end":1014,"column_start":1,"column_end":76}},{"value":"/ order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":64933,"byte_end":64943,"line_start":1015,"line_end":1015,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":64944,"byte_end":64947,"line_start":1016,"line_end":1016,"column_start":1,"column_end":4}},{"value":"/ The `'m` lifetime parameter refers to the lifetime of the underlying map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":64948,"byte_end":65025,"line_start":1017,"line_end":1017,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":345},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":65642,"byte_end":65652,"line_start":1037,"line_end":1037,"column_start":12,"column_end":22},"name":"Difference","qualname":"::inner_map::Difference","value":"","parent":null,"children":[],"decl_id":null,"docs":" A stream of set difference over multiple map streams in lexicographic\n order.","sig":null,"attributes":[{"value":"/ A stream of set difference over multiple map streams in lexicographic","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":65272,"byte_end":65345,"line_start":1029,"line_end":1029,"column_start":1,"column_end":74}},{"value":"/ order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":65346,"byte_end":65356,"line_start":1030,"line_end":1030,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":65357,"byte_end":65360,"line_start":1031,"line_end":1031,"column_start":1,"column_end":4}},{"value":"/ The difference operation is taken with respect to the first stream and the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":65361,"byte_end":65439,"line_start":1032,"line_end":1032,"column_start":1,"column_end":79}},{"value":"/ rest of the streams. i.e., All elements in the first stream that do not","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":65440,"byte_end":65515,"line_start":1033,"line_end":1033,"column_start":1,"column_end":76}},{"value":"/ appear in any other streams.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":65516,"byte_end":65548,"line_start":1034,"line_end":1034,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":65549,"byte_end":65552,"line_start":1035,"line_end":1035,"column_start":1,"column_end":4}},{"value":"/ The `'m` lifetime parameter refers to the lifetime of the underlying map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":65553,"byte_end":65630,"line_start":1036,"line_end":1036,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":354},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":66059,"byte_end":66078,"line_start":1052,"line_end":1052,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::inner_map::SymmetricDifference","value":"","parent":null,"children":[],"decl_id":null,"docs":" A stream of set symmetric difference over multiple map streams in\n lexicographic order.","sig":null,"attributes":[{"value":"/ A stream of set symmetric difference over multiple map streams in","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":65871,"byte_end":65940,"line_start":1048,"line_end":1048,"column_start":1,"column_end":70}},{"value":"/ lexicographic order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":65941,"byte_end":65965,"line_start":1049,"line_end":1049,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":65966,"byte_end":65969,"line_start":1050,"line_end":1050,"column_start":1,"column_end":4}},{"value":"/ The `'m` lifetime parameter refers to the lifetime of the underlying map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":65970,"byte_end":66047,"line_start":1051,"line_end":1051,"column_start":1,"column_end":78}}]},{"kind":"Mod","id":{"krate":0,"index":373},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"raw","qualname":"::raw","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":1609},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":484},{"krate":0,"index":489},{"krate":0,"index":505},{"krate":0,"index":540},{"krate":0,"index":664},{"krate":0,"index":778},{"krate":0,"index":791},{"krate":0,"index":811},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":834},{"krate":0,"index":875},{"krate":0,"index":881},{"krate":0,"index":888},{"krate":0,"index":900},{"krate":0,"index":1476},{"krate":0,"index":1485},{"krate":0,"index":907},{"krate":0,"index":911},{"krate":0,"index":1487},{"krate":0,"index":1498},{"krate":0,"index":1494},{"krate":0,"index":920},{"krate":0,"index":931},{"krate":0,"index":1502},{"krate":0,"index":1527},{"krate":0,"index":1525},{"krate":0,"index":1523},{"krate":0,"index":1520},{"krate":0,"index":1517},{"krate":0,"index":1518},{"krate":0,"index":1515},{"krate":0,"index":1511},{"krate":0,"index":1512},{"krate":0,"index":1505},{"krate":0,"index":937},{"krate":0,"index":945},{"krate":0,"index":953},{"krate":0,"index":1528},{"krate":0,"index":1544},{"krate":0,"index":1542},{"krate":0,"index":1539},{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":1532},{"krate":0,"index":1533},{"krate":0,"index":956},{"krate":0,"index":958},{"krate":0,"index":960}],"decl_id":null,"docs":"Operations on raw finite state transducers.","sig":null,"attributes":[{"value":"*\nOperations on raw finite state transducers.\n\nThis sub-module exposes the guts of a finite state transducer. Many parts of\nit, such as construction and traversal, are mirrored in the `set` and `map`\nsub-modules. Other parts of it, such as direct access to nodes and transitions\nin the transducer, do not have any analog.\n\n# Overview of types\n\n`Fst` is a read only interface to pre-constructed finite state transducers.\n`Node` is a read only interface to a single node in a transducer. `Builder` is\nused to create new finite state transducers. (Once a transducer is created, it\ncan never be modified.) `Stream` is a stream of all inputs and outputs in a\ntransducer. `StreamBuilder` builds range queries. `OpBuilder` collects streams\nand executes set operations like `union` or `intersection` on them with the\noption of specifying a merge strategy for output values.\n\nMost of the rest of the types are streams from set operations.\n*/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":66881,"byte_end":67815,"line_start":1,"line_end":20,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":426},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":106446,"byte_end":106453,"line_start":44,"line_end":44,"column_start":12,"column_end":19},"name":"Builder","qualname":"::raw::build::Builder","value":"Builder {  }","parent":null,"children":[{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433}],"decl_id":null,"docs":" A builder for creating a finite state transducer.","sig":null,"attributes":[{"value":"/ A builder for creating a finite state transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":104844,"byte_end":104897,"line_start":16,"line_end":16,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":104898,"byte_end":104901,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This is not your average everyday builder. It has two important qualities","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":104902,"byte_end":104979,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ that make it a bit unique from what you might expect:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":104980,"byte_end":105037,"line_start":19,"line_end":19,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":105038,"byte_end":105041,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ 1. All keys must be added in lexicographic order. Adding a key out of order","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":105042,"byte_end":105121,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/    will result in an error. Additionally, adding a duplicate key with an","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":105122,"byte_end":105198,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/    output value will also result in an error. That is, once a key is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":105199,"byte_end":105271,"line_start":23,"line_end":23,"column_start":1,"column_end":73}},{"value":"/    associated with a value, that association can never be modified or","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":105272,"byte_end":105345,"line_start":24,"line_end":24,"column_start":1,"column_end":74}},{"value":"/    deleted.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":105346,"byte_end":105361,"line_start":25,"line_end":25,"column_start":1,"column_end":16}},{"value":"/ 2. The representation of an fst is streamed to *any* `io::Write` as it is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":105362,"byte_end":105439,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/    built. For an in memory representation, this can be a `Vec<u8>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":105440,"byte_end":105511,"line_start":27,"line_end":27,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":105512,"byte_end":105515,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Point (2) is especially important because it means that an fst can be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":105516,"byte_end":105589,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/ constructed *without storing the entire fst in memory*. Namely, since it","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":105590,"byte_end":105666,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ works with any `io::Write`, it can be streamed directly to a file.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":105667,"byte_end":105737,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":105738,"byte_end":105741,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ With that said, the builder does use memory, but **memory usage is bounded","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":105742,"byte_end":105820,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/ to a constant size**. The amount of memory used trades off with the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":105821,"byte_end":105892,"line_start":34,"line_end":34,"column_start":1,"column_end":72}},{"value":"/ compression ratio. Currently, the implementation hard codes this trade off","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":105893,"byte_end":105971,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ which can result in about 5-20MB of heap usage during construction. (N.B.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":105972,"byte_end":106049,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/ Guaranteeing a maximal compression ratio requires memory proportional to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":106050,"byte_end":106126,"line_start":37,"line_end":37,"column_start":1,"column_end":77}},{"value":"/ the size of the fst, which defeats some of the benefit of streaming","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":106127,"byte_end":106198,"line_start":38,"line_end":38,"column_start":1,"column_end":72}},{"value":"/ it to disk. In practice, a small bounded amount of memory achieves","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":106199,"byte_end":106269,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/ close-to-minimal compression ratios.)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":106270,"byte_end":106311,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":106312,"byte_end":106315,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The algorithmic complexity of fst construction is `O(n)` where `n` is the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":106316,"byte_end":106393,"line_start":42,"line_end":42,"column_start":1,"column_end":78}},{"value":"/ number of elements added to the fst.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":106394,"byte_end":106434,"line_start":43,"line_end":43,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":108131,"byte_end":108137,"line_start":103,"line_end":103,"column_start":12,"column_end":18},"name":"memory","qualname":"<Builder<Vec<u8>>>::memory","value":"pub fn memory() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a builder that builds an fst in memory.\n","sig":null,"attributes":[{"value":"/ Create a builder that builds an fst in memory.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":108055,"byte_end":108105,"line_start":101,"line_end":101,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":108110,"byte_end":108119,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":108367,"byte_end":108370,"line_start":111,"line_end":111,"column_start":12,"column_end":15},"name":"new","qualname":"<Builder<W>>::new","value":"pub fn new(W) -> Result<Builder<W>>","parent":null,"children":[],"decl_id":null,"docs":" Create a builder that builds an fst by writing it to `wtr` in a\n streaming fashion.\n","sig":null,"attributes":[{"value":"/ Create a builder that builds an fst by writing it to `wtr` in a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":108261,"byte_end":108328,"line_start":109,"line_end":109,"column_start":5,"column_end":72}},{"value":"/ streaming fashion.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":108333,"byte_end":108355,"line_start":110,"line_end":110,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":108544,"byte_end":108552,"line_start":117,"line_end":117,"column_start":12,"column_end":20},"name":"new_type","qualname":"<Builder<W>>::new_type","value":"pub fn new_type(W, FstType) -> Result<Builder<W>>","parent":null,"children":[],"decl_id":null,"docs":" The same as `new`, except it sets the type of the fst to the type\n given.\n","sig":null,"attributes":[{"value":"/ The same as `new`, except it sets the type of the fst to the type","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":108448,"byte_end":108517,"line_start":115,"line_end":115,"column_start":5,"column_end":74}},{"value":"/ given.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":108522,"byte_end":108532,"line_start":116,"line_end":116,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":109327,"byte_end":109330,"line_start":136,"line_end":136,"column_start":12,"column_end":15},"name":"add","qualname":"<Builder<W>>::add","value":"pub fn add<B>(&mut Self, B) -> Result<()> where B: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Adds a byte string to this FST with a zero output value.\n","sig":null,"attributes":[{"value":"/ Adds a byte string to this FST with a zero output value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":109255,"byte_end":109315,"line_start":135,"line_end":135,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":110009,"byte_end":110015,"line_start":151,"line_end":151,"column_start":12,"column_end":18},"name":"insert","qualname":"<Builder<W>>::insert","value":"pub fn insert<B>(&mut Self, B, u64) -> Result<()> where B: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Insert a new key-value pair into the fst.","sig":null,"attributes":[{"value":"/ Insert a new key-value pair into the fst.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":109499,"byte_end":109544,"line_start":142,"line_end":142,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":109549,"byte_end":109552,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Keys must be convertible to byte strings. Values must be a `u64`, which","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":109557,"byte_end":109632,"line_start":144,"line_end":144,"column_start":5,"column_end":80}},{"value":"/ is a restriction of the current implementation of finite state","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":109637,"byte_end":109703,"line_start":145,"line_end":145,"column_start":5,"column_end":71}},{"value":"/ transducers. (Values may one day be expanded to other types.)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":109708,"byte_end":109773,"line_start":146,"line_end":146,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":109778,"byte_end":109781,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ If a key is inserted that is less than or equal to any previous key","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":109786,"byte_end":109857,"line_start":148,"line_end":148,"column_start":5,"column_end":76}},{"value":"/ added, then an error is returned. Similarly, if there was a problem","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":109862,"byte_end":109933,"line_start":149,"line_end":149,"column_start":5,"column_end":76}},{"value":"/ writing to the underlying writer, an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":109938,"byte_end":109997,"line_start":150,"line_end":150,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":110612,"byte_end":110623,"line_start":165,"line_end":165,"column_start":12,"column_end":23},"name":"extend_iter","qualname":"<Builder<W>>::extend_iter","value":"pub fn extend_iter<T, I>(&mut Self, I) -> Result<()> where T: AsRef<[u8]>,\nI: IntoIterator<Item = (T, Output)>","parent":null,"children":[],"decl_id":null,"docs":" Calls insert on each item in the iterator.","sig":null,"attributes":[{"value":"/ Calls insert on each item in the iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":110211,"byte_end":110257,"line_start":157,"line_end":157,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":110262,"byte_end":110265,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ If an error occurred while adding an element, processing is stopped","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":110270,"byte_end":110341,"line_start":159,"line_end":159,"column_start":5,"column_end":76}},{"value":"/ and the error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":110346,"byte_end":110376,"line_start":160,"line_end":160,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":110381,"byte_end":110384,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ If a key is inserted that is less than or equal to any previous key","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":110389,"byte_end":110460,"line_start":162,"line_end":162,"column_start":5,"column_end":76}},{"value":"/ added, then an error is returned. Similarly, if there was a problem","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":110465,"byte_end":110536,"line_start":163,"line_end":163,"column_start":5,"column_end":76}},{"value":"/ writing to the underlying writer, an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":110541,"byte_end":110600,"line_start":164,"line_end":164,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":111231,"byte_end":111244,"line_start":181,"line_end":181,"column_start":12,"column_end":25},"name":"extend_stream","qualname":"<Builder<W>>::extend_stream","value":"pub fn extend_stream<'f, I, S>(&mut Self, I) -> Result<()> where\nI: for<'a> IntoStreamer<Into = S, Item = S>, S: 'f + for<'a> Streamer<Item =\n(&'a [u8], Output)>","parent":null,"children":[],"decl_id":null,"docs":" Calls insert on each item in the stream.","sig":null,"attributes":[{"value":"/ Calls insert on each item in the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":110847,"byte_end":110891,"line_start":173,"line_end":173,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":110896,"byte_end":110899,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ Note that unlike `extend_iter`, this is not generic on the items in","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":110904,"byte_end":110975,"line_start":175,"line_end":175,"column_start":5,"column_end":76}},{"value":"/ the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":110980,"byte_end":110995,"line_start":176,"line_end":176,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":111000,"byte_end":111003,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ If a key is inserted that is less than or equal to any previous key","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":111008,"byte_end":111079,"line_start":178,"line_end":178,"column_start":5,"column_end":76}},{"value":"/ added, then an error is returned. Similarly, if there was a problem","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":111084,"byte_end":111155,"line_start":179,"line_end":179,"column_start":5,"column_end":76}},{"value":"/ writing to the underlying writer, an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":111160,"byte_end":111219,"line_start":180,"line_end":180,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":111824,"byte_end":111830,"line_start":194,"line_end":194,"column_start":12,"column_end":18},"name":"finish","qualname":"<Builder<W>>::finish","value":"pub fn finish(Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Finishes the construction of the fst and flushes the underlying\n writer. After completion, the data written to `W` may be read using\n one of `Fst`'s constructor methods.\n","sig":null,"attributes":[{"value":"/ Finishes the construction of the fst and flushes the underlying","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":111625,"byte_end":111692,"line_start":191,"line_end":191,"column_start":5,"column_end":72}},{"value":"/ writer. After completion, the data written to `W` may be read using","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":111697,"byte_end":111768,"line_start":192,"line_end":192,"column_start":5,"column_end":76}},{"value":"/ one of `Fst`'s constructor methods.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":111773,"byte_end":111812,"line_start":193,"line_end":193,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":112009,"byte_end":112019,"line_start":201,"line_end":201,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Builder<W>>::into_inner","value":"pub fn into_inner(Self) -> Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Just like `finish`, except it returns the underlying writer after\n flushing it.\n","sig":null,"attributes":[{"value":"/ Just like `finish`, except it returns the underlying writer after","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":111907,"byte_end":111976,"line_start":199,"line_end":199,"column_start":5,"column_end":74}},{"value":"/ flushing it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":111981,"byte_end":111997,"line_start":200,"line_end":200,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":115508,"byte_end":115515,"line_start":297,"line_end":297,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Builder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":115450,"byte_end":115496,"line_start":296,"line_end":296,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":115645,"byte_end":115658,"line_start":302,"line_end":302,"column_start":12,"column_end":25},"name":"bytes_written","qualname":"<Builder<W>>::bytes_written","value":"pub fn bytes_written(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes written to the underlying writer\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes written to the underlying writer","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":115569,"byte_end":115633,"line_start":301,"line_end":301,"column_start":5,"column_end":69}}]},{"kind":"StructVariant","id":{"krate":0,"index":512},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":129465,"byte_end":129472,"line_start":20,"line_end":20,"column_start":5,"column_end":12},"name":"Version","qualname":"::raw::error::Error::Version","value":"Error::Version { expected, got }","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" A version mismatch occurred while reading a finite state transducer.","sig":null,"attributes":[{"value":"/ A version mismatch occurred while reading a finite state transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":128988,"byte_end":129060,"line_start":10,"line_end":10,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":129065,"byte_end":129068,"line_start":11,"line_end":11,"column_start":5,"column_end":8}},{"value":"/ This occurs when the API version (of the crate) does not match the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":129073,"byte_end":129143,"line_start":12,"line_end":12,"column_start":5,"column_end":75}},{"value":"/ version encoded in the finite state transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":129148,"byte_end":129199,"line_start":13,"line_end":13,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":129204,"byte_end":129207,"line_start":14,"line_end":14,"column_start":5,"column_end":8}},{"value":"/ When this error is encountered, there are only two ways to fix it:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":129212,"byte_end":129282,"line_start":15,"line_end":15,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":129287,"byte_end":129290,"line_start":16,"line_end":16,"column_start":5,"column_end":8}},{"value":"/ 1. Change the version of the library to one that is compatible with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":129295,"byte_end":129366,"line_start":17,"line_end":17,"column_start":5,"column_end":76}},{"value":"/    the given finite state transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":129371,"byte_end":129412,"line_start":18,"line_end":18,"column_start":5,"column_end":46}},{"value":"/ 2. Rebuild the finite state transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":129417,"byte_end":129460,"line_start":19,"line_end":19,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":515},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":129913,"byte_end":129919,"line_start":30,"line_end":30,"column_start":5,"column_end":11},"name":"Format","qualname":"::raw::error::Error::Format","value":"Error::Format","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" An unexpected error occurred while reading a finite state transducer.\n Usually this occurs because the data is corrupted or is not actually\n a finite state transducer serialized by this library.\n","sig":null,"attributes":[{"value":"/ An unexpected error occurred while reading a finite state transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":129696,"byte_end":129769,"line_start":27,"line_end":27,"column_start":5,"column_end":78}},{"value":"/ Usually this occurs because the data is corrupted or is not actually","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":129774,"byte_end":129846,"line_start":28,"line_end":28,"column_start":5,"column_end":77}},{"value":"/ a finite state transducer serialized by this library.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":129851,"byte_end":129908,"line_start":29,"line_end":29,"column_start":5,"column_end":62}}]},{"kind":"StructVariant","id":{"krate":0,"index":517},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":130024,"byte_end":130036,"line_start":33,"line_end":33,"column_start":5,"column_end":17},"name":"DuplicateKey","qualname":"::raw::error::Error::DuplicateKey","value":"Error::DuplicateKey { got }","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" A duplicate key was inserted into a finite state transducer, which is\n not allowed.\n","sig":null,"attributes":[{"value":"/ A duplicate key was inserted into a finite state transducer, which is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":129925,"byte_end":129998,"line_start":31,"line_end":31,"column_start":5,"column_end":78}},{"value":"/ not allowed.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":130003,"byte_end":130019,"line_start":32,"line_end":32,"column_start":5,"column_end":21}}]},{"kind":"StructVariant","id":{"krate":0,"index":519},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":130244,"byte_end":130254,"line_start":40,"line_end":40,"column_start":5,"column_end":15},"name":"OutOfOrder","qualname":"::raw::error::Error::OutOfOrder","value":"Error::OutOfOrder { previous, got }","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" A key was inserted out of order into a finite state transducer.","sig":null,"attributes":[{"value":"/ A key was inserted out of order into a finite state transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":130103,"byte_end":130170,"line_start":37,"line_end":37,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":130175,"byte_end":130178,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ Keys must always be inserted in lexicographic order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":130183,"byte_end":130239,"line_start":39,"line_end":39,"column_start":5,"column_end":61}}]},{"kind":"StructVariant","id":{"krate":0,"index":522},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":130680,"byte_end":130689,"line_start":51,"line_end":51,"column_start":5,"column_end":14},"name":"WrongType","qualname":"::raw::error::Error::WrongType","value":"Error::WrongType { expected, got }","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" A finite state transducer with an unexpected type was found.","sig":null,"attributes":[{"value":"/ A finite state transducer with an unexpected type was found.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":130418,"byte_end":130482,"line_start":46,"line_end":46,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":130487,"byte_end":130490,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ This is not currently used in this crate, but callers may wish to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":130495,"byte_end":130564,"line_start":48,"line_end":48,"column_start":5,"column_end":74}},{"value":"/ employ its use for alternative data structures implemented on top of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":130569,"byte_end":130641,"line_start":49,"line_end":49,"column_start":5,"column_end":77}},{"value":"/ finite state transducers.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":130646,"byte_end":130675,"line_start":50,"line_end":50,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":525},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":130936,"byte_end":130944,"line_start":58,"line_end":58,"column_start":5,"column_end":13},"name":"FromUtf8","qualname":"::raw::error::Error::FromUtf8","value":"Error::FromUtf8(FromUtf8Error)","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" An error that occurred when trying to decode a UTF-8 byte key.\n","sig":null,"attributes":[{"value":"/ An error that occurred when trying to decode a UTF-8 byte key.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":130865,"byte_end":130931,"line_start":57,"line_end":57,"column_start":5,"column_end":71}}]},{"kind":"Enum","id":{"krate":0,"index":511},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":128976,"byte_end":128981,"line_start":9,"line_end":9,"column_start":10,"column_end":15},"name":"Error","qualname":"::raw::error::Error","value":"pub enum Error {\n\n    /// A version mismatch occurred while reading a finite state transducer.\n    ///\n    /// This occurs when the API version (of the crate) does not match the\n    /// version encoded in the finite state transducer.\n    ///\n    /// When this error is encountered, there are only two ways to fix it:\n    ///\n    /// 1. Change the version of the library to one that is compatible with\n    ///    the given finite state transducer.\n    /// 2. Rebuild the finite state transducer.\n    Version {\n        /// The expected version, which is hard-coded into the current version\n        /// of this crate.\n        expected: u64,\n        /// The version read from the finite state transducer.\n        got: u64,\n    },\n\n    /// An unexpected error occurred while reading a finite state transducer.\n    /// Usually this occurs because the data is corrupted or is not actually\n    /// a finite state transducer serialized by this library.\n    Format,\n\n    /// A duplicate key was inserted into a finite state transducer, which is\n    /// not allowed.\n    DuplicateKey {\n        /// The duplicate key.\n        got: Vec<u8>,\n    },\n\n    /// A key was inserted out of order into a finite state transducer.\n    ///\n    /// Keys must always be inserted in lexicographic order.\n    OutOfOrder {\n        /// The last key successfully inserted.\n        previous: Vec<u8>,\n        /// The key that caused this error to occur.\n        got: Vec<u8>,\n    },\n\n    /// A finite state transducer with an unexpected type was found.\n    ///\n    /// This is not currently used in this crate, but callers may wish to\n    /// employ its use for alternative data structures implemented on top of\n    /// finite state transducers.\n    WrongType {\n        /// The expected finite state transducer type.\n        expected: FstType,\n        /// The type read from a finite state transducer.\n        got: FstType,\n    },\n\n    /// An error that occurred when trying to decode a UTF-8 byte key.\n    FromUtf8(FromUtf8Error),\n}","parent":null,"children":[{"krate":0,"index":512},{"krate":0,"index":515},{"krate":0,"index":517},{"krate":0,"index":519},{"krate":0,"index":522},{"krate":0,"index":525}],"decl_id":null,"docs":" An error that occurred while using a finite state transducer.\n","sig":null,"attributes":[{"value":"/ An error that occurred while using a finite state transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":128901,"byte_end":128966,"line_start":8,"line_end":8,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1311},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":134225,"byte_end":134229,"line_start":22,"line_end":22,"column_start":12,"column_end":16},"name":"Node","qualname":"::raw::node::Node","value":"Node {  }","parent":null,"children":[{"krate":0,"index":1313},{"krate":0,"index":1314},{"krate":0,"index":1315},{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1321}],"decl_id":null,"docs":" Node represents a single state in a finite state transducer.","sig":null,"attributes":[{"value":"/ Node represents a single state in a finite state transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":134043,"byte_end":134107,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":134108,"byte_end":134111,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Nodes are very cheap to construct. Notably, they satisfy the `Copy` trait.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":134112,"byte_end":134190,"line_start":20,"line_end":20,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":137416,"byte_end":137427,"line_start":127,"line_end":127,"column_start":12,"column_end":23},"name":"transitions","qualname":"<Node>::transitions","value":"pub fn transitions<'n>(&'n Self) -> Transitions","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all transitions in this node in lexicographic\n order.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over all transitions in this node in lexicographic","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":137301,"byte_end":137375,"line_start":124,"line_end":124,"column_start":5,"column_end":79}},{"value":"/ order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":137380,"byte_end":137390,"line_start":125,"line_end":125,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":137395,"byte_end":137404,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":137609,"byte_end":137619,"line_start":133,"line_end":133,"column_start":12,"column_end":22},"name":"transition","qualname":"<Node>::transition","value":"pub fn transition(&Self, usize) -> Transition","parent":null,"children":[],"decl_id":null,"docs":" Returns the transition at index `i`.\n","sig":null,"attributes":[{"value":"/ Returns the transition at index `i`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":137535,"byte_end":137575,"line_start":131,"line_end":131,"column_start":5,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":137580,"byte_end":137597,"line_start":132,"line_end":132,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":138603,"byte_end":138618,"line_start":165,"line_end":165,"column_start":12,"column_end":27},"name":"transition_addr","qualname":"<Node>::transition_addr","value":"pub fn transition_addr(&Self, usize) -> CompiledAddr","parent":null,"children":[],"decl_id":null,"docs":" Returns the transition address of the `i`th transition.\n","sig":null,"attributes":[{"value":"/ Returns the transition address of the `i`th transition.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":138510,"byte_end":138569,"line_start":163,"line_end":163,"column_start":5,"column_end":64}},{"value":"inline(always)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":138574,"byte_end":138591,"line_start":164,"line_end":164,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":139240,"byte_end":139250,"line_start":185,"line_end":185,"column_start":12,"column_end":22},"name":"find_input","qualname":"<Node>::find_input","value":"pub fn find_input(&Self, u8) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Finds the `i`th transition corresponding to the given input byte.","sig":null,"attributes":[{"value":"/ Finds the `i`th transition corresponding to the given input byte.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":139057,"byte_end":139126,"line_start":181,"line_end":181,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":139131,"byte_end":139134,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ If no transition for this byte exists, then `None` is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":139139,"byte_end":139206,"line_start":183,"line_end":183,"column_start":5,"column_end":72}},{"value":"inline(always)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":139211,"byte_end":139228,"line_start":184,"line_end":184,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":139791,"byte_end":139803,"line_start":200,"line_end":200,"column_start":12,"column_end":24},"name":"final_output","qualname":"<Node>::final_output","value":"pub fn final_output(&Self) -> Output","parent":null,"children":[],"decl_id":null,"docs":" If this node is final and has a terminal output value, then it is\n returned. Otherwise, a zero output is returned.\n","sig":null,"attributes":[{"value":"/ If this node is final and has a terminal output value, then it is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":139632,"byte_end":139701,"line_start":197,"line_end":197,"column_start":5,"column_end":74}},{"value":"/ returned. Otherwise, a zero output is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":139706,"byte_end":139757,"line_start":198,"line_end":198,"column_start":5,"column_end":56}},{"value":"inline(always)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":139762,"byte_end":139779,"line_start":199,"line_end":199,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":140015,"byte_end":140023,"line_start":207,"line_end":207,"column_start":12,"column_end":20},"name":"is_final","qualname":"<Node>::is_final","value":"pub fn is_final(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this node corresponds to a final or \"match\"\n state in the finite state transducer.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this node corresponds to a final or \"match\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":139860,"byte_end":139935,"line_start":204,"line_end":204,"column_start":5,"column_end":80}},{"value":"/ state in the finite state transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":139940,"byte_end":139981,"line_start":205,"line_end":205,"column_start":5,"column_end":46}},{"value":"inline(always)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":139986,"byte_end":140003,"line_start":206,"line_end":206,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":140217,"byte_end":140220,"line_start":215,"line_end":215,"column_start":12,"column_end":15},"name":"len","qualname":"<Node>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of transitions in this node.","sig":null,"attributes":[{"value":"/ Returns the number of transitions in this node.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":140074,"byte_end":140125,"line_start":211,"line_end":211,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":140130,"byte_end":140133,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ The maximum number of transitions is 256.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":140138,"byte_end":140183,"line_start":213,"line_end":213,"column_start":5,"column_end":50}},{"value":"inline(always)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":140188,"byte_end":140205,"line_start":214,"line_end":214,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":140367,"byte_end":140375,"line_start":221,"line_end":221,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Node>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this node has zero transitions.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this node has zero transitions.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":140270,"byte_end":140333,"line_start":219,"line_end":219,"column_start":5,"column_end":68}},{"value":"inline(always)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":140338,"byte_end":140355,"line_start":220,"line_end":220,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":140499,"byte_end":140503,"line_start":227,"line_end":227,"column_start":12,"column_end":16},"name":"addr","qualname":"<Node>::addr","value":"pub fn addr(&Self) -> CompiledAddr","parent":null,"children":[],"decl_id":null,"docs":" Return the address of this node.\n","sig":null,"attributes":[{"value":"/ Return the address of this node.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":140429,"byte_end":140465,"line_start":225,"line_end":225,"column_start":5,"column_end":41}},{"value":"inline(always)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":140470,"byte_end":140487,"line_start":226,"line_end":226,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":140607,"byte_end":140615,"line_start":233,"line_end":233,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Node>::as_slice","value":"pub fn as_slice(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":140578,"byte_end":140595,"line_start":232,"line_end":232,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":140724,"byte_end":140729,"line_start":239,"line_end":239,"column_start":12,"column_end":17},"name":"state","qualname":"<Node>::state","value":"pub fn state(&Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":140695,"byte_end":140712,"line_start":238,"line_end":238,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":645},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":155984,"byte_end":155995,"line_start":767,"line_end":767,"column_start":12,"column_end":23},"name":"Transitions","qualname":"::raw::node::Transitions","value":"Transitions {  }","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649}],"decl_id":null,"docs":" An iterator over all transitions in a node.","sig":null,"attributes":[{"value":"/ An iterator over all transitions in a node.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":155819,"byte_end":155866,"line_start":763,"line_end":763,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":155867,"byte_end":155870,"line_start":764,"line_end":764,"column_start":1,"column_end":4}},{"value":"/ `'f` is the lifetime of the underlying fst and `'n` is the lifetime of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":155871,"byte_end":155945,"line_start":765,"line_end":765,"column_start":1,"column_end":75}},{"value":"/ the underlying `Node`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":155946,"byte_end":155972,"line_start":766,"line_end":766,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1376},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":163299,"byte_end":163311,"line_start":19,"line_end":19,"column_start":12,"column_end":24},"name":"IndexedValue","qualname":"::raw::ops::IndexedValue","value":"IndexedValue { index, value }","parent":null,"children":[{"krate":0,"index":1377},{"krate":0,"index":1378}],"decl_id":null,"docs":" A value indexed by a stream.","sig":null,"attributes":[{"value":"/ A value indexed by a stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":162858,"byte_end":162890,"line_start":11,"line_end":11,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":162891,"byte_end":162894,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Indexed values are used to indicate the presence of a key in multiple","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":162895,"byte_end":162968,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/ streams during a set operation. Namely, the index corresponds to the stream","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":162969,"byte_end":163048,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ (by the order in which it was added to the operation, starting at `0`)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":163049,"byte_end":163123,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ and the value corresponds to the value associated with a particular key","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":163124,"byte_end":163199,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ in that stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":163200,"byte_end":163219,"line_start":17,"line_end":17,"column_start":1,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":1377},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":163398,"byte_end":163403,"line_start":21,"line_end":21,"column_start":9,"column_end":14},"name":"index","qualname":"::raw::ops::IndexedValue::index","value":"usize","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" The index of the stream that produced this value (starting at `0`).\n","sig":null,"attributes":[{"value":"/ The index of the stream that produced this value (starting at `0`).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":163318,"byte_end":163389,"line_start":20,"line_end":20,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1378},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":163439,"byte_end":163444,"line_start":23,"line_end":23,"column_start":9,"column_end":14},"name":"value","qualname":"::raw::ops::IndexedValue::value","value":"u64","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" The value.\n","sig":null,"attributes":[{"value":"/ The value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":163416,"byte_end":163430,"line_start":22,"line_end":22,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":675},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164327,"byte_end":164336,"line_start":43,"line_end":43,"column_start":12,"column_end":21},"name":"OpBuilder","qualname":"::raw::ops::OpBuilder","value":"OpBuilder {  }","parent":null,"children":[{"krate":0,"index":677}],"decl_id":null,"docs":" A builder for collecting fst streams on which to perform set operations\n on the keys of fsts.","sig":null,"attributes":[{"value":"/ A builder for collecting fst streams on which to perform set operations","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":163454,"byte_end":163529,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/ on the keys of fsts.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":163530,"byte_end":163554,"line_start":27,"line_end":27,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":163555,"byte_end":163558,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Set operations include intersection, union, difference and symmetric","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":163559,"byte_end":163631,"line_start":29,"line_end":29,"column_start":1,"column_end":73}},{"value":"/ difference. The result of each set operation is itself a stream that emits","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":163632,"byte_end":163710,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ pairs of keys and a sequence of each occurrence of that key in the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":163711,"byte_end":163781,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ participating streams. This information allows one to perform set","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":163782,"byte_end":163851,"line_start":32,"line_end":32,"column_start":1,"column_end":70}},{"value":"/ operations on fsts and customize how conflicting output values are handled.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":163852,"byte_end":163931,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":163932,"byte_end":163935,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ All set operations work efficiently on an arbitrary number of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":163936,"byte_end":164001,"line_start":35,"line_end":35,"column_start":1,"column_end":66}},{"value":"/ streams with memory proportional to the number of streams.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164002,"byte_end":164064,"line_start":36,"line_end":36,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164065,"byte_end":164068,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ The algorithmic complexity of all set operations is `O(n1 + n2 + n3 + ...)`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164069,"byte_end":164148,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ where `n1, n2, n3, ...` correspond to the number of elements in each","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164149,"byte_end":164221,"line_start":39,"line_end":39,"column_start":1,"column_end":73}},{"value":"/ stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164222,"byte_end":164233,"line_start":40,"line_end":40,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164234,"byte_end":164237,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The `'f` lifetime parameter refers to the lifetime of the underlying set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164238,"byte_end":164315,"line_start":42,"line_end":42,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164475,"byte_end":164478,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<OpBuilder>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set operation builder.\n","sig":null,"attributes":[{"value":"/ Create a new set operation builder.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164410,"byte_end":164449,"line_start":48,"line_end":48,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164454,"byte_end":164463,"line_start":49,"line_end":49,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164813,"byte_end":164816,"line_start":61,"line_end":61,"column_start":12,"column_end":15},"name":"add","qualname":"<OpBuilder>::add","value":"pub fn add<I, S>(Self, I) -> Self where I: for<'a> IntoStreamer<Into = S, Item\n= S>, S: 'f + for<'a> Streamer<Item = (&'a [u8], Output)>","parent":null,"children":[],"decl_id":null,"docs":" Add a stream to this set operation.","sig":null,"attributes":[{"value":"/ Add a stream to this set operation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164540,"byte_end":164579,"line_start":54,"line_end":54,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164584,"byte_end":164587,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ This is useful for a chaining style pattern, e.g.,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164592,"byte_end":164646,"line_start":56,"line_end":56,"column_start":5,"column_end":59}},{"value":"/ `builder.add(stream1).add(stream2).union()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164651,"byte_end":164699,"line_start":57,"line_end":57,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164704,"byte_end":164707,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ The stream must emit a lexicographically ordered sequence of key-value","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164712,"byte_end":164786,"line_start":59,"line_end":59,"column_start":5,"column_end":79}},{"value":"/ pairs.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164791,"byte_end":164801,"line_start":60,"line_end":60,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":165210,"byte_end":165214,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"push","qualname":"<OpBuilder>::push","value":"pub fn push<I, S>(&mut Self, I) where I: for<'a> IntoStreamer<Into = S, Item =\nS>, S: 'f + for<'a> Streamer<Item = (&'a [u8], Output)>","parent":null,"children":[],"decl_id":null,"docs":" Add a stream to this set operation.","sig":null,"attributes":[{"value":"/ Add a stream to this set operation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":165057,"byte_end":165096,"line_start":68,"line_end":68,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":165101,"byte_end":165104,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ The stream must emit a lexicographically ordered sequence of key-value","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":165109,"byte_end":165183,"line_start":70,"line_end":70,"column_start":5,"column_end":79}},{"value":"/ pairs.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":165188,"byte_end":165198,"line_start":71,"line_end":71,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":166081,"byte_end":166086,"line_start":88,"line_end":88,"column_start":12,"column_end":17},"name":"union","qualname":"<OpBuilder>::union","value":"pub fn union(Self) -> Union","parent":null,"children":[],"decl_id":null,"docs":" Performs a union operation on all streams that have been added.","sig":null,"attributes":[{"value":"/ Performs a union operation on all streams that have been added.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":165467,"byte_end":165534,"line_start":78,"line_end":78,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":165539,"byte_end":165542,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Note that this returns a stream of `(&[u8], &[IndexedValue])`. The","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":165547,"byte_end":165617,"line_start":80,"line_end":80,"column_start":5,"column_end":75}},{"value":"/ first element of the tuple is the byte string key. The second element","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":165622,"byte_end":165695,"line_start":81,"line_end":81,"column_start":5,"column_end":78}},{"value":"/ of the tuple is a list of all occurrences of that key in participating","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":165700,"byte_end":165774,"line_start":82,"line_end":82,"column_start":5,"column_end":79}},{"value":"/ streams. The `IndexedValue` contains an index and the value associated","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":165779,"byte_end":165853,"line_start":83,"line_end":83,"column_start":5,"column_end":79}},{"value":"/ with that key in that stream. The index uniquely identifies each","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":165858,"byte_end":165926,"line_start":84,"line_end":84,"column_start":5,"column_end":73}},{"value":"/ stream, which is an integer that is auto-incremented when a stream","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":165931,"byte_end":166001,"line_start":85,"line_end":85,"column_start":5,"column_end":75}},{"value":"/ is added to this operation (starting at `0`).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":166006,"byte_end":166055,"line_start":86,"line_end":86,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":166060,"byte_end":166069,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":166870,"byte_end":166882,"line_start":106,"line_end":106,"column_start":12,"column_end":24},"name":"intersection","qualname":"<OpBuilder>::intersection","value":"pub fn intersection(Self) -> Intersection","parent":null,"children":[],"decl_id":null,"docs":" Performs an intersection operation on all streams that have been added.","sig":null,"attributes":[{"value":"/ Performs an intersection operation on all streams that have been added.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":166248,"byte_end":166323,"line_start":96,"line_end":96,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":166328,"byte_end":166331,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ Note that this returns a stream of `(&[u8], &[IndexedValue])`. The","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":166336,"byte_end":166406,"line_start":98,"line_end":98,"column_start":5,"column_end":75}},{"value":"/ first element of the tuple is the byte string key. The second element","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":166411,"byte_end":166484,"line_start":99,"line_end":99,"column_start":5,"column_end":78}},{"value":"/ of the tuple is a list of all occurrences of that key in participating","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":166489,"byte_end":166563,"line_start":100,"line_end":100,"column_start":5,"column_end":79}},{"value":"/ streams. The `IndexedValue` contains an index and the value associated","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":166568,"byte_end":166642,"line_start":101,"line_end":101,"column_start":5,"column_end":79}},{"value":"/ with that key in that stream. The index uniquely identifies each","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":166647,"byte_end":166715,"line_start":102,"line_end":102,"column_start":5,"column_end":73}},{"value":"/ stream, which is an integer that is auto-incremented when a stream","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":166720,"byte_end":166790,"line_start":103,"line_end":103,"column_start":5,"column_end":75}},{"value":"/ is added to this operation (starting at `0`).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":166795,"byte_end":166844,"line_start":104,"line_end":104,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":166849,"byte_end":166858,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":168016,"byte_end":168026,"line_start":130,"line_end":130,"column_start":12,"column_end":22},"name":"difference","qualname":"<OpBuilder>::difference","value":"pub fn difference(Self) -> Difference","parent":null,"children":[],"decl_id":null,"docs":" Performs a difference operation with respect to the first stream added.\n That is, this returns a stream of all elements in the first stream\n that don't exist in any other stream that has been added.","sig":null,"attributes":[{"value":"/ Performs a difference operation with respect to the first stream added.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":167058,"byte_end":167133,"line_start":114,"line_end":114,"column_start":5,"column_end":80}},{"value":"/ That is, this returns a stream of all elements in the first stream","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":167138,"byte_end":167208,"line_start":115,"line_end":115,"column_start":5,"column_end":75}},{"value":"/ that don't exist in any other stream that has been added.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":167213,"byte_end":167274,"line_start":116,"line_end":116,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":167279,"byte_end":167282,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ Note that this returns a stream of `(&[u8], &[IndexedValue])`. The","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":167287,"byte_end":167357,"line_start":118,"line_end":118,"column_start":5,"column_end":75}},{"value":"/ first element of the tuple is the byte string key. The second element","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":167362,"byte_end":167435,"line_start":119,"line_end":119,"column_start":5,"column_end":78}},{"value":"/ of the tuple is a list of all occurrences of that key in participating","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":167440,"byte_end":167514,"line_start":120,"line_end":120,"column_start":5,"column_end":79}},{"value":"/ streams. The `IndexedValue` contains an index and the value associated","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":167519,"byte_end":167593,"line_start":121,"line_end":121,"column_start":5,"column_end":79}},{"value":"/ with that key in that stream. The index uniquely identifies each","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":167598,"byte_end":167666,"line_start":122,"line_end":122,"column_start":5,"column_end":73}},{"value":"/ stream, which is an integer that is auto-incremented when a stream","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":167671,"byte_end":167741,"line_start":123,"line_end":123,"column_start":5,"column_end":75}},{"value":"/ is added to this operation (starting at `0`).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":167746,"byte_end":167795,"line_start":124,"line_end":124,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":167800,"byte_end":167803,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ The interface is the same for all the operations, but due to the nature","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":167808,"byte_end":167883,"line_start":126,"line_end":126,"column_start":5,"column_end":80}},{"value":"/ of `difference`, each yielded key contains exactly one `IndexValue` with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":167888,"byte_end":167964,"line_start":127,"line_end":127,"column_start":5,"column_end":81}},{"value":"/ `index` set to 0.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":167969,"byte_end":167990,"line_start":128,"line_end":128,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":167995,"byte_end":168004,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":169193,"byte_end":169213,"line_start":157,"line_end":157,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<OpBuilder>::symmetric_difference","value":"pub fn symmetric_difference(Self) -> SymmetricDifference","parent":null,"children":[],"decl_id":null,"docs":" Performs a symmetric difference operation on all of the streams that\n have been added.","sig":null,"attributes":[{"value":"/ Performs a symmetric difference operation on all of the streams that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":168272,"byte_end":168344,"line_start":140,"line_end":140,"column_start":5,"column_end":77}},{"value":"/ have been added.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":168349,"byte_end":168369,"line_start":141,"line_end":141,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":168374,"byte_end":168377,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ When there are only two streams, then the keys returned correspond to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":168382,"byte_end":168455,"line_start":143,"line_end":143,"column_start":5,"column_end":78}},{"value":"/ keys that are in either stream but *not* in both streams.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":168460,"byte_end":168521,"line_start":144,"line_end":144,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":168526,"byte_end":168529,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ More generally, for any number of streams, keys that occur in an odd","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":168534,"byte_end":168606,"line_start":146,"line_end":146,"column_start":5,"column_end":77}},{"value":"/ number of streams are returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":168611,"byte_end":168646,"line_start":147,"line_end":147,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":168651,"byte_end":168654,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ Note that this returns a stream of `(&[u8], &[IndexedValue])`. The","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":168659,"byte_end":168729,"line_start":149,"line_end":149,"column_start":5,"column_end":75}},{"value":"/ first element of the tuple is the byte string key. The second element","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":168734,"byte_end":168807,"line_start":150,"line_end":150,"column_start":5,"column_end":78}},{"value":"/ of the tuple is a list of all occurrences of that key in participating","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":168812,"byte_end":168886,"line_start":151,"line_end":151,"column_start":5,"column_end":79}},{"value":"/ streams. The `IndexedValue` contains an index and the value associated","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":168891,"byte_end":168965,"line_start":152,"line_end":152,"column_start":5,"column_end":79}},{"value":"/ with that key in that stream. The index uniquely identifies each","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":168970,"byte_end":169038,"line_start":153,"line_end":153,"column_start":5,"column_end":73}},{"value":"/ stream, which is an integer that is auto-incremented when a stream","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":169043,"byte_end":169113,"line_start":154,"line_end":154,"column_start":5,"column_end":75}},{"value":"/ is added to this operation (starting at `0`).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":169118,"byte_end":169167,"line_start":155,"line_end":155,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":169172,"byte_end":169181,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":711},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":170231,"byte_end":170236,"line_start":189,"line_end":189,"column_start":12,"column_end":17},"name":"Union","qualname":"::raw::ops::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715}],"decl_id":null,"docs":" A stream of set union over multiple fst streams in lexicographic order.","sig":null,"attributes":[{"value":"/ A stream of set union over multiple fst streams in lexicographic order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":170062,"byte_end":170137,"line_start":186,"line_end":186,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":170138,"byte_end":170141,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ The `'f` lifetime parameter refers to the lifetime of the underlying map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":170142,"byte_end":170219,"line_start":188,"line_end":188,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":721},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":171260,"byte_end":171272,"line_start":223,"line_end":223,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::raw::ops::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725}],"decl_id":null,"docs":" A stream of set intersection over multiple fst streams in lexicographic\n order.","sig":null,"attributes":[{"value":"/ A stream of set intersection over multiple fst streams in lexicographic","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":171080,"byte_end":171155,"line_start":219,"line_end":219,"column_start":1,"column_end":76}},{"value":"/ order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":171156,"byte_end":171166,"line_start":220,"line_end":220,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":171167,"byte_end":171170,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ The `'f` lifetime parameter refers to the lifetime of the underlying fst.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":171171,"byte_end":171248,"line_start":222,"line_end":222,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":731},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":172764,"byte_end":172774,"line_start":268,"line_end":268,"column_start":12,"column_end":22},"name":"Difference","qualname":"::raw::ops::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736}],"decl_id":null,"docs":" A stream of set difference over multiple fst streams in lexicographic\n order.","sig":null,"attributes":[{"value":"/ A stream of set difference over multiple fst streams in lexicographic","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":172394,"byte_end":172467,"line_start":260,"line_end":260,"column_start":1,"column_end":74}},{"value":"/ order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":172468,"byte_end":172478,"line_start":261,"line_end":261,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":172479,"byte_end":172482,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ The difference operation is taken with respect to the first stream and the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":172483,"byte_end":172561,"line_start":263,"line_end":263,"column_start":1,"column_end":79}},{"value":"/ rest of the streams. i.e., All elements in the first stream that do not","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":172562,"byte_end":172637,"line_start":264,"line_end":264,"column_start":1,"column_end":76}},{"value":"/ appear in any other streams.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":172638,"byte_end":172670,"line_start":265,"line_end":265,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":172671,"byte_end":172674,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ The `'f` lifetime parameter refers to the lifetime of the underlying fst.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":172675,"byte_end":172752,"line_start":267,"line_end":267,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":742},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":174016,"byte_end":174035,"line_start":310,"line_end":310,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::raw::ops::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746}],"decl_id":null,"docs":" A stream of set symmetric difference over multiple fst streams in\n lexicographic order.","sig":null,"attributes":[{"value":"/ A stream of set symmetric difference over multiple fst streams in","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":173828,"byte_end":173897,"line_start":306,"line_end":306,"column_start":1,"column_end":70}},{"value":"/ lexicographic order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":173898,"byte_end":173922,"line_start":307,"line_end":307,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":173923,"byte_end":173926,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ The `'f` lifetime parameter refers to the lifetime of the underlying fst.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":173927,"byte_end":174004,"line_start":309,"line_end":309,"column_start":1,"column_end":78}}]},{"kind":"Const","id":{"krate":0,"index":823},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69106,"byte_end":69113,"line_start":67,"line_end":67,"column_start":11,"column_end":18},"name":"VERSION","qualname":"::raw::VERSION","value":"u64","parent":null,"children":[],"decl_id":null,"docs":" The API version of this crate.","sig":null,"attributes":[{"value":"/ The API version of this crate.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68582,"byte_end":68616,"line_start":57,"line_end":57,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68617,"byte_end":68620,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ This version number is written to every finite state transducer created by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68621,"byte_end":68699,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/ this crate. When a finite state transducer is read, its version number is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68700,"byte_end":68777,"line_start":60,"line_end":60,"column_start":1,"column_end":78}},{"value":"/ checked against this value.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68778,"byte_end":68809,"line_start":61,"line_end":61,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68810,"byte_end":68813,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ Currently, any version mismatch results in an error. Fixing this requires","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68814,"byte_end":68891,"line_start":63,"line_end":63,"column_start":1,"column_end":78}},{"value":"/ regenerating the finite state transducer or switching to a version of this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68892,"byte_end":68970,"line_start":64,"line_end":64,"column_start":1,"column_end":79}},{"value":"/ crate that is compatible with the serialized transducer. This particular","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":68971,"byte_end":69047,"line_start":65,"line_end":65,"column_start":1,"column_end":77}},{"value":"/ behavior may be relaxed in future versions.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69048,"byte_end":69095,"line_start":66,"line_end":66,"column_start":1,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":826},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69604,"byte_end":69611,"line_start":82,"line_end":82,"column_start":10,"column_end":17},"name":"FstType","qualname":"::raw::FstType","value":"u64","parent":null,"children":[],"decl_id":null,"docs":" FstType is a convention used to indicate the type of the underlying\n transducer.","sig":null,"attributes":[{"value":"/ FstType is a convention used to indicate the type of the underlying","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69392,"byte_end":69463,"line_start":77,"line_end":77,"column_start":1,"column_end":72}},{"value":"/ transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69464,"byte_end":69479,"line_start":78,"line_end":78,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69480,"byte_end":69483,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ This crate reserves the range 0-255 (inclusive) but currently leaves the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69484,"byte_end":69560,"line_start":80,"line_end":80,"column_start":1,"column_end":77}},{"value":"/ meaning of 0-255 unspecified.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69561,"byte_end":69594,"line_start":81,"line_end":81,"column_start":1,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":827},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69832,"byte_end":69844,"line_start":89,"line_end":89,"column_start":10,"column_end":22},"name":"CompiledAddr","qualname":"::raw::CompiledAddr","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" CompiledAddr is the type used to address nodes in a finite state\n transducer.","sig":null,"attributes":[{"value":"/ CompiledAddr is the type used to address nodes in a finite state","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69620,"byte_end":69688,"line_start":84,"line_end":84,"column_start":1,"column_end":69}},{"value":"/ transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69689,"byte_end":69704,"line_start":85,"line_end":85,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69705,"byte_end":69708,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ It is most useful as a pointer to nodes. It can be used in the `Fst::node`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69709,"byte_end":69787,"line_start":87,"line_end":87,"column_start":1,"column_end":79}},{"value":"/ method to resolve the pointer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69788,"byte_end":69822,"line_start":88,"line_end":88,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":828},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":78693,"byte_end":78696,"line_start":277,"line_end":277,"column_start":12,"column_end":15},"name":"Fst","qualname":"::raw::Fst","value":"Fst {  }","parent":null,"children":[{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833}],"decl_id":null,"docs":" An acyclic deterministic finite state transducer.","sig":null,"attributes":[{"value":"/ An acyclic deterministic finite state transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69855,"byte_end":69908,"line_start":91,"line_end":91,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69909,"byte_end":69912,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ # How does it work?","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69913,"byte_end":69936,"line_start":93,"line_end":93,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69937,"byte_end":69940,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ The short answer: it's just like a prefix trie, which compresses keys","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":69941,"byte_end":70014,"line_start":95,"line_end":95,"column_start":1,"column_end":74}},{"value":"/ based only on their prefixes, except that a automaton/transducer also","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":70015,"byte_end":70088,"line_start":96,"line_end":96,"column_start":1,"column_end":74}},{"value":"/ compresses suffixes.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":70089,"byte_end":70113,"line_start":97,"line_end":97,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":70114,"byte_end":70117,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ The longer answer is that keys in an automaton are stored only in the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":70118,"byte_end":70191,"line_start":99,"line_end":99,"column_start":1,"column_end":74}},{"value":"/ transitions from one state to another. A key can be acquired by tracing","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":70192,"byte_end":70267,"line_start":100,"line_end":100,"column_start":1,"column_end":76}},{"value":"/ a path from the root of the automaton to any match state. The inputs along","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":70268,"byte_end":70346,"line_start":101,"line_end":101,"column_start":1,"column_end":79}},{"value":"/ each transition are concatenated. Once a match state is reached, the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":70347,"byte_end":70419,"line_start":102,"line_end":102,"column_start":1,"column_end":73}},{"value":"/ concatenation of inputs up until that point corresponds to a single key.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":70420,"byte_end":70496,"line_start":103,"line_end":103,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":70497,"byte_end":70500,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ But why is it called a transducer instead of an automaton? A finite state","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":70501,"byte_end":70578,"line_start":105,"line_end":105,"column_start":1,"column_end":78}},{"value":"/ transducer is just like a finite state automaton, except that it has output","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":70579,"byte_end":70658,"line_start":106,"line_end":106,"column_start":1,"column_end":80}},{"value":"/ transitions in addition to input transitions. Namely, the value associated","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":70659,"byte_end":70737,"line_start":107,"line_end":107,"column_start":1,"column_end":79}},{"value":"/ with any particular key is determined by summing the outputs along every","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":70738,"byte_end":70814,"line_start":108,"line_end":108,"column_start":1,"column_end":77}},{"value":"/ input transition that leads to the key's corresponding match state.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":70815,"byte_end":70886,"line_start":109,"line_end":109,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":70887,"byte_end":70890,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ This is best demonstrated with a couple images. First, let's ignore the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":70891,"byte_end":70966,"line_start":111,"line_end":111,"column_start":1,"column_end":76}},{"value":"/ \"transducer\" aspect and focus on a plain automaton.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":70967,"byte_end":71022,"line_start":112,"line_end":112,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71023,"byte_end":71026,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ Consider that your keys are abbreviations of some of the months in the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71027,"byte_end":71101,"line_start":114,"line_end":114,"column_start":1,"column_end":75}},{"value":"/ Gregorian calendar:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71102,"byte_end":71125,"line_start":115,"line_end":115,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71126,"byte_end":71129,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71130,"byte_end":71143,"line_start":117,"line_end":117,"column_start":1,"column_end":14}},{"value":"/ jan","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71144,"byte_end":71151,"line_start":118,"line_end":118,"column_start":1,"column_end":8}},{"value":"/ feb","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71152,"byte_end":71159,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ mar","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71160,"byte_end":71167,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"/ apr","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71168,"byte_end":71175,"line_start":121,"line_end":121,"column_start":1,"column_end":8}},{"value":"/ may","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71176,"byte_end":71183,"line_start":122,"line_end":122,"column_start":1,"column_end":8}},{"value":"/ jun","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71184,"byte_end":71191,"line_start":123,"line_end":123,"column_start":1,"column_end":8}},{"value":"/ jul","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71192,"byte_end":71199,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71200,"byte_end":71207,"line_start":125,"line_end":125,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71208,"byte_end":71211,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ The corresponding automaton that stores all of these as keys looks like","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71212,"byte_end":71287,"line_start":127,"line_end":127,"column_start":1,"column_end":76}},{"value":"/ this:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71288,"byte_end":71297,"line_start":128,"line_end":128,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71298,"byte_end":71301,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ ![finite state automaton](http://burntsushi.net/stuff/months-set.png)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71302,"byte_end":71375,"line_start":130,"line_end":130,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71376,"byte_end":71379,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ Notice here how the prefix and suffix of `jan` and `jun` are shared.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71380,"byte_end":71452,"line_start":132,"line_end":132,"column_start":1,"column_end":73}},{"value":"/ Similarly, the prefixes of `jun` and `jul` are shared and the prefixes","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71453,"byte_end":71527,"line_start":133,"line_end":133,"column_start":1,"column_end":75}},{"value":"/ of `mar` and `may` are shared.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71528,"byte_end":71562,"line_start":134,"line_end":134,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71563,"byte_end":71566,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ All of the keys from this automaton can be enumerated in lexicographic","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71567,"byte_end":71641,"line_start":136,"line_end":136,"column_start":1,"column_end":75}},{"value":"/ order by following every transition from each node in lexicographic","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71642,"byte_end":71713,"line_start":137,"line_end":137,"column_start":1,"column_end":72}},{"value":"/ order. Since it is acyclic, the procedure will terminate.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71714,"byte_end":71775,"line_start":138,"line_end":138,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71776,"byte_end":71779,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ A key can be found by tracing it through the transitions in the automaton.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71780,"byte_end":71858,"line_start":140,"line_end":140,"column_start":1,"column_end":79}},{"value":"/ For example, the key `aug` is known not to be in the automaton by only","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71859,"byte_end":71933,"line_start":141,"line_end":141,"column_start":1,"column_end":75}},{"value":"/ visiting the root state (because there is no `a` transition). For another","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":71934,"byte_end":72011,"line_start":142,"line_end":142,"column_start":1,"column_end":78}},{"value":"/ example, the key `jax` is known not to be in the set only after moving","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72012,"byte_end":72086,"line_start":143,"line_end":143,"column_start":1,"column_end":75}},{"value":"/ through the transitions for `j` and `a`. Namely, after those transitions","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72087,"byte_end":72163,"line_start":144,"line_end":144,"column_start":1,"column_end":77}},{"value":"/ are followed, there are no transitions for `x`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72164,"byte_end":72215,"line_start":145,"line_end":145,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72216,"byte_end":72219,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ Notice here that looking up a key is proportional the length of the key","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72220,"byte_end":72295,"line_start":147,"line_end":147,"column_start":1,"column_end":76}},{"value":"/ itself. Namely, lookup time is not affected by the number of keys in the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72296,"byte_end":72372,"line_start":148,"line_end":148,"column_start":1,"column_end":77}},{"value":"/ automaton!","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72373,"byte_end":72387,"line_start":149,"line_end":149,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72388,"byte_end":72391,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ Additionally, notice that the automaton exploits the fact that many keys","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72392,"byte_end":72468,"line_start":151,"line_end":151,"column_start":1,"column_end":77}},{"value":"/ share common prefixes and suffixes. For example, `jun` and `jul` are","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72469,"byte_end":72541,"line_start":152,"line_end":152,"column_start":1,"column_end":73}},{"value":"/ represented with no more states than would be required to represent either","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72542,"byte_end":72620,"line_start":153,"line_end":153,"column_start":1,"column_end":79}},{"value":"/ one on its own. Instead, the only change is a single extra transition. This","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72621,"byte_end":72700,"line_start":154,"line_end":154,"column_start":1,"column_end":80}},{"value":"/ is a form of compression and is key to how the automatons produced by this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72701,"byte_end":72779,"line_start":155,"line_end":155,"column_start":1,"column_end":79}},{"value":"/ crate are so small.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72780,"byte_end":72803,"line_start":156,"line_end":156,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72804,"byte_end":72807,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ Let's move on to finite state transducers. Consider the same set of keys","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72808,"byte_end":72884,"line_start":158,"line_end":158,"column_start":1,"column_end":77}},{"value":"/ as above, but let's assign their numeric month values:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72885,"byte_end":72943,"line_start":159,"line_end":159,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72944,"byte_end":72947,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72948,"byte_end":72961,"line_start":161,"line_end":161,"column_start":1,"column_end":14}},{"value":"/ jan,1","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72962,"byte_end":72971,"line_start":162,"line_end":162,"column_start":1,"column_end":10}},{"value":"/ feb,2","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72972,"byte_end":72981,"line_start":163,"line_end":163,"column_start":1,"column_end":10}},{"value":"/ mar,3","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72982,"byte_end":72991,"line_start":164,"line_end":164,"column_start":1,"column_end":10}},{"value":"/ apr,4","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":72992,"byte_end":73001,"line_start":165,"line_end":165,"column_start":1,"column_end":10}},{"value":"/ may,5","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73002,"byte_end":73011,"line_start":166,"line_end":166,"column_start":1,"column_end":10}},{"value":"/ jun,6","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73012,"byte_end":73021,"line_start":167,"line_end":167,"column_start":1,"column_end":10}},{"value":"/ jul,7","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73022,"byte_end":73031,"line_start":168,"line_end":168,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73032,"byte_end":73039,"line_start":169,"line_end":169,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73040,"byte_end":73043,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ The corresponding transducer looks very similar to the automaton above,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73044,"byte_end":73119,"line_start":171,"line_end":171,"column_start":1,"column_end":76}},{"value":"/ except outputs have been added to some of the transitions:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73120,"byte_end":73182,"line_start":172,"line_end":172,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73183,"byte_end":73186,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ ![finite state transducer](http://burntsushi.net/stuff/months-map.png)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73187,"byte_end":73261,"line_start":174,"line_end":174,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73262,"byte_end":73265,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ All of the operations with a transducer are the same as described above","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73266,"byte_end":73341,"line_start":176,"line_end":176,"column_start":1,"column_end":76}},{"value":"/ for automatons. Additionally, the same compression techniques are used:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73342,"byte_end":73417,"line_start":177,"line_end":177,"column_start":1,"column_end":76}},{"value":"/ common prefixes and suffixes in keys are exploited.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73418,"byte_end":73473,"line_start":178,"line_end":178,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73474,"byte_end":73477,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ The key difference is that some transitions have been given an output.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73478,"byte_end":73552,"line_start":180,"line_end":180,"column_start":1,"column_end":75}},{"value":"/ As one follows input transitions, one must sum the outputs as they","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73553,"byte_end":73623,"line_start":181,"line_end":181,"column_start":1,"column_end":71}},{"value":"/ are seen. (A transition with no output represents the additive identity,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73624,"byte_end":73700,"line_start":182,"line_end":182,"column_start":1,"column_end":77}},{"value":"/ or `0` in this case.) For example, when looking up `feb`, the transition","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73701,"byte_end":73777,"line_start":183,"line_end":183,"column_start":1,"column_end":77}},{"value":"/ `f` has output `2`, the transition `e` has output `0`, and the transition","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73778,"byte_end":73855,"line_start":184,"line_end":184,"column_start":1,"column_end":78}},{"value":"/ `b` also has output `0`. The sum of these is `2`, which is exactly the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73856,"byte_end":73930,"line_start":185,"line_end":185,"column_start":1,"column_end":75}},{"value":"/ value we associated with `feb`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73931,"byte_end":73966,"line_start":186,"line_end":186,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73967,"byte_end":73970,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ For another more interesting example, consider `jul`. The `j` transition","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":73971,"byte_end":74047,"line_start":188,"line_end":188,"column_start":1,"column_end":77}},{"value":"/ has output `1`, the `u` transition has output `5` and the `l` transition","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":74048,"byte_end":74124,"line_start":189,"line_end":189,"column_start":1,"column_end":77}},{"value":"/ has output `1`. Summing these together gets us `7`, which is again the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":74125,"byte_end":74199,"line_start":190,"line_end":190,"column_start":1,"column_end":75}},{"value":"/ correct value associated with `jul`. Notice that if we instead looked up","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":74200,"byte_end":74276,"line_start":191,"line_end":191,"column_start":1,"column_end":77}},{"value":"/ the `jun` key, then the `n` transition would be followed instead of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":74277,"byte_end":74352,"line_start":192,"line_end":192,"column_start":1,"column_end":76}},{"value":"/ `l` transition, which has no output. Therefore, the `jun` key equals","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":74353,"byte_end":74425,"line_start":193,"line_end":193,"column_start":1,"column_end":73}},{"value":"/ `1+5+0=6`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":74426,"byte_end":74440,"line_start":194,"line_end":194,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":74441,"byte_end":74444,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ The trick to transducers is that there exists a unique path through the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":74445,"byte_end":74520,"line_start":196,"line_end":196,"column_start":1,"column_end":76}},{"value":"/ transducer for every key, and its outputs are stored appropriately along","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":74521,"byte_end":74597,"line_start":197,"line_end":197,"column_start":1,"column_end":77}},{"value":"/ this path such that the correct value is returned when they are all summed","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":74598,"byte_end":74676,"line_start":198,"line_end":198,"column_start":1,"column_end":79}},{"value":"/ together. This process also enables the data that makes up each value to be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":74677,"byte_end":74756,"line_start":199,"line_end":199,"column_start":1,"column_end":80}},{"value":"/ shared across many values in the transducer in exactly the same way that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":74757,"byte_end":74833,"line_start":200,"line_end":200,"column_start":1,"column_end":77}},{"value":"/ keys are shared. This is yet another form of compression!","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":74834,"byte_end":74895,"line_start":201,"line_end":201,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":74896,"byte_end":74899,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ # Bonus: a billion strings","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":74900,"byte_end":74930,"line_start":203,"line_end":203,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":74931,"byte_end":74934,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ The amount of compression one can get from automata can be absolutely","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":74935,"byte_end":75008,"line_start":205,"line_end":205,"column_start":1,"column_end":74}},{"value":"/ ridiuclous. Consider the particular case of storing all billion strings","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75009,"byte_end":75084,"line_start":206,"line_end":206,"column_start":1,"column_end":76}},{"value":"/ in the range `0000000001-1000000000`, e.g.,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75085,"byte_end":75132,"line_start":207,"line_end":207,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75133,"byte_end":75136,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75137,"byte_end":75150,"line_start":209,"line_end":209,"column_start":1,"column_end":14}},{"value":"/ 0000000001","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75151,"byte_end":75165,"line_start":210,"line_end":210,"column_start":1,"column_end":15}},{"value":"/ 0000000002","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75166,"byte_end":75180,"line_start":211,"line_end":211,"column_start":1,"column_end":15}},{"value":"/ ...","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75181,"byte_end":75188,"line_start":212,"line_end":212,"column_start":1,"column_end":8}},{"value":"/ 0000000100","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75189,"byte_end":75203,"line_start":213,"line_end":213,"column_start":1,"column_end":15}},{"value":"/ 0000000101","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75204,"byte_end":75218,"line_start":214,"line_end":214,"column_start":1,"column_end":15}},{"value":"/ ...","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75219,"byte_end":75226,"line_start":215,"line_end":215,"column_start":1,"column_end":8}},{"value":"/ 0999999999","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75227,"byte_end":75241,"line_start":216,"line_end":216,"column_start":1,"column_end":15}},{"value":"/ 1000000000","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75242,"byte_end":75256,"line_start":217,"line_end":217,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75257,"byte_end":75264,"line_start":218,"line_end":218,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75265,"byte_end":75268,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ The corresponding automaton looks like this:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75269,"byte_end":75317,"line_start":220,"line_end":220,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75318,"byte_end":75321,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ ![finite state automaton - one billion strings](http://burntsushi.net/stuff/one-billion.png)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75322,"byte_end":75418,"line_start":222,"line_end":222,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75419,"byte_end":75422,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ Indeed, the on disk size of this automaton is a mere **251 bytes**.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75423,"byte_end":75494,"line_start":224,"line_end":224,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75495,"byte_end":75498,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ Of course, this is a bit of a pathological best case, but it does serve","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75499,"byte_end":75574,"line_start":226,"line_end":226,"column_start":1,"column_end":76}},{"value":"/ to show how good compression can be in the optimal case.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75575,"byte_end":75635,"line_start":227,"line_end":227,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75636,"byte_end":75639,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ Also, check out the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75640,"byte_end":75663,"line_start":229,"line_end":229,"column_start":1,"column_end":24}},{"value":"/ [corresponding transducer](http://burntsushi.net/stuff/one-billion-map.svg)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75664,"byte_end":75743,"line_start":230,"line_end":230,"column_start":1,"column_end":80}},{"value":"/ that maps each string to its integer value. It's a bit bigger, but still","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75744,"byte_end":75820,"line_start":231,"line_end":231,"column_start":1,"column_end":77}},{"value":"/ only takes up **896 bytes** of space on disk. This demonstrates that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75821,"byte_end":75893,"line_start":232,"line_end":232,"column_start":1,"column_end":73}},{"value":"/ output values are also compressible.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75894,"byte_end":75934,"line_start":233,"line_end":233,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75935,"byte_end":75938,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ # Does this crate produce minimal transducers?","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75939,"byte_end":75989,"line_start":235,"line_end":235,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75990,"byte_end":75993,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ For any non-trivial sized set of keys, it is unlikely that this crate will","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":75994,"byte_end":76072,"line_start":237,"line_end":237,"column_start":1,"column_end":79}},{"value":"/ produce a minimal transducer. As far as this author knows, guaranteeing a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76073,"byte_end":76150,"line_start":238,"line_end":238,"column_start":1,"column_end":78}},{"value":"/ minimal transducer requires working memory proportional to the number of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76151,"byte_end":76227,"line_start":239,"line_end":239,"column_start":1,"column_end":77}},{"value":"/ states. This can be quite costly and is anathema to the main design goal of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76228,"byte_end":76307,"line_start":240,"line_end":240,"column_start":1,"column_end":80}},{"value":"/ this crate: provide the ability to work with gigantic sets of strings with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76308,"byte_end":76386,"line_start":241,"line_end":241,"column_start":1,"column_end":79}},{"value":"/ constant memory overhead.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76387,"byte_end":76416,"line_start":242,"line_end":242,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76417,"byte_end":76420,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ Instead, construction of a finite state transducer uses a cache of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76421,"byte_end":76491,"line_start":244,"line_end":244,"column_start":1,"column_end":71}},{"value":"/ states. More frequently used states are cached and reused, which provides","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76492,"byte_end":76569,"line_start":245,"line_end":245,"column_start":1,"column_end":78}},{"value":"/ reasonably good compression ratios. (No comprehensive benchmarks exist to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76570,"byte_end":76647,"line_start":246,"line_end":246,"column_start":1,"column_end":78}},{"value":"/ back up this claim.)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76648,"byte_end":76672,"line_start":247,"line_end":247,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76673,"byte_end":76676,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ It is possible that this crate may expose a way to guarantee minimal","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76677,"byte_end":76749,"line_start":249,"line_end":249,"column_start":1,"column_end":73}},{"value":"/ construction of transducers at the expense of exorbitant memory","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76750,"byte_end":76817,"line_start":250,"line_end":250,"column_start":1,"column_end":68}},{"value":"/ requirements.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76818,"byte_end":76835,"line_start":251,"line_end":251,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76836,"byte_end":76839,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ # Bibliography","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76840,"byte_end":76858,"line_start":253,"line_end":253,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76859,"byte_end":76862,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ I initially got the idea to use finite state tranducers to represent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76863,"byte_end":76935,"line_start":255,"line_end":255,"column_start":1,"column_end":73}},{"value":"/ ordered sets/maps from","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76936,"byte_end":76962,"line_start":256,"line_end":256,"column_start":1,"column_end":27}},{"value":"/ [Michael","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76963,"byte_end":76975,"line_start":257,"line_end":257,"column_start":1,"column_end":13}},{"value":"/ McCandless'](http://blog.mikemccandless.com/2010/12/using-finite-state-transducers-in.html)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":76976,"byte_end":77071,"line_start":258,"line_end":258,"column_start":1,"column_end":96}},{"value":"/ work on incorporating transducers in Lucene.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":77072,"byte_end":77120,"line_start":259,"line_end":259,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":77121,"byte_end":77124,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ However, my work would also not have been possible without the hard work","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":77125,"byte_end":77201,"line_start":261,"line_end":261,"column_start":1,"column_end":77}},{"value":"/ of many academics, especially","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":77202,"byte_end":77235,"line_start":262,"line_end":262,"column_start":1,"column_end":34}},{"value":"/ [Jan Daciuk](http://galaxy.eti.pg.gda.pl/katedry/kiw/pracownicy/Jan.Daciuk/personal/).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":77236,"byte_end":77326,"line_start":263,"line_end":263,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":77327,"byte_end":77330,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ * [Incremental construction of minimal acyclic finite-state automata](http://www.mitpressjournals.org/doi/pdfplus/10.1162/089120100561601)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":77331,"byte_end":77473,"line_start":265,"line_end":265,"column_start":1,"column_end":143}},{"value":"/   (Section 3 provides a decent overview of the algorithm used to construct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":77474,"byte_end":77552,"line_start":266,"line_end":266,"column_start":1,"column_end":79}},{"value":"/   transducers in this crate, assuming all outputs are `0`.)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":77553,"byte_end":77616,"line_start":267,"line_end":267,"column_start":1,"column_end":64}},{"value":"/ * [Direct Construction of Minimal Acyclic Subsequential Transducers](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.3698&rep=rep1&type=pdf)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":77617,"byte_end":77773,"line_start":268,"line_end":268,"column_start":1,"column_end":157}},{"value":"/   (The whole thing. The proof is dense but illuminating. The algorithm at","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":77774,"byte_end":77851,"line_start":269,"line_end":269,"column_start":1,"column_end":78}},{"value":"/   the end is the money shot, namely, it incorporates output values.)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":77852,"byte_end":77924,"line_start":270,"line_end":270,"column_start":1,"column_end":73}},{"value":"/ * [Experiments with Automata Compression](http://www.researchgate.net/profile/Jii_Dvorsky/publication/221568039_Word_Random_Access_Compression/links/0c96052c095630d5b3000000.pdf#page=116), [Smaller Representation of Finite State Automata](http://www.cs.put.poznan.pl/dweiss/site/publications/download/fsacomp.pdf)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":77925,"byte_end":78242,"line_start":271,"line_end":271,"column_start":1,"column_end":318}},{"value":"/   (various compression techniques for representing states/transitions)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":78243,"byte_end":78317,"line_start":272,"line_end":272,"column_start":1,"column_end":75}},{"value":"/ * [Jan Daciuk's dissertation](http://www.pg.gda.pl/~jandac/thesis.ps.gz)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":78318,"byte_end":78394,"line_start":273,"line_end":273,"column_start":1,"column_end":77}},{"value":"/   (excellent for in depth overview)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":78395,"byte_end":78434,"line_start":274,"line_end":274,"column_start":1,"column_end":40}},{"value":"/ * [Comparison of Construction Algorithms for Minimal, Acyclic, Deterministic, Finite-State Automata from Sets of Strings](http://www.cs.mun.ca/~harold/Courses/Old/CS4750/Diary/q3p2qx4lv71m5vew.pdf)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":78435,"byte_end":78636,"line_start":275,"line_end":275,"column_start":1,"column_end":202}},{"value":"/   (excellent for surface level overview)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":78637,"byte_end":78681,"line_start":276,"line_end":276,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80428,"byte_end":80438,"line_start":322,"line_end":322,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<Fst>::from_bytes","value":"pub fn from_bytes(Vec<u8>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a transducer from its representation as a raw byte sequence.","sig":null,"attributes":[{"value":"/ Creates a transducer from its representation as a raw byte sequence.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":79968,"byte_end":80040,"line_start":313,"line_end":313,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80045,"byte_end":80048,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ Note that this operation is very cheap (no allocations and no copies).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80053,"byte_end":80127,"line_start":315,"line_end":315,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80132,"byte_end":80135,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ The fst must have been written with a compatible finite state","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80140,"byte_end":80205,"line_start":317,"line_end":317,"column_start":5,"column_end":70}},{"value":"/ transducer builder (`Builder` qualifies). If the format is invalid or","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80210,"byte_end":80283,"line_start":318,"line_end":318,"column_start":5,"column_end":78}},{"value":"/ if there is a mismatch between the API version of this library and the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80288,"byte_end":80362,"line_start":319,"line_end":319,"column_start":5,"column_end":79}},{"value":"/ fst, then an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80367,"byte_end":80402,"line_start":320,"line_end":320,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80407,"byte_end":80416,"line_start":321,"line_end":321,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80751,"byte_end":80768,"line_start":331,"line_end":331,"column_start":12,"column_end":29},"name":"from_static_slice","qualname":"<Fst>::from_static_slice","value":"pub fn from_static_slice(&'static [u8]) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a transducer from its representation as a raw byte sequence.","sig":null,"attributes":[{"value":"/ Creates a transducer from its representation as a raw byte sequence.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80534,"byte_end":80606,"line_start":326,"line_end":326,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80611,"byte_end":80614,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ This accepts a static byte slice, which may be useful if the Fst","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80619,"byte_end":80687,"line_start":328,"line_end":328,"column_start":5,"column_end":73}},{"value":"/ is embedded into source code.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80692,"byte_end":80725,"line_start":329,"line_end":329,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80730,"byte_end":80739,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":81089,"byte_end":81106,"line_start":341,"line_end":341,"column_start":12,"column_end":29},"name":"from_shared_bytes","qualname":"<Fst>::from_shared_bytes","value":"pub fn from_shared_bytes(Arc<Vec<u8>>, usize, usize) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a transducer from a shared vector at the given offset and\n length.","sig":null,"attributes":[{"value":"/ Creates a transducer from a shared vector at the given offset and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80873,"byte_end":80942,"line_start":335,"line_end":335,"column_start":5,"column_end":74}},{"value":"/ length.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80947,"byte_end":80958,"line_start":336,"line_end":336,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80963,"byte_end":80966,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ This permits creating multiple transducers from a single region of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":80971,"byte_end":81041,"line_start":338,"line_end":338,"column_start":5,"column_end":75}},{"value":"/ owned memory.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":81046,"byte_end":81063,"line_start":339,"line_end":339,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":81068,"byte_end":81077,"line_start":340,"line_end":340,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":84110,"byte_end":84113,"line_start":411,"line_end":411,"column_start":12,"column_end":15},"name":"get","qualname":"<Fst>::get","value":"pub fn get<B: AsRef<[u8]>>(&Self, B) -> Option<Output>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value associated with a key.","sig":null,"attributes":[{"value":"/ Retrieves the value associated with a key.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":83963,"byte_end":84009,"line_start":407,"line_end":407,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":84014,"byte_end":84017,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ If the key does not exist, then `None` is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":84022,"byte_end":84077,"line_start":409,"line_end":409,"column_start":5,"column_end":60}},{"value":"inline(never)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":84082,"byte_end":84098,"line_start":410,"line_end":410,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":84759,"byte_end":84771,"line_start":432,"line_end":432,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<Fst>::contains_key","value":"pub fn contains_key<B: AsRef<[u8]>>(&Self, B) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given key is in this FST.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if the given key is in this FST.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":84686,"byte_end":84747,"line_start":431,"line_end":431,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":85203,"byte_end":85209,"line_start":446,"line_end":446,"column_start":12,"column_end":18},"name":"stream","qualname":"<Fst>::stream","value":"pub fn stream(&Self) -> Stream","parent":null,"children":[],"decl_id":null,"docs":" Return a lexicographically ordered stream of all key-value pairs in\n this fst.\n","sig":null,"attributes":[{"value":"/ Return a lexicographically ordered stream of all key-value pairs in","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":85088,"byte_end":85159,"line_start":443,"line_end":443,"column_start":5,"column_end":76}},{"value":"/ this fst.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":85164,"byte_end":85177,"line_start":444,"line_end":444,"column_start":5,"column_end":18}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":85182,"byte_end":85191,"line_start":445,"line_end":445,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":85492,"byte_end":85497,"line_start":455,"line_end":455,"column_start":12,"column_end":17},"name":"range","qualname":"<Fst>::range","value":"pub fn range(&Self) -> StreamBuilder","parent":null,"children":[],"decl_id":null,"docs":" Return a builder for range queries.","sig":null,"attributes":[{"value":"/ Return a builder for range queries.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":85300,"byte_end":85339,"line_start":450,"line_end":450,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":85344,"byte_end":85347,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ A range query returns a subset of key-value pairs in this fst in a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":85352,"byte_end":85422,"line_start":452,"line_end":452,"column_start":5,"column_end":75}},{"value":"/ range given in lexicographic order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":85427,"byte_end":85466,"line_start":453,"line_end":453,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":85471,"byte_end":85480,"line_start":454,"line_end":454,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":85643,"byte_end":85649,"line_start":460,"line_end":460,"column_start":12,"column_end":18},"name":"search","qualname":"<Fst>::search","value":"pub fn search<A: Automaton>(&Self, A) -> StreamBuilder<, A>","parent":null,"children":[],"decl_id":null,"docs":" Executes an automaton on the keys of this map.\n","sig":null,"attributes":[{"value":"/ Executes an automaton on the keys of this map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":85581,"byte_end":85631,"line_start":459,"line_end":459,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":85819,"byte_end":85822,"line_start":466,"line_end":466,"column_start":12,"column_end":15},"name":"len","qualname":"<Fst>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of keys in this fst.\n","sig":null,"attributes":[{"value":"/ Returns the number of keys in this fst.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":85750,"byte_end":85793,"line_start":464,"line_end":464,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":85798,"byte_end":85807,"line_start":465,"line_end":465,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":85948,"byte_end":85956,"line_start":472,"line_end":472,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Fst>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this fst has no keys.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this fst has no keys.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":85869,"byte_end":85922,"line_start":470,"line_end":470,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":85927,"byte_end":85936,"line_start":471,"line_end":471,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":86082,"byte_end":86086,"line_start":478,"line_end":478,"column_start":12,"column_end":16},"name":"size","qualname":"<Fst>::size","value":"pub fn size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes used by this fst.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes used by this fst.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":86007,"byte_end":86056,"line_start":476,"line_end":476,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":86061,"byte_end":86070,"line_start":477,"line_end":477,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":86536,"byte_end":86538,"line_start":489,"line_end":489,"column_start":12,"column_end":14},"name":"op","qualname":"<Fst>::op","value":"pub fn op(&Self) -> OpBuilder","parent":null,"children":[],"decl_id":null,"docs":" Creates a new fst operation with this fst added to it.","sig":null,"attributes":[{"value":"/ Creates a new fst operation with this fst added to it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":86140,"byte_end":86198,"line_start":482,"line_end":482,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":86203,"byte_end":86206,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ The `OpBuilder` type can be used to add additional fst streams","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":86211,"byte_end":86277,"line_start":484,"line_end":484,"column_start":5,"column_end":71}},{"value":"/ and perform set operations like union, intersection, difference and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":86282,"byte_end":86353,"line_start":485,"line_end":485,"column_start":5,"column_end":76}},{"value":"/ symmetric difference on the keys of the fst. These set operations also","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":86358,"byte_end":86432,"line_start":486,"line_end":486,"column_start":5,"column_end":79}},{"value":"/ allow one to specify how conflicting values are merged in the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":86437,"byte_end":86510,"line_start":487,"line_end":487,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":86515,"byte_end":86524,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":851},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":86826,"byte_end":86837,"line_start":498,"line_end":498,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<Fst>::is_disjoint","value":"pub fn is_disjoint<'f, I, S>(&Self, I) -> bool where\nI: for<'a> IntoStreamer<Into = S, Item = S>, S: 'f + for<'a> Streamer<Item =\n(&'a [u8], Output)>","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the `self` fst is disjoint with the fst\n `stream`.","sig":null,"attributes":[{"value":"/ Returns true if and only if the `self` fst is disjoint with the fst","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":86607,"byte_end":86678,"line_start":493,"line_end":493,"column_start":5,"column_end":76}},{"value":"/ `stream`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":86683,"byte_end":86696,"line_start":494,"line_end":494,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":86701,"byte_end":86704,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ `stream` must be a lexicographically ordered sequence of byte strings","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":86709,"byte_end":86782,"line_start":496,"line_end":496,"column_start":5,"column_end":78}},{"value":"/ with associated values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":86787,"byte_end":86814,"line_start":497,"line_end":497,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":87318,"byte_end":87327,"line_start":509,"line_end":509,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<Fst>::is_subset","value":"pub fn is_subset<'f, I, S>(&Self, I) -> bool where\nI: for<'a> IntoStreamer<Into = S, Item = S>, S: 'f + for<'a> Streamer<Item =\n(&'a [u8], Output)>","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the `self` fst is a subset of the fst\n `stream`.","sig":null,"attributes":[{"value":"/ Returns true if and only if the `self` fst is a subset of the fst","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":87101,"byte_end":87170,"line_start":504,"line_end":504,"column_start":5,"column_end":74}},{"value":"/ `stream`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":87175,"byte_end":87188,"line_start":505,"line_end":505,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":87193,"byte_end":87196,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ `stream` must be a lexicographically ordered sequence of byte strings","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":87201,"byte_end":87274,"line_start":507,"line_end":507,"column_start":5,"column_end":78}},{"value":"/ with associated values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":87279,"byte_end":87306,"line_start":508,"line_end":508,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":87936,"byte_end":87947,"line_start":525,"line_end":525,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<Fst>::is_superset","value":"pub fn is_superset<'f, I, S>(&Self, I) -> bool where\nI: for<'a> IntoStreamer<Into = S, Item = S>, S: 'f + for<'a> Streamer<Item =\n(&'a [u8], Output)>","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the `self` fst is a superset of the fst\n `stream`.","sig":null,"attributes":[{"value":"/ Returns true if and only if the `self` fst is a superset of the fst","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":87717,"byte_end":87788,"line_start":520,"line_end":520,"column_start":5,"column_end":76}},{"value":"/ `stream`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":87793,"byte_end":87806,"line_start":521,"line_end":521,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":87811,"byte_end":87814,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ `stream` must be a lexicographically ordered sequence of byte strings","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":87819,"byte_end":87892,"line_start":523,"line_end":523,"column_start":5,"column_end":78}},{"value":"/ with associated values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":87897,"byte_end":87924,"line_start":524,"line_end":524,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":88631,"byte_end":88639,"line_start":544,"line_end":544,"column_start":12,"column_end":20},"name":"fst_type","qualname":"<Fst>::fst_type","value":"pub fn fst_type(&Self) -> FstType","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying type of this fst.","sig":null,"attributes":[{"value":"/ Returns the underlying type of this fst.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":88330,"byte_end":88374,"line_start":536,"line_end":536,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":88379,"byte_end":88382,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ FstType is a convention used to indicate the type of the underlying","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":88387,"byte_end":88458,"line_start":538,"line_end":538,"column_start":5,"column_end":76}},{"value":"/ transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":88463,"byte_end":88478,"line_start":539,"line_end":539,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":88483,"byte_end":88486,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ This crate reserves the range 0-255 (inclusive) but currently leaves","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":88491,"byte_end":88563,"line_start":541,"line_end":541,"column_start":5,"column_end":77}},{"value":"/ the meaning of 0-255 unspecified.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":88568,"byte_end":88605,"line_start":542,"line_end":542,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":88610,"byte_end":88619,"line_start":543,"line_end":543,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":88759,"byte_end":88763,"line_start":550,"line_end":550,"column_start":12,"column_end":16},"name":"root","qualname":"<Fst>::root","value":"pub fn root(&Self) -> Node","parent":null,"children":[],"decl_id":null,"docs":" Returns the root node of this fst.\n","sig":null,"attributes":[{"value":"/ Returns the root node of this fst.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":88687,"byte_end":88725,"line_start":548,"line_end":548,"column_start":5,"column_end":43}},{"value":"inline(always)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":88730,"byte_end":88747,"line_start":549,"line_end":549,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":88982,"byte_end":88986,"line_start":558,"line_end":558,"column_start":12,"column_end":16},"name":"node","qualname":"<Fst>::node","value":"pub fn node(&Self, CompiledAddr) -> Node","parent":null,"children":[],"decl_id":null,"docs":" Returns the node at the given address.","sig":null,"attributes":[{"value":"/ Returns the node at the given address.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":88826,"byte_end":88868,"line_start":554,"line_end":554,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":88873,"byte_end":88876,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ Node addresses can be obtained by reading transitions on `Node` values.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":88881,"byte_end":88956,"line_start":556,"line_end":556,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":88961,"byte_end":88970,"line_start":557,"line_end":557,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":89164,"byte_end":89170,"line_start":564,"line_end":564,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<Fst>::to_vec","value":"pub fn to_vec(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the binary contents of this FST.\n","sig":null,"attributes":[{"value":"/ Returns a copy of the binary contents of this FST.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":89084,"byte_end":89138,"line_start":562,"line_end":562,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":89143,"byte_end":89152,"line_start":563,"line_end":563,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":89299,"byte_end":89307,"line_start":570,"line_end":570,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Fst>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the binary contents of this FST.\n","sig":null,"attributes":[{"value":"/ Returns the binary contents of this FST.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":89229,"byte_end":89273,"line_start":568,"line_end":568,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":89278,"byte_end":89287,"line_start":569,"line_end":569,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":881},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":90275,"byte_end":90288,"line_start":606,"line_end":606,"column_start":12,"column_end":25},"name":"StreamBuilder","qualname":"::raw::StreamBuilder","value":"StreamBuilder {  }","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887}],"decl_id":null,"docs":" A builder for constructing range queries on streams.","sig":null,"attributes":[{"value":"/ A builder for constructing range queries on streams.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":89790,"byte_end":89846,"line_start":594,"line_end":594,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":89847,"byte_end":89850,"line_start":595,"line_end":595,"column_start":1,"column_end":4}},{"value":"/ Once all bounds are set, one should call `into_stream` to get a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":89851,"byte_end":89918,"line_start":596,"line_end":596,"column_start":1,"column_end":68}},{"value":"/ `Stream`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":89919,"byte_end":89932,"line_start":597,"line_end":597,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":89933,"byte_end":89936,"line_start":598,"line_end":598,"column_start":1,"column_end":4}},{"value":"/ Bounds are not additive. That is, if `ge` is called twice on the same","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":89937,"byte_end":90010,"line_start":599,"line_end":599,"column_start":1,"column_end":74}},{"value":"/ builder, then the second setting wins.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":90011,"byte_end":90053,"line_start":600,"line_end":600,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":90054,"byte_end":90057,"line_start":601,"line_end":601,"column_start":1,"column_end":4}},{"value":"/ The `A` type parameter corresponds to an optional automaton to filter","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":90058,"byte_end":90131,"line_start":602,"line_end":602,"column_start":1,"column_end":74}},{"value":"/ the stream. By default, no filtering is done.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":90132,"byte_end":90181,"line_start":603,"line_end":603,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":90182,"byte_end":90185,"line_start":604,"line_end":604,"column_start":1,"column_end":4}},{"value":"/ The `'f` lifetime parameter refers to the lifetime of the underlying fst.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":90186,"byte_end":90263,"line_start":605,"line_end":605,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":90680,"byte_end":90682,"line_start":624,"line_end":624,"column_start":12,"column_end":14},"name":"ge","qualname":"<StreamBuilder>::ge","value":"pub fn ge<T: AsRef<[u8]>>(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify a greater-than-or-equal-to bound.\n","sig":null,"attributes":[{"value":"/ Specify a greater-than-or-equal-to bound.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":90623,"byte_end":90668,"line_start":623,"line_end":623,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":90861,"byte_end":90863,"line_start":630,"line_end":630,"column_start":12,"column_end":14},"name":"gt","qualname":"<StreamBuilder>::gt","value":"pub fn gt<T: AsRef<[u8]>>(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify a greater-than bound.\n","sig":null,"attributes":[{"value":"/ Specify a greater-than bound.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":90816,"byte_end":90849,"line_start":629,"line_end":629,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":91051,"byte_end":91053,"line_start":636,"line_end":636,"column_start":12,"column_end":14},"name":"le","qualname":"<StreamBuilder>::le","value":"pub fn le<T: AsRef<[u8]>>(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify a less-than-or-equal-to bound.\n","sig":null,"attributes":[{"value":"/ Specify a less-than-or-equal-to bound.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":90997,"byte_end":91039,"line_start":635,"line_end":635,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":91229,"byte_end":91231,"line_start":642,"line_end":642,"column_start":12,"column_end":14},"name":"lt","qualname":"<StreamBuilder>::lt","value":"pub fn lt<T: AsRef<[u8]>>(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify a less-than bound.\n","sig":null,"attributes":[{"value":"/ Specify a less-than bound.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":91187,"byte_end":91217,"line_start":641,"line_end":641,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":911},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":92591,"byte_end":92597,"line_start":695,"line_end":695,"column_start":12,"column_end":18},"name":"Stream","qualname":"::raw::Stream","value":"Stream {  }","parent":null,"children":[{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919}],"decl_id":null,"docs":" A lexicographically ordered stream of key-value pairs from an fst.","sig":null,"attributes":[{"value":"/ A lexicographically ordered stream of key-value pairs from an fst.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":92299,"byte_end":92369,"line_start":689,"line_end":689,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":92370,"byte_end":92373,"line_start":690,"line_end":690,"column_start":1,"column_end":4}},{"value":"/ The `A` type parameter corresponds to an optional automaton to filter","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":92374,"byte_end":92447,"line_start":691,"line_end":691,"column_start":1,"column_end":74}},{"value":"/ the stream. By default, no filtering is done.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":92448,"byte_end":92497,"line_start":692,"line_end":692,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":92498,"byte_end":92501,"line_start":693,"line_end":693,"column_start":1,"column_end":4}},{"value":"/ The `'f` lifetime parameter refers to the lifetime of the underlying fst.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":92502,"byte_end":92579,"line_start":694,"line_end":694,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":97023,"byte_end":97036,"line_start":819,"line_end":819,"column_start":12,"column_end":25},"name":"into_byte_vec","qualname":"<Stream>::into_byte_vec","value":"pub fn into_byte_vec(Self) -> Vec<(Vec<u8>, u64)>","parent":null,"children":[],"decl_id":null,"docs":" Convert this stream into a vector of byte strings and outputs.","sig":null,"attributes":[{"value":"/ Convert this stream into a vector of byte strings and outputs.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":96860,"byte_end":96926,"line_start":816,"line_end":816,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":96931,"byte_end":96934,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ Note that this creates a new allocation for every key in the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":96939,"byte_end":97011,"line_start":818,"line_end":818,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":97527,"byte_end":97539,"line_start":833,"line_end":833,"column_start":12,"column_end":24},"name":"into_str_vec","qualname":"<Stream>::into_str_vec","value":"pub fn into_str_vec(Self) -> Result<Vec<(String, u64)>>","parent":null,"children":[],"decl_id":null,"docs":" Convert this stream into a vector of Unicode strings and outputs.","sig":null,"attributes":[{"value":"/ Convert this stream into a vector of Unicode strings and outputs.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":97226,"byte_end":97295,"line_start":827,"line_end":827,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":97300,"byte_end":97303,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ If any key is not valid UTF-8, then iteration on the stream is stopped","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":97308,"byte_end":97382,"line_start":829,"line_end":829,"column_start":5,"column_end":79}},{"value":"/ and a UTF-8 decoding error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":97387,"byte_end":97430,"line_start":830,"line_end":830,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":97435,"byte_end":97438,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ Note that this creates a new allocation for every key in the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":97443,"byte_end":97515,"line_start":832,"line_end":832,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":97955,"byte_end":97969,"line_start":845,"line_end":845,"column_start":12,"column_end":26},"name":"into_byte_keys","qualname":"<Stream>::into_byte_keys","value":"pub fn into_byte_keys(Self) -> Vec<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Convert this stream into a vector of byte strings.","sig":null,"attributes":[{"value":"/ Convert this stream into a vector of byte strings.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":97804,"byte_end":97858,"line_start":842,"line_end":842,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":97863,"byte_end":97866,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ Note that this creates a new allocation for every key in the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":97871,"byte_end":97943,"line_start":844,"line_end":844,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":98428,"byte_end":98441,"line_start":859,"line_end":859,"column_start":12,"column_end":25},"name":"into_str_keys","qualname":"<Stream>::into_str_keys","value":"pub fn into_str_keys(Self) -> Result<Vec<String>>","parent":null,"children":[],"decl_id":null,"docs":" Convert this stream into a vector of Unicode strings.","sig":null,"attributes":[{"value":"/ Convert this stream into a vector of Unicode strings.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":98139,"byte_end":98196,"line_start":853,"line_end":853,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":98201,"byte_end":98204,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ If any key is not valid UTF-8, then iteration on the stream is stopped","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":98209,"byte_end":98283,"line_start":855,"line_end":855,"column_start":5,"column_end":79}},{"value":"/ and a UTF-8 decoding error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":98288,"byte_end":98331,"line_start":856,"line_end":856,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":98336,"byte_end":98339,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ Note that this creates a new allocation for every key in the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":98344,"byte_end":98416,"line_start":858,"line_end":858,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":98747,"byte_end":98758,"line_start":869,"line_end":869,"column_start":12,"column_end":23},"name":"into_values","qualname":"<Stream>::into_values","value":"pub fn into_values(Self) -> Vec<u64>","parent":null,"children":[],"decl_id":null,"docs":" Convert this stream into a vector of outputs.\n","sig":null,"attributes":[{"value":"/ Convert this stream into a vector of outputs.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":98686,"byte_end":98735,"line_start":868,"line_end":868,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1502},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101441,"byte_end":101447,"line_start":941,"line_end":941,"column_start":12,"column_end":18},"name":"Output","qualname":"::raw::Output","value":"","parent":null,"children":[],"decl_id":null,"docs":" An output is a value that is associated with a key in a finite state\n transducer.","sig":null,"attributes":[{"value":"/ An output is a value that is associated with a key in a finite state","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":100660,"byte_end":100732,"line_start":927,"line_end":927,"column_start":1,"column_end":73}},{"value":"/ transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":100733,"byte_end":100748,"line_start":928,"line_end":928,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":100749,"byte_end":100752,"line_start":929,"line_end":929,"column_start":1,"column_end":4}},{"value":"/ Note that outputs must satisfy an algebra. Namely, it must have an additive","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":100753,"byte_end":100832,"line_start":930,"line_end":930,"column_start":1,"column_end":80}},{"value":"/ identity and the following binary operations defined: `prefix`,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":100833,"byte_end":100900,"line_start":931,"line_end":931,"column_start":1,"column_end":68}},{"value":"/ `concatenation` and `subtraction`. `prefix` and `concatenation` are","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":100901,"byte_end":100972,"line_start":932,"line_end":932,"column_start":1,"column_end":72}},{"value":"/ commutative while `subtraction` is not. `subtraction` is only defined on","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":100973,"byte_end":101049,"line_start":933,"line_end":933,"column_start":1,"column_end":77}},{"value":"/ pairs of operands where the first operand is greater than or equal to the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101050,"byte_end":101127,"line_start":934,"line_end":934,"column_start":1,"column_end":78}},{"value":"/ second operand.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101128,"byte_end":101147,"line_start":935,"line_end":935,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101148,"byte_end":101151,"line_start":936,"line_end":936,"column_start":1,"column_end":4}},{"value":"/ Currently, output values must be `u64`. However, in theory, an output value","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101152,"byte_end":101231,"line_start":937,"line_end":937,"column_start":1,"column_end":80}},{"value":"/ can be anything that satisfies the above algebra. Future versions of this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101232,"byte_end":101309,"line_start":938,"line_end":938,"column_start":1,"column_end":78}},{"value":"/ crate may make outputs generic on this algebra.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101310,"byte_end":101361,"line_start":939,"line_end":939,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101536,"byte_end":101539,"line_start":946,"line_end":946,"column_start":12,"column_end":15},"name":"new","qualname":"<Output>::new","value":"pub fn new(u64) -> Output","parent":null,"children":[],"decl_id":null,"docs":" Create a new output from a `u64`.\n","sig":null,"attributes":[{"value":"/ Create a new output from a `u64`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101473,"byte_end":101510,"line_start":944,"line_end":944,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101515,"byte_end":101524,"line_start":945,"line_end":945,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101640,"byte_end":101644,"line_start":952,"line_end":952,"column_start":12,"column_end":16},"name":"zero","qualname":"<Output>::zero","value":"pub fn zero() -> Output","parent":null,"children":[],"decl_id":null,"docs":" Create a zero output.\n","sig":null,"attributes":[{"value":"/ Create a zero output.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101589,"byte_end":101614,"line_start":950,"line_end":950,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101619,"byte_end":101628,"line_start":951,"line_end":951,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101756,"byte_end":101761,"line_start":958,"line_end":958,"column_start":12,"column_end":17},"name":"value","qualname":"<Output>::value","value":"pub fn value(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the value inside this output.\n","sig":null,"attributes":[{"value":"/ Retrieve the value inside this output.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101688,"byte_end":101730,"line_start":956,"line_end":956,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101735,"byte_end":101744,"line_start":957,"line_end":957,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101871,"byte_end":101878,"line_start":964,"line_end":964,"column_start":12,"column_end":19},"name":"is_zero","qualname":"<Output>::is_zero","value":"pub fn is_zero(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this is a zero output.\n","sig":null,"attributes":[{"value":"/ Returns true if this is a zero output.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101803,"byte_end":101845,"line_start":962,"line_end":962,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101850,"byte_end":101859,"line_start":963,"line_end":963,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101998,"byte_end":102004,"line_start":970,"line_end":970,"column_start":12,"column_end":18},"name":"prefix","qualname":"<Output>::prefix","value":"pub fn prefix(Self, Output) -> Output","parent":null,"children":[],"decl_id":null,"docs":" Returns the prefix of this output and `o`.\n","sig":null,"attributes":[{"value":"/ Returns the prefix of this output and `o`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101926,"byte_end":101972,"line_start":968,"line_end":968,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101977,"byte_end":101986,"line_start":969,"line_end":969,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":102162,"byte_end":102165,"line_start":976,"line_end":976,"column_start":12,"column_end":15},"name":"cat","qualname":"<Output>::cat","value":"pub fn cat(Self, Output) -> Output","parent":null,"children":[],"decl_id":null,"docs":" Returns the concatenation of this output and `o`.\n","sig":null,"attributes":[{"value":"/ Returns the concatenation of this output and `o`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":102083,"byte_end":102136,"line_start":974,"line_end":974,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":102141,"byte_end":102150,"line_start":975,"line_end":975,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":102365,"byte_end":102368,"line_start":984,"line_end":984,"column_start":12,"column_end":15},"name":"sub","qualname":"<Output>::sub","value":"pub fn sub(Self, Output) -> Output","parent":null,"children":[],"decl_id":null,"docs":" Returns the subtraction of `o` from this output.","sig":null,"attributes":[{"value":"/ Returns the subtraction of `o` from this output.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":102235,"byte_end":102287,"line_start":980,"line_end":980,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":102292,"byte_end":102295,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ This function panics if `self > o`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":102300,"byte_end":102339,"line_start":982,"line_end":982,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":102344,"byte_end":102353,"line_start":983,"line_end":983,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1528},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":103171,"byte_end":103181,"line_start":1018,"line_end":1018,"column_start":12,"column_end":22},"name":"Transition","qualname":"::raw::Transition","value":"Transition { inp, out, addr }","parent":null,"children":[{"krate":0,"index":1529},{"krate":0,"index":1530},{"krate":0,"index":1531}],"decl_id":null,"docs":" A transition from one note to another.\n","sig":null,"attributes":[{"value":"/ A transition from one note to another.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":103073,"byte_end":103115,"line_start":1016,"line_end":1016,"column_start":1,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":1529},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":103248,"byte_end":103251,"line_start":1020,"line_end":1020,"column_start":9,"column_end":12},"name":"inp","qualname":"::raw::Transition::inp","value":"u8","parent":{"krate":0,"index":1528},"children":[],"decl_id":null,"docs":" The byte input associated with this transition.\n","sig":null,"attributes":[{"value":"/ The byte input associated with this transition.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":103188,"byte_end":103239,"line_start":1019,"line_end":1019,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1530},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":103317,"byte_end":103320,"line_start":1022,"line_end":1022,"column_start":9,"column_end":12},"name":"out","qualname":"::raw::Transition::out","value":"raw::Output","parent":{"krate":0,"index":1528},"children":[],"decl_id":null,"docs":" The output associated with this transition.\n","sig":null,"attributes":[{"value":"/ The output associated with this transition.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":103261,"byte_end":103308,"line_start":1021,"line_end":1021,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1531},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":103402,"byte_end":103406,"line_start":1024,"line_end":1024,"column_start":9,"column_end":13},"name":"addr","qualname":"::raw::Transition::addr","value":"usize","parent":{"krate":0,"index":1528},"children":[],"decl_id":null,"docs":" The address of the node that this transition points to.\n","sig":null,"attributes":[{"value":"/ The address of the node that this transition points to.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":103334,"byte_end":103393,"line_start":1023,"line_end":1023,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":975},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":195243,"byte_end":195246,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"Set","qualname":"::inner_set::Set","value":"","parent":null,"children":[],"decl_id":null,"docs":" Set is a lexicographically ordered set of byte strings.","sig":null,"attributes":[{"value":"/ Set is a lexicographically ordered set of byte strings.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":194209,"byte_end":194268,"line_start":12,"line_end":12,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":194269,"byte_end":194272,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ A `Set` is constructed with the `SetBuilder` type. Alternatively, a `Set`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":194273,"byte_end":194350,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ can be constructed in memory from a lexicographically ordered iterator","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":194351,"byte_end":194425,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ of byte strings (`Set::from_iter`).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":194426,"byte_end":194465,"line_start":16,"line_end":16,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":194466,"byte_end":194469,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ A key feature of `Set` is that it can be serialized to disk compactly. Its","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":194470,"byte_end":194548,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ underlying representation is built such that the `Set` can be memory mapped","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":194549,"byte_end":194628,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ (`Set::from_path`) and searched without necessarily loading the entire","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":194629,"byte_end":194703,"line_start":20,"line_end":20,"column_start":1,"column_end":75}},{"value":"/ set into memory.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":194704,"byte_end":194724,"line_start":21,"line_end":21,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":194725,"byte_end":194728,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ It supports most common operations associated with sets, such as","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":194729,"byte_end":194797,"line_start":23,"line_end":23,"column_start":1,"column_end":69}},{"value":"/ membership, union, intersection, subset/superset, etc. It also supports","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":194798,"byte_end":194873,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/ range queries and automata based searches (e.g. a regular expression).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":194874,"byte_end":194948,"line_start":25,"line_end":25,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":194949,"byte_end":194952,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Sets are represented by a finite state transducer where output values are","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":194953,"byte_end":195030,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/ always zero. As such, sets have the following invariants:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":195031,"byte_end":195092,"line_start":28,"line_end":28,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":195093,"byte_end":195096,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ 1. Once constructed, a `Set` can never be modified.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":195097,"byte_end":195152,"line_start":30,"line_end":30,"column_start":1,"column_end":56}},{"value":"/ 2. Sets must be constructed with lexicographically ordered byte sequences.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":195153,"byte_end":195231,"line_start":31,"line_end":31,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":979},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196479,"byte_end":196489,"line_start":60,"line_end":60,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<Set>::from_bytes","value":"pub fn from_bytes(Vec<u8>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a set from its representation as a raw byte sequence.","sig":null,"attributes":[{"value":"/ Creates a set from its representation as a raw byte sequence.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196023,"byte_end":196088,"line_start":51,"line_end":51,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196093,"byte_end":196096,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Note that this operation is very cheap (no allocations and no copies).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196101,"byte_end":196175,"line_start":53,"line_end":53,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196180,"byte_end":196183,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ The set must have been written with a compatible finite state","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196188,"byte_end":196253,"line_start":55,"line_end":55,"column_start":5,"column_end":70}},{"value":"/ transducer builder (`SetBuilder` qualifies). If the format is invalid","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196258,"byte_end":196331,"line_start":56,"line_end":56,"column_start":5,"column_end":78}},{"value":"/ or if there is a mismatch between the API version of this library","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196336,"byte_end":196405,"line_start":57,"line_end":57,"column_start":5,"column_end":74}},{"value":"/ and the set, then an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196410,"byte_end":196453,"line_start":58,"line_end":58,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196458,"byte_end":196467,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197175,"byte_end":197192,"line_start":82,"line_end":82,"column_start":12,"column_end":29},"name":"from_static_slice","qualname":"<Set>::from_static_slice","value":"pub fn from_static_slice(&'static [u8]) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a set from its representation as a raw byte sequence.","sig":null,"attributes":[{"value":"/ Creates a set from its representation as a raw byte sequence.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196580,"byte_end":196645,"line_start":64,"line_end":64,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196650,"byte_end":196653,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ This accepts a static byte slice, which may be useful if the FST data is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196658,"byte_end":196734,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/ embedded into the program.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196739,"byte_end":196769,"line_start":67,"line_end":67,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196774,"byte_end":196777,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196782,"byte_end":196795,"line_start":69,"line_end":69,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196800,"byte_end":196803,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196808,"byte_end":196821,"line_start":71,"line_end":71,"column_start":5,"column_end":18}},{"value":"/ use fst::Set;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196826,"byte_end":196843,"line_start":72,"line_end":72,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196848,"byte_end":196851,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ // File written from a build script using SetBuilder.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196856,"byte_end":196913,"line_start":74,"line_end":74,"column_start":5,"column_end":62}},{"value":"/ # const IGNORE: &str = stringify! {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196918,"byte_end":196957,"line_start":75,"line_end":75,"column_start":5,"column_end":44}},{"value":"/ static FST: &[u8] = include_bytes!(concat!(env!(\"OUT_DIR\"), \"/set.fst\"));","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":196962,"byte_end":197039,"line_start":76,"line_end":76,"column_start":5,"column_end":82}},{"value":"/ # };","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197044,"byte_end":197052,"line_start":77,"line_end":77,"column_start":5,"column_end":13}},{"value":"/ # static FST: &[u8] = &[];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197057,"byte_end":197087,"line_start":78,"line_end":78,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197092,"byte_end":197095,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ let set = Set::from_static_slice(FST).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197100,"byte_end":197151,"line_start":80,"line_end":80,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197156,"byte_end":197163,"line_start":81,"line_end":81,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197681,"byte_end":197690,"line_start":95,"line_end":95,"column_start":12,"column_end":21},"name":"from_iter","qualname":"<Set>::from_iter","value":"pub fn from_iter<T, I>(I) -> Result<Self> where T: AsRef<[u8]>,\nI: IntoIterator<Item = T>","parent":null,"children":[],"decl_id":null,"docs":" Create a `Set` from an iterator of lexicographically ordered byte\n strings.","sig":null,"attributes":[{"value":"/ Create a `Set` from an iterator of lexicographically ordered byte","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197296,"byte_end":197365,"line_start":86,"line_end":86,"column_start":5,"column_end":74}},{"value":"/ strings.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197370,"byte_end":197382,"line_start":87,"line_end":87,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197387,"byte_end":197390,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ If the iterator does not yield values in lexicographic order, then an","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197395,"byte_end":197468,"line_start":89,"line_end":89,"column_start":5,"column_end":78}},{"value":"/ error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197473,"byte_end":197495,"line_start":90,"line_end":90,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197500,"byte_end":197503,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Note that this is a convenience function to build a set in memory.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197508,"byte_end":197578,"line_start":92,"line_end":92,"column_start":5,"column_end":75}},{"value":"/ To build a set that streams to an arbitrary `io::Write`, use","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197583,"byte_end":197647,"line_start":93,"line_end":93,"column_start":5,"column_end":69}},{"value":"/ `SetBuilder`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197652,"byte_end":197669,"line_start":94,"line_end":94,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198229,"byte_end":198237,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"contains","qualname":"<Set>::contains","value":"pub fn contains<K: AsRef<[u8]>>(&Self, K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests the membership of a single key.","sig":null,"attributes":[{"value":"/ Tests the membership of a single key.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197924,"byte_end":197965,"line_start":102,"line_end":102,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197970,"byte_end":197973,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197978,"byte_end":197991,"line_start":104,"line_end":104,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":197996,"byte_end":197999,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198004,"byte_end":198015,"line_start":106,"line_end":106,"column_start":5,"column_end":16}},{"value":"/ use fst::Set;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198020,"byte_end":198037,"line_start":107,"line_end":107,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198042,"byte_end":198045,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ let set = Set::from_iter(&[\"a\", \"b\", \"c\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198050,"byte_end":198106,"line_start":109,"line_end":109,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198111,"byte_end":198114,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.contains(\"b\"), true);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198119,"byte_end":198159,"line_start":111,"line_end":111,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(set.contains(\"z\"), false);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198164,"byte_end":198205,"line_start":112,"line_end":112,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198210,"byte_end":198217,"line_start":113,"line_end":113,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199326,"byte_end":199332,"line_start":146,"line_end":146,"column_start":12,"column_end":18},"name":"stream","qualname":"<Set>::stream","value":"pub fn stream(&Self) -> Stream","parent":null,"children":[],"decl_id":null,"docs":" Return a lexicographically ordered stream of all keys in this set.","sig":null,"attributes":[{"value":"/ Return a lexicographically ordered stream of all keys in this set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198323,"byte_end":198393,"line_start":118,"line_end":118,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198398,"byte_end":198401,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ While this is a stream, it does require heap space proportional to the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198406,"byte_end":198480,"line_start":120,"line_end":120,"column_start":5,"column_end":79}},{"value":"/ longest key in the set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198485,"byte_end":198512,"line_start":121,"line_end":121,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198517,"byte_end":198520,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ If the set is memory mapped, then no further heap space is needed.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198525,"byte_end":198595,"line_start":123,"line_end":123,"column_start":5,"column_end":75}},{"value":"/ Note though that your operating system may fill your page cache","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198600,"byte_end":198667,"line_start":124,"line_end":124,"column_start":5,"column_end":72}},{"value":"/ (which will cause the resident memory usage of the process to go up","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198672,"byte_end":198743,"line_start":125,"line_end":125,"column_start":5,"column_end":76}},{"value":"/ correspondingly).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198748,"byte_end":198769,"line_start":126,"line_end":126,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198774,"byte_end":198777,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198782,"byte_end":198795,"line_start":128,"line_end":128,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198800,"byte_end":198803,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Since streams are not iterators, the traditional `for` loop cannot be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198808,"byte_end":198881,"line_start":130,"line_end":130,"column_start":5,"column_end":78}},{"value":"/ used. `while let` is useful instead:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198886,"byte_end":198926,"line_start":131,"line_end":131,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198931,"byte_end":198934,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198939,"byte_end":198950,"line_start":133,"line_end":133,"column_start":5,"column_end":16}},{"value":"/ use fst::{IntoStreamer, Streamer, Set};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":198955,"byte_end":198998,"line_start":134,"line_end":134,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199003,"byte_end":199006,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ let set = Set::from_iter(&[\"a\", \"b\", \"c\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199011,"byte_end":199067,"line_start":136,"line_end":136,"column_start":5,"column_end":61}},{"value":"/ let mut stream = set.stream();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199072,"byte_end":199106,"line_start":137,"line_end":137,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199111,"byte_end":199114,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ let mut keys = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199119,"byte_end":199145,"line_start":139,"line_end":139,"column_start":5,"column_end":31}},{"value":"/ while let Some(key) = stream.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199150,"byte_end":199191,"line_start":140,"line_end":140,"column_start":5,"column_end":46}},{"value":"/     keys.push(key.to_vec());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199196,"byte_end":199228,"line_start":141,"line_end":141,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199233,"byte_end":199238,"line_start":142,"line_end":142,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(keys, vec![b\"a\", b\"b\", b\"c\"]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199243,"byte_end":199288,"line_start":143,"line_end":143,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199293,"byte_end":199300,"line_start":144,"line_end":144,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199305,"byte_end":199314,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":987},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200247,"byte_end":200252,"line_start":176,"line_end":176,"column_start":12,"column_end":17},"name":"range","qualname":"<Set>::range","value":"pub fn range(&Self) -> StreamBuilder","parent":null,"children":[],"decl_id":null,"docs":" Return a builder for range queries.","sig":null,"attributes":[{"value":"/ Return a builder for range queries.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199395,"byte_end":199434,"line_start":150,"line_end":150,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199439,"byte_end":199442,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ A range query returns a subset of keys in this set in a range given in","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199447,"byte_end":199521,"line_start":152,"line_end":152,"column_start":5,"column_end":79}},{"value":"/ lexicographic order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199526,"byte_end":199550,"line_start":153,"line_end":153,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199555,"byte_end":199558,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Memory requirements are the same as described on `Set::stream`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199563,"byte_end":199630,"line_start":155,"line_end":155,"column_start":5,"column_end":72}},{"value":"/ Notably, only the keys in the range are read; keys outside the range","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199635,"byte_end":199707,"line_start":156,"line_end":156,"column_start":5,"column_end":77}},{"value":"/ are not.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199712,"byte_end":199724,"line_start":157,"line_end":157,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199729,"byte_end":199732,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199737,"byte_end":199750,"line_start":159,"line_end":159,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199755,"byte_end":199758,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Returns only the keys in the range given.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199763,"byte_end":199808,"line_start":161,"line_end":161,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199813,"byte_end":199816,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199821,"byte_end":199832,"line_start":163,"line_end":163,"column_start":5,"column_end":16}},{"value":"/ use fst::{IntoStreamer, Streamer, Set};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199837,"byte_end":199880,"line_start":164,"line_end":164,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199885,"byte_end":199888,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ let set = Set::from_iter(&[\"a\", \"b\", \"c\", \"d\", \"e\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199893,"byte_end":199959,"line_start":166,"line_end":166,"column_start":5,"column_end":71}},{"value":"/ let mut stream = set.range().ge(\"b\").lt(\"e\").into_stream();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":199964,"byte_end":200027,"line_start":167,"line_end":167,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200032,"byte_end":200035,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ let mut keys = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200040,"byte_end":200066,"line_start":169,"line_end":169,"column_start":5,"column_end":31}},{"value":"/ while let Some(key) = stream.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200071,"byte_end":200112,"line_start":170,"line_end":170,"column_start":5,"column_end":46}},{"value":"/     keys.push(key.to_vec());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200117,"byte_end":200149,"line_start":171,"line_end":171,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200154,"byte_end":200159,"line_start":172,"line_end":172,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(keys, vec![b\"b\", b\"c\", b\"d\"]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200164,"byte_end":200209,"line_start":173,"line_end":173,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200214,"byte_end":200221,"line_start":174,"line_end":174,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200226,"byte_end":200235,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201670,"byte_end":201676,"line_start":221,"line_end":221,"column_start":12,"column_end":18},"name":"search","qualname":"<Set>::search","value":"pub fn search<A: Automaton>(&Self, A) -> StreamBuilder<, A>","parent":null,"children":[],"decl_id":null,"docs":" Executes an automaton on the keys of this set.","sig":null,"attributes":[{"value":"/ Executes an automaton on the keys of this set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200328,"byte_end":200378,"line_start":180,"line_end":180,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200383,"byte_end":200386,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ Note that this returns a `StreamBuilder`, which can be used to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200391,"byte_end":200457,"line_start":182,"line_end":182,"column_start":5,"column_end":71}},{"value":"/ add a range query to the search (see the `range` method).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200462,"byte_end":200523,"line_start":183,"line_end":183,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200528,"byte_end":200531,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ Memory requirements are the same as described on `Set::stream`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200536,"byte_end":200603,"line_start":185,"line_end":185,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200608,"byte_end":200611,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200616,"byte_end":200629,"line_start":187,"line_end":187,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200634,"byte_end":200637,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ An implementation of regular expressions for `Automaton` is available","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200642,"byte_end":200715,"line_start":189,"line_end":189,"column_start":5,"column_end":78}},{"value":"/ in the `fst-regex` crate, which can be used to search sets.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200720,"byte_end":200783,"line_start":190,"line_end":190,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200788,"byte_end":200791,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200796,"byte_end":200807,"line_start":192,"line_end":192,"column_start":5,"column_end":16}},{"value":"/ extern crate fst;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200812,"byte_end":200833,"line_start":193,"line_end":193,"column_start":5,"column_end":26}},{"value":"/ extern crate fst_regex;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200838,"byte_end":200865,"line_start":194,"line_end":194,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200870,"byte_end":200873,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200878,"byte_end":200904,"line_start":196,"line_end":196,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200909,"byte_end":200912,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ use fst::{IntoStreamer, Streamer, Set};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200917,"byte_end":200960,"line_start":198,"line_end":198,"column_start":5,"column_end":48}},{"value":"/ use fst_regex::Regex;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200965,"byte_end":200990,"line_start":199,"line_end":199,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":200995,"byte_end":200998,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201003,"byte_end":201042,"line_start":201,"line_end":201,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<Error>> {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201047,"byte_end":201091,"line_start":202,"line_end":202,"column_start":5,"column_end":49}},{"value":"/     let set = Set::from_iter(&[","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201096,"byte_end":201131,"line_start":203,"line_end":203,"column_start":5,"column_end":40}},{"value":"/         \"foo\", \"foo1\", \"foo2\", \"foo3\", \"foobar\",","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201136,"byte_end":201188,"line_start":204,"line_end":204,"column_start":5,"column_end":57}},{"value":"/     ]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201193,"byte_end":201213,"line_start":205,"line_end":205,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201218,"byte_end":201221,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/     let re = Regex::new(\"f[a-z]+3?\").unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201226,"byte_end":201276,"line_start":207,"line_end":207,"column_start":5,"column_end":55}},{"value":"/     let mut stream = set.search(&re).into_stream();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201281,"byte_end":201336,"line_start":208,"line_end":208,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201341,"byte_end":201344,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/     let mut keys = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201349,"byte_end":201379,"line_start":210,"line_end":210,"column_start":5,"column_end":35}},{"value":"/     while let Some(key) = stream.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201384,"byte_end":201429,"line_start":211,"line_end":211,"column_start":5,"column_end":50}},{"value":"/         keys.push(key.to_vec());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201434,"byte_end":201470,"line_start":212,"line_end":212,"column_start":5,"column_end":41}},{"value":"/     }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201475,"byte_end":201484,"line_start":213,"line_end":213,"column_start":5,"column_end":14}},{"value":"/     assert_eq!(keys, vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201489,"byte_end":201519,"line_start":214,"line_end":214,"column_start":5,"column_end":35}},{"value":"/         \"foo\".as_bytes(), \"foo3\".as_bytes(), \"foobar\".as_bytes(),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201524,"byte_end":201593,"line_start":215,"line_end":215,"column_start":5,"column_end":74}},{"value":"/     ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201598,"byte_end":201609,"line_start":216,"line_end":216,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201614,"byte_end":201617,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201622,"byte_end":201636,"line_start":218,"line_end":218,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201641,"byte_end":201646,"line_start":219,"line_end":219,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201651,"byte_end":201658,"line_start":220,"line_end":220,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201854,"byte_end":201857,"line_start":227,"line_end":227,"column_start":12,"column_end":15},"name":"len","qualname":"<Set>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in this set.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in this set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201781,"byte_end":201828,"line_start":225,"line_end":225,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201833,"byte_end":201842,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":991},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201984,"byte_end":201992,"line_start":233,"line_end":233,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Set>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this set is empty.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this set is empty.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201908,"byte_end":201958,"line_start":231,"line_end":231,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":201963,"byte_end":201972,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202813,"byte_end":202815,"line_start":260,"line_end":260,"column_start":12,"column_end":14},"name":"op","qualname":"<Set>::op","value":"pub fn op(&Self) -> OpBuilder","parent":null,"children":[],"decl_id":null,"docs":" Creates a new set operation with this set added to it.","sig":null,"attributes":[{"value":"/ Creates a new set operation with this set added to it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202047,"byte_end":202105,"line_start":237,"line_end":237,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202110,"byte_end":202113,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ The `OpBuilder` type can be used to add additional set streams","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202118,"byte_end":202184,"line_start":239,"line_end":239,"column_start":5,"column_end":71}},{"value":"/ and perform set operations like union, intersection, difference and","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202189,"byte_end":202260,"line_start":240,"line_end":240,"column_start":5,"column_end":76}},{"value":"/ symmetric difference.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202265,"byte_end":202290,"line_start":241,"line_end":241,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202295,"byte_end":202298,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202303,"byte_end":202316,"line_start":243,"line_end":243,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202321,"byte_end":202324,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202329,"byte_end":202340,"line_start":245,"line_end":245,"column_start":5,"column_end":16}},{"value":"/ use fst::{IntoStreamer, Streamer, Set};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202345,"byte_end":202388,"line_start":246,"line_end":246,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202393,"byte_end":202396,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ let set1 = Set::from_iter(&[\"a\", \"b\", \"c\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202401,"byte_end":202458,"line_start":248,"line_end":248,"column_start":5,"column_end":62}},{"value":"/ let set2 = Set::from_iter(&[\"a\", \"y\", \"z\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202463,"byte_end":202520,"line_start":249,"line_end":249,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202525,"byte_end":202528,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ let mut union = set1.op().add(&set2).union();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202533,"byte_end":202582,"line_start":251,"line_end":251,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202587,"byte_end":202590,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ let mut keys = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202595,"byte_end":202621,"line_start":253,"line_end":253,"column_start":5,"column_end":31}},{"value":"/ while let Some(key) = union.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202626,"byte_end":202666,"line_start":254,"line_end":254,"column_start":5,"column_end":45}},{"value":"/     keys.push(key.to_vec());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202671,"byte_end":202703,"line_start":255,"line_end":255,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202708,"byte_end":202713,"line_start":256,"line_end":256,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(keys, vec![b\"a\", b\"b\", b\"c\", b\"y\", b\"z\"]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202718,"byte_end":202775,"line_start":257,"line_end":257,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202780,"byte_end":202787,"line_start":258,"line_end":258,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202792,"byte_end":202801,"line_start":259,"line_end":259,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":993},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203498,"byte_end":203509,"line_start":283,"line_end":283,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<Set>::is_disjoint","value":"pub fn is_disjoint<'f, I, S>(&Self, I) -> bool where\nI: for<'a> IntoStreamer<Into = S, Item = S>, S: 'f + for<'a> Streamer<Item =\n&'a [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the `self` set is disjoint with the set\n `stream`.","sig":null,"attributes":[{"value":"/ Returns true if and only if the `self` set is disjoint with the set","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202884,"byte_end":202955,"line_start":264,"line_end":264,"column_start":5,"column_end":76}},{"value":"/ `stream`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202960,"byte_end":202973,"line_start":265,"line_end":265,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202978,"byte_end":202981,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ `stream` must be a lexicographically ordered sequence of byte strings.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":202986,"byte_end":203060,"line_start":267,"line_end":267,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203065,"byte_end":203068,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203073,"byte_end":203086,"line_start":269,"line_end":269,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203091,"byte_end":203094,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203099,"byte_end":203110,"line_start":271,"line_end":271,"column_start":5,"column_end":16}},{"value":"/ use fst::{IntoStreamer, Streamer, Set};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203115,"byte_end":203158,"line_start":272,"line_end":272,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203163,"byte_end":203166,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ let set1 = Set::from_iter(&[\"a\", \"b\", \"c\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203171,"byte_end":203228,"line_start":274,"line_end":274,"column_start":5,"column_end":62}},{"value":"/ let set2 = Set::from_iter(&[\"x\", \"y\", \"z\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203233,"byte_end":203290,"line_start":275,"line_end":275,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203295,"byte_end":203298,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set1.is_disjoint(&set2), true);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203303,"byte_end":203349,"line_start":277,"line_end":277,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203354,"byte_end":203357,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ let set3 = Set::from_iter(&[\"a\", \"c\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203362,"byte_end":203414,"line_start":279,"line_end":279,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203419,"byte_end":203422,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set1.is_disjoint(&set3), false);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203427,"byte_end":203474,"line_start":281,"line_end":281,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203479,"byte_end":203486,"line_start":282,"line_end":282,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":999},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204374,"byte_end":204383,"line_start":308,"line_end":308,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<Set>::is_subset","value":"pub fn is_subset<'f, I, S>(&Self, I) -> bool where\nI: for<'a> IntoStreamer<Into = S, Item = S>, S: 'f + for<'a> Streamer<Item =\n&'a [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the `self` set is a subset of `stream`.","sig":null,"attributes":[{"value":"/ Returns true if and only if the `self` set is a subset of `stream`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203758,"byte_end":203829,"line_start":289,"line_end":289,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203834,"byte_end":203837,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ `stream` must be a lexicographically ordered sequence of byte strings.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203842,"byte_end":203916,"line_start":291,"line_end":291,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203921,"byte_end":203924,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203929,"byte_end":203942,"line_start":293,"line_end":293,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203947,"byte_end":203950,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203955,"byte_end":203966,"line_start":295,"line_end":295,"column_start":5,"column_end":16}},{"value":"/ use fst::Set;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203971,"byte_end":203988,"line_start":296,"line_end":296,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":203993,"byte_end":203996,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ let set1 = Set::from_iter(&[\"a\", \"b\", \"c\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204001,"byte_end":204058,"line_start":298,"line_end":298,"column_start":5,"column_end":62}},{"value":"/ let set2 = Set::from_iter(&[\"x\", \"y\", \"z\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204063,"byte_end":204120,"line_start":299,"line_end":299,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204125,"byte_end":204128,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set1.is_subset(&set2), false);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204133,"byte_end":204178,"line_start":301,"line_end":301,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204183,"byte_end":204186,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ let set3 = Set::from_iter(&[\"a\", \"c\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204191,"byte_end":204243,"line_start":303,"line_end":303,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204248,"byte_end":204251,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set1.is_subset(&set3), false);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204256,"byte_end":204301,"line_start":305,"line_end":305,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(set3.is_subset(&set1), true);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204306,"byte_end":204350,"line_start":306,"line_end":306,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204355,"byte_end":204362,"line_start":307,"line_end":307,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":205254,"byte_end":205265,"line_start":333,"line_end":333,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<Set>::is_superset","value":"pub fn is_superset<'f, I, S>(&Self, I) -> bool where\nI: for<'a> IntoStreamer<Into = S, Item = S>, S: 'f + for<'a> Streamer<Item =\n&'a [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the `self` set is a superset of `stream`.","sig":null,"attributes":[{"value":"/ Returns true if and only if the `self` set is a superset of `stream`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204630,"byte_end":204703,"line_start":314,"line_end":314,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204708,"byte_end":204711,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ `stream` must be a lexicographically ordered sequence of byte strings.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204716,"byte_end":204790,"line_start":316,"line_end":316,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204795,"byte_end":204798,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204803,"byte_end":204816,"line_start":318,"line_end":318,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204821,"byte_end":204824,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204829,"byte_end":204840,"line_start":320,"line_end":320,"column_start":5,"column_end":16}},{"value":"/ use fst::Set;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204845,"byte_end":204862,"line_start":321,"line_end":321,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204867,"byte_end":204870,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ let set1 = Set::from_iter(&[\"a\", \"b\", \"c\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204875,"byte_end":204932,"line_start":323,"line_end":323,"column_start":5,"column_end":62}},{"value":"/ let set2 = Set::from_iter(&[\"x\", \"y\", \"z\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204937,"byte_end":204994,"line_start":324,"line_end":324,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":204999,"byte_end":205002,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set1.is_superset(&set2), false);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":205007,"byte_end":205054,"line_start":326,"line_end":326,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":205059,"byte_end":205062,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ let set3 = Set::from_iter(&[\"a\", \"c\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":205067,"byte_end":205119,"line_start":328,"line_end":328,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":205124,"byte_end":205127,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set1.is_superset(&set3), true);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":205132,"byte_end":205178,"line_start":330,"line_end":330,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(set3.is_superset(&set1), false);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":205183,"byte_end":205230,"line_start":331,"line_end":331,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":205235,"byte_end":205242,"line_start":332,"line_end":332,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":205610,"byte_end":205616,"line_start":341,"line_end":341,"column_start":12,"column_end":18},"name":"as_fst","qualname":"<Set>::as_fst","value":"pub fn as_fst(&Self) -> &raw::Fst","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying raw finite state transducer.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying raw finite state transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":205514,"byte_end":205584,"line_start":339,"line_end":339,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":205589,"byte_end":205598,"line_start":340,"line_end":340,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1026},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210181,"byte_end":210191,"line_start":482,"line_end":482,"column_start":12,"column_end":22},"name":"SetBuilder","qualname":"::inner_set::SetBuilder","value":"","parent":null,"children":[],"decl_id":null,"docs":" A builder for creating a set.","sig":null,"attributes":[{"value":"/ A builder for creating a set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":206722,"byte_end":206755,"line_start":395,"line_end":395,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":206756,"byte_end":206759,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ This is not your average everyday builder. It has two important qualities","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":206760,"byte_end":206837,"line_start":397,"line_end":397,"column_start":1,"column_end":78}},{"value":"/ that make it a bit unique from what you might expect:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":206838,"byte_end":206895,"line_start":398,"line_end":398,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":206896,"byte_end":206899,"line_start":399,"line_end":399,"column_start":1,"column_end":4}},{"value":"/ 1. All keys must be added in lexicographic order. Adding a key out of order","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":206900,"byte_end":206979,"line_start":400,"line_end":400,"column_start":1,"column_end":80}},{"value":"/    will result in an error.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":206980,"byte_end":207011,"line_start":401,"line_end":401,"column_start":1,"column_end":32}},{"value":"/ 2. The representation of a set is streamed to *any* `io::Write` as it is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":207012,"byte_end":207088,"line_start":402,"line_end":402,"column_start":1,"column_end":77}},{"value":"/    built. For an in memory representation, this can be a `Vec<u8>`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":207089,"byte_end":207160,"line_start":403,"line_end":403,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":207161,"byte_end":207164,"line_start":404,"line_end":404,"column_start":1,"column_end":4}},{"value":"/ Point (2) is especially important because it means that a set can be","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":207165,"byte_end":207237,"line_start":405,"line_end":405,"column_start":1,"column_end":73}},{"value":"/ constructed *without storing the entire set in memory*. Namely, since it","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":207238,"byte_end":207314,"line_start":406,"line_end":406,"column_start":1,"column_end":77}},{"value":"/ works with any `io::Write`, it can be streamed directly to a file.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":207315,"byte_end":207385,"line_start":407,"line_end":407,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":207386,"byte_end":207389,"line_start":408,"line_end":408,"column_start":1,"column_end":4}},{"value":"/ With that said, the builder does use memory, but **memory usage is bounded","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":207390,"byte_end":207468,"line_start":409,"line_end":409,"column_start":1,"column_end":79}},{"value":"/ to a constant size**. The amount of memory used trades off with the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":207469,"byte_end":207540,"line_start":410,"line_end":410,"column_start":1,"column_end":72}},{"value":"/ compression ratio. Currently, the implementation hard codes this trade off","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":207541,"byte_end":207619,"line_start":411,"line_end":411,"column_start":1,"column_end":79}},{"value":"/ which can result in about 5-20MB of heap usage during construction. (N.B.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":207620,"byte_end":207697,"line_start":412,"line_end":412,"column_start":1,"column_end":78}},{"value":"/ Guaranteeing a maximal compression ratio requires memory proportional to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":207698,"byte_end":207774,"line_start":413,"line_end":413,"column_start":1,"column_end":77}},{"value":"/ the size of the set, which defeats the benefit of streaming it to disk.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":207775,"byte_end":207850,"line_start":414,"line_end":414,"column_start":1,"column_end":76}},{"value":"/ In practice, a small bounded amount of memory achieves close-to-minimal","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":207851,"byte_end":207926,"line_start":415,"line_end":415,"column_start":1,"column_end":76}},{"value":"/ compression ratios.)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":207927,"byte_end":207951,"line_start":416,"line_end":416,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":207952,"byte_end":207955,"line_start":417,"line_end":417,"column_start":1,"column_end":4}},{"value":"/ The algorithmic complexity of set construction is `O(n)` where `n` is the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":207956,"byte_end":208033,"line_start":418,"line_end":418,"column_start":1,"column_end":78}},{"value":"/ number of elements added to the set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208034,"byte_end":208074,"line_start":419,"line_end":419,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208075,"byte_end":208078,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/ # Example: build in memory","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208079,"byte_end":208109,"line_start":421,"line_end":421,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208110,"byte_end":208113,"line_start":422,"line_end":422,"column_start":1,"column_end":4}},{"value":"/ This shows how to use the builder to construct a set in memory. Note that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208114,"byte_end":208191,"line_start":423,"line_end":423,"column_start":1,"column_end":78}},{"value":"/ `Set::from_iter` provides a convenience function that achieves this same","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208192,"byte_end":208268,"line_start":424,"line_end":424,"column_start":1,"column_end":77}},{"value":"/ goal without needing to explicitly use `SetBuilder`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208269,"byte_end":208325,"line_start":425,"line_end":425,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208326,"byte_end":208329,"line_start":426,"line_end":426,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208330,"byte_end":208341,"line_start":427,"line_end":427,"column_start":1,"column_end":12}},{"value":"/ use fst::{IntoStreamer, Streamer, Set, SetBuilder};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208342,"byte_end":208397,"line_start":428,"line_end":428,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208398,"byte_end":208401,"line_start":429,"line_end":429,"column_start":1,"column_end":4}},{"value":"/ let mut build = SetBuilder::memory();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208402,"byte_end":208443,"line_start":430,"line_end":430,"column_start":1,"column_end":42}},{"value":"/ build.insert(\"bruce\").unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208444,"byte_end":208479,"line_start":431,"line_end":431,"column_start":1,"column_end":36}},{"value":"/ build.insert(\"clarence\").unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208480,"byte_end":208518,"line_start":432,"line_end":432,"column_start":1,"column_end":39}},{"value":"/ build.insert(\"stevie\").unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208519,"byte_end":208555,"line_start":433,"line_end":433,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208556,"byte_end":208559,"line_start":434,"line_end":434,"column_start":1,"column_end":4}},{"value":"/ // You could also call `finish()` here, but since we're building the set in","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208560,"byte_end":208639,"line_start":435,"line_end":435,"column_start":1,"column_end":80}},{"value":"/ // memory, there would be no way to get the `Vec<u8>` back.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208640,"byte_end":208703,"line_start":436,"line_end":436,"column_start":1,"column_end":64}},{"value":"/ let bytes = build.into_inner().unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208704,"byte_end":208748,"line_start":437,"line_end":437,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208749,"byte_end":208752,"line_start":438,"line_end":438,"column_start":1,"column_end":4}},{"value":"/ // At this point, the set has been constructed, but here's how to read it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208753,"byte_end":208831,"line_start":439,"line_end":439,"column_start":1,"column_end":79}},{"value":"/ let set = Set::from_bytes(bytes).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208832,"byte_end":208878,"line_start":440,"line_end":440,"column_start":1,"column_end":47}},{"value":"/ let mut stream = set.into_stream();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208879,"byte_end":208918,"line_start":441,"line_end":441,"column_start":1,"column_end":40}},{"value":"/ let mut keys = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208919,"byte_end":208945,"line_start":442,"line_end":442,"column_start":1,"column_end":27}},{"value":"/ while let Some(key) = stream.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208946,"byte_end":208987,"line_start":443,"line_end":443,"column_start":1,"column_end":42}},{"value":"/     keys.push(key.to_vec());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":208988,"byte_end":209020,"line_start":444,"line_end":444,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209021,"byte_end":209026,"line_start":445,"line_end":445,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(keys, vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209027,"byte_end":209053,"line_start":446,"line_end":446,"column_start":1,"column_end":27}},{"value":"/     \"bruce\".as_bytes(), \"clarence\".as_bytes(), \"stevie\".as_bytes(),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209054,"byte_end":209125,"line_start":447,"line_end":447,"column_start":1,"column_end":72}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209126,"byte_end":209133,"line_start":448,"line_end":448,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209134,"byte_end":209141,"line_start":449,"line_end":449,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209142,"byte_end":209145,"line_start":450,"line_end":450,"column_start":1,"column_end":4}},{"value":"/ # Example: stream to file","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209146,"byte_end":209175,"line_start":451,"line_end":451,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209176,"byte_end":209179,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ This shows how to stream construction of a set to a file.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209180,"byte_end":209241,"line_start":453,"line_end":453,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209242,"byte_end":209245,"line_start":454,"line_end":454,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209246,"byte_end":209264,"line_start":455,"line_end":455,"column_start":1,"column_end":19}},{"value":"/ use std::fs::File;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209265,"byte_end":209287,"line_start":456,"line_end":456,"column_start":1,"column_end":23}},{"value":"/ use std::io;","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209288,"byte_end":209304,"line_start":457,"line_end":457,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209305,"byte_end":209308,"line_start":458,"line_end":458,"column_start":1,"column_end":4}},{"value":"/ use fst::{IntoStreamer, Streamer, Set, SetBuilder};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209309,"byte_end":209364,"line_start":459,"line_end":459,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209365,"byte_end":209368,"line_start":460,"line_end":460,"column_start":1,"column_end":4}},{"value":"/ let mut wtr = io::BufWriter::new(File::create(\"set.fst\").unwrap());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209369,"byte_end":209440,"line_start":461,"line_end":461,"column_start":1,"column_end":72}},{"value":"/ let mut build = SetBuilder::new(wtr).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209441,"byte_end":209491,"line_start":462,"line_end":462,"column_start":1,"column_end":51}},{"value":"/ build.insert(\"bruce\").unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209492,"byte_end":209527,"line_start":463,"line_end":463,"column_start":1,"column_end":36}},{"value":"/ build.insert(\"clarence\").unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209528,"byte_end":209566,"line_start":464,"line_end":464,"column_start":1,"column_end":39}},{"value":"/ build.insert(\"stevie\").unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209567,"byte_end":209603,"line_start":465,"line_end":465,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209604,"byte_end":209607,"line_start":466,"line_end":466,"column_start":1,"column_end":4}},{"value":"/ // If you want the writer back, then call `into_inner`. Otherwise, this","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209608,"byte_end":209683,"line_start":467,"line_end":467,"column_start":1,"column_end":76}},{"value":"/ // will finish construction and call `flush`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209684,"byte_end":209733,"line_start":468,"line_end":468,"column_start":1,"column_end":50}},{"value":"/ build.finish().unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209734,"byte_end":209762,"line_start":469,"line_end":469,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209763,"byte_end":209766,"line_start":470,"line_end":470,"column_start":1,"column_end":4}},{"value":"/ // At this point, the set has been constructed, but here's how to read it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209767,"byte_end":209845,"line_start":471,"line_end":471,"column_start":1,"column_end":79}},{"value":"/ let set = unsafe { Set::from_path(\"set.fst\").unwrap() };","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209846,"byte_end":209906,"line_start":472,"line_end":472,"column_start":1,"column_end":61}},{"value":"/ let mut stream = set.into_stream();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209907,"byte_end":209946,"line_start":473,"line_end":473,"column_start":1,"column_end":40}},{"value":"/ let mut keys = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209947,"byte_end":209973,"line_start":474,"line_end":474,"column_start":1,"column_end":27}},{"value":"/ while let Some(key) = stream.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":209974,"byte_end":210015,"line_start":475,"line_end":475,"column_start":1,"column_end":42}},{"value":"/     keys.push(key.to_vec());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210016,"byte_end":210048,"line_start":476,"line_end":476,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210049,"byte_end":210054,"line_start":477,"line_end":477,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(keys, vec![","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210055,"byte_end":210081,"line_start":478,"line_end":478,"column_start":1,"column_end":27}},{"value":"/     \"bruce\".as_bytes(), \"clarence\".as_bytes(), \"stevie\".as_bytes(),","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210082,"byte_end":210153,"line_start":479,"line_end":479,"column_start":1,"column_end":72}},{"value":"/ ]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210154,"byte_end":210161,"line_start":480,"line_end":480,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210162,"byte_end":210169,"line_start":481,"line_end":481,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1031},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210320,"byte_end":210326,"line_start":487,"line_end":487,"column_start":12,"column_end":18},"name":"memory","qualname":"<SetBuilder<Vec<u8>>>::memory","value":"pub fn memory() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a builder that builds a set in memory.\n","sig":null,"attributes":[{"value":"/ Create a builder that builds a set in memory.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210245,"byte_end":210294,"line_start":485,"line_end":485,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210299,"byte_end":210308,"line_start":486,"line_end":486,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210535,"byte_end":210538,"line_start":495,"line_end":495,"column_start":12,"column_end":15},"name":"new","qualname":"<SetBuilder<W>>::new","value":"pub fn new(W) -> Result<SetBuilder<W>>","parent":null,"children":[],"decl_id":null,"docs":" Create a builder that builds a set by writing it to `wtr` in a\n streaming fashion.\n","sig":null,"attributes":[{"value":"/ Create a builder that builds a set by writing it to `wtr` in a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210430,"byte_end":210496,"line_start":493,"line_end":493,"column_start":5,"column_end":71}},{"value":"/ streaming fashion.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210501,"byte_end":210523,"line_start":494,"line_end":494,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210898,"byte_end":210904,"line_start":504,"line_end":504,"column_start":12,"column_end":18},"name":"insert","qualname":"<SetBuilder<W>>::insert","value":"pub fn insert<K: AsRef<[u8]>>(&mut Self, K) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Insert a new key into the set.","sig":null,"attributes":[{"value":"/ Insert a new key into the set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210640,"byte_end":210674,"line_start":499,"line_end":499,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210679,"byte_end":210682,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ If a key is inserted that is less than any previous key added, then","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210687,"byte_end":210758,"line_start":501,"line_end":501,"column_start":5,"column_end":76}},{"value":"/ an error is returned. Similarly, if there was a problem writing to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210763,"byte_end":210833,"line_start":502,"line_end":502,"column_start":5,"column_end":75}},{"value":"/ the underlying writer, an error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210838,"byte_end":210886,"line_start":503,"line_end":503,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1037},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":211168,"byte_end":211179,"line_start":512,"line_end":512,"column_start":12,"column_end":23},"name":"extend_iter","qualname":"<SetBuilder<W>>::extend_iter","value":"pub fn extend_iter<T, I>(&mut Self, I) -> Result<()> where T: AsRef<[u8]>,\nI: IntoIterator<Item = T>","parent":null,"children":[],"decl_id":null,"docs":" Calls insert on each item in the iterator.","sig":null,"attributes":[{"value":"/ Calls insert on each item in the iterator.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210991,"byte_end":211037,"line_start":508,"line_end":508,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":211042,"byte_end":211045,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ If an error occurred while adding an element, processing is stopped","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":211050,"byte_end":211121,"line_start":510,"line_end":510,"column_start":5,"column_end":76}},{"value":"/ and the error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":211126,"byte_end":211156,"line_start":511,"line_end":511,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1040},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":211532,"byte_end":211545,"line_start":524,"line_end":524,"column_start":12,"column_end":25},"name":"extend_stream","qualname":"<SetBuilder<W>>::extend_stream","value":"pub fn extend_stream<'f, I, S>(&mut Self, I) -> Result<()> where\nI: for<'a> IntoStreamer<Into = S, Item = S>, S: 'f + for<'a> Streamer<Item =\n&'a [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Calls insert on each item in the stream.","sig":null,"attributes":[{"value":"/ Calls insert on each item in the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":211372,"byte_end":211416,"line_start":520,"line_end":520,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":211421,"byte_end":211424,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ Note that unlike `extend_iter`, this is not generic on the items in","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":211429,"byte_end":211500,"line_start":522,"line_end":522,"column_start":5,"column_end":76}},{"value":"/ the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":211505,"byte_end":211520,"line_start":523,"line_end":523,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212005,"byte_end":212011,"line_start":533,"line_end":533,"column_start":12,"column_end":18},"name":"finish","qualname":"<SetBuilder<W>>::finish","value":"pub fn finish(Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Finishes the construction of the set and flushes the underlying\n writer. After completion, the data written to `W` may be read using\n one of `Set`'s constructor methods.\n","sig":null,"attributes":[{"value":"/ Finishes the construction of the set and flushes the underlying","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":211806,"byte_end":211873,"line_start":530,"line_end":530,"column_start":5,"column_end":72}},{"value":"/ writer. After completion, the data written to `W` may be read using","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":211878,"byte_end":211949,"line_start":531,"line_end":531,"column_start":5,"column_end":76}},{"value":"/ one of `Set`'s constructor methods.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":211954,"byte_end":211993,"line_start":532,"line_end":532,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212171,"byte_end":212181,"line_start":539,"line_end":539,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<SetBuilder<W>>::into_inner","value":"pub fn into_inner(Self) -> Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Just like `finish`, except it returns the underlying writer after\n flushing it.\n","sig":null,"attributes":[{"value":"/ Just like `finish`, except it returns the underlying writer after","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212069,"byte_end":212138,"line_start":537,"line_end":537,"column_start":5,"column_end":74}},{"value":"/ flushing it.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212143,"byte_end":212159,"line_start":538,"line_end":538,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212300,"byte_end":212307,"line_start":544,"line_end":544,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<SetBuilder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying writer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212242,"byte_end":212288,"line_start":543,"line_end":543,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1049},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212435,"byte_end":212448,"line_start":549,"line_end":549,"column_start":12,"column_end":25},"name":"bytes_written","qualname":"<SetBuilder<W>>::bytes_written","value":"pub fn bytes_written(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes written to the underlying writer\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes written to the underlying writer","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212359,"byte_end":212423,"line_start":548,"line_end":548,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1050},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212786,"byte_end":212792,"line_start":561,"line_end":561,"column_start":12,"column_end":18},"name":"Stream","qualname":"::inner_set::Stream","value":"","parent":null,"children":[],"decl_id":null,"docs":" A lexicographically ordered stream of keys from a set.","sig":null,"attributes":[{"value":"/ A lexicographically ordered stream of keys from a set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212506,"byte_end":212564,"line_start":555,"line_end":555,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212565,"byte_end":212568,"line_start":556,"line_end":556,"column_start":1,"column_end":4}},{"value":"/ The `A` type parameter corresponds to an optional automaton to filter","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212569,"byte_end":212642,"line_start":557,"line_end":557,"column_start":1,"column_end":74}},{"value":"/ the stream. By default, no filtering is done.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212643,"byte_end":212692,"line_start":558,"line_end":558,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212693,"byte_end":212696,"line_start":559,"line_end":559,"column_start":1,"column_end":4}},{"value":"/ The `'s` lifetime parameter refers to the lifetime of the underlying set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212697,"byte_end":212774,"line_start":560,"line_end":560,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":213055,"byte_end":213058,"line_start":568,"line_end":568,"column_start":12,"column_end":15},"name":"new","qualname":"<Stream>::new","value":"pub fn new(raw::Stream) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new set stream from an fst stream.","sig":null,"attributes":[{"value":"/ Creates a new set stream from an fst stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212896,"byte_end":212944,"line_start":564,"line_end":564,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212949,"byte_end":212952,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ Not part of the public API, but useful in sibling module `map`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212957,"byte_end":213024,"line_start":566,"line_end":566,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":213428,"byte_end":213437,"line_start":578,"line_end":578,"column_start":12,"column_end":21},"name":"into_strs","qualname":"<Stream>::into_strs","value":"pub fn into_strs(Self) -> Result<Vec<String>>","parent":null,"children":[],"decl_id":null,"docs":" Convert this stream into a vector of Unicode strings.","sig":null,"attributes":[{"value":"/ Convert this stream into a vector of Unicode strings.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":213139,"byte_end":213196,"line_start":572,"line_end":572,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":213201,"byte_end":213204,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ If any key is not valid UTF-8, then iteration on the stream is stopped","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":213209,"byte_end":213283,"line_start":574,"line_end":574,"column_start":5,"column_end":79}},{"value":"/ and a UTF-8 decoding error is returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":213288,"byte_end":213331,"line_start":575,"line_end":575,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":213336,"byte_end":213339,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ Note that this creates a new allocation for every key in the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":213344,"byte_end":213416,"line_start":577,"line_end":577,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":213662,"byte_end":213672,"line_start":585,"line_end":585,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<Stream>::into_bytes","value":"pub fn into_bytes(Self) -> Vec<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Convert this stream into a vector of byte strings.","sig":null,"attributes":[{"value":"/ Convert this stream into a vector of byte strings.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":213511,"byte_end":213565,"line_start":582,"line_end":582,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":213570,"byte_end":213573,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ Note that this creates a new allocation for every key in the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":213578,"byte_end":213650,"line_start":584,"line_end":584,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1068},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214411,"byte_end":214424,"line_start":610,"line_end":610,"column_start":12,"column_end":25},"name":"StreamBuilder","qualname":"::inner_set::StreamBuilder","value":"","parent":null,"children":[],"decl_id":null,"docs":" A builder for constructing range queries on streams.","sig":null,"attributes":[{"value":"/ A builder for constructing range queries on streams.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":213926,"byte_end":213982,"line_start":598,"line_end":598,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":213983,"byte_end":213986,"line_start":599,"line_end":599,"column_start":1,"column_end":4}},{"value":"/ Once all bounds are set, one should call `into_stream` to get a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":213987,"byte_end":214054,"line_start":600,"line_end":600,"column_start":1,"column_end":68}},{"value":"/ `Stream`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214055,"byte_end":214068,"line_start":601,"line_end":601,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214069,"byte_end":214072,"line_start":602,"line_end":602,"column_start":1,"column_end":4}},{"value":"/ Bounds are not additive. That is, if `ge` is called twice on the same","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214073,"byte_end":214146,"line_start":603,"line_end":603,"column_start":1,"column_end":74}},{"value":"/ builder, then the second setting wins.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214147,"byte_end":214189,"line_start":604,"line_end":604,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214190,"byte_end":214193,"line_start":605,"line_end":605,"column_start":1,"column_end":4}},{"value":"/ The `A` type parameter corresponds to an optional automaton to filter","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214194,"byte_end":214267,"line_start":606,"line_end":606,"column_start":1,"column_end":74}},{"value":"/ the stream. By default, no filtering is done.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214268,"byte_end":214317,"line_start":607,"line_end":607,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214318,"byte_end":214321,"line_start":608,"line_end":608,"column_start":1,"column_end":4}},{"value":"/ The `'s` lifetime parameter refers to the lifetime of the underlying set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214322,"byte_end":214399,"line_start":609,"line_end":609,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214580,"byte_end":214582,"line_start":614,"line_end":614,"column_start":12,"column_end":14},"name":"ge","qualname":"<StreamBuilder>::ge","value":"pub fn ge<T: AsRef<[u8]>>(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify a greater-than-or-equal-to bound.\n","sig":null,"attributes":[{"value":"/ Specify a greater-than-or-equal-to bound.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214523,"byte_end":214568,"line_start":613,"line_end":613,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214721,"byte_end":214723,"line_start":619,"line_end":619,"column_start":12,"column_end":14},"name":"gt","qualname":"<StreamBuilder>::gt","value":"pub fn gt<T: AsRef<[u8]>>(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify a greater-than bound.\n","sig":null,"attributes":[{"value":"/ Specify a greater-than bound.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214676,"byte_end":214709,"line_start":618,"line_end":618,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214871,"byte_end":214873,"line_start":624,"line_end":624,"column_start":12,"column_end":14},"name":"le","qualname":"<StreamBuilder>::le","value":"pub fn le<T: AsRef<[u8]>>(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify a less-than-or-equal-to bound.\n","sig":null,"attributes":[{"value":"/ Specify a less-than-or-equal-to bound.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214817,"byte_end":214859,"line_start":623,"line_end":623,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":215009,"byte_end":215011,"line_start":629,"line_end":629,"column_start":12,"column_end":14},"name":"lt","qualname":"<StreamBuilder>::lt","value":"pub fn lt<T: AsRef<[u8]>>(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify a less-than bound.\n","sig":null,"attributes":[{"value":"/ Specify a less-than bound.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214967,"byte_end":214997,"line_start":628,"line_end":628,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":1091},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":215980,"byte_end":215989,"line_start":657,"line_end":657,"column_start":12,"column_end":21},"name":"OpBuilder","qualname":"::inner_set::OpBuilder","value":"","parent":null,"children":[],"decl_id":null,"docs":" A builder for collecting set streams on which to perform set operations.","sig":null,"attributes":[{"value":"/ A builder for collecting set streams on which to perform set operations.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":215319,"byte_end":215395,"line_start":643,"line_end":643,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":215396,"byte_end":215399,"line_start":644,"line_end":644,"column_start":1,"column_end":4}},{"value":"/ Set operations include intersection, union, difference and symmetric","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":215400,"byte_end":215472,"line_start":645,"line_end":645,"column_start":1,"column_end":73}},{"value":"/ difference. The result of each set operation is itself a stream that emits","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":215473,"byte_end":215551,"line_start":646,"line_end":646,"column_start":1,"column_end":79}},{"value":"/ keys in lexicographic order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":215552,"byte_end":215584,"line_start":647,"line_end":647,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":215585,"byte_end":215588,"line_start":648,"line_end":648,"column_start":1,"column_end":4}},{"value":"/ All set operations work efficiently on an arbitrary number of","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":215589,"byte_end":215654,"line_start":649,"line_end":649,"column_start":1,"column_end":66}},{"value":"/ streams with memory proportional to the number of streams.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":215655,"byte_end":215717,"line_start":650,"line_end":650,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":215718,"byte_end":215721,"line_start":651,"line_end":651,"column_start":1,"column_end":4}},{"value":"/ The algorithmic complexity of all set operations is `O(n1 + n2 + n3 + ...)`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":215722,"byte_end":215801,"line_start":652,"line_end":652,"column_start":1,"column_end":80}},{"value":"/ where `n1, n2, n3, ...` correspond to the number of elements in each","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":215802,"byte_end":215874,"line_start":653,"line_end":653,"column_start":1,"column_end":73}},{"value":"/ stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":215875,"byte_end":215886,"line_start":654,"line_end":654,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":215887,"byte_end":215890,"line_start":655,"line_end":655,"column_start":1,"column_end":4}},{"value":"/ The `'s` lifetime parameter refers to the lifetime of the underlying set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":215891,"byte_end":215968,"line_start":656,"line_end":656,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1097},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":216110,"byte_end":216113,"line_start":662,"line_end":662,"column_start":12,"column_end":15},"name":"new","qualname":"<OpBuilder>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set operation builder.\n","sig":null,"attributes":[{"value":"/ Create a new set operation builder.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":216045,"byte_end":216084,"line_start":660,"line_end":660,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":216089,"byte_end":216098,"line_start":661,"line_end":661,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":216448,"byte_end":216451,"line_start":673,"line_end":673,"column_start":12,"column_end":15},"name":"add","qualname":"<OpBuilder>::add","value":"pub fn add<I, S>(Self, I) -> Self where I: for<'a> IntoStreamer<Into = S, Item\n= S>, S: 's + for<'a> Streamer<Item = &'a [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Add a stream to this set operation.","sig":null,"attributes":[{"value":"/ Add a stream to this set operation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":216178,"byte_end":216217,"line_start":666,"line_end":666,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":216222,"byte_end":216225,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ This is useful for a chaining style pattern, e.g.,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":216230,"byte_end":216284,"line_start":668,"line_end":668,"column_start":5,"column_end":59}},{"value":"/ `builder.add(stream1).add(stream2).union()`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":216289,"byte_end":216337,"line_start":669,"line_end":669,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":216342,"byte_end":216345,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ The stream must emit a lexicographically ordered sequence of byte","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":216350,"byte_end":216419,"line_start":671,"line_end":671,"column_start":5,"column_end":74}},{"value":"/ strings.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":216424,"byte_end":216436,"line_start":672,"line_end":672,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1103},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":216830,"byte_end":216834,"line_start":684,"line_end":684,"column_start":12,"column_end":16},"name":"push","qualname":"<OpBuilder>::push","value":"pub fn push<I, S>(&mut Self, I) where I: for<'a> IntoStreamer<Into = S, Item =\nS>, S: 's + for<'a> Streamer<Item = &'a [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Add a stream to this set operation.","sig":null,"attributes":[{"value":"/ Add a stream to this set operation.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":216680,"byte_end":216719,"line_start":680,"line_end":680,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":216724,"byte_end":216727,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ The stream must emit a lexicographically ordered sequence of byte","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":216732,"byte_end":216801,"line_start":682,"line_end":682,"column_start":5,"column_end":74}},{"value":"/ strings.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":216806,"byte_end":216818,"line_start":683,"line_end":683,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217667,"byte_end":217672,"line_start":709,"line_end":709,"column_start":12,"column_end":17},"name":"union","qualname":"<OpBuilder>::union","value":"pub fn union(Self) -> Union","parent":null,"children":[],"decl_id":null,"docs":" Performs a union operation on all streams that have been added.","sig":null,"attributes":[{"value":"/ Performs a union operation on all streams that have been added.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217077,"byte_end":217144,"line_start":690,"line_end":690,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217149,"byte_end":217152,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217157,"byte_end":217170,"line_start":692,"line_end":692,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217175,"byte_end":217178,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217183,"byte_end":217194,"line_start":694,"line_end":694,"column_start":5,"column_end":16}},{"value":"/ use fst::{IntoStreamer, Streamer, Set};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217199,"byte_end":217242,"line_start":695,"line_end":695,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217247,"byte_end":217250,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ let set1 = Set::from_iter(&[\"a\", \"b\", \"c\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217255,"byte_end":217312,"line_start":697,"line_end":697,"column_start":5,"column_end":62}},{"value":"/ let set2 = Set::from_iter(&[\"a\", \"y\", \"z\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217317,"byte_end":217374,"line_start":698,"line_end":698,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217379,"byte_end":217382,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ let mut union = set1.op().add(&set2).union();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217387,"byte_end":217436,"line_start":700,"line_end":700,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217441,"byte_end":217444,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ let mut keys = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217449,"byte_end":217475,"line_start":702,"line_end":702,"column_start":5,"column_end":31}},{"value":"/ while let Some(key) = union.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217480,"byte_end":217520,"line_start":703,"line_end":703,"column_start":5,"column_end":45}},{"value":"/     keys.push(key.to_vec());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217525,"byte_end":217557,"line_start":704,"line_end":704,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217562,"byte_end":217567,"line_start":705,"line_end":705,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(keys, vec![b\"a\", b\"b\", b\"c\", b\"y\", b\"z\"]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217572,"byte_end":217629,"line_start":706,"line_end":706,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217634,"byte_end":217641,"line_start":707,"line_end":707,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217646,"byte_end":217655,"line_start":708,"line_end":708,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1109},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218330,"byte_end":218342,"line_start":732,"line_end":732,"column_start":12,"column_end":24},"name":"intersection","qualname":"<OpBuilder>::intersection","value":"pub fn intersection(Self) -> Intersection","parent":null,"children":[],"decl_id":null,"docs":" Performs an intersection operation on all streams that have been added.","sig":null,"attributes":[{"value":"/ Performs an intersection operation on all streams that have been added.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217735,"byte_end":217810,"line_start":713,"line_end":713,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217815,"byte_end":217818,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217823,"byte_end":217836,"line_start":715,"line_end":715,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217841,"byte_end":217844,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217849,"byte_end":217860,"line_start":717,"line_end":717,"column_start":5,"column_end":16}},{"value":"/ use fst::{IntoStreamer, Streamer, Set};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217865,"byte_end":217908,"line_start":718,"line_end":718,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217913,"byte_end":217916,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ let set1 = Set::from_iter(&[\"a\", \"b\", \"c\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217921,"byte_end":217978,"line_start":720,"line_end":720,"column_start":5,"column_end":62}},{"value":"/ let set2 = Set::from_iter(&[\"a\", \"y\", \"z\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":217983,"byte_end":218040,"line_start":721,"line_end":721,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218045,"byte_end":218048,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ let mut intersection = set1.op().add(&set2).intersection();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218053,"byte_end":218116,"line_start":723,"line_end":723,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218121,"byte_end":218124,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ let mut keys = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218129,"byte_end":218155,"line_start":725,"line_end":725,"column_start":5,"column_end":31}},{"value":"/ while let Some(key) = intersection.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218160,"byte_end":218207,"line_start":726,"line_end":726,"column_start":5,"column_end":52}},{"value":"/     keys.push(key.to_vec());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218212,"byte_end":218244,"line_start":727,"line_end":727,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218249,"byte_end":218254,"line_start":728,"line_end":728,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(keys, vec![b\"a\"]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218259,"byte_end":218292,"line_start":729,"line_end":729,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218297,"byte_end":218304,"line_start":730,"line_end":730,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218309,"byte_end":218318,"line_start":731,"line_end":731,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219162,"byte_end":219172,"line_start":757,"line_end":757,"column_start":12,"column_end":22},"name":"difference","qualname":"<OpBuilder>::difference","value":"pub fn difference(Self) -> Difference","parent":null,"children":[],"decl_id":null,"docs":" Performs a difference operation with respect to the first stream added.\n That is, this returns a stream of all elements in the first stream\n that don't exist in any other stream that has been added.","sig":null,"attributes":[{"value":"/ Performs a difference operation with respect to the first stream added.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218426,"byte_end":218501,"line_start":736,"line_end":736,"column_start":5,"column_end":80}},{"value":"/ That is, this returns a stream of all elements in the first stream","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218506,"byte_end":218576,"line_start":737,"line_end":737,"column_start":5,"column_end":75}},{"value":"/ that don't exist in any other stream that has been added.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218581,"byte_end":218642,"line_start":738,"line_end":738,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218647,"byte_end":218650,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218655,"byte_end":218668,"line_start":740,"line_end":740,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218673,"byte_end":218676,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218681,"byte_end":218692,"line_start":742,"line_end":742,"column_start":5,"column_end":16}},{"value":"/ use fst::{IntoStreamer, Streamer, Set};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218697,"byte_end":218740,"line_start":743,"line_end":743,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218745,"byte_end":218748,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ let set1 = Set::from_iter(&[\"a\", \"b\", \"c\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218753,"byte_end":218810,"line_start":745,"line_end":745,"column_start":5,"column_end":62}},{"value":"/ let set2 = Set::from_iter(&[\"a\", \"y\", \"z\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218815,"byte_end":218872,"line_start":746,"line_end":746,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218877,"byte_end":218880,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ let mut difference = set1.op().add(&set2).difference();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218885,"byte_end":218944,"line_start":748,"line_end":748,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218949,"byte_end":218952,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ let mut keys = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218957,"byte_end":218983,"line_start":750,"line_end":750,"column_start":5,"column_end":31}},{"value":"/ while let Some(key) = difference.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":218988,"byte_end":219033,"line_start":751,"line_end":751,"column_start":5,"column_end":50}},{"value":"/     keys.push(key.to_vec());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219038,"byte_end":219070,"line_start":752,"line_end":752,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219075,"byte_end":219080,"line_start":753,"line_end":753,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(keys, vec![b\"b\", b\"c\"]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219085,"byte_end":219124,"line_start":754,"line_end":754,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219129,"byte_end":219136,"line_start":755,"line_end":755,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219141,"byte_end":219150,"line_start":756,"line_end":756,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1111},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":220174,"byte_end":220194,"line_start":787,"line_end":787,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<OpBuilder>::symmetric_difference","value":"pub fn symmetric_difference(Self) -> SymmetricDifference","parent":null,"children":[],"decl_id":null,"docs":" Performs a symmetric difference operation on all of the streams that\n have been added.","sig":null,"attributes":[{"value":"/ Performs a symmetric difference operation on all of the streams that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219250,"byte_end":219322,"line_start":761,"line_end":761,"column_start":5,"column_end":77}},{"value":"/ have been added.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219327,"byte_end":219347,"line_start":762,"line_end":762,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219352,"byte_end":219355,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ When there are only two streams, then the keys returned correspond to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219360,"byte_end":219433,"line_start":764,"line_end":764,"column_start":5,"column_end":78}},{"value":"/ keys that are in either stream but *not* in both streams.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219438,"byte_end":219499,"line_start":765,"line_end":765,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219504,"byte_end":219507,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ More generally, for any number of streams, keys that occur in an odd","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219512,"byte_end":219584,"line_start":767,"line_end":767,"column_start":5,"column_end":77}},{"value":"/ number of streams are returned.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219589,"byte_end":219624,"line_start":768,"line_end":768,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219629,"byte_end":219632,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219637,"byte_end":219650,"line_start":770,"line_end":770,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219655,"byte_end":219658,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219663,"byte_end":219674,"line_start":772,"line_end":772,"column_start":5,"column_end":16}},{"value":"/ use fst::{IntoStreamer, Streamer, Set};","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219679,"byte_end":219722,"line_start":773,"line_end":773,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219727,"byte_end":219730,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ let set1 = Set::from_iter(&[\"a\", \"b\", \"c\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219735,"byte_end":219792,"line_start":775,"line_end":775,"column_start":5,"column_end":62}},{"value":"/ let set2 = Set::from_iter(&[\"a\", \"y\", \"z\"]).unwrap();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219797,"byte_end":219854,"line_start":776,"line_end":776,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219859,"byte_end":219862,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ let mut sym_difference = set1.op().add(&set2).symmetric_difference();","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219867,"byte_end":219940,"line_start":778,"line_end":778,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219945,"byte_end":219948,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ let mut keys = vec![];","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219953,"byte_end":219979,"line_start":780,"line_end":780,"column_start":5,"column_end":31}},{"value":"/ while let Some(key) = sym_difference.next() {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":219984,"byte_end":220033,"line_start":781,"line_end":781,"column_start":5,"column_end":54}},{"value":"/     keys.push(key.to_vec());","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":220038,"byte_end":220070,"line_start":782,"line_end":782,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":220075,"byte_end":220080,"line_start":783,"line_end":783,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(keys, vec![b\"b\", b\"c\", b\"y\", b\"z\"]);","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":220085,"byte_end":220136,"line_start":784,"line_end":784,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":220141,"byte_end":220148,"line_start":785,"line_end":785,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":220153,"byte_end":220162,"line_start":786,"line_end":786,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1128},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":221084,"byte_end":221089,"line_start":815,"line_end":815,"column_start":12,"column_end":17},"name":"Union","qualname":"::inner_set::Union","value":"","parent":null,"children":[],"decl_id":null,"docs":" A stream of set union over multiple streams in lexicographic order.","sig":null,"attributes":[{"value":"/ A stream of set union over multiple streams in lexicographic order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":220919,"byte_end":220990,"line_start":812,"line_end":812,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":220991,"byte_end":220994,"line_start":813,"line_end":813,"column_start":1,"column_end":4}},{"value":"/ The `'s` lifetime parameter refers to the lifetime of the underlying set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":220995,"byte_end":221072,"line_start":814,"line_end":814,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":1138},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":221468,"byte_end":221480,"line_start":829,"line_end":829,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::inner_set::Intersection","value":"","parent":null,"children":[],"decl_id":null,"docs":" A stream of set intersection over multiple streams in lexicographic order.","sig":null,"attributes":[{"value":"/ A stream of set intersection over multiple streams in lexicographic order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":221296,"byte_end":221374,"line_start":826,"line_end":826,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":221375,"byte_end":221378,"line_start":827,"line_end":827,"column_start":1,"column_end":4}},{"value":"/ The `'s` lifetime parameter refers to the lifetime of the underlying set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":221379,"byte_end":221456,"line_start":828,"line_end":828,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":1148},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":222063,"byte_end":222073,"line_start":847,"line_end":847,"column_start":12,"column_end":22},"name":"Difference","qualname":"::inner_set::Difference","value":"","parent":null,"children":[],"decl_id":null,"docs":" A stream of set difference over multiple streams in lexicographic order.","sig":null,"attributes":[{"value":"/ A stream of set difference over multiple streams in lexicographic order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":221701,"byte_end":221777,"line_start":840,"line_end":840,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":221778,"byte_end":221781,"line_start":841,"line_end":841,"column_start":1,"column_end":4}},{"value":"/ The difference operation is taken with respect to the first stream and the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":221782,"byte_end":221860,"line_start":842,"line_end":842,"column_start":1,"column_end":79}},{"value":"/ rest of the streams. i.e., All elements in the first stream that do not","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":221861,"byte_end":221936,"line_start":843,"line_end":843,"column_start":1,"column_end":76}},{"value":"/ appear in any other streams.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":221937,"byte_end":221969,"line_start":844,"line_end":844,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":221970,"byte_end":221973,"line_start":845,"line_end":845,"column_start":1,"column_end":4}},{"value":"/ The `'s` lifetime parameter refers to the lifetime of the underlying set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":221974,"byte_end":222051,"line_start":846,"line_end":846,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":1158},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":222474,"byte_end":222493,"line_start":862,"line_end":862,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::inner_set::SymmetricDifference","value":"","parent":null,"children":[],"decl_id":null,"docs":" A stream of set symmetric difference over multiple streams in lexicographic\n order.","sig":null,"attributes":[{"value":"/ A stream of set symmetric difference over multiple streams in lexicographic","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":222290,"byte_end":222369,"line_start":858,"line_end":858,"column_start":1,"column_end":80}},{"value":"/ order.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":222370,"byte_end":222380,"line_start":859,"line_end":859,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":222381,"byte_end":222384,"line_start":860,"line_end":860,"column_start":1,"column_end":4}},{"value":"/ The `'s` lifetime parameter refers to the lifetime of the underlying set.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":222385,"byte_end":222462,"line_start":861,"line_end":861,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":1179},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229312,"byte_end":229320,"line_start":97,"line_end":97,"column_start":11,"column_end":19},"name":"Streamer","qualname":"::stream::Streamer","value":"Streamer<'a>","parent":null,"children":[{"krate":0,"index":1181},{"krate":0,"index":1182}],"decl_id":null,"docs":" Streamer describes a \"streaming iterator.\"","sig":null,"attributes":[{"value":"/ Streamer describes a \"streaming iterator.\"","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":224568,"byte_end":224614,"line_start":1,"line_end":1,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":224615,"byte_end":224618,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ It provides a mechanism for writing code that is generic over streams","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":224619,"byte_end":224692,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"/ produced by this crate.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":224693,"byte_end":224720,"line_start":4,"line_end":4,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":224721,"byte_end":224724,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Note that this is strictly less useful than `Iterator` because the item","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":224725,"byte_end":224800,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/ associated type is bound to a specific lifetime. However, this does permit","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":224801,"byte_end":224879,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ us to write *some* generic code over streams that produce values tied","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":224880,"byte_end":224953,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ to the lifetime of the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":224954,"byte_end":224988,"line_start":9,"line_end":9,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":224989,"byte_end":224992,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Some form of stream abstraction is inherently required for this crate","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":224993,"byte_end":225066,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ because elements in a finite state transducer are produced *by iterating*","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":225067,"byte_end":225144,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ over the structure. The alternative would be to create a new allocation","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":225145,"byte_end":225220,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ for each element iterated over, which would be prohibitively expensive.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":225221,"byte_end":225296,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":225297,"byte_end":225300,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ # Usage & motivation","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":225301,"byte_end":225325,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":225326,"byte_end":225329,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Streams are hard to use because they don't fit into Rust's current type","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":225330,"byte_end":225405,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ system very well. They are so hard to use that this author loathes having a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":225406,"byte_end":225485,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ publically defined trait for it. Nevertheless, they do just barely provide","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":225486,"byte_end":225564,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ a means for composing multiple stream abstractions with different concrete","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":225565,"byte_end":225643,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ types. For example, one might want to take the union of a range query","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":225644,"byte_end":225717,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ stream with a stream that has been filtered by a regex. These streams have","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":225718,"byte_end":225796,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/ different concrete types. A `Streamer` trait allows us to write code that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":225797,"byte_end":225874,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ is generic over these concrete types. (All of the set operations are","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":225875,"byte_end":225947,"line_start":25,"line_end":25,"column_start":1,"column_end":73}},{"value":"/ implemented this way.)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":225948,"byte_end":225974,"line_start":26,"line_end":26,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":225975,"byte_end":225978,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ A problem with streams is that the trait is itself parameterized by a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":225979,"byte_end":226052,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/ lifetime. In practice, this makes them very unergonomic because specifying","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226053,"byte_end":226131,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/ a `Streamer` bound generally requires a higher-ranked trait bound. This is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226132,"byte_end":226210,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ necessary because the lifetime can't actually be named in the enclosing","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226211,"byte_end":226286,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ function; instead, the lifetime is local to iteration itself. Therefore,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226287,"byte_end":226363,"line_start":32,"line_end":32,"column_start":1,"column_end":77}},{"value":"/ one must assert that the bound is valid for *any particular* lifetime.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226364,"byte_end":226438,"line_start":33,"line_end":33,"column_start":1,"column_end":75}},{"value":"/ This is the essence of higher-rank trait bounds.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226439,"byte_end":226491,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226492,"byte_end":226495,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Because of this, you might expect to see lots of bounds that look like","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226496,"byte_end":226570,"line_start":36,"line_end":36,"column_start":1,"column_end":75}},{"value":"/ this:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226571,"byte_end":226580,"line_start":37,"line_end":37,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226581,"byte_end":226584,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226585,"byte_end":226598,"line_start":39,"line_end":39,"column_start":1,"column_end":14}},{"value":"/ fn takes_stream<T, S>(s: S)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226599,"byte_end":226630,"line_start":40,"line_end":40,"column_start":1,"column_end":32}},{"value":"/     where S: for<'a> Streamer<'a, Item=T>","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226631,"byte_end":226676,"line_start":41,"line_end":41,"column_start":1,"column_end":46}},{"value":"/ {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226677,"byte_end":226682,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226683,"byte_end":226688,"line_start":43,"line_end":43,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226689,"byte_end":226696,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226697,"byte_end":226700,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ There are *three* different problems with this declaration:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226701,"byte_end":226764,"line_start":46,"line_end":46,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226765,"byte_end":226768,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ 1. `S` is not bound by any particular lifetime itself, and most streams","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226769,"byte_end":226844,"line_start":48,"line_end":48,"column_start":1,"column_end":76}},{"value":"/    probably contain a reference to an underlying finite state transducer.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226845,"byte_end":226922,"line_start":49,"line_end":49,"column_start":1,"column_end":78}},{"value":"/ 2. It is often convenient to separate the notion of \"stream\" with","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226923,"byte_end":226992,"line_start":50,"line_end":50,"column_start":1,"column_end":70}},{"value":"/    \"stream constructor.\" This represents a similar split found in the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":226993,"byte_end":227066,"line_start":51,"line_end":51,"column_start":1,"column_end":74}},{"value":"/    standard library for `Iterator` and `IntoIterator`, respectively.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227067,"byte_end":227139,"line_start":52,"line_end":52,"column_start":1,"column_end":73}},{"value":"/ 3. The `Item=T` is invalid because `Streamer`'s associated type is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227140,"byte_end":227210,"line_start":53,"line_end":53,"column_start":1,"column_end":71}},{"value":"/    parameterized by a lifetime and there is no way to parameterize an","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227211,"byte_end":227284,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"/    arbitrary type constructor. (In this context, `T` is the type","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227285,"byte_end":227353,"line_start":55,"line_end":55,"column_start":1,"column_end":69}},{"value":"/    constructor, because it will invariably require a lifetime to become","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227354,"byte_end":227429,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/    a concrete type.)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227430,"byte_end":227454,"line_start":57,"line_end":57,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227455,"byte_end":227458,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ With that said, we must revise our possibly-workable bounds to a giant","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227459,"byte_end":227533,"line_start":59,"line_end":59,"column_start":1,"column_end":75}},{"value":"/ scary monster:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227534,"byte_end":227552,"line_start":60,"line_end":60,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227553,"byte_end":227556,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227557,"byte_end":227570,"line_start":62,"line_end":62,"column_start":1,"column_end":14}},{"value":"/ fn takes_stream<'f, I, S>(s: I)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227571,"byte_end":227606,"line_start":63,"line_end":63,"column_start":1,"column_end":36}},{"value":"/     where I: for<'a> IntoStreamer<'a, Into=S, Item=(&'a [u8], Output)>,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227607,"byte_end":227682,"line_start":64,"line_end":64,"column_start":1,"column_end":76}},{"value":"/           S: 'f + for<'a> Streamer<'a, Item=(&'a [u8], Output)>","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227683,"byte_end":227750,"line_start":65,"line_end":65,"column_start":1,"column_end":68}},{"value":"/ {","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227751,"byte_end":227756,"line_start":66,"line_end":66,"column_start":1,"column_end":6}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227757,"byte_end":227762,"line_start":67,"line_end":67,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227763,"byte_end":227770,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227771,"byte_end":227774,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ We addressed the above points correspondingly:","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227775,"byte_end":227825,"line_start":70,"line_end":70,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227826,"byte_end":227829,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ 1. `S` is now bound by `'f`, which corresponds to the lifetime (possibly","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227830,"byte_end":227906,"line_start":72,"line_end":72,"column_start":1,"column_end":77}},{"value":"/     `'static`) of the underlying stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227907,"byte_end":227951,"line_start":73,"line_end":73,"column_start":1,"column_end":45}},{"value":"/ 2. The `I` type parameter has been added to refer to a type that knows how","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":227952,"byte_end":228030,"line_start":74,"line_end":74,"column_start":1,"column_end":79}},{"value":"/    to build a stream. Notice that neither of the bounds for `I` or `S`","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":228031,"byte_end":228105,"line_start":75,"line_end":75,"column_start":1,"column_end":75}},{"value":"/    share a lifetime parameter. This is because the higher rank trait bound","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":228106,"byte_end":228184,"line_start":76,"line_end":76,"column_start":1,"column_end":79}},{"value":"/    specifies it works for *any* particular lifetime.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":228185,"byte_end":228241,"line_start":77,"line_end":77,"column_start":1,"column_end":57}},{"value":"/ 3. `T` has been replaced with specific concrete types. Note that these","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":228242,"byte_end":228316,"line_start":78,"line_end":78,"column_start":1,"column_end":75}},{"value":"/    concrete types are duplicated. With iterators, we could use","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":228317,"byte_end":228383,"line_start":79,"line_end":79,"column_start":1,"column_end":67}},{"value":"/    `Item=S::Item` in the bound for `I`, but one cannot access an associated","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":228384,"byte_end":228463,"line_start":80,"line_end":80,"column_start":1,"column_end":80}},{"value":"/    type through a higher-ranked trait bound. Therefore, we must duplicate","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":228464,"byte_end":228541,"line_start":81,"line_end":81,"column_start":1,"column_end":78}},{"value":"/    the item type.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":228542,"byte_end":228563,"line_start":82,"line_end":82,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":228564,"byte_end":228567,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ As you can see, streams offer little flexibility, little ergonomics and a","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":228568,"byte_end":228645,"line_start":84,"line_end":84,"column_start":1,"column_end":78}},{"value":"/ lot of hard to read trait bounds. The situation is lamentable, but","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":228646,"byte_end":228716,"line_start":85,"line_end":85,"column_start":1,"column_end":71}},{"value":"/ nevertheless, without them, we would not be able to compose streams by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":228717,"byte_end":228791,"line_start":86,"line_end":86,"column_start":1,"column_end":75}},{"value":"/ leveraging the type system.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":228792,"byte_end":228823,"line_start":87,"line_end":87,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":228824,"byte_end":228827,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ A redeemable quality is that these *same exact* trait bounds (modulo some","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":228828,"byte_end":228905,"line_start":89,"line_end":89,"column_start":1,"column_end":78}},{"value":"/ tweaks in the `Item` associated type) appear in many places in this crate","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":228906,"byte_end":228983,"line_start":90,"line_end":90,"column_start":1,"column_end":78}},{"value":"/ without much variation. Therefore, once you grok it, it's mostly easy to","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":228984,"byte_end":229060,"line_start":91,"line_end":91,"column_start":1,"column_end":77}},{"value":"/ pattern match it with \"oh I need a stream.\" My hope is that clear","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229061,"byte_end":229130,"line_start":92,"line_end":92,"column_start":1,"column_end":70}},{"value":"/ documentation and examples make these complex bounds easier to burden.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229131,"byte_end":229205,"line_start":93,"line_end":93,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229206,"byte_end":229209,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ Stretching this abstraction further with Rust's current type system is not","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229210,"byte_end":229288,"line_start":95,"line_end":95,"column_start":1,"column_end":79}},{"value":"/ advised.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229289,"byte_end":229301,"line_start":96,"line_end":96,"column_start":1,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":1181},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229389,"byte_end":229393,"line_start":99,"line_end":99,"column_start":10,"column_end":14},"name":"Item","qualname":"::stream::Streamer::Item","value":"type Item: 'a;","parent":{"krate":0,"index":1179},"children":[],"decl_id":null,"docs":" The type of the item emitted by this stream.\n","sig":null,"attributes":[{"value":"/ The type of the item emitted by this stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229331,"byte_end":229379,"line_start":98,"line_end":98,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229669,"byte_end":229673,"line_start":106,"line_end":106,"column_start":8,"column_end":12},"name":"next","qualname":"::stream::Streamer::next","value":"pub fn next(&'a mut Self) -> Option<Self::Item>","parent":{"krate":0,"index":1179},"children":[],"decl_id":null,"docs":" Emits the next element in this stream, or `None` to indicate the stream\n has been exhausted.","sig":null,"attributes":[{"value":"/ Emits the next element in this stream, or `None` to indicate the stream","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229404,"byte_end":229479,"line_start":101,"line_end":101,"column_start":5,"column_end":80}},{"value":"/ has been exhausted.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229484,"byte_end":229507,"line_start":102,"line_end":102,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229512,"byte_end":229515,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ It is not specified what a stream does after `None` is emitted. In most","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229520,"byte_end":229595,"line_start":104,"line_end":104,"column_start":5,"column_end":80}},{"value":"/ cases, `None` should be emitted on every subsequent call.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229600,"byte_end":229661,"line_start":105,"line_end":105,"column_start":5,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":1183},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229880,"byte_end":229892,"line_start":113,"line_end":113,"column_start":11,"column_end":23},"name":"IntoStreamer","qualname":"::stream::IntoStreamer","value":"IntoStreamer<'a>","parent":null,"children":[{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187}],"decl_id":null,"docs":" IntoStreamer describes types that can be converted to streams.","sig":null,"attributes":[{"value":"/ IntoStreamer describes types that can be converted to streams.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229714,"byte_end":229780,"line_start":109,"line_end":109,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229781,"byte_end":229784,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ This is analogous to the `IntoIterator` trait for `Iterator` in","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229785,"byte_end":229852,"line_start":111,"line_end":111,"column_start":1,"column_end":68}},{"value":"/ `std::iter`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229853,"byte_end":229869,"line_start":112,"line_end":112,"column_start":1,"column_end":17}}]},{"kind":"Type","id":{"krate":0,"index":1185},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229960,"byte_end":229964,"line_start":115,"line_end":115,"column_start":10,"column_end":14},"name":"Item","qualname":"::stream::IntoStreamer::Item","value":"type Item: 'a;","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" The type of the item emitted by the stream.\n","sig":null,"attributes":[{"value":"/ The type of the item emitted by the stream.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229903,"byte_end":229950,"line_start":114,"line_end":114,"column_start":5,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":1186},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":230029,"byte_end":230033,"line_start":117,"line_end":117,"column_start":10,"column_end":14},"name":"Into","qualname":"::stream::IntoStreamer::Into","value":"type Into: Streamer<'a, Item=Self::Item>;","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" The type of the stream to be constructed.\n","sig":null,"attributes":[{"value":"/ The type of the stream to be constructed.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":229974,"byte_end":230019,"line_start":116,"line_end":116,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":230114,"byte_end":230125,"line_start":120,"line_end":120,"column_start":8,"column_end":19},"name":"into_stream","qualname":"::stream::IntoStreamer::into_stream","value":"pub fn into_stream(Self) -> Self::Into","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Construct a stream from `Self`.\n","sig":null,"attributes":[{"value":"/ Construct a stream from `Self`.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":230071,"byte_end":230106,"line_start":119,"line_end":119,"column_start":5,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":1194},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":11982,"byte_end":11991,"line_start":335,"line_end":335,"column_start":9,"column_end":18},"name":"automaton","qualname":"::automaton","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1195}],"decl_id":null,"docs":" Automaton implementations for finite state transducers.","sig":null,"attributes":[{"value":"/ Automaton implementations for finite state transducers.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":11764,"byte_end":11823,"line_start":331,"line_end":331,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":11824,"byte_end":11827,"line_start":332,"line_end":332,"column_start":1,"column_end":4}},{"value":"/ This module defines a trait, `Automaton`, with several implementations","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":11828,"byte_end":11902,"line_start":333,"line_end":333,"column_start":1,"column_end":75}},{"value":"/ including, but not limited to, union, intersection and complement.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":11903,"byte_end":11973,"line_start":334,"line_end":334,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":1196},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12836,"byte_end":12839,"line_start":354,"line_end":354,"column_start":9,"column_end":12},"name":"map","qualname":"::map","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1197}],"decl_id":null,"docs":" Map operations implemented by finite state transducers.","sig":null,"attributes":[{"value":"/ Map operations implemented by finite state transducers.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12029,"byte_end":12088,"line_start":339,"line_end":339,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12089,"byte_end":12092,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/ This API provided by this sub-module is close in spirit to the API","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12093,"byte_end":12163,"line_start":341,"line_end":341,"column_start":1,"column_end":71}},{"value":"/ provided by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12164,"byte_end":12179,"line_start":342,"line_end":342,"column_start":1,"column_end":16}},{"value":"/ [`std::collections::BTreeMap`](http://doc.rust-lang.org/stable/std/collections/struct.BTreeMap.html).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12180,"byte_end":12285,"line_start":343,"line_end":343,"column_start":1,"column_end":106}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12286,"byte_end":12289,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ # Overview of types","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12290,"byte_end":12313,"line_start":345,"line_end":345,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12314,"byte_end":12317,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ `Map` is a read only interface to pre-constructed sets. `MapBuilder` is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12318,"byte_end":12393,"line_start":347,"line_end":347,"column_start":1,"column_end":76}},{"value":"/ used to create new sets. (Once a set is created, it can never be modified.)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12394,"byte_end":12473,"line_start":348,"line_end":348,"column_start":1,"column_end":80}},{"value":"/ `Stream`, `Keys` and `Values` are streams that originated from a map.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12474,"byte_end":12547,"line_start":349,"line_end":349,"column_start":1,"column_end":74}},{"value":"/ `StreamBuilder` builds range queries. `OpBuilder` collects a set of streams","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12548,"byte_end":12627,"line_start":350,"line_end":350,"column_start":1,"column_end":80}},{"value":"/ and executes set operations like `union` or `intersection` on them with the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12628,"byte_end":12707,"line_start":351,"line_end":351,"column_start":1,"column_end":80}},{"value":"/ option of specifying a merge strategy for a map's values. The rest of the","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12708,"byte_end":12785,"line_start":352,"line_end":352,"column_start":1,"column_end":78}},{"value":"/ types are streams for set operations.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12786,"byte_end":12827,"line_start":353,"line_end":353,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":1198},"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":13968,"byte_end":13971,"line_start":377,"line_end":377,"column_start":9,"column_end":12},"name":"set","qualname":"::set","value":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1199}],"decl_id":null,"docs":" Set operations implemented by finite state transducers.","sig":null,"attributes":[{"value":"/ Set operations implemented by finite state transducers.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12871,"byte_end":12930,"line_start":358,"line_end":358,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12931,"byte_end":12934,"line_start":359,"line_end":359,"column_start":1,"column_end":4}},{"value":"/ This API provided by this sub-module is close in spirit to the API","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":12935,"byte_end":13005,"line_start":360,"line_end":360,"column_start":1,"column_end":71}},{"value":"/ provided by","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":13006,"byte_end":13021,"line_start":361,"line_end":361,"column_start":1,"column_end":16}},{"value":"/ [`std::collections::BTreeSet`](http://doc.rust-lang.org/stable/std/collections/struct.BTreeSet.html).","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":13022,"byte_end":13127,"line_start":362,"line_end":362,"column_start":1,"column_end":106}},{"value":"/ The principle difference, as with everything else in this crate, is that","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":13128,"byte_end":13204,"line_start":363,"line_end":363,"column_start":1,"column_end":77}},{"value":"/ operations are performed on streams of byte strings instead of generic","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":13205,"byte_end":13279,"line_start":364,"line_end":364,"column_start":1,"column_end":75}},{"value":"/ iterators. Another difference is that most of the set operations (union,","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":13280,"byte_end":13356,"line_start":365,"line_end":365,"column_start":1,"column_end":77}},{"value":"/ intersection, difference and symmetric difference) work on multiple sets at","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":13357,"byte_end":13436,"line_start":366,"line_end":366,"column_start":1,"column_end":80}},{"value":"/ the same time, instead of two.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":13437,"byte_end":13471,"line_start":367,"line_end":367,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":13472,"byte_end":13475,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ # Overview of types","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":13476,"byte_end":13499,"line_start":369,"line_end":369,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":13500,"byte_end":13503,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ `Set` is a read only interface to pre-constructed sets. `SetBuilder` is","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":13504,"byte_end":13579,"line_start":371,"line_end":371,"column_start":1,"column_end":76}},{"value":"/ used to create new sets. (Once a set is created, it can never be modified.)","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":13580,"byte_end":13659,"line_start":372,"line_end":372,"column_start":1,"column_end":80}},{"value":"/ `Stream` is a stream of values that originated from a set (analogous to an","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":13660,"byte_end":13738,"line_start":373,"line_end":373,"column_start":1,"column_end":79}},{"value":"/ iterator). `StreamBuilder` builds range queries. `OpBuilder` collects a set","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":13739,"byte_end":13818,"line_start":374,"line_end":374,"column_start":1,"column_end":80}},{"value":"/ of streams and executes set operations like `union` or `intersection` on","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":13819,"byte_end":13895,"line_start":375,"line_end":375,"column_start":1,"column_end":77}},{"value":"/ them. The rest of the types are streams for set operations.","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":13896,"byte_end":13959,"line_start":376,"line_end":376,"column_start":1,"column_end":64}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":19410,"byte_end":19413,"line_start":156,"line_end":156,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":19612,"byte_end":19615,"line_start":164,"line_end":164,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":21348,"byte_end":21359,"line_start":228,"line_end":228,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":21619,"byte_end":21630,"line_start":237,"line_end":237,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":22397,"byte_end":22408,"line_start":270,"line_end":270,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":23113,"byte_end":23123,"line_start":293,"line_end":293,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":24761,"byte_end":24766,"line_start":356,"line_end":356,"column_start":48,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":25886,"byte_end":25898,"line_start":394,"line_end":394,"column_start":48,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":27054,"byte_end":27064,"line_start":435,"line_end":435,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/error.rs","byte_start":28206,"byte_end":28211,"line_start":20,"line_end":20,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/error.rs","byte_start":28325,"byte_end":28330,"line_start":27,"line_end":27,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/error.rs","byte_start":28442,"byte_end":28447,"line_start":34,"line_end":34,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/error.rs","byte_start":28679,"byte_end":28684,"line_start":44,"line_end":44,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":31634,"byte_end":31637,"line_start":59,"line_end":59,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":42721,"byte_end":42724,"line_start":394,"line_end":394,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":42859,"byte_end":42862,"line_start":401,"line_end":401,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":43344,"byte_end":43347,"line_start":418,"line_end":418,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":43503,"byte_end":43506,"line_start":426,"line_end":426,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47554,"byte_end":47564,"line_start":538,"line_end":538,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47745,"byte_end":47755,"line_start":546,"line_end":546,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":213},{"krate":0,"index":217},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":51013,"byte_end":51019,"line_start":627,"line_end":627,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":51204,"byte_end":51210,"line_start":635,"line_end":635,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":52817,"byte_end":52821,"line_start":681,"line_end":681,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53223,"byte_end":53229,"line_start":696,"line_end":696,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53951,"byte_end":53964,"line_start":719,"line_end":719,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":277},{"krate":0,"index":279},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":54606,"byte_end":54619,"line_start":741,"line_end":741,"column_start":49,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55699,"byte_end":55708,"line_start":769,"line_end":769,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":302},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63854,"byte_end":63863,"line_start":980,"line_end":980,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":64179,"byte_end":64188,"line_start":990,"line_end":990,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":64701,"byte_end":64706,"line_start":1005,"line_end":1005,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":65109,"byte_end":65121,"line_start":1020,"line_end":1020,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":65710,"byte_end":65720,"line_start":1039,"line_end":1039,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":66145,"byte_end":66164,"line_start":1054,"line_end":1054,"column_start":31,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":66649,"byte_end":66661,"line_start":1070,"line_end":1070,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":108032,"byte_end":108039,"line_start":100,"line_end":100,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":108244,"byte_end":108251,"line_start":108,"line_end":108,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":115714,"byte_end":115729,"line_start":307,"line_end":307,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":118654,"byte_end":118675,"line_start":405,"line_end":405,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":477},{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":119327,"byte_end":119338,"line_start":429,"line_end":429,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":480},{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":119769,"byte_end":119780,"line_start":446,"line_end":446,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/counting_writer.rs","byte_start":127604,"byte_end":127618,"line_start":9,"line_end":9,"column_start":20,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/counting_writer.rs","byte_start":128303,"byte_end":128317,"line_start":38,"line_end":38,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":503},{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":130986,"byte_end":130991,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":132211,"byte_end":132216,"line_start":89,"line_end":89,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":132344,"byte_end":132349,"line_start":95,"line_end":95,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":133047,"byte_end":133052,"line_start":116,"line_end":116,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":538}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":134447,"byte_end":134451,"line_start":34,"line_end":34,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":137286,"byte_end":137290,"line_start":123,"line_end":123,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":569},{"krate":0,"index":571},{"krate":0,"index":573},{"krate":0,"index":575},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":141755,"byte_end":141766,"line_start":274,"line_end":274,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":142445,"byte_end":142450,"line_start":300,"line_end":300,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":142874,"byte_end":142891,"line_start":316,"line_end":316,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":144133,"byte_end":144146,"line_start":367,"line_end":367,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":146782,"byte_end":146795,"line_start":461,"line_end":461,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":155022,"byte_end":155031,"line_start":724,"line_end":724,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":156088,"byte_end":156099,"line_start":772,"line_end":772,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":653},{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164390,"byte_end":164399,"line_start":47,"line_end":47,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":686},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":169430,"byte_end":169439,"line_start":166,"line_end":166,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":169761,"byte_end":169770,"line_start":176,"line_end":176,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":170359,"byte_end":170364,"line_start":195,"line_end":195,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":719},{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":171395,"byte_end":171407,"line_start":229,"line_end":229,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":729},{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":172913,"byte_end":172923,"line_start":275,"line_end":275,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":740},{"krate":0,"index":741}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":174158,"byte_end":174177,"line_start":316,"line_end":316,"column_start":31,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":175367,"byte_end":175377,"line_start":354,"line_end":354,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":765},{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":176645,"byte_end":176649,"line_start":410,"line_end":410,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":177225,"byte_end":177229,"line_start":437,"line_end":437,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":177442,"byte_end":177446,"line_start":445,"line_end":445,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":777}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/registry.rs","byte_start":185445,"byte_end":185453,"line_start":29,"line_end":29,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/registry.rs","byte_start":186985,"byte_end":186998,"line_start":69,"line_end":69,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":804},{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/registry.rs","byte_start":188130,"byte_end":188142,"line_start":103,"line_end":103,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/registry_minimal.rs","byte_start":193419,"byte_end":193427,"line_start":34,"line_end":34,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":818},{"krate":0,"index":819}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/registry_minimal.rs","byte_start":193899,"byte_end":193911,"line_start":49,"line_end":49,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":822}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":78806,"byte_end":78809,"line_start":285,"line_end":285,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":841},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":857},{"krate":0,"index":863},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":90398,"byte_end":90411,"line_start":613,"line_end":613,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":894},{"krate":0,"index":896},{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":91411,"byte_end":91424,"line_start":648,"line_end":648,"column_start":49,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":91714,"byte_end":91719,"line_start":664,"line_end":664,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":910}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":92936,"byte_end":92942,"line_start":712,"line_end":712,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":98965,"byte_end":98971,"line_start":878,"line_end":878,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":935},{"krate":0,"index":936}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101460,"byte_end":101466,"line_start":943,"line_end":943,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":102723,"byte_end":102730,"line_start":1001,"line_end":1001,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":954},{"krate":0,"index":955}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":103442,"byte_end":103452,"line_start":1027,"line_end":1027,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":103641,"byte_end":103651,"line_start":1038,"line_end":1038,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":959}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":195264,"byte_end":195267,"line_start":34,"line_end":34,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":984},{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":999},{"krate":0,"index":1005},{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":205681,"byte_end":205684,"line_start":346,"line_end":346,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1013}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":205812,"byte_end":205815,"line_start":353,"line_end":353,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1015}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":206301,"byte_end":206304,"line_start":370,"line_end":370,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1017}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":206640,"byte_end":206643,"line_start":388,"line_end":388,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1025}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210219,"byte_end":210229,"line_start":484,"line_end":484,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1031}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210410,"byte_end":210420,"line_start":492,"line_end":492,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1037},{"krate":0,"index":1040},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1048},{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212876,"byte_end":212882,"line_start":563,"line_end":563,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":213782,"byte_end":213788,"line_start":590,"line_end":590,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1065},{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214496,"byte_end":214509,"line_start":612,"line_end":612,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1076},{"krate":0,"index":1078},{"krate":0,"index":1080},{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":215151,"byte_end":215164,"line_start":634,"line_end":634,"column_start":49,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":216025,"byte_end":216034,"line_start":659,"line_end":659,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1103},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":220327,"byte_end":220336,"line_start":792,"line_end":792,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1118}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":220638,"byte_end":220647,"line_start":802,"line_end":802,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1126}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":221142,"byte_end":221147,"line_start":817,"line_end":817,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1135},{"krate":0,"index":1136}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":221540,"byte_end":221552,"line_start":831,"line_end":831,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1145},{"krate":0,"index":1146}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":222131,"byte_end":222141,"line_start":849,"line_end":849,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1155},{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":222560,"byte_end":222579,"line_start":864,"line_end":864,"column_start":31,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1165},{"krate":0,"index":1166}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":223073,"byte_end":223089,"line_start":880,"line_end":880,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1175},{"krate":0,"index":1176}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":230197,"byte_end":230198,"line_start":123,"line_end":123,"column_start":48,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/lib.rs","byte_start":11712,"byte_end":11715,"line_start":326,"line_end":326,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":373}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":19410,"byte_end":19413,"line_start":156,"line_end":156,"column_start":10,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1200},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":19612,"byte_end":19615,"line_start":164,"line_end":164,"column_start":24,"column_end":27},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1200},"to":{"krate":0,"index":19}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":21348,"byte_end":21359,"line_start":228,"line_end":228,"column_start":10,"column_end":21},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1209},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":21619,"byte_end":21630,"line_start":237,"line_end":237,"column_start":24,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1209},"to":{"krate":0,"index":19}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":22397,"byte_end":22408,"line_start":270,"line_end":270,"column_start":20,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1218},"to":{"krate":0,"index":19}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":23113,"byte_end":23123,"line_start":293,"line_end":293,"column_start":34,"column_end":44},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1224},"to":{"krate":0,"index":19}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":24761,"byte_end":24766,"line_start":356,"line_end":356,"column_start":48,"column_end":53},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1234},"to":{"krate":0,"index":19}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":25886,"byte_end":25898,"line_start":394,"line_end":394,"column_start":48,"column_end":60},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1248},"to":{"krate":0,"index":19}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/automaton/mod.rs","byte_start":27054,"byte_end":27064,"line_start":435,"line_end":435,"column_start":34,"column_end":44},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1262},"to":{"krate":0,"index":19}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/error.rs","byte_start":28206,"byte_end":28211,"line_start":20,"line_end":20,"column_start":26,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1272},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/error.rs","byte_start":28325,"byte_end":28330,"line_start":27,"line_end":27,"column_start":27,"column_end":32},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1272},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/error.rs","byte_start":28442,"byte_end":28447,"line_start":34,"line_end":34,"column_start":23,"column_end":28},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1272},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/error.rs","byte_start":28679,"byte_end":28684,"line_start":44,"line_end":44,"column_start":23,"column_end":28},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1272},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":31634,"byte_end":31637,"line_start":59,"line_end":59,"column_start":6,"column_end":9},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":42721,"byte_end":42724,"line_start":394,"line_end":394,"column_start":18,"column_end":21},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":164},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":42859,"byte_end":42862,"line_start":401,"line_end":401,"column_start":21,"column_end":24},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":164},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":43344,"byte_end":43347,"line_start":418,"line_end":418,"column_start":25,"column_end":28},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":164},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":43503,"byte_end":43506,"line_start":426,"line_end":426,"column_start":26,"column_end":29},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":164},"to":{"krate":2,"index":1954}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47554,"byte_end":47564,"line_start":538,"line_end":538,"column_start":6,"column_end":16},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":47745,"byte_end":47755,"line_start":546,"line_end":546,"column_start":20,"column_end":30},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":51013,"byte_end":51019,"line_start":627,"line_end":627,"column_start":45,"column_end":51},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":227},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":51204,"byte_end":51210,"line_start":635,"line_end":635,"column_start":24,"column_end":30},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":52817,"byte_end":52821,"line_start":681,"line_end":681,"column_start":31,"column_end":35},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":247},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53223,"byte_end":53229,"line_start":696,"line_end":696,"column_start":31,"column_end":37},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":257},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":53951,"byte_end":53964,"line_start":719,"line_end":719,"column_start":24,"column_end":37},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":54606,"byte_end":54619,"line_start":741,"line_end":741,"column_start":49,"column_end":62},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":267},"to":{"krate":0,"index":1183}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":55699,"byte_end":55708,"line_start":769,"line_end":769,"column_start":10,"column_end":19},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":290},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":63854,"byte_end":63863,"line_start":980,"line_end":980,"column_start":30,"column_end":39},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":290},"to":{"krate":2,"index":5219}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":64179,"byte_end":64188,"line_start":990,"line_end":990,"column_start":36,"column_end":45},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":290},"to":{"krate":2,"index":5206}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":64701,"byte_end":64706,"line_start":1005,"line_end":1005,"column_start":31,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":327},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":65109,"byte_end":65121,"line_start":1020,"line_end":1020,"column_start":31,"column_end":43},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":336},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":65710,"byte_end":65720,"line_start":1039,"line_end":1039,"column_start":31,"column_end":41},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":345},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":66145,"byte_end":66164,"line_start":1054,"line_end":1054,"column_start":31,"column_end":50},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":354},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/map.rs","byte_start":66649,"byte_end":66661,"line_start":1070,"line_end":1070,"column_start":30,"column_end":42},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":363},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":108032,"byte_end":108039,"line_start":100,"line_end":100,"column_start":6,"column_end":13},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":426},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":108244,"byte_end":108251,"line_start":108,"line_end":108,"column_start":20,"column_end":27},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":426},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":115714,"byte_end":115729,"line_start":307,"line_end":307,"column_start":6,"column_end":21},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1281},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":118654,"byte_end":118675,"line_start":405,"line_end":405,"column_start":6,"column_end":27},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1285},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":119327,"byte_end":119338,"line_start":429,"line_end":429,"column_start":16,"column_end":27},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1290},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/build.rs","byte_start":119769,"byte_end":119780,"line_start":446,"line_end":446,"column_start":18,"column_end":29},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1290},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/counting_writer.rs","byte_start":127604,"byte_end":127618,"line_start":9,"line_end":9,"column_start":20,"column_end":34},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/counting_writer.rs","byte_start":128303,"byte_end":128317,"line_start":38,"line_end":38,"column_start":34,"column_end":48},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":491},"to":{"krate":1,"index":3179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":130986,"byte_end":130991,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":511},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":132211,"byte_end":132216,"line_start":89,"line_end":89,"column_start":21,"column_end":26},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":511},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":132344,"byte_end":132349,"line_start":95,"line_end":95,"column_start":23,"column_end":28},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":511},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/error.rs","byte_start":133047,"byte_end":133052,"line_start":116,"line_end":116,"column_start":30,"column_end":35},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":511},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":134447,"byte_end":134451,"line_start":34,"line_end":34,"column_start":25,"column_end":29},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1311},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":137286,"byte_end":137290,"line_start":123,"line_end":123,"column_start":10,"column_end":14},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1311},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":141755,"byte_end":141766,"line_start":274,"line_end":274,"column_start":6,"column_end":17},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1290},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":142445,"byte_end":142450,"line_start":300,"line_end":300,"column_start":6,"column_end":11},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1327},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":142874,"byte_end":142891,"line_start":316,"line_end":316,"column_start":6,"column_end":23},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":144133,"byte_end":144146,"line_start":367,"line_end":367,"column_start":6,"column_end":19},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1352},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":146782,"byte_end":146795,"line_start":461,"line_end":461,"column_start":6,"column_end":19},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":155022,"byte_end":155031,"line_start":724,"line_end":724,"column_start":6,"column_end":15},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1368},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/node.rs","byte_start":156088,"byte_end":156099,"line_start":772,"line_end":772,"column_start":27,"column_end":38},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":645},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":164390,"byte_end":164399,"line_start":47,"line_end":47,"column_start":10,"column_end":19},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":675},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":169430,"byte_end":169439,"line_start":166,"line_end":166,"column_start":30,"column_end":39},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":675},"to":{"krate":2,"index":5219}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":169761,"byte_end":169770,"line_start":176,"line_end":176,"column_start":36,"column_end":45},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":675},"to":{"krate":2,"index":5206}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":170359,"byte_end":170364,"line_start":195,"line_end":195,"column_start":31,"column_end":36},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":711},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":171395,"byte_end":171407,"line_start":229,"line_end":229,"column_start":31,"column_end":43},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":721},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":172913,"byte_end":172923,"line_start":275,"line_end":275,"column_start":31,"column_end":41},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":731},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":174158,"byte_end":174177,"line_start":316,"line_end":316,"column_start":31,"column_end":50},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":742},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":175367,"byte_end":175377,"line_start":354,"line_end":354,"column_start":10,"column_end":20},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":752},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":176645,"byte_end":176649,"line_start":410,"line_end":410,"column_start":6,"column_end":10},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":177225,"byte_end":177229,"line_start":437,"line_end":437,"column_start":21,"column_end":25},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/ops.rs","byte_start":177442,"byte_end":177446,"line_start":445,"line_end":445,"column_start":14,"column_end":18},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":1796}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/registry.rs","byte_start":185445,"byte_end":185453,"line_start":29,"line_end":29,"column_start":6,"column_end":14},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/registry.rs","byte_start":186985,"byte_end":186998,"line_start":69,"line_end":69,"column_start":10,"column_end":23},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1425},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/registry.rs","byte_start":188130,"byte_end":188142,"line_start":103,"line_end":103,"column_start":6,"column_end":18},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1431},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/registry_minimal.rs","byte_start":193419,"byte_end":193427,"line_start":34,"line_end":34,"column_start":6,"column_end":14},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/registry_minimal.rs","byte_start":193899,"byte_end":193911,"line_start":49,"line_end":49,"column_start":6,"column_end":18},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":78806,"byte_end":78809,"line_start":285,"line_end":285,"column_start":6,"column_end":9},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":828},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":90398,"byte_end":90411,"line_start":613,"line_end":613,"column_start":24,"column_end":37},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":881},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":91411,"byte_end":91424,"line_start":648,"line_end":648,"column_start":49,"column_end":62},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":881},"to":{"krate":0,"index":1183}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":91714,"byte_end":91719,"line_start":664,"line_end":664,"column_start":6,"column_end":11},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1476},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":92936,"byte_end":92942,"line_start":712,"line_end":712,"column_start":24,"column_end":30},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":911},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":98965,"byte_end":98971,"line_start":878,"line_end":878,"column_start":45,"column_end":51},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":911},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":101460,"byte_end":101466,"line_start":943,"line_end":943,"column_start":6,"column_end":12},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1502},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":102723,"byte_end":102730,"line_start":1001,"line_end":1001,"column_start":16,"column_end":23},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":2242}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":103442,"byte_end":103452,"line_start":1027,"line_end":1027,"column_start":18,"column_end":28},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1528},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/raw/mod.rs","byte_start":103641,"byte_end":103651,"line_start":1038,"line_end":1038,"column_start":21,"column_end":31},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1528},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":195264,"byte_end":195267,"line_start":34,"line_end":34,"column_start":6,"column_end":9},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":975},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":205681,"byte_end":205684,"line_start":346,"line_end":346,"column_start":18,"column_end":21},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":975},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":205812,"byte_end":205815,"line_start":353,"line_end":353,"column_start":21,"column_end":24},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":975},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":206301,"byte_end":206304,"line_start":370,"line_end":370,"column_start":26,"column_end":29},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":975},"to":{"krate":2,"index":1954}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":206640,"byte_end":206643,"line_start":388,"line_end":388,"column_start":25,"column_end":28},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":975},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210219,"byte_end":210229,"line_start":484,"line_end":484,"column_start":6,"column_end":16},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1026},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":210410,"byte_end":210420,"line_start":492,"line_end":492,"column_start":20,"column_end":30},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1026},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":212876,"byte_end":212882,"line_start":563,"line_end":563,"column_start":24,"column_end":30},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1050},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":213782,"byte_end":213788,"line_start":590,"line_end":590,"column_start":45,"column_end":51},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1050},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":214496,"byte_end":214509,"line_start":612,"line_end":612,"column_start":24,"column_end":37},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1068},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":215151,"byte_end":215164,"line_start":634,"line_end":634,"column_start":49,"column_end":62},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1068},"to":{"krate":0,"index":1183}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":216025,"byte_end":216034,"line_start":659,"line_end":659,"column_start":10,"column_end":19},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1091},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":220327,"byte_end":220336,"line_start":792,"line_end":792,"column_start":30,"column_end":39},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1091},"to":{"krate":2,"index":5219}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":220638,"byte_end":220647,"line_start":802,"line_end":802,"column_start":36,"column_end":45},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1091},"to":{"krate":2,"index":5206}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":221142,"byte_end":221147,"line_start":817,"line_end":817,"column_start":31,"column_end":36},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1128},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":221540,"byte_end":221552,"line_start":831,"line_end":831,"column_start":31,"column_end":43},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1138},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":222131,"byte_end":222141,"line_start":849,"line_end":849,"column_start":31,"column_end":41},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1148},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":222560,"byte_end":222579,"line_start":864,"line_end":864,"column_start":31,"column_end":50},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1158},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/set.rs","byte_start":223073,"byte_end":223089,"line_start":880,"line_end":880,"column_start":44,"column_end":60},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1168},"to":{"krate":0,"index":1179}},{"span":{"file_name":"/Users/quangthinh/.cargo/registry/src/github.com-1ecc6299db9ec823/fst-0.3.5/src/stream.rs","byte_start":230197,"byte_end":230198,"line_start":123,"line_end":123,"column_start":48,"column_end":49},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1190},"to":{"krate":0,"index":1183}}]}