{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve","program":"/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","chalk_solve","--edition=2018","/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=a991d70194eb8c3e","-C","extra-filename=-a991d70194eb8c3e","--out-dir","/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","-L","dependency=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps","--extern","chalk_derive=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libchalk_derive-4b249154da61241e.dylib","--extern","chalk_engine=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libchalk_engine-7a7af3c5ed075380.rmeta","--extern","chalk_ir=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libchalk_ir-1e5e89b3cc5185bc.rmeta","--extern","chalk_macros=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libchalk_macros-522621076c03809f.rmeta","--extern","chalk_rust_ir=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libchalk_rust_ir-9ae5fbb66b305adc.rmeta","--extern","ena=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libena-e3ceccd4259c015a.rmeta","--extern","itertools=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libitertools-159fdcbd13436d91.rmeta","--extern","petgraph=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libpetgraph-1746d2377235e490.rmeta","--extern","rustc_hash=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/librustc_hash-29dd9c019c1e078f.rmeta","--cap-lints","allow","-L","native=/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/build/stacker-6b8b89857712dd33/out","--error-format=json","--sysroot","/Users/quangthinh/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/quangthinh/Documents/Agiletech/orai/smart-studio/server/analyzer/target/rls/debug/deps/libchalk_solve-a991d70194eb8c3e.rmeta"},"prelude":{"crate_id":{"name":"chalk_solve","disambiguator":[8981489942743601112,8069238320686825470]},"crate_root":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src","external_crates":[{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3710194649008989715,14559669089861450418]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9392975149979234998,17049149762166397483]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16512841426258775062,11665789721448774207]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10630307797325716480,16523273723520132349]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3264716338318844693,12681592148182797578]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[140397795414171834,1910274434865169512]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5557669672741662647,10322216614238315513]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14339503364484872598,13531520383629478599]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14161909693946419124,17554770295131960960]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9716880057120631437,4575334529379688610]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17190292700912465587,13293574150729131089]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[16973425767318922457,5762286362994384933]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[3049460603833016674,5895625007283919048]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[8971705811930800565,4802059752817986136]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[7414259369911982492,16117941559470048194]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":16,"id":{"name":"chalk_macros","disambiguator":[2603500555905971854,3241400604075703882]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":17,"id":{"name":"lazy_static","disambiguator":[8622471236171398951,7375813736511945278]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":18,"id":{"name":"chalk_ir","disambiguator":[8687016659245799572,18068387536485845382]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/canonicalize.rs","num":19,"id":{"name":"chalk_engine","disambiguator":[5209660885642139136,14615587430389361100]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":20,"id":{"name":"stacker","disambiguator":[11270618004102534773,1134865246925311322]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":21,"id":{"name":"cfg_if","disambiguator":[13347268434212277074,12294355231220403985]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":22,"id":{"name":"libc","disambiguator":[9237417759301744298,10325578486291660160]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","num":23,"id":{"name":"rustc_hash","disambiguator":[3456451224187360230,12806063198043075384]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":24,"id":{"name":"byteorder","disambiguator":[7786802486158187971,17904586164133949077]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":25,"id":{"name":"lalrpop_intern","disambiguator":[1262538648943620944,9338744506893008660]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","num":26,"id":{"name":"chalk_derive","disambiguator":[538635478023077110,229961810911492659]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","num":27,"id":{"name":"chalk_rust_ir","disambiguator":[3731637730378716808,12704496021679373835]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","num":28,"id":{"name":"petgraph","disambiguator":[8838636884296936769,4448080757316076414]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","num":29,"id":{"name":"fixedbitset","disambiguator":[4184422968409117594,2478214682307357160]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","num":30,"id":{"name":"ordermap","disambiguator":[14413334921063817060,4097412733286418061]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence/solve.rs","num":31,"id":{"name":"itertools","disambiguator":[8284181664245312689,13408076743838181652]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence/solve.rs","num":32,"id":{"name":"either","disambiguator":[3196927647482315206,6397018130719852552]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/var.rs","num":33,"id":{"name":"ena","disambiguator":[13144800139407249106,4652648976298980245]}},{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/var.rs","num":34,"id":{"name":"log","disambiguator":[14672335122730529813,15102547447802631915]}}],"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":0,"byte_end":2926,"line_start":1,"line_end":74,"column_start":1,"column_end":27}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1285},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":2813,"byte_end":2821,"line_start":70,"line_end":70,"column_start":16,"column_end":24},"alias_span":null,"name":"Guidance","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1260},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":2838,"byte_end":2846,"line_start":71,"line_end":71,"column_start":16,"column_end":24},"alias_span":null,"name":"Solution","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":953},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":2863,"byte_end":2869,"line_start":72,"line_end":72,"column_start":16,"column_end":22},"alias_span":null,"name":"Solver","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1312},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":2886,"byte_end":2898,"line_start":73,"line_end":73,"column_start":16,"column_end":28},"alias_span":null,"name":"SolverChoice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":965},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":2915,"byte_end":2925,"line_start":74,"line_end":74,"column_start":16,"column_end":26},"alias_span":null,"name":"TestSolver","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":0,"byte_end":2926,"line_start":1,"line_end":74,"column_start":1,"column_end":27},"name":"","qualname":"::","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":1353},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":164},{"krate":0,"index":237},{"krate":0,"index":250},{"krate":0,"index":277},{"krate":0,"index":664},{"krate":0,"index":980},{"krate":0,"index":1003},{"krate":0,"index":1069},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1085}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":9},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"clauses","qualname":"::clauses","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":58},{"krate":0,"index":88},{"krate":0,"index":142},{"krate":0,"index":147},{"krate":0,"index":151},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":20},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"builder","qualname":"::clauses::builder","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":1389},{"krate":0,"index":33},{"krate":0,"index":40}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":33},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":18093,"byte_end":18106,"line_start":13,"line_end":13,"column_start":12,"column_end":25},"name":"ClauseBuilder","qualname":"::clauses::builder::ClauseBuilder","value":"ClauseBuilder { db }","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39}],"decl_id":null,"docs":" The \"clause builder\" is a useful tool for building up sets of\n program clauses. It takes ownership of the output vector while it\n lasts, and offers methods like `push_clause` and so forth to\n append to it.\n","sig":null,"attributes":[{"value":"/ The \"clause builder\" is a useful tool for building up sets of","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":17863,"byte_end":17928,"line_start":9,"line_end":9,"column_start":1,"column_end":66}},{"value":"/ program clauses. It takes ownership of the output vector while it","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":17929,"byte_end":17998,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/ lasts, and offers methods like `push_clause` and so forth to","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":17999,"byte_end":18063,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/ append to it.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":18064,"byte_end":18081,"line_start":12,"line_end":12,"column_start":1,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":36},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":18138,"byte_end":18140,"line_start":14,"line_end":14,"column_start":9,"column_end":11},"name":"db","qualname":"::clauses::builder::ClauseBuilder::db","value":"&'me (dyn RustIrDatabase<TF> + 'me)","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":18355,"byte_end":18358,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"new","qualname":"<ClauseBuilder>::new","value":"pub fn new(&'me RustIrDatabase<TF>, &'me mut Vec<ProgramClause<TF>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":18850,"byte_end":18859,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"push_fact","qualname":"<ClauseBuilder>::push_fact","value":"pub fn push_fact<impl CastTo<DomainGoal<TF>>: CastTo<DomainGoal<TF>>>(&mut Self,\n                                                                      impl CastTo<DomainGoal<TF>>)","parent":null,"children":[],"decl_id":null,"docs":" Pushes a \"fact\" `forall<..> { consequence }` into the set of\n program clauses, meaning something that we can assume to be\n true unconditionally. The `forall<..>` binders will be\n whichever binders have been pushed (see `push_binders`).\n","sig":null,"attributes":[{"value":"/ Pushes a \"fact\" `forall<..> { consequence }` into the set of","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":18578,"byte_end":18642,"line_start":30,"line_end":30,"column_start":5,"column_end":69}},{"value":"/ program clauses, meaning something that we can assume to be","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":18647,"byte_end":18710,"line_start":31,"line_end":31,"column_start":5,"column_end":68}},{"value":"/ true unconditionally. The `forall<..>` binders will be","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":18715,"byte_end":18773,"line_start":32,"line_end":32,"column_start":5,"column_end":63}},{"value":"/ whichever binders have been pushed (see `push_binders`).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":18778,"byte_end":18838,"line_start":33,"line_end":33,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":19275,"byte_end":19286,"line_start":42,"line_end":42,"column_start":12,"column_end":23},"name":"push_clause","qualname":"<ClauseBuilder>::push_clause","value":"pub fn push_clause<impl CastTo<DomainGoal<TF>>: CastTo<DomainGoal<TF>>,\n                   impl CastTo<Goal<TF>>: CastTo<Goal<TF>>,\n                   impl IntoIterator<Item = impl CastTo<Goal<TF>>>: IntoIterator<Item\n                   =\n                   impl CastTo<Goal<TF>>>>(&mut Self,\n                                           impl CastTo<DomainGoal<TF>>,\n                                           impl IntoIterator<Item = impl CastTo<Goal<TF>>>)","parent":null,"children":[],"decl_id":null,"docs":" Pushes a clause `forall<..> { consequence :- conditions }`\n into the set of program clauses, meaning that `consequence`\n can be proven if `conditions` are all true.  The `forall<..>`\n binders will be whichever binders have been pushed (see `push_binders`).\n","sig":null,"attributes":[{"value":"/ Pushes a clause `forall<..> { consequence :- conditions }`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":18982,"byte_end":19044,"line_start":38,"line_end":38,"column_start":5,"column_end":67}},{"value":"/ into the set of program clauses, meaning that `consequence`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":19049,"byte_end":19112,"line_start":39,"line_end":39,"column_start":5,"column_end":68}},{"value":"/ can be proven if `conditions` are all true.  The `forall<..>`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":19117,"byte_end":19182,"line_start":40,"line_end":40,"column_start":5,"column_end":70}},{"value":"/ binders will be whichever binders have been pushed (see `push_binders`).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":19187,"byte_end":19263,"line_start":41,"line_end":41,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":20047,"byte_end":20068,"line_start":65,"line_end":65,"column_start":12,"column_end":33},"name":"placeholders_in_scope","qualname":"<ClauseBuilder>::placeholders_in_scope","value":"pub fn placeholders_in_scope(&Self) -> &[Parameter<TF>]","parent":null,"children":[],"decl_id":null,"docs":" Accesses the placeholders for the current list of parameters in scope.\n","sig":null,"attributes":[{"value":"/ Accesses the placeholders for the current list of parameters in scope.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":19961,"byte_end":20035,"line_start":64,"line_end":64,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":20541,"byte_end":20553,"line_start":76,"line_end":76,"column_start":12,"column_end":24},"name":"push_binders","qualname":"<ClauseBuilder>::push_binders","value":"pub fn push_binders<V,\n                    impl FnOnce(&mut Self, V::Result): FnOnce(&mut Self,\n                                                              V::Result) ->\n                    ()>(&mut Self, &Binders<V>,\n                        impl FnOnce(&mut Self, V::Result)) where V: Fold<TF> +\nHasTypeFamily<TypeFamily = TF>","parent":null,"children":[],"decl_id":null,"docs":" Executes `op` with the `binders` in-scope; `op` is invoked\n with the bound value `v` as a parameter. After `op` finishes,\n the binders are popped from scope.","sig":null,"attributes":[{"value":"/ Executes `op` with the `binders` in-scope; `op` is invoked","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":20134,"byte_end":20196,"line_start":69,"line_end":69,"column_start":5,"column_end":67}},{"value":"/ with the bound value `v` as a parameter. After `op` finishes,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":20201,"byte_end":20266,"line_start":70,"line_end":70,"column_start":5,"column_end":70}},{"value":"/ the binders are popped from scope.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":20271,"byte_end":20309,"line_start":71,"line_end":71,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":20314,"byte_end":20317,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ The new binders are always pushed onto the end of the internal","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":20322,"byte_end":20388,"line_start":73,"line_end":73,"column_start":5,"column_end":71}},{"value":"/ list of binders; this means that any extant values where were","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":20393,"byte_end":20458,"line_start":74,"line_end":74,"column_start":5,"column_end":70}},{"value":"/ created referencing the *old* list of binders are still valid.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":20463,"byte_end":20529,"line_start":75,"line_end":75,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":21489,"byte_end":21502,"line_start":103,"line_end":103,"column_start":12,"column_end":25},"name":"push_bound_ty","qualname":"<ClauseBuilder>::push_bound_ty","value":"pub fn push_bound_ty<impl FnOnce(&mut Self, Ty<TF>): FnOnce(&mut Self, Ty<TF>)\n                     -> ()>(&mut Self, impl FnOnce(&mut Self, Ty<TF>))","parent":null,"children":[],"decl_id":null,"docs":" Push a single binder, for a type, at the end of the binder\n list.  The indices of previously bound variables are\n unaffected and hence the context remains usable. Invokes `op`,\n passing a type representing this new type variable in as an\n argument.\n","sig":null,"attributes":[{"value":"/ Push a single binder, for a type, at the end of the binder","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":21173,"byte_end":21235,"line_start":97,"line_end":97,"column_start":5,"column_end":67}},{"value":"/ list.  The indices of previously bound variables are","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":21240,"byte_end":21296,"line_start":98,"line_end":98,"column_start":5,"column_end":61}},{"value":"/ unaffected and hence the context remains usable. Invokes `op`,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":21301,"byte_end":21367,"line_start":99,"line_end":99,"column_start":5,"column_end":71}},{"value":"/ passing a type representing this new type variable in as an","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":21372,"byte_end":21435,"line_start":100,"line_end":100,"column_start":5,"column_end":68}},{"value":"/ argument.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":21440,"byte_end":21453,"line_start":101,"line_end":101,"column_start":5,"column_end":18}},{"value":"allow(dead_code)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":21458,"byte_end":21477,"line_start":102,"line_end":102,"column_start":5,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":88},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/program_clauses.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"program_clauses","qualname":"::clauses::program_clauses","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/program_clauses.rs","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":106},{"krate":0,"index":114},{"krate":0,"index":123},{"krate":0,"index":133}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":98},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/program_clauses.rs","byte_start":26282,"byte_end":26298,"line_start":12,"line_end":12,"column_start":11,"column_end":27},"name":"ToProgramClauses","qualname":"::clauses::program_clauses::ToProgramClauses","value":"ToProgramClauses<TF: TypeFamily>","parent":null,"children":[{"krate":0,"index":100}],"decl_id":null,"docs":" Trait for lowering a given piece of rust-ir source (e.g., an impl\n or struct definition) into its associated \"program clauses\" --\n that is, into the lowered, logical rules that it defines.\n","sig":null,"attributes":[{"value":"/ Trait for lowering a given piece of rust-ir source (e.g., an impl","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/program_clauses.rs","byte_start":26073,"byte_end":26142,"line_start":9,"line_end":9,"column_start":1,"column_end":70}},{"value":"/ or struct definition) into its associated \"program clauses\" --","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/program_clauses.rs","byte_start":26143,"byte_end":26209,"line_start":10,"line_end":10,"column_start":1,"column_end":67}},{"value":"/ that is, into the lowered, logical rules that it defines.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/program_clauses.rs","byte_start":26210,"byte_end":26271,"line_start":11,"line_end":11,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/program_clauses.rs","byte_start":26324,"byte_end":26342,"line_start":13,"line_end":13,"column_start":8,"column_end":26},"name":"to_program_clauses","qualname":"::clauses::program_clauses::ToProgramClauses::to_program_clauses","value":"pub fn to_program_clauses(&Self, &mut ClauseBuilder<, TF>)","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":142},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":4176,"byte_end":4197,"line_start":46,"line_end":46,"column_start":8,"column_end":29},"name":"push_auto_trait_impls","qualname":"::clauses::push_auto_trait_impls","value":"pub fn push_auto_trait_impls<TF: TypeFamily>(&mut ClauseBuilder<, TF>,\n                                             TraitId, StructId)","parent":null,"children":[],"decl_id":null,"docs":" For auto-traits, we generate a default rule for every struct,\n unless there is a manual impl for that struct given explicitly.","sig":null,"attributes":[{"value":"/ For auto-traits, we generate a default rule for every struct,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3315,"byte_end":3380,"line_start":16,"line_end":16,"column_start":1,"column_end":66}},{"value":"/ unless there is a manual impl for that struct given explicitly.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3381,"byte_end":3448,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3449,"byte_end":3452,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ So, if you have `impl Send for MyList<Foo>`, then we would","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3453,"byte_end":3515,"line_start":19,"line_end":19,"column_start":1,"column_end":63}},{"value":"/ generate no rule for `MyList` at all -- similarly if you have","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3516,"byte_end":3581,"line_start":20,"line_end":20,"column_start":1,"column_end":66}},{"value":"/ `impl !Send for MyList<Foo>`, or `impl<T> Send for MyList<T>`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3582,"byte_end":3648,"line_start":21,"line_end":21,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3649,"byte_end":3652,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ But if you have no rules at all for `Send` / `MyList`, then we","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3653,"byte_end":3719,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/ generate an impl based on the field types of `MyList`. For example","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3720,"byte_end":3790,"line_start":24,"line_end":24,"column_start":1,"column_end":71}},{"value":"/ given the following program:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3791,"byte_end":3823,"line_start":25,"line_end":25,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3824,"byte_end":3827,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```notrust","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3828,"byte_end":3842,"line_start":27,"line_end":27,"column_start":1,"column_end":15}},{"value":"/ #[auto] trait Send { }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3843,"byte_end":3869,"line_start":28,"line_end":28,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3870,"byte_end":3873,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ struct MyList<T> {","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3874,"byte_end":3896,"line_start":30,"line_end":30,"column_start":1,"column_end":23}},{"value":"/     data: T,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3897,"byte_end":3913,"line_start":31,"line_end":31,"column_start":1,"column_end":17}},{"value":"/     next: Box<Option<MyList<T>>>,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3914,"byte_end":3951,"line_start":32,"line_end":32,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3952,"byte_end":3957,"line_start":33,"line_end":33,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3958,"byte_end":3961,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3962,"byte_end":3969,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3970,"byte_end":3973,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ we generate:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3974,"byte_end":3990,"line_start":37,"line_end":37,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3991,"byte_end":3994,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ```notrust","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3995,"byte_end":4009,"line_start":39,"line_end":39,"column_start":1,"column_end":15}},{"value":"/ forall<T> {","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":4010,"byte_end":4025,"line_start":40,"line_end":40,"column_start":1,"column_end":16}},{"value":"/     Implemented(MyList<T>: Send) :-","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":4026,"byte_end":4065,"line_start":41,"line_end":41,"column_start":1,"column_end":40}},{"value":"/         Implemented(T: Send),","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":4066,"byte_end":4099,"line_start":42,"line_end":42,"column_start":1,"column_end":34}},{"value":"/         Implemented(Box<Option<MyList<T>>>: Send).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":4100,"byte_end":4154,"line_start":43,"line_end":43,"column_start":1,"column_end":55}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":4155,"byte_end":4160,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":4161,"byte_end":4168,"line_start":45,"line_end":45,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":164},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"coherence","qualname":"::coherence","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":1439},{"krate":0,"index":173},{"krate":0,"index":1441},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":188},{"krate":0,"index":217},{"krate":0,"index":1086},{"krate":0,"index":1093},{"krate":0,"index":223},{"krate":0,"index":225},{"krate":0,"index":1095},{"krate":0,"index":1108},{"krate":0,"index":1106},{"krate":0,"index":1104},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":226},{"krate":0,"index":1110},{"krate":0,"index":1134},{"krate":0,"index":1132},{"krate":0,"index":1130},{"krate":0,"index":1124},{"krate":0,"index":1122},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1113},{"krate":0,"index":229}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":177},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence/orphan.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"orphan","qualname":"::coherence::orphan","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence/orphan.rs","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":185},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence/orphan.rs","byte_start":56867,"byte_end":56887,"line_start":16,"line_end":16,"column_start":8,"column_end":28},"name":"perform_orphan_check","qualname":"::coherence::orphan::perform_orphan_check","value":"pub fn perform_orphan_check<TF: TypeFamily>(&RustIrDatabase<TF>, SolverChoice,\n                                            ImplId)\n-> Result<(), CoherenceError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":217},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":52284,"byte_end":52299,"line_start":14,"line_end":14,"column_start":12,"column_end":27},"name":"CoherenceSolver","qualname":"::coherence::CoherenceSolver","value":"CoherenceSolver {  }","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1087},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":52466,"byte_end":52482,"line_start":22,"line_end":22,"column_start":5,"column_end":21},"name":"OverlappingImpls","qualname":"::coherence::CoherenceError::OverlappingImpls","value":"CoherenceError::OverlappingImpls(Identifier)","parent":{"krate":0,"index":1086},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1090},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":52500,"byte_end":52517,"line_start":23,"line_end":23,"column_start":5,"column_end":22},"name":"FailedOrphanCheck","qualname":"::coherence::CoherenceError::FailedOrphanCheck","value":"CoherenceError::FailedOrphanCheck(Identifier)","parent":{"krate":0,"index":1086},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1086},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":52445,"byte_end":52459,"line_start":21,"line_end":21,"column_start":10,"column_end":24},"name":"CoherenceError","qualname":"::coherence::CoherenceError","value":"pub enum CoherenceError {\n    OverlappingImpls(Identifier),\n    FailedOrphanCheck(Identifier),\n}","parent":null,"children":[{"krate":0,"index":1087},{"krate":0,"index":1090}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1095},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":53186,"byte_end":53210,"line_start":44,"line_end":44,"column_start":12,"column_end":36},"name":"SpecializationPriorities","qualname":"::coherence::SpecializationPriorities","value":"SpecializationPriorities {  }","parent":null,"children":[{"krate":0,"index":1096}],"decl_id":null,"docs":" Stores the specialization priorities for a set of impls.\n This basically encodes which impls specialize one another.\n","sig":null,"attributes":[{"value":"/ Stores the specialization priorities for a set of impls.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":53003,"byte_end":53063,"line_start":41,"line_end":41,"column_start":1,"column_end":61}},{"value":"/ This basically encodes which impls specialize one another.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":53064,"byte_end":53126,"line_start":42,"line_end":42,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":53392,"byte_end":53400,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"priority","qualname":"<SpecializationPriorities>::priority","value":"pub fn priority(&Self, ImplId) -> SpecializationPriority","parent":null,"children":[],"decl_id":null,"docs":" Lookup the priority of an impl in the set (panics if impl is not in set).\n","sig":null,"attributes":[{"value":"/ Lookup the priority of an impl in the set (panics if impl is not in set).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":53303,"byte_end":53380,"line_start":49,"line_end":49,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":1110},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":54073,"byte_end":54095,"line_start":66,"line_end":66,"column_start":12,"column_end":34},"name":"SpecializationPriority","qualname":"::coherence::SpecializationPriority","value":"","parent":null,"children":[],"decl_id":null,"docs":" Impls with higher priority take precedence over impls with lower\n priority (if both apply to the same types). Impls with equal\n priority should never apply to the same set of input types.\n","sig":null,"attributes":[{"value":"/ Impls with higher priority take precedence over impls with lower","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":53793,"byte_end":53861,"line_start":62,"line_end":62,"column_start":1,"column_end":69}},{"value":"/ priority (if both apply to the same types). Impls with equal","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":53862,"byte_end":53926,"line_start":63,"line_end":63,"column_start":1,"column_end":65}},{"value":"/ priority should never apply to the same set of input types.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":53927,"byte_end":53990,"line_start":64,"line_end":64,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":54227,"byte_end":54230,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"new","qualname":"<CoherenceSolver>::new","value":"pub fn new(&'db RustIrDatabase<TF>, SolverChoice, TraitId) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `CoherenceSolver`.\n","sig":null,"attributes":[{"value":"/ Constructs a new `CoherenceSolver`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":54176,"byte_end":54215,"line_start":72,"line_end":72,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":54461,"byte_end":54486,"line_start":85,"line_end":85,"column_start":12,"column_end":37},"name":"specialization_priorities","qualname":"<CoherenceSolver>::specialization_priorities","value":"pub fn specialization_priorities(&Self)\n-> Result<Arc<SpecializationPriorities>, CoherenceError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":250},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/ext.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ext","qualname":"::ext","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/ext.rs","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":263},{"krate":0,"index":269},{"krate":0,"index":273}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":257},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/ext.rs","byte_start":68218,"byte_end":68230,"line_start":6,"line_end":6,"column_start":11,"column_end":23},"name":"CanonicalExt","qualname":"::ext::CanonicalExt","value":"CanonicalExt<T: HasTypeFamily, TF: TypeFamily>","parent":null,"children":[{"krate":0,"index":260}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/ext.rs","byte_start":68274,"byte_end":68277,"line_start":7,"line_end":7,"column_start":8,"column_end":11},"name":"map","qualname":"::ext::CanonicalExt::map","value":"pub fn map<OP, U>(Self, OP) -> Canonical<U::Result> where\nOP: FnOnce(T::Result) -> U, T: Fold<TF>, U: Fold<TF>,\nU::Result: HasTypeFamily<TypeFamily = TF>","parent":{"krate":0,"index":257},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":269},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/ext.rs","byte_start":70154,"byte_end":70161,"line_start":53,"line_end":53,"column_start":11,"column_end":18},"name":"GoalExt","qualname":"::ext::GoalExt","value":"GoalExt<TF: TypeFamily>","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":272}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/ext.rs","byte_start":70187,"byte_end":70203,"line_start":54,"line_end":54,"column_start":8,"column_end":24},"name":"into_peeled_goal","qualname":"::ext::GoalExt::into_peeled_goal","value":"pub fn into_peeled_goal(Self) -> UCanonical<InEnvironment<Goal<TF>>>","parent":{"krate":0,"index":269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/ext.rs","byte_start":70257,"byte_end":70273,"line_start":55,"line_end":55,"column_start":8,"column_end":24},"name":"into_closed_goal","qualname":"::ext::GoalExt::into_closed_goal","value":"pub fn into_closed_goal(Self) -> UCanonical<InEnvironment<Goal<TF>>>","parent":{"krate":0,"index":269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":357},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/instantiate.rs","byte_start":89580,"byte_end":89587,"line_start":100,"line_end":100,"column_start":10,"column_end":17},"name":"Binders","qualname":"::infer::instantiate::IntoBindersAndValue::Binders","value":"type Binders: IntoIterator<Item = ParameterKind<()>>;","parent":{"krate":0,"index":356},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":358},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/instantiate.rs","byte_start":89638,"byte_end":89643,"line_start":101,"line_end":101,"column_start":10,"column_end":15},"name":"Value","qualname":"::infer::instantiate::IntoBindersAndValue::Value","value":"type Value;","parent":{"krate":0,"index":356},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1262},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":145176,"byte_end":145182,"line_start":17,"line_end":17,"column_start":5,"column_end":11},"name":"Unique","qualname":"::solve::Solution::Unique","value":"Solution::Unique(Canonical<ConstrainedSubst<TF>>)","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" The goal indeed holds, and there is a unique value for all existential\n variables. In this case, we also record a set of lifetime constraints\n which must also hold for the goal to be valid.\n","sig":null,"attributes":[{"value":"/ The goal indeed holds, and there is a unique value for all existential","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":144964,"byte_end":145038,"line_start":14,"line_end":14,"column_start":5,"column_end":79}},{"value":"/ variables. In this case, we also record a set of lifetime constraints","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":145043,"byte_end":145116,"line_start":15,"line_end":15,"column_start":5,"column_end":78}},{"value":"/ which must also hold for the goal to be valid.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":145121,"byte_end":145171,"line_start":16,"line_end":16,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1265},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":145476,"byte_end":145481,"line_start":23,"line_end":23,"column_start":5,"column_end":10},"name":"Ambig","qualname":"::solve::Solution::Ambig","value":"Solution::Ambig(Guidance<TF>)","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" The goal may be provable in multiple ways, but regardless we may have some guidance\n for type inference. In this case, we don't return any lifetime\n constraints, since we have not \"committed\" to any particular solution\n yet.\n","sig":null,"attributes":[{"value":"/ The goal may be provable in multiple ways, but regardless we may have some guidance","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":145222,"byte_end":145309,"line_start":19,"line_end":19,"column_start":5,"column_end":92}},{"value":"/ for type inference. In this case, we don't return any lifetime","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":145314,"byte_end":145380,"line_start":20,"line_end":20,"column_start":5,"column_end":71}},{"value":"/ constraints, since we have not \"committed\" to any particular solution","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":145385,"byte_end":145458,"line_start":21,"line_end":21,"column_start":5,"column_end":78}},{"value":"/ yet.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":145463,"byte_end":145471,"line_start":22,"line_end":22,"column_start":5,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":1260},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":144933,"byte_end":144941,"line_start":13,"line_end":13,"column_start":10,"column_end":18},"name":"Solution","qualname":"::solve::Solution","value":"pub enum Solution<TF: TypeFamily> {\n\n    /// The goal indeed holds, and there is a unique value for all existential\n    /// variables. In this case, we also record a set of lifetime constraints\n    /// which must also hold for the goal to be valid.\n    Unique(Canonical<ConstrainedSubst<TF>>),\n\n    /// The goal may be provable in multiple ways, but regardless we may have some guidance\n    /// for type inference. In this case, we don't return any lifetime\n    /// constraints, since we have not \"committed\" to any particular solution\n    /// yet.\n    Ambig(Guidance<TF>),\n}","parent":null,"children":[{"krate":0,"index":1262},{"krate":0,"index":1265}],"decl_id":null,"docs":" A (possible) solution for a proposed goal.\n","sig":null,"attributes":[{"value":"/ A (possible) solution for a proposed goal.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":144838,"byte_end":144884,"line_start":11,"line_end":11,"column_start":1,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1287},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":145903,"byte_end":145911,"line_start":33,"line_end":33,"column_start":5,"column_end":13},"name":"Definite","qualname":"::solve::Guidance::Definite","value":"Guidance::Definite(Canonical<Substitution<TF>>)","parent":{"krate":0,"index":1285},"children":[],"decl_id":null,"docs":" The existential variables *must* have the given values if the goal is\n ever to hold, but that alone isn't enough to guarantee the goal will\n actually hold.\n","sig":null,"attributes":[{"value":"/ The existential variables *must* have the given values if the goal is","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":145725,"byte_end":145798,"line_start":30,"line_end":30,"column_start":5,"column_end":78}},{"value":"/ ever to hold, but that alone isn't enough to guarantee the goal will","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":145803,"byte_end":145875,"line_start":31,"line_end":31,"column_start":5,"column_end":77}},{"value":"/ actually hold.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":145880,"byte_end":145898,"line_start":32,"line_end":32,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1290},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":146150,"byte_end":146159,"line_start":38,"line_end":38,"column_start":5,"column_end":14},"name":"Suggested","qualname":"::solve::Guidance::Suggested","value":"Guidance::Suggested(Canonical<Substitution<TF>>)","parent":{"krate":0,"index":1285},"children":[],"decl_id":null,"docs":" There are multiple plausible values for the existentials, but the ones\n here are suggested as the preferred choice heuristically. These should\n be used for inference fallback only.\n","sig":null,"attributes":[{"value":"/ There are multiple plausible values for the existentials, but the ones","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":145947,"byte_end":146021,"line_start":35,"line_end":35,"column_start":5,"column_end":79}},{"value":"/ here are suggested as the preferred choice heuristically. These should","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":146026,"byte_end":146100,"line_start":36,"line_end":36,"column_start":5,"column_end":79}},{"value":"/ be used for inference fallback only.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":146105,"byte_end":146145,"line_start":37,"line_end":37,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1293},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":146264,"byte_end":146271,"line_start":41,"line_end":41,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::solve::Guidance::Unknown","value":"Guidance::Unknown","parent":{"krate":0,"index":1285},"children":[],"decl_id":null,"docs":" There's no useful information to feed back to type inference\n","sig":null,"attributes":[{"value":"/ There's no useful information to feed back to type inference","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":146195,"byte_end":146259,"line_start":40,"line_end":40,"column_start":5,"column_end":69}}]},{"kind":"Enum","id":{"krate":0,"index":1285},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":145694,"byte_end":145702,"line_start":29,"line_end":29,"column_start":10,"column_end":18},"name":"Guidance","qualname":"::solve::Guidance","value":"pub enum Guidance<TF: TypeFamily> {\n\n    /// The existential variables *must* have the given values if the goal is\n    /// ever to hold, but that alone isn't enough to guarantee the goal will\n    /// actually hold.\n    Definite(Canonical<Substitution<TF>>),\n\n    /// There are multiple plausible values for the existentials, but the ones\n    /// here are suggested as the preferred choice heuristically. These should\n    /// be used for inference fallback only.\n    Suggested(Canonical<Substitution<TF>>),\n\n    /// There's no useful information to feed back to type inference\n    Unknown,\n}","parent":null,"children":[{"krate":0,"index":1287},{"krate":0,"index":1290},{"krate":0,"index":1293}],"decl_id":null,"docs":" When a goal holds ambiguously (e.g., because there are multiple possible\n solutions), we issue a set of *guidance* back to type inference.\n","sig":null,"attributes":[{"value":"/ When a goal holds ambiguously (e.g., because there are multiple possible","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":145500,"byte_end":145576,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ solutions), we issue a set of *guidance* back to type inference.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":145577,"byte_end":145645,"line_start":27,"line_end":27,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":146323,"byte_end":146332,"line_start":45,"line_end":45,"column_start":12,"column_end":21},"name":"is_unique","qualname":"<Solution<TF>>::is_unique","value":"pub fn is_unique(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1313},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":147241,"byte_end":147244,"line_start":71,"line_end":71,"column_start":5,"column_end":8},"name":"SLG","qualname":"::solve::SolverChoice::SLG","value":"SolverChoice::SLG { max_size }","parent":{"krate":0,"index":1312},"children":[],"decl_id":null,"docs":" Run the SLG solver, producing a Solution.\n","sig":null,"attributes":[{"value":"/ Run the SLG solver, producing a Solution.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":147191,"byte_end":147236,"line_start":70,"line_end":70,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":1312},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":147172,"byte_end":147184,"line_start":69,"line_end":69,"column_start":10,"column_end":22},"name":"SolverChoice","qualname":"::solve::SolverChoice","value":"pub enum SolverChoice {\n\n    /// Run the SLG solver, producing a Solution.\n    SLG {\n        max_size: usize,\n    },\n}","parent":null,"children":[{"krate":0,"index":1313}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":949},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":147449,"byte_end":147460,"line_start":81,"line_end":81,"column_start":12,"column_end":23},"name":"into_solver","qualname":"<SolverChoice>::into_solver","value":"pub fn into_solver<TF: TypeFamily>(Self) -> Solver<TF>","parent":null,"children":[],"decl_id":null,"docs":" Creates a solver state.\n","sig":null,"attributes":[{"value":"/ Creates a solver state.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":147410,"byte_end":147437,"line_start":80,"line_end":80,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":953},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148031,"byte_end":148037,"line_start":100,"line_end":100,"column_start":12,"column_end":18},"name":"Solver","qualname":"::solve::Solver","value":"Solver {  }","parent":null,"children":[{"krate":0,"index":955}],"decl_id":null,"docs":" Finds the solution to \"goals\", or trait queries -- i.e., figures\n out what sets of types implement which traits. Also, between\n queries, this struct stores the cached state from previous solver\n attempts, which can then be re-used later.\n","sig":null,"attributes":[{"value":"/ Finds the solution to \"goals\", or trait queries -- i.e., figures","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":147769,"byte_end":147837,"line_start":96,"line_end":96,"column_start":1,"column_end":69}},{"value":"/ out what sets of types implement which traits. Also, between","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":147838,"byte_end":147902,"line_start":97,"line_end":97,"column_start":1,"column_end":65}},{"value":"/ queries, this struct stores the cached state from previous solver","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":147903,"byte_end":147972,"line_start":98,"line_end":98,"column_start":1,"column_end":70}},{"value":"/ attempts, which can then be re-used later.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":147973,"byte_end":148019,"line_start":99,"line_end":99,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148913,"byte_end":148918,"line_start":123,"line_end":123,"column_start":12,"column_end":17},"name":"solve","qualname":"<Solver<TF>>::solve","value":"pub fn solve(&mut Self, &RustIrDatabase<TF>,\n             &UCanonical<InEnvironment<Goal<TF>>>) -> Option<Solution<TF>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to solve the given goal, which must be in canonical\n form. Returns a unique solution (if one exists).  This will do\n only as much work towards `goal` as it has to (and that work\n is cached for future attempts).","sig":null,"attributes":[{"value":"/ Attempts to solve the given goal, which must be in canonical","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148133,"byte_end":148197,"line_start":105,"line_end":105,"column_start":5,"column_end":69}},{"value":"/ form. Returns a unique solution (if one exists).  This will do","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148202,"byte_end":148268,"line_start":106,"line_end":106,"column_start":5,"column_end":71}},{"value":"/ only as much work towards `goal` as it has to (and that work","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148273,"byte_end":148337,"line_start":107,"line_end":107,"column_start":5,"column_end":69}},{"value":"/ is cached for future attempts).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148342,"byte_end":148377,"line_start":108,"line_end":108,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148382,"byte_end":148385,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148390,"byte_end":148406,"line_start":110,"line_end":110,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148411,"byte_end":148414,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ - `program` -- defines the program clauses in scope.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148419,"byte_end":148475,"line_start":112,"line_end":112,"column_start":5,"column_end":61}},{"value":"/   - **Important:** You must supply the same set of program clauses","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148480,"byte_end":148550,"line_start":113,"line_end":113,"column_start":5,"column_end":75}},{"value":"/     each time you invoke `solve`, as otherwise the cached data may be","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148555,"byte_end":148628,"line_start":114,"line_end":114,"column_start":5,"column_end":78}},{"value":"/     invalid.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148633,"byte_end":148649,"line_start":115,"line_end":115,"column_start":5,"column_end":21}},{"value":"/ - `goal` the goal to solve","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148654,"byte_end":148684,"line_start":116,"line_end":116,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148689,"byte_end":148692,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148697,"byte_end":148710,"line_start":118,"line_end":118,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148715,"byte_end":148718,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ - `None` is the goal cannot be proven.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148723,"byte_end":148765,"line_start":120,"line_end":120,"column_start":5,"column_end":47}},{"value":"/ - `Some(solution)` if we succeeded in finding *some* answers,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148770,"byte_end":148835,"line_start":121,"line_end":121,"column_start":5,"column_end":70}},{"value":"/   although `solution` may reflect ambiguity and unknowns.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148840,"byte_end":148901,"line_start":122,"line_end":122,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":150193,"byte_end":150207,"line_start":154,"line_end":154,"column_start":12,"column_end":26},"name":"solve_multiple","qualname":"<Solver<TF>>::solve_multiple","value":"pub fn solve_multiple<impl FnMut(Canonical<ConstrainedSubst<TF>>, bool) -> bool: FnMut(Canonical<ConstrainedSubst<TF>>,\n                                                                                       bool)\n                      ->\n                      bool>(&mut Self, &RustIrDatabase<TF>,\n                            &UCanonical<InEnvironment<Goal<TF>>>,\n                            impl FnMut(Canonical<ConstrainedSubst<TF>>, bool) -> bool)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to solve the given goal, which must be in canonical\n form. Provides multiple solutions to function `f`.  This will do\n only as much work towards `goal` as it has to (and that work\n is cached for future attempts).","sig":null,"attributes":[{"value":"/ Attempts to solve the given goal, which must be in canonical","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":149168,"byte_end":149232,"line_start":132,"line_end":132,"column_start":5,"column_end":69}},{"value":"/ form. Provides multiple solutions to function `f`.  This will do","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":149237,"byte_end":149305,"line_start":133,"line_end":133,"column_start":5,"column_end":73}},{"value":"/ only as much work towards `goal` as it has to (and that work","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":149310,"byte_end":149374,"line_start":134,"line_end":134,"column_start":5,"column_end":69}},{"value":"/ is cached for future attempts).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":149379,"byte_end":149414,"line_start":135,"line_end":135,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":149419,"byte_end":149422,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":149427,"byte_end":149443,"line_start":137,"line_end":137,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":149448,"byte_end":149451,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ - `program` -- defines the program clauses in scope.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":149456,"byte_end":149512,"line_start":139,"line_end":139,"column_start":5,"column_end":61}},{"value":"/   - **Important:** You must supply the same set of program clauses","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":149517,"byte_end":149587,"line_start":140,"line_end":140,"column_start":5,"column_end":75}},{"value":"/     each time you invoke `solve`, as otherwise the cached data may be","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":149592,"byte_end":149665,"line_start":141,"line_end":141,"column_start":5,"column_end":78}},{"value":"/     invalid.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":149670,"byte_end":149686,"line_start":142,"line_end":142,"column_start":5,"column_end":21}},{"value":"/ - `goal` the goal to solve","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":149691,"byte_end":149721,"line_start":143,"line_end":143,"column_start":5,"column_end":35}},{"value":"/ - `f` -- function to proceed solution. New solutions will be generated","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":149726,"byte_end":149800,"line_start":144,"line_end":144,"column_start":5,"column_end":79}},{"value":"/ while function returns `true`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":149805,"byte_end":149839,"line_start":145,"line_end":145,"column_start":5,"column_end":39}},{"value":"/   - first argument is solution found","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":149844,"byte_end":149884,"line_start":146,"line_end":146,"column_start":5,"column_end":45}},{"value":"/   - second argument is ther next solution present","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":149889,"byte_end":149942,"line_start":147,"line_end":147,"column_start":5,"column_end":58}},{"value":"/   - returns true if next solution should be handled","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":149947,"byte_end":150002,"line_start":148,"line_end":148,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":150007,"byte_end":150010,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":150015,"byte_end":150028,"line_start":150,"line_end":150,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":150033,"byte_end":150036,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ - `true` all solutions were processed with the function.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":150041,"byte_end":150101,"line_start":152,"line_end":152,"column_start":5,"column_end":65}},{"value":"/ - `false` the function returned `false` and solutions were interrupted.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":150106,"byte_end":150181,"line_start":153,"line_end":153,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":150530,"byte_end":150539,"line_start":164,"line_end":164,"column_start":12,"column_end":21},"name":"into_test","qualname":"<Solver<TF>>::into_test","value":"pub fn into_test(Self) -> TestSolver<TF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":965},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":150888,"byte_end":150898,"line_start":177,"line_end":177,"column_start":12,"column_end":22},"name":"TestSolver","qualname":"::solve::TestSolver","value":"TestSolver {  }","parent":null,"children":[{"krate":0,"index":967}],"decl_id":null,"docs":" Wrapper around a `Solver` that exposes\n additional methods meant only for testing.\n","sig":null,"attributes":[{"value":"/ Wrapper around a `Solver` that exposes","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":150787,"byte_end":150829,"line_start":175,"line_end":175,"column_start":1,"column_end":43}},{"value":"/ additional methods meant only for testing.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":150830,"byte_end":150876,"line_start":176,"line_end":176,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":151467,"byte_end":151480,"line_start":199,"line_end":199,"column_start":12,"column_end":25},"name":"force_answers","qualname":"<TestSolver<TF>>::force_answers","value":"pub fn force_answers<'tf>(&mut Self, &RustIrDatabase<TF>,\n                          &UCanonical<InEnvironment<Goal<TF>>>, usize)\n-> Box<std::fmt::Debug + 'tf> where TF: 'tf","parent":null,"children":[],"decl_id":null,"docs":" Force the first `num_answers` answers. Meant only for testing,\n and hence the precise return type is obscured (but you can get\n its debug representation).\n","sig":null,"attributes":[{"value":"/ Force the first `num_answers` answers. Meant only for testing,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":151283,"byte_end":151349,"line_start":196,"line_end":196,"column_start":5,"column_end":71}},{"value":"/ and hence the precise return type is obscured (but you can get","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":151354,"byte_end":151420,"line_start":197,"line_end":197,"column_start":5,"column_end":71}},{"value":"/ its debug representation).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":151425,"byte_end":151455,"line_start":198,"line_end":198,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":979},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":152123,"byte_end":152150,"line_start":221,"line_end":221,"column_start":12,"column_end":39},"name":"num_cached_answers_for_goal","qualname":"<TestSolver<TF>>::num_cached_answers_for_goal","value":"pub fn num_cached_answers_for_goal(&mut Self, &RustIrDatabase<TF>,\n                                   &UCanonical<InEnvironment<Goal<TF>>>)\n-> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns then number of cached answers for `goal`. Used only in\n testing.\n","sig":null,"attributes":[{"value":"/ Returns then number of cached answers for `goal`. Used only in","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":152028,"byte_end":152094,"line_start":219,"line_end":219,"column_start":5,"column_end":71}},{"value":"/ testing.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":152099,"byte_end":152111,"line_start":220,"line_end":220,"column_start":5,"column_end":17}}]},{"kind":"Mod","id":{"krate":0,"index":980},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"split","qualname":"::split","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","parent":null,"children":[{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":1000}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":986},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":208516,"byte_end":208521,"line_start":9,"line_end":9,"column_start":11,"column_end":16},"name":"Split","qualname":"::split::Split","value":"Split<TF: TypeFamily>: RustIrDatabase<TF>","parent":null,"children":[{"krate":0,"index":988},{"krate":0,"index":990},{"krate":0,"index":992},{"krate":0,"index":994},{"krate":0,"index":997}],"decl_id":null,"docs":" Methods for splitting up the projections for associated types from\n the surrounding context.\n","sig":null,"attributes":[{"value":"/ Methods for splitting up the projections for associated types from","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":208406,"byte_end":208476,"line_start":7,"line_end":7,"column_start":1,"column_end":71}},{"value":"/ the surrounding context.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":208477,"byte_end":208505,"line_start":8,"line_end":8,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":208939,"byte_end":208955,"line_start":16,"line_end":16,"column_start":8,"column_end":24},"name":"split_projection","qualname":"::split::Split::split_projection","value":"pub fn split_projection<'p>(&Self, &'p ProjectionTy<TF>)\n-> (Arc<AssociatedTyDatum<TF>>, &'p [Parameter<TF>], &'p [Parameter<TF>])","parent":{"krate":0,"index":986},"children":[],"decl_id":null,"docs":" Given a projection of an associated type, split the type\n parameters into those that come from the *trait* and those\n that come from the *associated type itself*. So e.g. if you\n have `(Iterator::Item)<F>`, this would return `([F], [])`,\n since `Iterator::Item` is not generic and hence doesn't have\n any type parameters itself.\n","sig":null,"attributes":[{"value":"/ Given a projection of an associated type, split the type","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":208564,"byte_end":208624,"line_start":10,"line_end":10,"column_start":5,"column_end":65}},{"value":"/ parameters into those that come from the *trait* and those","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":208629,"byte_end":208691,"line_start":11,"line_end":11,"column_start":5,"column_end":67}},{"value":"/ that come from the *associated type itself*. So e.g. if you","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":208696,"byte_end":208759,"line_start":12,"line_end":12,"column_start":5,"column_end":68}},{"value":"/ have `(Iterator::Item)<F>`, this would return `([F], [])`,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":208764,"byte_end":208826,"line_start":13,"line_end":13,"column_start":5,"column_end":67}},{"value":"/ since `Iterator::Item` is not generic and hence doesn't have","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":208831,"byte_end":208895,"line_start":14,"line_end":14,"column_start":5,"column_end":69}},{"value":"/ any type parameters itself.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":208900,"byte_end":208931,"line_start":15,"line_end":15,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":209817,"byte_end":209849,"line_start":39,"line_end":39,"column_start":8,"column_end":40},"name":"trait_parameters_from_projection","qualname":"::split::Split::trait_parameters_from_projection","value":"pub fn trait_parameters_from_projection<'p>(&Self, &'p ProjectionTy<TF>)\n-> &'p [Parameter<TF>]","parent":{"krate":0,"index":986},"children":[],"decl_id":null,"docs":" Given a projection `<P0 as Trait<P1..Pn>>::Item<Pn..Pm>`,\n returns the trait parameters `[P0..Pn]` (see\n `split_projection`).\n","sig":null,"attributes":[{"value":"/ Given a projection `<P0 as Trait<P1..Pn>>::Item<Pn..Pm>`,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":209666,"byte_end":209727,"line_start":36,"line_end":36,"column_start":5,"column_end":66}},{"value":"/ returns the trait parameters `[P0..Pn]` (see","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":209732,"byte_end":209780,"line_start":37,"line_end":37,"column_start":5,"column_end":53}},{"value":"/ `split_projection`).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":209785,"byte_end":209809,"line_start":38,"line_end":38,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210196,"byte_end":210221,"line_start":50,"line_end":50,"column_start":8,"column_end":33},"name":"trait_ref_from_projection","qualname":"::split::Split::trait_ref_from_projection","value":"pub fn trait_ref_from_projection<'p>(&Self, &'p ProjectionTy<TF>)\n-> TraitRef<TF>","parent":{"krate":0,"index":986},"children":[],"decl_id":null,"docs":" Given a projection `<P0 as Trait<P1..Pn>>::Item<Pn..Pm>`,\n returns the trait parameters `[P0..Pn]` (see\n `split_projection`).\n","sig":null,"attributes":[{"value":"/ Given a projection `<P0 as Trait<P1..Pn>>::Item<Pn..Pm>`,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210045,"byte_end":210106,"line_start":47,"line_end":47,"column_start":5,"column_end":66}},{"value":"/ returns the trait parameters `[P0..Pn]` (see","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210111,"byte_end":210159,"line_start":48,"line_end":48,"column_start":5,"column_end":53}},{"value":"/ `split_projection`).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210164,"byte_end":210188,"line_start":49,"line_end":49,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":994},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":211261,"byte_end":211297,"line_start":81,"line_end":81,"column_start":8,"column_end":44},"name":"split_associated_ty_value_parameters","qualname":"::split::Split::split_associated_ty_value_parameters","value":"pub fn split_associated_ty_value_parameters<'p,\n                                            P>(&Self, &'p [P],\n                                               &AssociatedTyValue<TF>)\n-> (&'p [P], &'p [P])","parent":{"krate":0,"index":986},"children":[],"decl_id":null,"docs":" Given the full set of parameters (or binders) for an\n associated type *value* (which appears in an impl), splits\n them into the substitutions for the *impl* and those for the\n *associated type*.","sig":null,"attributes":[{"value":"/ Given the full set of parameters (or binders) for an","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210513,"byte_end":210569,"line_start":58,"line_end":58,"column_start":5,"column_end":61}},{"value":"/ associated type *value* (which appears in an impl), splits","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210574,"byte_end":210636,"line_start":59,"line_end":59,"column_start":5,"column_end":67}},{"value":"/ them into the substitutions for the *impl* and those for the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210641,"byte_end":210705,"line_start":60,"line_end":60,"column_start":5,"column_end":69}},{"value":"/ *associated type*.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210710,"byte_end":210732,"line_start":61,"line_end":61,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210737,"byte_end":210740,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210745,"byte_end":210758,"line_start":63,"line_end":63,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210763,"byte_end":210766,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ ```ignore (example)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210771,"byte_end":210794,"line_start":65,"line_end":65,"column_start":5,"column_end":28}},{"value":"/ impl<T> Iterable for Vec<T> {","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210799,"byte_end":210832,"line_start":66,"line_end":66,"column_start":5,"column_end":38}},{"value":"/     type Iter<'a>;","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210837,"byte_end":210859,"line_start":67,"line_end":67,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210864,"byte_end":210869,"line_start":68,"line_end":68,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210874,"byte_end":210881,"line_start":69,"line_end":69,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210886,"byte_end":210889,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ in this example, the full set of parameters would be `['x,","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210894,"byte_end":210956,"line_start":71,"line_end":71,"column_start":5,"column_end":67}},{"value":"/ Y]`, where `'x` is the value for `'a` and `Y` is the value for","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":210961,"byte_end":211027,"line_start":72,"line_end":72,"column_start":5,"column_end":71}},{"value":"/ `T`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":211032,"byte_end":211040,"line_start":73,"line_end":73,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":211045,"byte_end":211048,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":211053,"byte_end":211066,"line_start":75,"line_end":75,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":211071,"byte_end":211074,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ Returns the pair of:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":211079,"byte_end":211103,"line_start":77,"line_end":77,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":211108,"byte_end":211111,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ * the parameters for the impl (`[Y]`, in our example)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":211116,"byte_end":211173,"line_start":79,"line_end":79,"column_start":5,"column_end":62}},{"value":"/ * the parameters for the associated type value (`['a]`, in our example)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":211178,"byte_end":211253,"line_start":80,"line_end":80,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212630,"byte_end":212685,"line_start":119,"line_end":119,"column_start":8,"column_end":63},"name":"impl_parameters_and_projection_from_associated_ty_value","qualname":"::split::Split::impl_parameters_and_projection_from_associated_ty_value","value":"pub fn impl_parameters_and_projection_from_associated_ty_value<'p>(&Self,\n                                                                   &'p [Parameter<TF>],\n                                                                   &AssociatedTyValue<TF>)\n-> (&'p [Parameter<TF>], ProjectionTy<TF>)","parent":{"krate":0,"index":986},"children":[],"decl_id":null,"docs":" Given the full set of parameters for an associated type *value*\n (which appears in an impl), returns the trait reference\n and projection that are being satisfied by that value.","sig":null,"attributes":[{"value":"/ Given the full set of parameters for an associated type *value*","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":211931,"byte_end":211998,"line_start":99,"line_end":99,"column_start":5,"column_end":72}},{"value":"/ (which appears in an impl), returns the trait reference","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212003,"byte_end":212062,"line_start":100,"line_end":100,"column_start":5,"column_end":64}},{"value":"/ and projection that are being satisfied by that value.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212067,"byte_end":212125,"line_start":101,"line_end":101,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212130,"byte_end":212133,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212138,"byte_end":212151,"line_start":103,"line_end":103,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212156,"byte_end":212159,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ ```ignore (example)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212164,"byte_end":212187,"line_start":105,"line_end":105,"column_start":5,"column_end":28}},{"value":"/ impl<T> Iterable for Vec<T> {","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212192,"byte_end":212225,"line_start":106,"line_end":106,"column_start":5,"column_end":38}},{"value":"/     type Iter<'a>;","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212230,"byte_end":212252,"line_start":107,"line_end":107,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212257,"byte_end":212262,"line_start":108,"line_end":108,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212267,"byte_end":212274,"line_start":109,"line_end":109,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212279,"byte_end":212282,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ Here we expect the full set of parameters for `Iter`, which","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212287,"byte_end":212350,"line_start":111,"line_end":111,"column_start":5,"column_end":68}},{"value":"/ would be `['x, Y]`, where `'x` is the value for `'a` and `Y`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212355,"byte_end":212419,"line_start":112,"line_end":112,"column_start":5,"column_end":69}},{"value":"/ is the value for `T`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212424,"byte_end":212449,"line_start":113,"line_end":113,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212454,"byte_end":212457,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ Returns the pair of:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212462,"byte_end":212486,"line_start":115,"line_end":115,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212491,"byte_end":212494,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ * the parameters that apply to the impl (`Y`, in our example)","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212499,"byte_end":212564,"line_start":117,"line_end":117,"column_start":5,"column_end":70}},{"value":"/ * the projection `<Vec<Y> as Iterable>::Iter<'x>`","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":212569,"byte_end":212622,"line_start":118,"line_end":118,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":1003},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wf","qualname":"::wf","value":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","parent":null,"children":[{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1342},{"krate":0,"index":1349},{"krate":0,"index":1016},{"krate":0,"index":1018},{"krate":0,"index":1019},{"krate":0,"index":1024},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1032},{"krate":0,"index":1035},{"krate":0,"index":1038},{"krate":0,"index":1041},{"krate":0,"index":1044},{"krate":0,"index":1047}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1343},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":214638,"byte_end":214655,"line_start":15,"line_end":15,"column_start":5,"column_end":22},"name":"IllFormedTypeDecl","qualname":"::wf::WfError::IllFormedTypeDecl","value":"WfError::IllFormedTypeDecl(chalk_ir::Identifier)","parent":{"krate":0,"index":1342},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1346},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":214683,"byte_end":214701,"line_start":16,"line_end":16,"column_start":5,"column_end":23},"name":"IllFormedTraitImpl","qualname":"::wf::WfError::IllFormedTraitImpl","value":"WfError::IllFormedTraitImpl(chalk_ir::Identifier)","parent":{"krate":0,"index":1342},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1342},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":214624,"byte_end":214631,"line_start":14,"line_end":14,"column_start":10,"column_end":17},"name":"WfError","qualname":"::wf::WfError","value":"pub enum WfError {\n    IllFormedTypeDecl(chalk_ir::Identifier),\n    IllFormedTraitImpl(chalk_ir::Identifier),\n}","parent":null,"children":[{"krate":0,"index":1343},{"krate":0,"index":1346}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1019},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":215294,"byte_end":215302,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"WfSolver","qualname":"::wf::WfSolver","value":"WfSolver {  }","parent":null,"children":[{"krate":0,"index":1022},{"krate":0,"index":1023}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":218244,"byte_end":218247,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"new","qualname":"<WfSolver>::new","value":"pub fn new(&'db RustIrDatabase<TF>, SolverChoice) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `WfSolver`.\n","sig":null,"attributes":[{"value":"/ Constructs a new `WfSolver`.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":218200,"byte_end":218232,"line_start":131,"line_end":131,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":218373,"byte_end":218391,"line_start":136,"line_end":136,"column_start":12,"column_end":30},"name":"verify_struct_decl","qualname":"<WfSolver>::verify_struct_decl","value":"pub fn verify_struct_decl(&Self, StructId) -> Result<(), WfError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":220144,"byte_end":220161,"line_start":192,"line_end":192,"column_start":12,"column_end":29},"name":"verify_trait_impl","qualname":"<WfSolver>::verify_trait_impl","value":"pub fn verify_trait_impl(&Self, ImplId) -> Result<(), WfError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1069},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":287,"byte_end":301,"line_start":19,"line_end":19,"column_start":11,"column_end":25},"name":"RustIrDatabase","qualname":"::RustIrDatabase","value":"RustIrDatabase<TF: TypeFamily>: Debug","parent":null,"children":[{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1071},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":464,"byte_end":478,"line_start":22,"line_end":22,"column_start":8,"column_end":22},"name":"custom_clauses","qualname":"::RustIrDatabase::custom_clauses","value":"pub fn custom_clauses(&Self) -> Vec<ProgramClause<TF>>","parent":{"krate":0,"index":1069},"children":[],"decl_id":null,"docs":" Returns any \"custom program clauses\" that do not derive from\n Rust IR. Used only in testing the underlying solver.\n","sig":null,"attributes":[{"value":"/ Returns any \"custom program clauses\" that do not derive from","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":331,"byte_end":395,"line_start":20,"line_end":20,"column_start":5,"column_end":69}},{"value":"/ Rust IR. Used only in testing the underlying solver.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":400,"byte_end":456,"line_start":21,"line_end":21,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":590,"byte_end":608,"line_start":25,"line_end":25,"column_start":8,"column_end":26},"name":"associated_ty_data","qualname":"::RustIrDatabase::associated_ty_data","value":"pub fn associated_ty_data(&Self, TypeId) -> Arc<AssociatedTyDatum<TF>>","parent":{"krate":0,"index":1069},"children":[],"decl_id":null,"docs":" Returns the datum for the associated type with the given id.\n","sig":null,"attributes":[{"value":"/ Returns the datum for the associated type with the given id.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":518,"byte_end":582,"line_start":24,"line_end":24,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1073},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":725,"byte_end":736,"line_start":28,"line_end":28,"column_start":8,"column_end":19},"name":"trait_datum","qualname":"::RustIrDatabase::trait_datum","value":"pub fn trait_datum(&Self, TraitId) -> Arc<TraitDatum<TF>>","parent":{"krate":0,"index":1069},"children":[],"decl_id":null,"docs":" Returns the datum for the impl with the given id.\n","sig":null,"attributes":[{"value":"/ Returns the datum for the impl with the given id.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":664,"byte_end":717,"line_start":27,"line_end":27,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":853,"byte_end":865,"line_start":31,"line_end":31,"column_start":8,"column_end":20},"name":"struct_datum","qualname":"::RustIrDatabase::struct_datum","value":"pub fn struct_datum(&Self, StructId) -> Arc<StructDatum<TF>>","parent":{"krate":0,"index":1069},"children":[],"decl_id":null,"docs":" Returns the datum for the impl with the given id.\n","sig":null,"attributes":[{"value":"/ Returns the datum for the impl with the given id.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":792,"byte_end":845,"line_start":30,"line_end":30,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1075},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":985,"byte_end":995,"line_start":34,"line_end":34,"column_start":8,"column_end":18},"name":"impl_datum","qualname":"::RustIrDatabase::impl_datum","value":"pub fn impl_datum(&Self, ImplId) -> Arc<ImplDatum<TF>>","parent":{"krate":0,"index":1069},"children":[],"decl_id":null,"docs":" Returns the datum for the impl with the given id.\n","sig":null,"attributes":[{"value":"/ Returns the datum for the impl with the given id.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":924,"byte_end":977,"line_start":33,"line_end":33,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":1110,"byte_end":1129,"line_start":37,"line_end":37,"column_start":8,"column_end":27},"name":"associated_ty_value","qualname":"::RustIrDatabase::associated_ty_value","value":"pub fn associated_ty_value(&Self, AssociatedTyValueId)\n-> Arc<AssociatedTyValue<TF>>","parent":{"krate":0,"index":1069},"children":[],"decl_id":null,"docs":" Returns the `AssociatedTyValue` with the given id.\n","sig":null,"attributes":[{"value":"/ Returns the `AssociatedTyValue` with the given id.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":1048,"byte_end":1102,"line_start":36,"line_end":36,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":1739,"byte_end":1754,"line_start":48,"line_end":48,"column_start":8,"column_end":23},"name":"impls_for_trait","qualname":"::RustIrDatabase::impls_for_trait","value":"pub fn impls_for_trait(&Self, TraitId, &[Parameter<TF>]) -> Vec<ImplId>","parent":{"krate":0,"index":1069},"children":[],"decl_id":null,"docs":" Returns a list of potentially relevant impls for a given\n trait-id; we also supply the type parameters that we are\n trying to match (if known: these parameters may contain\n inference variables, for example). The implementor is\n permitted to return any superset of the applicable impls;\n chalk will narrow down the list to only those that truly\n apply. The parameters are provided as a \"hint\" to help the\n implementor do less work, but can be completely ignored if\n desired.\n","sig":null,"attributes":[{"value":"/ Returns a list of potentially relevant impls for a given","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":1198,"byte_end":1258,"line_start":39,"line_end":39,"column_start":5,"column_end":65}},{"value":"/ trait-id; we also supply the type parameters that we are","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":1263,"byte_end":1323,"line_start":40,"line_end":40,"column_start":5,"column_end":65}},{"value":"/ trying to match (if known: these parameters may contain","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":1328,"byte_end":1387,"line_start":41,"line_end":41,"column_start":5,"column_end":64}},{"value":"/ inference variables, for example). The implementor is","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":1392,"byte_end":1449,"line_start":42,"line_end":42,"column_start":5,"column_end":62}},{"value":"/ permitted to return any superset of the applicable impls;","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":1454,"byte_end":1515,"line_start":43,"line_end":43,"column_start":5,"column_end":66}},{"value":"/ chalk will narrow down the list to only those that truly","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":1520,"byte_end":1580,"line_start":44,"line_end":44,"column_start":5,"column_end":65}},{"value":"/ apply. The parameters are provided as a \"hint\" to help the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":1585,"byte_end":1647,"line_start":45,"line_end":45,"column_start":5,"column_end":67}},{"value":"/ implementor do less work, but can be completely ignored if","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":1652,"byte_end":1714,"line_start":46,"line_end":46,"column_start":5,"column_end":67}},{"value":"/ desired.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":1719,"byte_end":1731,"line_start":47,"line_end":47,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":2160,"byte_end":2190,"line_start":56,"line_end":56,"column_start":8,"column_end":38},"name":"local_impls_to_coherence_check","qualname":"::RustIrDatabase::local_impls_to_coherence_check","value":"pub fn local_impls_to_coherence_check(&Self, TraitId) -> Vec<ImplId>","parent":{"krate":0,"index":1069},"children":[],"decl_id":null,"docs":" Returns the impls that require coherence checking. This is not the\n full set of impls that exist:","sig":null,"attributes":[{"value":"/ Returns the impls that require coherence checking. This is not the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":1832,"byte_end":1902,"line_start":50,"line_end":50,"column_start":5,"column_end":75}},{"value":"/ full set of impls that exist:","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":1907,"byte_end":1940,"line_start":51,"line_end":51,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":1945,"byte_end":1948,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ - It can exclude impls not defined in the current crate.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":1953,"byte_end":2013,"line_start":53,"line_end":53,"column_start":5,"column_end":65}},{"value":"/ - It can exclude \"built-in\" impls, like those for closures; only the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":2018,"byte_end":2090,"line_start":54,"line_end":54,"column_start":5,"column_end":77}},{"value":"/   impls actually written by users need to be checked.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":2095,"byte_end":2152,"line_start":55,"line_end":55,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":2603,"byte_end":2620,"line_start":64,"line_end":64,"column_start":8,"column_end":25},"name":"impl_provided_for","qualname":"::RustIrDatabase::impl_provided_for","value":"pub fn impl_provided_for(&Self, TraitId, StructId) -> bool","parent":{"krate":0,"index":1069},"children":[],"decl_id":null,"docs":" Returns true if there is an explicit impl of the auto trait\n `auto_trait_id` for the struct `struct_id`. This is part of\n the auto trait handling -- if there is no explicit impl given\n by the user for the struct, then we provide default impls\n based on the field types (otherwise, we rely on the impls the\n user gave).\n","sig":null,"attributes":[{"value":"/ Returns true if there is an explicit impl of the auto trait","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":2238,"byte_end":2301,"line_start":58,"line_end":58,"column_start":5,"column_end":68}},{"value":"/ `auto_trait_id` for the struct `struct_id`. This is part of","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":2306,"byte_end":2369,"line_start":59,"line_end":59,"column_start":5,"column_end":68}},{"value":"/ the auto trait handling -- if there is no explicit impl given","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":2374,"byte_end":2439,"line_start":60,"line_end":60,"column_start":5,"column_end":70}},{"value":"/ by the user for the struct, then we provide default impls","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":2444,"byte_end":2505,"line_start":61,"line_end":61,"column_start":5,"column_end":66}},{"value":"/ based on the field types (otherwise, we rely on the impls the","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":2510,"byte_end":2575,"line_start":62,"line_end":62,"column_start":5,"column_end":70}},{"value":"/ user gave).","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":2580,"byte_end":2595,"line_start":63,"line_end":63,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":2747,"byte_end":2756,"line_start":67,"line_end":67,"column_start":8,"column_end":17},"name":"type_name","qualname":"::RustIrDatabase::type_name","value":"pub fn type_name(&Self, TypeKindId) -> Identifier","parent":{"krate":0,"index":1069},"children":[],"decl_id":null,"docs":" Returns the name for the type with the given id.\n","sig":null,"attributes":[{"value":"/ Returns the name for the type with the given id.","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":2687,"byte_end":2739,"line_start":66,"line_end":66,"column_start":5,"column_end":57}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":18319,"byte_end":18332,"line_start":20,"line_end":20,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/env_elaborator.rs","byte_start":23161,"byte_end":23174,"line_start":39,"line_end":39,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/program_clauses.rs","byte_start":26437,"byte_end":26446,"line_start":16,"line_end":16,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/program_clauses.rs","byte_start":27347,"byte_end":27364,"line_start":40,"line_end":40,"column_start":47,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/program_clauses.rs","byte_start":30273,"byte_end":30284,"line_start":120,"line_end":120,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/program_clauses.rs","byte_start":36165,"byte_end":36175,"line_start":273,"line_end":273,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/program_clauses.rs","byte_start":45249,"byte_end":45266,"line_start":499,"line_end":499,"column_start":47,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence/solve.rs","byte_start":58138,"byte_end":58153,"line_start":11,"line_end":11,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":52556,"byte_end":52570,"line_start":26,"line_end":26,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":52984,"byte_end":52998,"line_start":39,"line_end":39,"column_start":28,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":53272,"byte_end":53296,"line_start":48,"line_end":48,"column_start":6,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":54119,"byte_end":54134,"line_start":68,"line_end":68,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coinductive_goal.rs","byte_start":67166,"byte_end":67170,"line_start":17,"line_end":17,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coinductive_goal.rs","byte_start":67911,"byte_end":67921,"line_start":34,"line_end":34,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/ext.rs","byte_start":68501,"byte_end":68510,"line_start":15,"line_end":15,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/ext.rs","byte_start":70360,"byte_end":70364,"line_start":58,"line_end":58,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/canonicalize.rs","byte_start":80938,"byte_end":80952,"line_start":12,"line_end":12,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/canonicalize.rs","byte_start":82994,"byte_end":83007,"line_start":76,"line_end":76,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/canonicalize.rs","byte_start":83726,"byte_end":83739,"line_start":101,"line_end":101,"column_start":44,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/canonicalize.rs","byte_start":83799,"byte_end":83812,"line_start":103,"line_end":103,"column_start":48,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/canonicalize.rs","byte_start":84385,"byte_end":84398,"line_start":123,"line_end":123,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/canonicalize.rs","byte_start":84502,"byte_end":84515,"line_start":129,"line_end":129,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/instantiate.rs","byte_start":86429,"byte_end":86443,"line_start":6,"line_end":6,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":349},{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/invert.rs","byte_start":91230,"byte_end":91244,"line_start":14,"line_end":14,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/invert.rs","byte_start":95557,"byte_end":95565,"line_start":108,"line_end":108,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/invert.rs","byte_start":95820,"byte_end":95828,"line_start":118,"line_end":118,"column_start":44,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/invert.rs","byte_start":95888,"byte_end":95896,"line_start":120,"line_end":120,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":414},{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/invert.rs","byte_start":96725,"byte_end":96733,"line_start":150,"line_end":150,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/invert.rs","byte_start":96840,"byte_end":96848,"line_start":156,"line_end":156,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/normalize_deep.rs","byte_start":97207,"byte_end":97221,"line_start":11,"line_end":11,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/normalize_deep.rs","byte_start":98103,"byte_end":98117,"line_start":34,"line_end":34,"column_start":44,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/normalize_deep.rs","byte_start":98180,"byte_end":98194,"line_start":36,"line_end":36,"column_start":51,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/normalize_deep.rs","byte_start":98252,"byte_end":98266,"line_start":38,"line_end":38,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":452},{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/normalize_deep.rs","byte_start":99020,"byte_end":99034,"line_start":60,"line_end":60,"column_start":47,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":107900,"byte_end":107914,"line_start":10,"line_end":10,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":470}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":110164,"byte_end":110175,"line_start":82,"line_end":82,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":116712,"byte_end":116722,"line_start":234,"line_end":234,"column_start":28,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":116778,"byte_end":116788,"line_start":236,"line_end":236,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":117293,"byte_end":117303,"line_start":256,"line_end":256,"column_start":31,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":117344,"byte_end":117354,"line_start":258,"line_end":258,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":117500,"byte_end":117515,"line_start":268,"line_end":268,"column_start":28,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":117556,"byte_end":117571,"line_start":270,"line_end":270,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":117673,"byte_end":117688,"line_start":276,"line_end":276,"column_start":48,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":502},{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":118429,"byte_end":118444,"line_start":304,"line_end":304,"column_start":31,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":118546,"byte_end":118563,"line_start":310,"line_end":310,"column_start":28,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":118619,"byte_end":118636,"line_start":312,"line_end":312,"column_start":48,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":119381,"byte_end":119398,"line_start":340,"line_end":340,"column_start":31,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":119439,"byte_end":119456,"line_start":342,"line_end":342,"column_start":33,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/unify.rs","byte_start":119876,"byte_end":119890,"line_start":13,"line_end":13,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/unify.rs","byte_start":120982,"byte_end":120989,"line_start":56,"line_end":56,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/unify.rs","byte_start":133763,"byte_end":133770,"line_start":371,"line_end":371,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/unify.rs","byte_start":134877,"byte_end":134888,"line_start":405,"line_end":405,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/unify.rs","byte_start":135192,"byte_end":135203,"line_start":419,"line_end":419,"column_start":44,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/unify.rs","byte_start":135267,"byte_end":135278,"line_start":421,"line_end":421,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/unify.rs","byte_start":136892,"byte_end":136903,"line_start":465,"line_end":465,"column_start":46,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/unify.rs","byte_start":139777,"byte_end":139788,"line_start":540,"line_end":540,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/var.rs","byte_start":141879,"byte_end":141890,"line_start":44,"line_end":44,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/var.rs","byte_start":142062,"byte_end":142073,"line_start":53,"line_end":53,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/var.rs","byte_start":142710,"byte_end":142721,"line_start":69,"line_end":69,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/var.rs","byte_start":143387,"byte_end":143401,"line_start":94,"line_end":94,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/var.rs","byte_start":143536,"byte_end":143550,"line_start":100,"line_end":100,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/var.rs","byte_start":143695,"byte_end":143709,"line_start":106,"line_end":106,"column_start":37,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":629}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/var.rs","byte_start":144515,"byte_end":144526,"line_start":126,"line_end":126,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer.rs","byte_start":73643,"byte_end":73657,"line_start":32,"line_end":32,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer.rs","byte_start":80355,"byte_end":80375,"line_start":205,"line_end":205,"column_start":54,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg/aggregate.rs","byte_start":170712,"byte_end":170725,"line_start":17,"line_end":17,"column_start":64,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg/aggregate.rs","byte_start":176111,"byte_end":176122,"line_start":168,"line_end":168,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":739},{"krate":0,"index":742},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg/resolvent.rs","byte_start":184840,"byte_end":184864,"line_start":49,"line_end":49,"column_start":64,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":770},{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg/resolvent.rs","byte_start":193952,"byte_end":193969,"line_start":255,"line_end":255,"column_start":22,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg/resolvent.rs","byte_start":196262,"byte_end":196279,"line_start":324,"line_end":324,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","byte_start":153378,"byte_end":153388,"line_start":33,"line_end":33,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","byte_start":154042,"byte_end":154052,"line_start":60,"line_end":60,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","byte_start":156576,"byte_end":156589,"line_start":136,"line_end":136,"column_start":67,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":841},{"krate":0,"index":844},{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","byte_start":159983,"byte_end":160007,"line_start":232,"line_end":232,"column_start":22,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","byte_start":160183,"byte_end":160207,"line_start":238,"line_end":238,"column_start":63,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":853},{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","byte_start":160924,"byte_end":160948,"line_start":263,"line_end":263,"column_start":66,"column_end":90},"value":"","parent":null,"children":[{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","byte_start":162559,"byte_end":162583,"line_start":303,"line_end":303,"column_start":66,"column_end":90},"value":"","parent":null,"children":[{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","byte_start":164940,"byte_end":164952,"line_start":377,"line_end":377,"column_start":46,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","byte_start":165324,"byte_end":165337,"line_start":389,"line_end":389,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/truncate.rs","byte_start":202022,"byte_end":202031,"line_start":57,"line_end":57,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":929},{"krate":0,"index":930}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/truncate.rs","byte_start":202536,"byte_end":202545,"line_start":75,"line_end":75,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":933},{"krate":0,"index":934}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/truncate.rs","byte_start":204006,"byte_end":204015,"line_start":116,"line_end":116,"column_start":47,"column_end":56},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/truncate.rs","byte_start":204076,"byte_end":204085,"line_start":118,"line_end":118,"column_start":49,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/truncate.rs","byte_start":204148,"byte_end":204157,"line_start":120,"line_end":120,"column_start":51,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":146297,"byte_end":146305,"line_start":44,"line_end":44,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":943}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":146495,"byte_end":146503,"line_start":53,"line_end":53,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":946}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":147274,"byte_end":147286,"line_start":74,"line_end":74,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":948},{"krate":0,"index":949}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":147690,"byte_end":147702,"line_start":90,"line_end":90,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":952}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148116,"byte_end":148122,"line_start":104,"line_end":104,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":150651,"byte_end":150657,"line_start":169,"line_end":169,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":150984,"byte_end":150994,"line_start":181,"line_end":181,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":970},{"krate":0,"index":971}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":151142,"byte_end":151152,"line_start":189,"line_end":189,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":974}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":151262,"byte_end":151272,"line_start":195,"line_end":195,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":977},{"krate":0,"index":979}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":214333,"byte_end":214335,"line_start":163,"line_end":163,"column_start":69,"column_end":71},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":214750,"byte_end":214757,"line_start":19,"line_end":19,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1017}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":215271,"byte_end":215278,"line_start":36,"line_end":36,"column_start":28,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":215623,"byte_end":215626,"line_start":48,"line_end":48,"column_start":44,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":215811,"byte_end":215820,"line_start":56,"line_end":56,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1031}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":216020,"byte_end":216022,"line_start":64,"line_end":64,"column_start":41,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1034}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":217309,"byte_end":217317,"line_start":97,"line_end":97,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1037}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":217468,"byte_end":217480,"line_start":103,"line_end":103,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1040}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":217729,"byte_end":217740,"line_start":112,"line_end":112,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":218013,"byte_end":218020,"line_start":121,"line_end":121,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":218150,"byte_end":218158,"line_start":127,"line_end":127,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1056},{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":164,"byte_end":171,"line_start":10,"line_end":10,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":9}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3260,"byte_end":3267,"line_start":12,"line_end":12,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":20}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses.rs","byte_start":3297,"byte_end":3312,"line_start":14,"line_end":14,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":88}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":181,"byte_end":190,"line_start":11,"line_end":11,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":164}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":52253,"byte_end":52259,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":177}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":222,"byte_end":225,"line_start":13,"line_end":13,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":250}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":257,"byte_end":262,"line_start":16,"line_end":16,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":980}},{"kind":"Mod","span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":272,"byte_end":274,"line_start":17,"line_end":17,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":1003}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/builder.rs","byte_start":18319,"byte_end":18332,"line_start":20,"line_end":20,"column_start":27,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/env_elaborator.rs","byte_start":23161,"byte_end":23174,"line_start":39,"line_end":39,"column_start":27,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":74},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/program_clauses.rs","byte_start":26437,"byte_end":26446,"line_start":16,"line_end":16,"column_start":47,"column_end":56},"kind":{"Impl":{"id":2}},"from":{"krate":27,"index":129},"to":{"krate":0,"index":98}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/program_clauses.rs","byte_start":27347,"byte_end":27364,"line_start":40,"line_end":40,"column_start":47,"column_end":64},"kind":{"Impl":{"id":3}},"from":{"krate":27,"index":548},"to":{"krate":0,"index":98}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/program_clauses.rs","byte_start":30273,"byte_end":30284,"line_start":120,"line_end":120,"column_start":47,"column_end":58},"kind":{"Impl":{"id":4}},"from":{"krate":27,"index":249},"to":{"krate":0,"index":98}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/program_clauses.rs","byte_start":36165,"byte_end":36175,"line_start":273,"line_end":273,"column_start":47,"column_end":57},"kind":{"Impl":{"id":5}},"from":{"krate":27,"index":317},"to":{"krate":0,"index":98}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/clauses/program_clauses.rs","byte_start":45249,"byte_end":45266,"line_start":499,"line_end":499,"column_start":47,"column_end":64},"kind":{"Impl":{"id":6}},"from":{"krate":27,"index":488},"to":{"krate":0,"index":98}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence/solve.rs","byte_start":58138,"byte_end":58153,"line_start":11,"line_end":11,"column_start":22,"column_end":37},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":217},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":52556,"byte_end":52570,"line_start":26,"line_end":26,"column_start":23,"column_end":37},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":52984,"byte_end":52998,"line_start":39,"line_end":39,"column_start":28,"column_end":42},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1086},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":53272,"byte_end":53296,"line_start":48,"line_end":48,"column_start":6,"column_end":30},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1095},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coherence.rs","byte_start":54119,"byte_end":54134,"line_start":68,"line_end":68,"column_start":15,"column_end":30},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":217},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coinductive_goal.rs","byte_start":67166,"byte_end":67170,"line_start":17,"line_end":17,"column_start":44,"column_end":48},"kind":{"Impl":{"id":12}},"from":{"krate":18,"index":2573},"to":{"krate":0,"index":241}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/coinductive_goal.rs","byte_start":67911,"byte_end":67921,"line_start":34,"line_end":34,"column_start":44,"column_end":54},"kind":{"Impl":{"id":13}},"from":{"krate":18,"index":2534},"to":{"krate":0,"index":241}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/ext.rs","byte_start":68501,"byte_end":68510,"line_start":15,"line_end":15,"column_start":37,"column_end":46},"kind":{"Impl":{"id":14}},"from":{"krate":18,"index":2495},"to":{"krate":0,"index":257}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/ext.rs","byte_start":70360,"byte_end":70364,"line_start":58,"line_end":58,"column_start":38,"column_end":42},"kind":{"Impl":{"id":15}},"from":{"krate":18,"index":2573},"to":{"krate":0,"index":269}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/canonicalize.rs","byte_start":80938,"byte_end":80952,"line_start":12,"line_end":12,"column_start":22,"column_end":36},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/canonicalize.rs","byte_start":82994,"byte_end":83007,"line_start":76,"line_end":76,"column_start":26,"column_end":39},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/canonicalize.rs","byte_start":83726,"byte_end":83739,"line_start":101,"line_end":101,"column_start":44,"column_end":57},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":305},"to":{"krate":18,"index":217}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/canonicalize.rs","byte_start":83799,"byte_end":83812,"line_start":103,"line_end":103,"column_start":48,"column_end":61},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":305},"to":{"krate":18,"index":235}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/canonicalize.rs","byte_start":84385,"byte_end":84398,"line_start":123,"line_end":123,"column_start":47,"column_end":60},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":305},"to":{"krate":18,"index":228}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/canonicalize.rs","byte_start":84502,"byte_end":84515,"line_start":129,"line_end":129,"column_start":46,"column_end":59},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":305},"to":{"krate":18,"index":246}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/instantiate.rs","byte_start":86429,"byte_end":86443,"line_start":6,"line_end":6,"column_start":22,"column_end":36},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/invert.rs","byte_start":91230,"byte_end":91244,"line_start":14,"line_end":14,"column_start":22,"column_end":36},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/invert.rs","byte_start":95557,"byte_end":95565,"line_start":108,"line_end":108,"column_start":26,"column_end":34},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":400},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/invert.rs","byte_start":95820,"byte_end":95828,"line_start":118,"line_end":118,"column_start":44,"column_end":52},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":400},"to":{"krate":18,"index":217}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/invert.rs","byte_start":95888,"byte_end":95896,"line_start":120,"line_end":120,"column_start":48,"column_end":56},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":400},"to":{"krate":18,"index":235}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/invert.rs","byte_start":96725,"byte_end":96733,"line_start":150,"line_end":150,"column_start":47,"column_end":55},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":400},"to":{"krate":18,"index":228}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/invert.rs","byte_start":96840,"byte_end":96848,"line_start":156,"line_end":156,"column_start":49,"column_end":57},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":400},"to":{"krate":18,"index":250}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/normalize_deep.rs","byte_start":97207,"byte_end":97221,"line_start":11,"line_end":11,"column_start":22,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/normalize_deep.rs","byte_start":98103,"byte_end":98117,"line_start":34,"line_end":34,"column_start":44,"column_end":58},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":442},"to":{"krate":18,"index":217}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/normalize_deep.rs","byte_start":98180,"byte_end":98194,"line_start":36,"line_end":36,"column_start":51,"column_end":65},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":442},"to":{"krate":18,"index":239}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/normalize_deep.rs","byte_start":98252,"byte_end":98266,"line_start":38,"line_end":38,"column_start":46,"column_end":60},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":442},"to":{"krate":18,"index":246}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/normalize_deep.rs","byte_start":99020,"byte_end":99034,"line_start":60,"line_end":60,"column_start":47,"column_end":61},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":442},"to":{"krate":18,"index":228}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":107900,"byte_end":107914,"line_start":10,"line_end":10,"column_start":22,"column_end":36},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":110164,"byte_end":110175,"line_start":82,"line_end":82,"column_start":6,"column_end":17},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1150},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":116712,"byte_end":116722,"line_start":234,"line_end":234,"column_start":28,"column_end":38},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":483},"to":{"krate":18,"index":217}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":116778,"byte_end":116788,"line_start":236,"line_end":236,"column_start":48,"column_end":58},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":483},"to":{"krate":18,"index":235}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":117293,"byte_end":117303,"line_start":256,"line_end":256,"column_start":31,"column_end":41},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":483},"to":{"krate":18,"index":228}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":117344,"byte_end":117354,"line_start":258,"line_end":258,"column_start":33,"column_end":43},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":483},"to":{"krate":18,"index":250}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":117500,"byte_end":117515,"line_start":268,"line_end":268,"column_start":28,"column_end":43},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":494},"to":{"krate":18,"index":217}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":117556,"byte_end":117571,"line_start":270,"line_end":270,"column_start":33,"column_end":48},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":494},"to":{"krate":18,"index":250}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":117673,"byte_end":117688,"line_start":276,"line_end":276,"column_start":48,"column_end":63},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":494},"to":{"krate":18,"index":235}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":118429,"byte_end":118444,"line_start":304,"line_end":304,"column_start":31,"column_end":46},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":494},"to":{"krate":18,"index":228}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":118546,"byte_end":118563,"line_start":310,"line_end":310,"column_start":28,"column_end":45},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":505},"to":{"krate":18,"index":217}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":118619,"byte_end":118636,"line_start":312,"line_end":312,"column_start":48,"column_end":65},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":505},"to":{"krate":18,"index":235}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":119381,"byte_end":119398,"line_start":340,"line_end":340,"column_start":31,"column_end":48},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":505},"to":{"krate":18,"index":228}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/ucanonicalize.rs","byte_start":119439,"byte_end":119456,"line_start":342,"line_end":342,"column_start":33,"column_end":50},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":505},"to":{"krate":18,"index":250}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/unify.rs","byte_start":119876,"byte_end":119890,"line_start":13,"line_end":13,"column_start":22,"column_end":36},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/unify.rs","byte_start":120982,"byte_end":120989,"line_start":56,"line_end":56,"column_start":26,"column_end":33},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":537},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/unify.rs","byte_start":133763,"byte_end":133770,"line_start":371,"line_end":371,"column_start":37,"column_end":44},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":537},"to":{"krate":18,"index":37}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/unify.rs","byte_start":134877,"byte_end":134888,"line_start":405,"line_end":405,"column_start":30,"column_end":41},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/unify.rs","byte_start":135192,"byte_end":135203,"line_start":419,"line_end":419,"column_start":44,"column_end":55},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":571},"to":{"krate":18,"index":217}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/unify.rs","byte_start":135267,"byte_end":135278,"line_start":421,"line_end":421,"column_start":48,"column_end":59},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":571},"to":{"krate":18,"index":235}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/unify.rs","byte_start":136892,"byte_end":136903,"line_start":465,"line_end":465,"column_start":46,"column_end":57},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":571},"to":{"krate":18,"index":246}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/unify.rs","byte_start":139777,"byte_end":139788,"line_start":540,"line_end":540,"column_start":47,"column_end":58},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":571},"to":{"krate":18,"index":228}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/var.rs","byte_start":141879,"byte_end":141890,"line_start":44,"line_end":44,"column_start":45,"column_end":56},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1163},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/var.rs","byte_start":142062,"byte_end":142073,"line_start":53,"line_end":53,"column_start":22,"column_end":33},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1163},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/var.rs","byte_start":142710,"byte_end":142721,"line_start":69,"line_end":69,"column_start":35,"column_end":46},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1163},"to":{"krate":33,"index":141}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/var.rs","byte_start":143387,"byte_end":143401,"line_start":94,"line_end":94,"column_start":39,"column_end":53},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1201},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/var.rs","byte_start":143536,"byte_end":143550,"line_start":100,"line_end":100,"column_start":45,"column_end":59},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1201},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/var.rs","byte_start":143695,"byte_end":143709,"line_start":106,"line_end":106,"column_start":37,"column_end":51},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1201},"to":{"krate":33,"index":147}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer/var.rs","byte_start":144515,"byte_end":144526,"line_start":126,"line_end":126,"column_start":37,"column_end":48},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1163},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer.rs","byte_start":73643,"byte_end":73657,"line_start":32,"line_end":32,"column_start":22,"column_end":36},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/infer.rs","byte_start":80355,"byte_end":80375,"line_start":205,"line_end":205,"column_start":54,"column_end":74},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":639},"to":{"krate":0,"index":658}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg/aggregate.rs","byte_start":170712,"byte_end":170725,"line_start":17,"line_end":17,"column_start":64,"column_end":77},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1247},"to":{"krate":19,"index":66}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg/aggregate.rs","byte_start":176111,"byte_end":176122,"line_start":168,"line_end":168,"column_start":22,"column_end":33},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":728},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg/resolvent.rs","byte_start":184840,"byte_end":184864,"line_start":49,"line_end":49,"column_start":64,"column_end":88},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":800},"to":{"krate":19,"index":93}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg/resolvent.rs","byte_start":193952,"byte_end":193969,"line_start":255,"line_end":255,"column_start":22,"column_end":39},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":773},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg/resolvent.rs","byte_start":196262,"byte_end":196279,"line_start":324,"line_end":324,"column_start":37,"column_end":54},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":773},"to":{"krate":18,"index":37}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","byte_start":153378,"byte_end":153388,"line_start":33,"line_end":33,"column_start":22,"column_end":32},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","byte_start":154042,"byte_end":154052,"line_start":60,"line_end":60,"column_start":43,"column_end":53},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1234},"to":{"krate":19,"index":25}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","byte_start":156576,"byte_end":156589,"line_start":136,"line_end":136,"column_start":67,"column_end":80},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1247},"to":{"krate":19,"index":54}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","byte_start":159983,"byte_end":160007,"line_start":232,"line_end":232,"column_start":22,"column_end":46},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":800},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","byte_start":160183,"byte_end":160207,"line_start":238,"line_end":238,"column_start":63,"column_end":87},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":800},"to":{"krate":19,"index":89}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","byte_start":160924,"byte_end":160948,"line_start":263,"line_end":263,"column_start":66,"column_end":90},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":800},"to":{"krate":19,"index":70}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","byte_start":162559,"byte_end":162583,"line_start":303,"line_end":303,"column_start":66,"column_end":90},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":800},"to":{"krate":19,"index":78}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","byte_start":164940,"byte_end":164952,"line_start":377,"line_end":377,"column_start":46,"column_end":58},"kind":{"Impl":{"id":77}},"from":{"krate":18,"index":2713},"to":{"krate":0,"index":874}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/slg.rs","byte_start":165324,"byte_end":165337,"line_start":389,"line_end":389,"column_start":6,"column_end":19},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":881},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/truncate.rs","byte_start":202022,"byte_end":202031,"line_start":57,"line_end":57,"column_start":30,"column_end":39},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":919},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/truncate.rs","byte_start":202536,"byte_end":202545,"line_start":75,"line_end":75,"column_start":41,"column_end":50},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":919},"to":{"krate":18,"index":208}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/truncate.rs","byte_start":204006,"byte_end":204015,"line_start":116,"line_end":116,"column_start":47,"column_end":56},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":919},"to":{"krate":18,"index":228}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/truncate.rs","byte_start":204076,"byte_end":204085,"line_start":118,"line_end":118,"column_start":49,"column_end":58},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":919},"to":{"krate":18,"index":250}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve/truncate.rs","byte_start":204148,"byte_end":204157,"line_start":120,"line_end":120,"column_start":51,"column_end":60},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":919},"to":{"krate":18,"index":239}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":146297,"byte_end":146305,"line_start":44,"line_end":44,"column_start":22,"column_end":30},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1260},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":146495,"byte_end":146503,"line_start":53,"line_end":53,"column_start":39,"column_end":47},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1260},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":147274,"byte_end":147286,"line_start":74,"line_end":74,"column_start":6,"column_end":18},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":147690,"byte_end":147702,"line_start":90,"line_end":90,"column_start":18,"column_end":30},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1312},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":148116,"byte_end":148122,"line_start":104,"line_end":104,"column_start":22,"column_end":28},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":953},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":150651,"byte_end":150657,"line_start":169,"line_end":169,"column_start":42,"column_end":48},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":953},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":150984,"byte_end":150994,"line_start":181,"line_end":181,"column_start":42,"column_end":52},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":965},"to":{"krate":2,"index":2242}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":151142,"byte_end":151152,"line_start":189,"line_end":189,"column_start":45,"column_end":55},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":965},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/solve.rs","byte_start":151262,"byte_end":151272,"line_start":195,"line_end":195,"column_start":22,"column_end":32},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":965},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":208539,"byte_end":208553,"line_start":9,"line_end":9,"column_start":34,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":1069},"to":{"krate":0,"index":986}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/split.rs","byte_start":214333,"byte_end":214335,"line_start":163,"line_end":163,"column_start":69,"column_end":71},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1001},"to":{"krate":0,"index":986}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":214750,"byte_end":214757,"line_start":19,"line_end":19,"column_start":23,"column_end":30},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1342},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":215271,"byte_end":215278,"line_start":36,"line_end":36,"column_start":28,"column_end":35},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1342},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":215496,"byte_end":215509,"line_start":44,"line_end":44,"column_start":23,"column_end":36},"kind":"SuperTrait","from":{"krate":18,"index":508},"to":{"krate":0,"index":1024}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":215623,"byte_end":215626,"line_start":48,"line_end":48,"column_start":44,"column_end":47},"kind":{"Impl":{"id":96}},"from":{"krate":5,"index":4754},"to":{"krate":0,"index":1024}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":215811,"byte_end":215820,"line_start":56,"line_end":56,"column_start":41,"column_end":50},"kind":{"Impl":{"id":97}},"from":{"krate":18,"index":1887},"to":{"krate":0,"index":1024}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":216020,"byte_end":216022,"line_start":64,"line_end":64,"column_start":41,"column_end":43},"kind":{"Impl":{"id":98}},"from":{"krate":18,"index":1537},"to":{"krate":0,"index":1024}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":217309,"byte_end":217317,"line_start":97,"line_end":97,"column_start":41,"column_end":49},"kind":{"Impl":{"id":99}},"from":{"krate":18,"index":1966},"to":{"krate":0,"index":1024}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":217468,"byte_end":217480,"line_start":103,"line_end":103,"column_start":41,"column_end":53},"kind":{"Impl":{"id":100}},"from":{"krate":18,"index":2333},"to":{"krate":0,"index":1024}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":217729,"byte_end":217740,"line_start":112,"line_end":112,"column_start":41,"column_end":52},"kind":{"Impl":{"id":101}},"from":{"krate":18,"index":2010},"to":{"krate":0,"index":1024}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":218013,"byte_end":218020,"line_start":121,"line_end":121,"column_start":44,"column_end":51},"kind":{"Impl":{"id":102}},"from":{"krate":18,"index":2374},"to":{"krate":0,"index":1024}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/wf.rs","byte_start":218150,"byte_end":218158,"line_start":127,"line_end":127,"column_start":15,"column_end":23},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1019},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/quangthinh/.cargo/git/checkouts/chalk-7b02fa8caa2cec94/a88cad7/chalk-solve/src/lib.rs","byte_start":319,"byte_end":324,"line_start":19,"line_end":19,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":6599},"to":{"krate":0,"index":1069}}]}